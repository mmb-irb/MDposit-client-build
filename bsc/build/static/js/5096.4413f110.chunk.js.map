{"version":3,"file":"static/js/5096.4413f110.chunk.js","mappings":"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","sources":["pages/accession/pockets/index.js","webpack://mdposit/./src/components/animated-card/style.module.css?d4d9","components/animated-card/index.js","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js","webpack://mdposit/./src/pages/accession/pockets/style.module.css?c9ab","../node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@mui/material/internal/svg-icons/CheckBox.js","../node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@mui/material/Checkbox/checkboxClasses.js","../node_modules/@mui/material/Checkbox/Checkbox.js","hooks/use-colors/index.js"],"sourcesContent":["import React, {\n  lazy,\n  useContext,\n  useState,\n  useRef,\n  useMemo,\n  useEffect,\n} from 'react';\n// A hook to track whenever some element is on screen\nimport { useInView } from 'react-intersection-observer';\n\nimport {\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  FormControlLabel,\n  Checkbox,\n  Typography,\n} from '@mui/material';\n\nimport Card from '../../../components/animated-card';\nimport ViewerWithControls from '../../../components/viewer-with-controls';\nimport useDefaultRepresentations from '../../../components/ngl-viewer/use-default-representations';\n\nimport style from './style.module.css';\n\nimport { ProjectCtx, PdbCtx } from '../../../contexts';\n\nimport Loading from '../../../components/loading';\n\nimport useAPI from '../../../hooks/use-api';\n\nimport useColors from '../../../hooks/use-colors';\n\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\n\nconst Graph = lazy(() =>\n  import(/* webpackChunkName: 'graph' */ '../../../components/graph'),\n);\n\n// Define permanent options for the \"useInView\"\nconst useInViewOptions = { triggerOnce: true, rootMargin: '100px' };\n\n// Set references to find representations between different renders\nconst POCKET_REFERENCE = 'pocket';\nconst POCKET_SURFACE_REFERENCE = 'pocket surface';\n\n// Default value for the 'shaw all pockets' button\nconst showAllPocketsDefault = false;\n\n// Set a function to calculate the average value from a values array\nconst roundedAvg = values => {\n  const sum = values.reduce((pv, cv) => pv + cv, 0);\n  const length = values.length;\n  const average = sum / length;\n  const rounded = Math.round(average * 10) / 10;\n  return rounded;\n};\n\nconst Pockets = () => {\n  // Track if the NGL viewer\n  // The status isNglVisible is returned true/false when the element is in/out the screen respectively\n  const [nglRef, isNglVisible] = useInView(useInViewOptions);\n\n  // Get the current project metadata\n  const { accessionAndMdNumber, metadata } = useContext(ProjectCtx);\n  // Get the current topology, including the residue names\n  const pdbData = useContext(PdbCtx);\n\n  // This blockRef is a workaround to avoid selecting a pocket row when clicking on the checkbox\n  const blockRef = useRef(null);\n\n  // Set a ref to the ngl which allows access to the ngl viewer exposed methods\n  const viewerRef = useRef(null);\n\n  // Use the colors hook\n  const [getColor, freeColor] = useColors();\n\n  // Track which pockets is beeing hovered in the list\n  const [showAllPockets, setShowAllPockets] = useState(showAllPocketsDefault);\n  // Track which pockets is beeing hovered in the list\n  const [hoveredPocket, setHoveredPocket] = useState(null);\n\n  // Track which pocket is selected by the user\n  const [selectedPockets, setSelectedPockets] = useState([]);\n  // Set when one point in the graph is selected\n  const [selectedFrame, setSelectedFrame] = useState(0);\n\n  // Send a request to the API with the url of the rgyr analysis\n  const { loading, payload, error } = useAPI(\n    `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/pockets/`,\n  );\n\n  const { data, frameStep } = useMemo(() => {\n    if (!payload) return {};\n    // Get the main data\n    const data = payload && payload.data;\n    const pocketsNumber = data.length;\n    // Calculate the frames step of the first pocket volumes analysis\n    // All pockets must have the same frames step\n    const frameNumber = data[0].volumes.length;\n    const frameStep =\n      payload.step || Math.floor(metadata.mdFrames / (frameNumber - 1));\n    // Instantiate the selected pockets state using the number of pockets\n    // Setting the surfaces as hidden by default returns some warnings but everything works fine\n    // e.g. 'Unexpected value NaN parsing y1 attribute'\n    setSelectedPockets(new Array(pocketsNumber).fill(null));\n    return { data, frameStep };\n  }, [payload, metadata]);\n\n  // Set the main component to be passed to NGL\n  const components = useMemo(() => {\n    // Wait for payload to be downloaded\n    if (!data) return;\n    // Load the required frames from the main trajectory\n    const trajectoryUrl = `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/trajectory`;\n    const mainURL = `${trajectoryUrl}?frames=1:${metadata.mdFrames}:${frameStep}`;\n    // Set the main component, which includes everything but the pockets\n    const mainComponent = { trajectoryURLs: [mainURL] };\n    // Set every pocket component\n    const pocketComponents = data.map(pocket => ({\n      name: pocket.name,\n      topologyURL: `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/files/${pocket.name}.pdb`,\n      onlyTopology: true,\n      //chainLabels: [pocket.name],\n    }));\n    return [mainComponent, ...pocketComponents];\n  }, [data, accessionAndMdNumber, metadata, frameStep]);\n\n  // Use this hook to get the memoized NGL default representations\n  // We need to access the default representations from here to know the number of representations\n  const defaultRepresentations = useDefaultRepresentations();\n\n  // Define the representations to be displayed in the viewer\n  const [ representations, setRepresentations ] = useState(null);\n\n  // Set or update the representations state\n  useMemo(() => {\n    // Wait until we have both the components and the default representations available\n    if (!components) return;\n    if (!defaultRepresentations || defaultRepresentations.length === 0) return;\n    setRepresentations(previousRepresentations => {\n      // This must be the first time we set the representations\n      // However this may be recalled during a code refresh while in development\n      // WARNING: This line may cause a shaddy error, starting representations are made just once\n      // Make sure the conditionals above are not met until we are ready to set the representations\n      if (previousRepresentations !== null) return previousRepresentations;\n      // Reduce the opacity of all default representations\n      defaultRepresentations.forEach(rep => {\n        rep.color = 'black';\n        rep.opacity = 0.3;\n      });\n      // Set the surface representation of each pocket, which are to be linked to the main component\n      const pocketSurfaceRepresentations = data.map(pocket => ({\n        name: pocket.name + ' surface',\n        selection: '@' + pocket.atoms.join(','),\n        type: 'surface',\n        color: 'grey',\n        show: false,\n        reference: POCKET_SURFACE_REFERENCE\n      }));\n      // Now set a representation for every pocket\n      const pocketRepresentations = components.slice(1).map(pocketComponent => ({\n        name: pocketComponent.name,\n        type: 'surface',\n        color: 'grey',\n        // Make the surface a transparent net\n        other: { contour: true },\n        label: pocketComponent.name,\n        component: pocketComponent.name,\n        show: showAllPocketsDefault,\n        reference: POCKET_REFERENCE\n      }));\n      // Update the state\n      const allRepresentations = [\n        ...defaultRepresentations,\n        ...pocketSurfaceRepresentations,\n        ...pocketRepresentations\n      ];\n      return allRepresentations;\n    });\n  }, [components, defaultRepresentations]);\n\n  // Set the graph parameters\n  const { graphInputData, dataDisplay } = useMemo(() => {\n    // Wait for data and metadata to be ready\n    if (!data || !metadata) return {};\n\n    // Set the input objets for the graph\n    const graphInputData = {};\n    const dataDisplay = {};\n\n    data.forEach((pocket, p) => {\n      const pocketName = pocket.name;\n      // Graph\n      graphInputData[pocketName] = {\n        data: pocket.volumes,\n        color: selectedPockets[p],\n      };\n      dataDisplay[pocketName] = selectedPockets[p] ? true : false;\n    });\n\n    return { graphInputData, dataDisplay };\n  }, [data, metadata, selectedPockets]);\n\n  // Set the mark for selected\n  const marks = useMemo(() => {\n    const selectedMark = {\n      x: selectedFrame,\n      attr: { fill: '#c8c8c8' },\n    };\n    return [selectedMark];\n  }, [selectedFrame]);\n\n  // Set the tooltip generator for the graph hover\n  const xTooltip = useMemo(() => {\n    return xValue => 'frame ' + xValue;\n  });\n\n  // Handle the change of frame\n  useEffect(() => {\n    if (!viewerRef.current) return;\n    viewerRef.current.currentFrame = selectedFrame;\n  }, [selectedFrame]);\n\n  // Update the the representations according to selected or hovered pockets\n  useEffect(() => {\n    setRepresentations(previousRepresentations => {\n      // If representations are not yet set then there is nothing to update\n      if (previousRepresentations === null) return null;\n      // Find previous pocket representations\n      const pocketRepresentations = previousRepresentations.filter(\n        rep => rep.reference === POCKET_REFERENCE);\n      // Update pocket representations\n      pocketRepresentations.forEach((previousRepresentation, i) => {\n        // If this is the hovered pocket then show it and paint it yellow\n        if (hoveredPocket === i) {\n          previousRepresentation.show = true;\n          previousRepresentation.color = 'yellow';\n        }\n        // Otherwise continue with normal behaviour\n        else {\n          const selected = selectedPockets[i];\n          previousRepresentation.show = (selected ? true : false) || showAllPockets;\n          previousRepresentation.color = selected || 'grey';\n        }\n      });\n      // Find previous pocket surface representations\n      const pocketSurfaceRepresentations = previousRepresentations.filter(\n        rep => rep.reference === POCKET_SURFACE_REFERENCE);\n      // Update pocket surface representations\n      pocketSurfaceRepresentations.forEach((previousRepresentation, i) => {\n        const selected = selectedPockets[i];\n        previousRepresentation.show = selected ? true : false;\n      });\n      // Update the state\n      return [...previousRepresentations];\n    })\n  }, [selectedPockets, hoveredPocket, showAllPockets]);\n\n  // Render loading or error messages according with the API response\n  if (loading) return <Loading />;\n  else if (error) return error.toString();\n  else if (!payload) return 'Something bad happened';\n\n  if (!metadata || !pdbData.file) return <Loading />;\n\n  return (\n    <>\n      <Card className={style.tablecard}>\n        <div className={style.paper}>\n          <Table stickyHeader size=\"small\" padding=\"checkbox\">\n            <TableHead>\n              <TableRow>\n                <TableCell key={0}>\n                  {\n                    <FormControlLabel\n                      onChange={() => setShowAllPockets(previous => !previous)}\n                      control={<Checkbox checked={showAllPockets} />}\n                      label={'Pockets'}\n                    />\n                  }\n                </TableCell>\n                <TableCell key={1}>{'Average volume (Å³)'}</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.map((pocket, p) => {\n                const pocketName = pocket.name;\n                return (\n                  <TableRow\n                    key={pocketName}\n                    // Hover only when it is not already selected\n                    //hover={p !== selectedPocket}\n                    role=\"checkbox\"\n                    className={\n                      p === hoveredPocket ? style.selectedrow : undefined\n                    }\n                    onMouseOver={() => setHoveredPocket(p)}\n                    onMouseOut={() =>\n                      setHoveredPocket(previous =>\n                        previous === p ? null : previous,\n                      )\n                    }\n                  >\n                    {[\n                      <FormControlLabel\n                        data-key={pocketName}\n                        key={pocketName}\n                        onMouseOver={() => {\n                          blockRef.current = p;\n                        }}\n                        onMouseOut={() => {\n                          blockRef.current = null;\n                        }}\n                        onChange={() =>\n                          setSelectedPockets(previous => {\n                            if (!previous[p]) previous[p] = getColor();\n                            else {\n                              freeColor(previous[p]);\n                              previous[p] = null;\n                            }\n                            return [...previous];\n                          })\n                        }\n                        control={\n                          <Checkbox\n                            checked={selectedPockets[p] ? true : false}\n                            style={{\n                              color: selectedPockets[p]\n                                ? selectedPockets[p]\n                                : 'black',\n                            }}\n                            inputProps={{ 'data-key': pocketName }}\n                          />\n                        }\n                        label={pocketName}\n                      />,\n                      roundedAvg(pocket.volumes),\n                    ].map(cell => (\n                      <TableCell key={cell}>{cell}</TableCell>\n                    ))}\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </div>\n      </Card>\n      <Card className={style.nglcard} ref={nglRef}>\n        {/* Render the NGL viewer when it is on screen*/}\n        {isNglVisible ? (\n          <ViewerWithControls\n            className={style.container}\n            startingComponents={components}\n            representationsState={[representations, setRepresentations]}\n            preventTrajectory\n            ref={viewerRef}\n          />\n        ) : (\n          <div style={{ height: '50vh' }} />\n        )}\n      </Card>\n      <Card className={style.graph}>\n        {selectedPockets.every(pocket => pocket === null) && (\n          <div className={style['graph-placeholder']}>\n            <Typography variant=\"h6\">No pocket selected</Typography>\n          </div>\n        )}\n        <Graph\n          yData={graphInputData}\n          step={frameStep}\n          xTooltip={xTooltip}\n          xScaleFactor={1}\n          xAxisLabel={'Frames'}\n          yAxisLabel={`Pocket volume (Å³)`}\n          dataDisplay={dataDisplay}\n          showPrecisionSlider={false}\n          blockMaxPrecision={true}\n          roundcents={false}\n          //mean\n          //standardDeviation\n          onSelect={setSelectedFrame}\n          className={style.graph}\n          marks={marks}\n        />\n      </Card>\n    </>\n  );\n};\n\nexport default Pockets;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__M9GCG\"};","import React, { useLayoutEffect, useRef, forwardRef } from 'react';\nimport { Card } from '@mui/material';\n\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nconst KEYFRAMES = { opacity: [0, 1] };\n\nif (!reducedMotion()) {\n  KEYFRAMES.transform = ['translateY(50px)', 'translateY(0)'];\n}\n\nconst ANIMATION_OPTIONS = {\n  fill: 'both',\n  easing: 'cubic-bezier(0, .99, .56, 1.1)',\n  duration: 500,\n};\n\n// Make the card appear and slide softly from down to up when the page is loaded\nconst AnimatedCard = forwardRef(({ overrideComponent, ...props }, ref) => {\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const node = containerRef.current && containerRef.current.firstElementChild;\n    if (!(node && node.animate)) return;\n\n    const index = Array.from(\n      document.querySelectorAll('main section'),\n    ).findIndex(section => node === section);\n\n    const animation = node.animate(KEYFRAMES, {\n      ...ANIMATION_OPTIONS,\n      delay: index * 150,\n    });\n\n    return () => animation.cancel();\n  }, []);\n\n  const Component = overrideComponent ? 'section' : Card;\n\n  return (\n    <div ref={containerRef} className={style.container}>\n      <Component component=\"section\" {...props} ref={ref} />\n    </div>\n  );\n});\n\nexport default AnimatedCard;\n","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n  const {\n      className,\n      raised = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    raised\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;","// extracted by mini-css-extract-plugin\nexport default {\"paper\":\"style_paper__3rwjT\",\"tablecard\":\"style_tablecard__zkclz\",\"nglcard\":\"style_nglcard__Giv4e\",\"margined\":\"style_margined__oYYKj\",\"container\":\"style_container__LW09U\",\"selectedrow\":\"style_selectedrow__J0gnV\",\"graph\":\"style_graph__tgzxk\",\"graph-placeholder\":\"style_graph-placeholder__QpX0O\"};","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCheckboxUtilityClass(slot) {\n  return generateUtilityClass('MuiCheckbox', slot);\n}\nconst checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium']);\nexport default checkboxClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checkedIcon\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport checkboxClasses, { getCheckboxUtilityClass } from './checkboxClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    indeterminate,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`, `size${capitalize(size)}`]\n  };\n  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\nconst CheckboxRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiCheckbox',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.indeterminate && styles.indeterminate, styles[`size${capitalize(ownerState.size)}`], ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  color: (theme.vars || theme).palette.text.secondary\n}, !ownerState.disableRipple && {\n  '&:hover': {\n    backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  }\n}, ownerState.color !== 'default' && {\n  [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {\n    color: (theme.vars || theme).palette[ownerState.color].main\n  },\n  [`&.${checkboxClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  }\n}));\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(CheckBoxIcon, {});\nconst defaultIcon = /*#__PURE__*/_jsx(CheckBoxOutlineBlankIcon, {});\nconst defaultIndeterminateIcon = /*#__PURE__*/_jsx(IndeterminateCheckBoxIcon, {});\nconst Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(inProps, ref) {\n  var _icon$props$fontSize, _indeterminateIcon$pr;\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCheckbox'\n  });\n  const {\n      checkedIcon = defaultCheckedIcon,\n      color = 'primary',\n      icon: iconProp = defaultIcon,\n      indeterminate = false,\n      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,\n      inputProps,\n      size = 'medium',\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const icon = indeterminate ? indeterminateIconProp : iconProp;\n  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n  const ownerState = _extends({}, props, {\n    color,\n    indeterminate,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CheckboxRoot, _extends({\n    type: \"checkbox\",\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size\n    }),\n    ownerState: ownerState,\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other, {\n    classes: classes\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckBoxIcon />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <CheckBoxOutlineBlankIcon />\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate: PropTypes.bool,\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateCheckBoxIcon />\n   */\n  indeterminateIcon: PropTypes.node,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense checkbox styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Checkbox;","import { useMemo, useRef } from 'react';\n\n// These colors are used to mark different selections\n// When all colors are used the next selections are marked in black\nconst defaultAvailableColors = ['red', 'green', 'blue', 'orange', 'purple'];\n\n// This hook is a special getter of available colors that tracks which colors have been already got\n// This way you will not get the same color twice\n// In addition 2 more functions are returned to free a specific color or all colors\nconst useColors = (\n  availableColors = defaultAvailableColors,\n  overColor = 'black',\n) => {\n  // Track used colors\n  const usedColors = useRef([]);\n\n  // Return a color from the asigned colors list which has not been given yet\n  return useMemo(() => {\n    const getColor = () => {\n      for (const color of availableColors) {\n        const index = usedColors.current.indexOf(color);\n        if (index === -1) {\n          usedColors.current.push(color);\n          return color;\n        }\n      }\n      return overColor;\n    };\n    // Consider the specified color as available to be given again\n    const freeColor = color => {\n      if (color === overColor) return;\n      const index = usedColors.current.indexOf(color);\n      if (index === -1) throw new Error(`Color ${color} is not used`);\n      usedColors.current.splice(index, 1);\n    };\n\n    // Consider all colors as available to be given again\n    const freeAllColors = () => {\n      usedColors.current = [];\n    };\n    return [getColor, freeColor, freeAllColors];\n  }, [availableColors, overColor]);\n};\n\nexport default useColors;\n"],"names":["Graph","lazy","useInViewOptions","triggerOnce","rootMargin","POCKET_REFERENCE","POCKET_SURFACE_REFERENCE","showAllPocketsDefault","roundedAvg","values","average","reduce","pv","cv","length","Math","round","Pockets","nglRef","isNglVisible","useInView","accessionAndMdNumber","metadata","useContext","ProjectCtx","pdbData","PdbCtx","blockRef","useRef","viewerRef","getColor","freeColor","useColors","showAllPockets","setShowAllPockets","useState","hoveredPocket","setHoveredPocket","selectedPockets","setSelectedPockets","selectedFrame","setSelectedFrame","loading","payload","error","useAPI","BASE_PATH_PROJECTS","data","frameStep","useMemo","pocketsNumber","frameNumber","volumes","step","floor","mdFrames","Array","fill","components","trajectoryURLs","map","pocket","name","topologyURL","onlyTopology","defaultRepresentations","useDefaultRepresentations","representations","setRepresentations","previousRepresentations","forEach","rep","color","opacity","pocketSurfaceRepresentations","selection","atoms","join","type","show","reference","pocketRepresentations","slice","pocketComponent","other","contour","label","component","graphInputData","dataDisplay","p","pocketName","marks","x","attr","xTooltip","xValue","useEffect","current","currentFrame","filter","previousRepresentation","i","selected","_jsx","Loading","toString","file","_jsxs","_Fragment","children","Card","className","style","tablecard","paper","Table","stickyHeader","size","padding","TableHead","TableRow","TableCell","FormControlLabel","onChange","previous","control","Checkbox","checked","TableBody","role","selectedrow","undefined","onMouseOver","onMouseOut","inputProps","cell","nglcard","ref","ViewerWithControls","container","startingComponents","representationsState","preventTrajectory","height","graph","every","Typography","variant","yData","xScaleFactor","xAxisLabel","yAxisLabel","showPrecisionSlider","blockMaxPrecision","roundcents","onSelect","KEYFRAMES","reducedMotion","transform","ANIMATION_OPTIONS","easing","duration","forwardRef","_ref","overrideComponent","props","containerRef","useLayoutEffect","node","firstElementChild","animate","index","from","document","querySelectorAll","findIndex","section","animation","delay","cancel","Component","getCardUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardRoot","styled","Paper","overridesResolver","styles","root","overflow","React","inProps","useDefaultProps","raised","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","clsx","elevation","createSvgIcon","d","getCheckboxUtilityClass","CheckboxRoot","SwitchBase","shouldForwardProp","prop","rootShouldForwardProp","indeterminate","capitalize","theme","vars","palette","text","secondary","disableRipple","backgroundColor","action","activeChannel","mainChannel","hoverOpacity","alpha","active","main","checkboxClasses","disabled","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","_icon$props$fontSize","_indeterminateIcon$pr","checkedIcon","icon","iconProp","indeterminateIcon","indeterminateIconProp","slots","composedClasses","fontSize","defaultAvailableColors","availableColors","arguments","overColor","usedColors","indexOf","push","Error","splice","freeAllColors"],"sourceRoot":""}