{"version":3,"file":"static/js/7689.7251b68c.chunk.js","mappings":"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","sources":["pages/accession/dist-perres/index.js","webpack://mdposit/./src/pages/accession/dist-perres/style.module.css?77de"],"sourcesContent":["import React, { useContext, useState, useMemo, useCallback } from 'react';\n\nimport { CardContent, Tabs, Tab, Typography } from '@mui/material';\n\nimport useAPI from '../../../hooks/use-api';\n\nimport Card from '../../../components/animated-card';\nimport Loading from '../../../components/loading';\nimport ViewerSpawner from '../../../components/viewer-spawner';\n\nimport { ProjectCtx } from '../../../contexts';\n\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\n\n//import Selector from '../../../components/selector';\nimport InteractionSelector from '../../../components/interaction-selector';\nimport Heatmap from '../../../components/heatmap';\n\nimport style from './style.module.css';\n\n// Set the heatmap minimum and maximum colors\nconst heatmapMinimumColor = { r: 0, g: 0, b: 255 };\nconst heatmapMaximumColor = { r: 255, g: 0, b: 0 };\n\n// Distance per residue analysis\nconst DistPerres = () => {\n  // Get the current project data\n  const { accessionAndMdNumber, topology, interactions } = useContext(ProjectCtx);\n\n  // The interaction to be displayed\n  const [selectedInteraction, setSelectedInteraction] = useState(0);\n\n  // The interaction residues to be displayed\n  // May be all 'residue_indices' or only the 'interface_indices'\n  const [selectedResidues, setSelectedResidues] = useState('interface_indices');\n\n  // The selected heatmap residues\n  const [selected, setSelected] = useState(null);\n\n  // The graphic to be displayed ('mean' or 'stdv')\n  const [display, setDisplay] = useState('mean');\n\n  // Set the API url for the heatmap data\n  const url = `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/dist-perres/`;\n\n  const { loading, payload, error } = useAPI(url);\n\n  // Filter data by selected residues\n  const {\n    heatmapData,\n    residuesX,\n    residuesY,\n    xTitle,\n    yTitle,\n    isReduced,\n  } = useMemo(() => {\n    // Return if the payload is not ready\n    if (loading || error || !payload || !topology || !interactions) return {};\n\n    // Get the selected interaction\n    const interaction = interactions[selectedInteraction];\n\n    // Get the data whose name matches the interaction name\n    const data = payload.data.find(dataset => {\n      return dataset.name === interaction.name;\n    });\n\n    // Set the data to be displayed\n    const displayedData = display === 'mean' ? data.means : data.stdvs;\n\n    // Find out if the analysis contains data for all residues or just the interface residues\n    // It may happen in large interactions that only interface residues are saved in order to reduce data size\n    // WARNING: We must check both data dimensions\n    // WARNING: it may happen that one agent has the same number of total and interface residues\n    let isReduced;\n    const xDim = displayedData[0].length;\n    const yDim = displayedData.length;\n    if (\n      yDim === interaction['residue_indices_2'].length &&\n      xDim === interaction['residue_indices_1'].length\n    )\n      isReduced = false;\n    else if (\n      yDim === interaction['interface_indices_2'].length &&\n      xDim === interaction['interface_indices_1'].length\n    )\n      isReduced = true;\n    else\n      throw new Error(\n        `The numbers of values in data does not match any number of residues in the interaction (neither all or interface)`,\n      );\n\n    // Select the interaction residues whosa data is to be represented in the heatmap\n    const residuesX = interaction[selectedResidues + '_1'];\n    const residuesY = interaction[selectedResidues + '_2'];\n\n    // Set data to be represented in the heatmap\n    let filteredData = [];\n    // If we have a reduced dataset\n    if (isReduced) {\n      // If interface residues are requested then we return the whole dataset\n      if (selectedResidues === 'interface_indices') {\n        filteredData = displayedData;\n      }\n      // If all residues are requested then we must build a new matrix and fill the gaps with 'null' values\n      // WARNING: Although this has been programmed, the button tu do this should be disabled from the client\n      // WARNING: This code is functional but it should never be called or you may run out of memory\n      // WARNING: If you allow to represent a whole heatmap for a reduced analysis you may be trying to build a huge heatmap\n      else {\n        const interfaceResiduesX = interaction['interface_indices_1'];\n        const interfaceResiduesY = interaction['interface_indices_2'];\n        for (const y of residuesY) {\n          const yIndex = interfaceResiduesY.indexOf(y);\n          let newRow;\n          // If the index is not in the interface then the whole row is full of nulls\n          if (yIndex === -1) {\n            const XResiduesCount = residuesX.length;\n            newRow = new Array(XResiduesCount).fill(10);\n            filteredData.push(newRow);\n            continue;\n          }\n          // Otherwise, we must check each column value\n          newRow = [];\n          for (const x of residuesX) {\n            const xIndex = interfaceResiduesX.indexOf(x);\n            if (xIndex === -1) {\n              newRow.push(10);\n              continue;\n            }\n            newRow.push(displayedData[yIndex][xIndex]);\n          }\n          filteredData.push(newRow);\n        }\n      }\n    }\n    // If we have the full dataset\n    else {\n      // If all residues are requested then we return all data\n      if (selectedResidues === 'residue_indices') {\n        filteredData = displayedData;\n      }\n      // If interface residues are requested then we must filter interface resdiues only\n      else {\n        const allResiduesX = interaction['residue_indices_1'];\n        const allResiduesY = interaction['residue_indices_2'];\n        for (const y of residuesY) {\n          const yIndex = allResiduesY.indexOf(y);\n          const newRow = [];\n          for (const x of residuesX) {\n            const xIndex = allResiduesX.indexOf(x);\n            newRow.push(displayedData[yIndex][xIndex]);\n          }\n          filteredData.push(newRow);\n        }\n      }\n    }\n\n    // Convert the residues from topology numeration to standard numeration to use them as labels\n    const [xLabels, yLabels] = [residuesX, residuesY].map(residueIndices =>\n      residueIndices.map(residueIndex => topology.getResidueByIndex(residueIndex).standardLabel),\n    );\n\n    // Get the titles from the interaction data\n    const xTitle = interaction['agent_1'];\n    const yTitle = interaction['agent_2'];\n\n    // Get the object to be passed to the heatmap as input\n    const heatmapData = { data: filteredData, xLabels, yLabels };\n\n    return {\n      heatmapData,\n      residuesX,\n      residuesY,\n      xTitle,\n      yTitle,\n      isReduced,\n    };\n  }, [\n    loading,\n    error,\n    payload,\n    topology,\n    interactions,\n    selectedInteraction,\n    selectedResidues,\n    display,\n  ]);\n\n  // Transform the raw reside tag to source numeration\n  // Also retrieve the residue index, since it is used to ask for the distance representation\n  // http://nglviewer.org/ngl/api/class/src/representation/distance-representation.js~DistanceRepresentation.html\n  const parseResidue = useCallback(\n    residueIndex => {\n      // Set the numeration\n      const residue = topology.getResidueByIndex(residueIndex);\n      return {\n        forResidue: residueIndex,\n        // We must check the residue has an alpha carbon\n        // If not, there is no atom to use a distance reference, so return null\n        forDistance: residue.hasCAlpha\n          ? residue.number.toString() + ':' + residue.chainName + '.CA'\n          : null,\n      };\n    },\n    [topology],\n  );\n\n  // Memoize heatmap handler functions\n  const handleHeatmapTooltip = useCallback(\n    ({ value, xAxisValue, yAxisValue }) =>\n      xAxisValue +\n      ' - ' +\n      yAxisValue +\n      '\\n' +\n      Math.round(value * 100) / 100 +\n      ' Å',\n    [],\n  );\n  const handleHeatmapClick = useCallback(\n    ({ xIndex, yIndex }) => {\n      const px = parseResidue(residuesX[xIndex]);\n      const py = parseResidue(residuesY[yIndex]);\n      setSelected({\n        residues: [px.forResidue, py.forResidue],\n        // There is no values \"for distance\" when any residues has no alpha carbon\n        distance: px.forDistance &&\n          py.forDistance && [[px.forDistance, py.forDistance]],\n      });\n    },\n    [residuesX, residuesY, parseResidue],\n  );\n\n  // Render loading or error messages according with the API response\n  if (loading) return <Loading />;\n  else if (error) return error.toString();\n  else if (!payload) return 'Something bad happened';\n\n  if (!topology || !interactions) return <Loading />;\n\n  // Handles when the tabs are switched\n  const handleTabs = (event, newValue) => {\n    setDisplay(newValue);\n  };\n\n  // Render\n  return (\n    <>\n      <Card>\n        <CardContent className={style.horizontal}>\n          <Typography variant=\"h6\">Residues selection:</Typography>\n          <InteractionSelector\n            interactions={interactions}\n            selectedInteraction={selectedInteraction}\n            setSelectedInteraction={setSelectedInteraction}\n            selectedResidues={selectedResidues}\n            setSelectedResidues={setSelectedResidues}\n            interfaceOnly={isReduced}\n          />\n        </CardContent>\n      </Card>\n      <Card className={style.margined} id=\"heatmap\">\n        <CardContent>\n          <Tabs\n            value={display}\n            variant=\"fullWidth\"\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            onChange={handleTabs}\n            className={style['margined-bottom']}\n          >\n            <Tab\n              value={'mean'}\n              label=\"Residues distance averages\"\n              //className={style['disabled-tab']}\n            />\n            <Tab value={'stdv'} label=\"Residues distance standard deviations\" />\n          </Tabs>\n          <Heatmap\n            inputData={heatmapData}\n            onTooltip={handleHeatmapTooltip}\n            onClick={handleHeatmapClick}\n            legendTitle={\n              display === 'mean'\n                ? 'Distance average (Å)'\n                : 'Distance standard deviation (Å)'\n            }\n            // Invert colors here, since minimum values belong to closer residues\n            maxValueColor={heatmapMinimumColor}\n            minValueColor={heatmapMaximumColor}\n            totalHeight={heatmapData.yLabels.length === 1 ? 30 : undefined}\n            xTitle={xTitle}\n            yTitle={yTitle}\n          />\n        </CardContent>\n      </Card>\n      <ViewerSpawner\n        // Set the new viewer or null if there is not a proper \"selected\" value\n        newViewer={\n          selected\n            ? {\n                selectedResidueIndices: selected.residues,\n                // WARNING: Distance is not always available\n                // This only works when both residues have alpha carbon\n                // (i.e. both are protein residues)\n                selectedDistances: selected.distance,\n              }\n            : null\n        }\n        // If the nailed/closed viewer is the current viewer then reset the 'selected'\n        onNail={viewer =>\n          setSelected(previous => {\n            if (previous && previous.residues === viewer.selectedResidueIndices)\n              return null;\n            else return previous;\n          })\n        }\n        onClose={viewer =>\n          setSelected(previous => {\n            if (previous && previous.residues === viewer.selectedResidueIndices)\n              return null;\n            else return previous;\n          })\n        }\n      />\n    </>\n  );\n};\n\nexport default DistPerres;\n","// extracted by mini-css-extract-plugin\nexport default {\"margined\":\"style_margined__JbZJ6\",\"margined-bottom\":\"style_margined-bottom__WRBwE\",\"horizontal\":\"style_horizontal__NH+ZS\"};"],"names":["heatmapMinimumColor","r","g","b","heatmapMaximumColor","DistPerres","accessionAndMdNumber","topology","interactions","useContext","ProjectCtx","selectedInteraction","setSelectedInteraction","useState","selectedResidues","setSelectedResidues","selected","setSelected","display","setDisplay","url","BASE_PATH_PROJECTS","loading","payload","error","useAPI","heatmapData","residuesX","residuesY","xTitle","yTitle","isReduced","useMemo","interaction","data","find","dataset","name","displayedData","means","stdvs","xDim","length","yDim","Error","filteredData","interfaceResiduesX","interfaceResiduesY","y","yIndex","indexOf","newRow","x","xIndex","push","XResiduesCount","Array","fill","allResiduesX","allResiduesY","xLabels","yLabels","map","residueIndices","residueIndex","getResidueByIndex","standardLabel","parseResidue","useCallback","residue","forResidue","forDistance","hasCAlpha","number","toString","chainName","handleHeatmapTooltip","_ref","value","xAxisValue","yAxisValue","Math","round","handleHeatmapClick","_ref2","px","py","residues","distance","_jsx","Loading","_jsxs","_Fragment","children","Card","CardContent","className","style","horizontal","Typography","variant","InteractionSelector","interfaceOnly","margined","id","Tabs","indicatorColor","textColor","onChange","handleTabs","event","newValue","Tab","label","Heatmap","inputData","onTooltip","onClick","legendTitle","maxValueColor","minValueColor","totalHeight","undefined","ViewerSpawner","newViewer","selectedResidueIndices","selectedDistances","onNail","viewer","previous","onClose"],"sourceRoot":""}