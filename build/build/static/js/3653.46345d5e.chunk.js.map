{"version":3,"file":"static/js/3653.46345d5e.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/animated-card/style.module.css?d4d9","components/animated-card/index.js","webpack://mdposit/./src/components/selector/style.module.css?71ed","components/selector/index.js","pages/accession/clusters/index.js","webpack://mdposit/./src/components/viewer-spawner/style.module.css?df6e","components/viewer-spawner/index.js","webpack://mdposit/./src/pages/accession/clusters/style.module.css?66ae"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__M9GCG\"};","import React, { useLayoutEffect, useRef, forwardRef } from 'react';\nimport { Card } from '@mui/material';\n\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nconst KEYFRAMES = { opacity: [0, 1] };\n\nif (!reducedMotion()) {\n  KEYFRAMES.transform = ['translateY(50px)', 'translateY(0)'];\n}\n\nconst ANIMATION_OPTIONS = {\n  fill: 'both',\n  easing: 'cubic-bezier(0, .99, .56, 1.1)',\n  duration: 500,\n};\n\n// Make the card appear and slide softly from down to up when the page is loaded\nconst AnimatedCard = forwardRef(({ overrideComponent, ...props }, ref) => {\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const node = containerRef.current && containerRef.current.firstElementChild;\n    if (!(node && node.animate)) return;\n\n    const index = Array.from(\n      document.querySelectorAll('main section'),\n    ).findIndex(section => node === section);\n\n    const animation = node.animate(KEYFRAMES, {\n      ...ANIMATION_OPTIONS,\n      delay: index * 150,\n    });\n\n    return () => animation.cancel();\n  }, []);\n\n  const Component = overrideComponent ? 'section' : Card;\n\n  return (\n    <div ref={containerRef} className={style.container}>\n      <Component component=\"section\" {...props} ref={ref} />\n    </div>\n  );\n});\n\nexport default AnimatedCard;\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"style_card__NWa7X\",\"content\":\"style_content__eXhNP\",\"horizontal-margined\":\"style_horizontal-margined__w4tJp\"};","import React from 'react';\n\nimport { Card, CardContent, MenuItem, Select, Typography } from '@mui/material';\n\nimport style from './style.module.css';\n\nconst Selector = ({ label, options, selection, setter }) => {\n  // Make sure we have the mandatory parameters\n  if (!options) return 'Missing options argument';\n  if (!selection) return 'Missing selection argument';\n  if (!setter) return 'Missing setter argument';\n  // Handle when interactions change\n  const changeSelection = event => { setter(event.target.value) };\n  // Render the component\n  return (\n    <Card className={style.card}>\n      <CardContent className={style.content}>\n        {label && (\n          <Typography variant=\"h5\">\n            {label}\n          </Typography>\n        )}\n        <Select\n          value={selection}\n          onChange={changeSelection}\n          className={style['horizontal-margined']}\n        >\n          {options.map((option, i) => (\n            <MenuItem key={i} value={option}>\n              {option}\n            </MenuItem>\n          ))}\n        </Select>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Selector;\n","import React, { lazy, useContext, useState, useMemo, useCallback, useRef, useEffect } from 'react';\n// CSS style\nimport style from './style.module.css';\n// Hooks to request the API\nimport useAPI from '../../../hooks/use-api';\nimport useBatchAPI from '../../../hooks/use-batch-api';\n// Project context\nimport { ProjectCtx } from '../../../contexts';\n// Constants\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\n// Visual assets\nimport { CardContent, Slider, Typography } from '@mui/material';\nimport Card from '../../../components/animated-card';\nimport Loading from '../../../components/loading';\n// Analysis selector\nimport Selector from '../../../components/selector';\n// Viewer pop-up windows\nimport ViewerSpawner from '../../../components/viewer-spawner';\nimport { Version } from 'src/utils/auxiliar-functions';\n\nconst MarkovGraph = lazy(() =>\n  import(/* webpackChunkName: 'graph-msm' */ '../../../components/graph-msm'),\n);\n\n// Set the maximum number of nodes\n// Note that the hard limit of nodes is the number of values in data (now 20)\nconst defaultNodeNumber = 14;\n// Set the maximum number of nodes\n// Note that the hard limit of links is the possible combinations of pairs of nodes\nconst defaultLinksNumber = 20;\n\n// Set the maximum node area in the graph, which is the area of the node with the highest population\n// Note that the rest of node areas are proportional, so there is no need to set the minimum node area\nconst maxNodeArea = 10000;\n// Set the maximum and minimum link widths in the graph\n// Note that both are to be defined since width values are interpolated\nconst maxLinkWidth = 10;\nconst minLinkWidth = 1;\n\nconst Clusters = () => {\n\n  // Get the current project metadata\n  const { accessionAndMdNumber, files } = useContext(ProjectCtx);\n\n  // Set when one point in the graph is selected\n  const [selectedFrame, setSelectedFrame] = useState(null);\n\n  // Set the number of nodes to be displayed\n  const [nodesLimit, setNodesLimit] = useState(defaultNodeNumber);\n\n  // Set the number of nodes to be displayed\n  const [linksLimit, setLinksLimit] = useState(defaultLinksNumber);\n\n  // Set the selected clusters analysis\n  // By default we will set the overall structure, which should be always found\n  const [selectedAnalysis, setSelectedAnalysis] = useState('Overall');\n\n  // Request a summary of the available clusters analyses to the API\n  const clustersSummary = useAPI(`${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/clusters`);\n  // Memoize the available analyses for the selector\n  const availableAnalyses = useMemo(() => clustersSummary && clustersSummary.payload &&\n    clustersSummary.payload.map(analysis => analysis.name), [clustersSummary]);\n\n  // Find the selected analysis name\n  const selectedAnalysisName = useMemo(() => {\n    // Wait until we have the clusters summary available\n    if (!clustersSummary.payload) return;\n    // Find the name of the selected analysis according to the summary\n    const analysis = clustersSummary.payload.find(analysis => analysis.name === selectedAnalysis);\n    if (!analysis) throw new Error(`Analysis ${selectedAnalysis} is not found in the summary`);\n    // Finally return the analysis name\n    return analysis.analysis;\n  }, [selectedAnalysis, clustersSummary.payload]);\n\n  // Request the selected analysis data to the API\n  const selectedAnalysisURL = selectedAnalysisName\n  ? `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/${selectedAnalysisName}`\n  : null;\n  const clustersAnalysis = useAPI(selectedAnalysisURL);\n\n  // Conserve a backed up cluster data\n  // If the current analysis is changed keep the old results as we wait for the new payload\n  // Thus all already rendered elements can use old data and the rerender is way more smooth\n  // IMPORTANT: Payload values are used widely among rendered components\n  // IMPORTANT: For this reason there is no render if there is no payload\n  // IMPORTANT: If this is not done there is a brief render which displays nothing\n  // IMPORTANT: Then the data update looks almost like a refresh\n  const clustersDataRef = useRef(clustersAnalysis.payload);\n  // Save cluster data only when the payload available\n  useMemo(() => {\n    // If the payload is ready then set it as the reference\n    if (!clustersAnalysis.payload) return;\n    clustersDataRef.current = clustersAnalysis.payload;\n  }, [clustersAnalysis.payload]);\n  // Get the current reference value\n  const clustersData = clustersDataRef.current;\n\n  // Download all cluster screenshots\n  // First set the URLs for the API\n  const screenshotsUrls = useMemo(() => {\n    // Wait until we know the selected analysis name\n    if (!selectedAnalysisName) return [];\n    // Find screenshot filenamese\n    const selectedAnalysisFilename = selectedAnalysisName.replace('-', '_');\n    const screenshotHeaderNames = `${selectedAnalysisFilename}_screenshot_`;\n    // WARNING: The sort may seem redundant, but if there was any reupload then images may be disordered\n    const screenshotFilenames = files.filter(filename => filename.includes(screenshotHeaderNames)).sort();\n    // Sort them according to their numeration so they match\n    return screenshotFilenames.map(\n      filename => `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/files/${filename}`\n    );\n  }, [files, selectedAnalysisName]);\n\n  // Now perform the API calls\n  const screenshotsResponses = useBatchAPI(screenshotsUrls);\n  const screenshotLoading = screenshotsResponses.some(response => response.loading);\n\n  // Conserve backed up screenshots\n  // Same reason as explained above in clustersDataRef\n  const screenshotsRef = useRef(null);\n  // Parse and save the screenshot images\n  useMemo(() => {\n    if (screenshotLoading) return;\n    screenshotsRef.current = screenshotsResponses.map(response => {\n      if (!response) return null;\n      if (!response.payload) return null;\n      return 'data:image/png;base64,' + Buffer.from(response.payload, 'binary').toString('base64');\n    });\n  }, [screenshotsResponses, screenshotLoading]);\n  // Get the current reference screenshots\n  const screenshots = screenshotsRef.current;\n\n  // Set the nodes and links to be represented in the Markov graph\n  // For every node, set its area according to its population value and then calculate its radius\n  // For every link, set is thickness according to the RMSD between the two frames it is connecting\n  const { graphData, availableLinks, clusterIndices, version, step } = useMemo(() => {\n    if (!clustersData) return {};\n    // Add the index to every cluster in the original data\n    // This allos us to sorth them without loosing track of cluster indices, which are used in transitions\n    clustersData.clusters.forEach((cluster, i) => { cluster.index = i });\n    // Sort clusters by number of frames\n    // Set a new list to avoid mutating the original\n    const nodeSortingFunction = (clusterA, clusterB) => clusterB.frames.length - clusterA.frames.length;\n    const sortedClusters = [ ...clustersData.clusters ].sort(nodeSortingFunction);\n    // Get as many clusters as the nodes limit starting by the most populated\n    const filteredClusters = sortedClusters.slice(0, nodesLimit);\n    // Mine data from the sorted clusters\n    const mainFrames = filteredClusters.map(cluster => cluster.main)\n    const totalFrames = filteredClusters.reduce((acc, curr) => acc + curr.frames.length, 0);\n    const populations = filteredClusters.map(cluster => cluster.frames.length / totalFrames);\n    const clusterIndices = filteredClusters.map(cluster => cluster.index);\n    // Set the populations cutoff according to the maximum populations value to remove nodes\n    const maximumPopulation = populations[0];\n    // Set nodes: objects containing both the frame and the population\n    const nodes = [];\n    populations.forEach((population, i) => {\n      // Set the area of the current node\n      const area = population * maxNodeArea / maximumPopulation;\n      // Calculate the radius from the area\n      const radius = Math.sqrt(area / Math.PI);\n      // Set the node and add it to the list\n      const node = {\n        id: i,\n        radius: radius,\n        value: mainFrames[i],\n        // Set the text to be displayed as a tooltip when the node is hovered\n        // Populations is a percent in a 0 to 1 format, so we multipley by an extra 100 to get the actual percent\n        text: `Population: ${Math.round(population * 10000) / 100} %\\nFrame: ${mainFrames[i]}`,\n      };\n      nodes.push(node);\n    });\n    // Set the transitions between clusters as the links\n    const links = [];\n    // Find transitions between available nodes\n    const availableTransitions = clustersData.transitions.filter(\n      transition => clusterIndices.includes(transition.from) && clusterIndices.includes(transition.to));\n    // Save the number of available links with the given available nodes\n    const availableLinks = availableTransitions.length;\n    // Sort transitions depending on their counts\n    const transitionSortingFunction = (transitionA, transitionB) => transitionB.count - transitionA.count;\n    const sortedTransitions = availableTransitions.sort(transitionSortingFunction);\n    // Find the maximum and minimum transition counts\n    const allCounts = sortedTransitions.map(transition => transition.count);\n    const maxCount = allCounts[0];\n    const minCount = allCounts[allCounts.length - 1];\n    // Calculate the normalizer for the interpolation process\n    const normalizer = maxCount === minCount\n      ? 1 // If there is only one possible width then set it to the maximum width\n      : (maxLinkWidth - minLinkWidth) / (minCount - maxCount);\n    // Process as many links as requested by the user\n    // Note that, with the current implementation, transitions between  pairs of nodes are merged\n    // So we may have less links than transitions\n    sortedTransitions.forEach((transition, i) => {\n      if (i >= linksLimit) return;\n      // Translate cluster indices to node indices\n      const source = clusterIndices.indexOf(transition.from);\n      if (source === -1) throw new Error('Not found source cluster index');\n      const target = clusterIndices.indexOf(transition.to);\n      if (target === -1) throw new Error('Not found target cluster index');\n      // Set the width from the number of transitions count\n      // Interpolate the current transitions count to obtain the corresponding width\n      const width = maxLinkWidth - (transition.count - maxCount) * normalizer;\n      // Check if we already have the opposite link\n      const oppositeLink = links.find(link => link.source === target && link.target === source);\n      // If so, merge their width\n      if (oppositeLink) {\n        // DANI: Esto es muy cutre y rompe incluso la interpolación, pero al ser temporal no merece la pena hacerlo mejor\n        oppositeLink.width += width;\n      }\n      // Otherwise create new link\n      else {\n        const link = { source: source, target: target, width: width };\n        links.push(link);\n      }\n    });\n    // Mine also the step and analysis version from the cluster data\n    const version = new Version(clustersData.version);\n    const step = clustersData.step;\n    // Return both nodes and links inside an object\n    const graphData = { nodes: nodes, links: links };\n    return { graphData, availableLinks, clusterIndices, version, step };\n  }, [clustersData, nodesLimit, linksLimit]);\n\n  // Set the displayed screenshots in the right order\n  const displayedScreenshots = useMemo(() => {\n    if (!clusterIndices || !screenshots) return;\n    return clusterIndices.map(index => screenshots[index]);\n  }, [clusterIndices, screenshots]);\n\n  const handleNodeSelect = useCallback(node => {\n    // DANI: En las primeras versiones de este análisis la frame de los nodos están mal\n    // DANI: Es la frame de la trayectoria reducida, no de la completa\n    // DANI: De manera que se arregla multiplicandola por el step\n    const newFrame = version.equals('0.0') ? node.value * step : node.value;\n    setSelectedFrame(newFrame);\n  }, [setSelectedFrame, version, step]);\n\n  // Render loading or error messages according with the API response as we wait for data\n  if (!clustersData) {\n    if (clustersAnalysis.loading) return <Loading />;\n    if (clustersAnalysis.error) return clustersAnalysis.error.toString();\n    return 'Something bad happened';\n  }\n\n  // Render loading message according to screenshot downloads\n  if (!displayedScreenshots) return <Loading />;\n\n  return (\n    <>\n      <Selector\n        label={'Clusters analysis'}\n        options={availableAnalyses}\n        selection={selectedAnalysis}\n        setter={setSelectedAnalysis}\n      />\n      <Card>\n        <div className={clustersAnalysis.loading ? style.disabled : style.enabled}>\n          <MarkovGraph\n            data={graphData}\n            images={displayedScreenshots}\n            selectedNodeValue={selectedFrame}\n            onSelectNode={handleNodeSelect}\n            className={style.graph}\n          />\n          <CardContent>\n            <div className={style.horizontal}>\n              <Typography variant=\"h7\" className={style.wide25}>{'Number of nodes: '}</Typography>\n              <Slider\n                title=\"Change number of nodes\"\n                value={nodesLimit}\n                aria-labelledby=\"continuous-slider\"\n                onChange={(_, value) => { setNodesLimit(value) }}\n                min={2}\n                max={clustersData.clusters.length}\n                valueLabelDisplay=\"auto\"\n                className={style.wide75}\n              />\n            </div>\n            <div className={style.horizontal}>\n              <Typography variant=\"h7\" className={style.wide25}>{'Number of links: '}</Typography>\n              <Slider\n                title=\"Change the RMSD cutoff\"\n                value={linksLimit}\n                aria-labelledby=\"continuous-slider\"\n                onChange={(_, value) => { setLinksLimit(value) }}\n                min={0}\n                max={availableLinks}\n                valueLabelDisplay=\"auto\"\n                className={style.wide75}\n              />\n            </div>\n          </CardContent>\n        </div>\n      </Card>\n      <ViewerSpawner\n        // Set the new viewer or null if there is not a proper \"selected\" value\n        newViewer={selectedFrame\n          ? { requestedFrame: selectedFrame }\n          : null\n        }\n        // If the nailed/closed viewer is the current viewer then reset the 'selected'\n        onNail={viewer =>\n          setSelectedFrame(previous => {\n            if (viewer.requestedFrame === previous) return null;\n            else return previous;\n          })\n        }\n        onClose={viewer =>\n          setSelectedFrame(previous => {\n            if (viewer.requestedFrame === previous) return null;\n            else return previous;\n          })\n        }\n      />\n    </>\n  );\n};\n\nexport default Clusters;\n","// extracted by mini-css-extract-plugin\nexport default {\"rnd\":\"style_rnd__Txifm\",\"floating-card\":\"style_floating-card__HHpby\"};","import React, { lazy, Suspense, useRef, useState } from 'react';\n\n// Rnd is the resizable and draggable system where the ngl viewer is placed\nimport { Rnd } from 'react-rnd';\n\nimport Card from '../animated-card';\n\nimport style from './style.module.css';\n\nconst ViewerWithControls = lazy(() =>\n  import(\n    /* webpackChunkName: 'viewer-with-controls' */ '../viewer-with-controls'\n  ),\n);\n\n// Minimal ngl window height\nconst MIN_NGL_DIMENSION = 150;\n\n// Counter to get always the maximum zIndex\n// This is useful to set a new or currently dragged/resized ngl window over the others\nlet maxZ = 0;\nconst nextZ = () => {\n  maxZ += 1;\n  return maxZ;\n};\n\n// This function spawns all the NGL viewers needed\n// i.e. one viewer with the requested 'props' and all previous viewers which have been nailed\nconst ViewerSpawner = ({ newViewer, nailing = true, onNail, onClose }) => {\n  // Store here all nailed NGL viewers\n  const [nailedViewers, setNailedViewers] = useState([]);\n\n  // Set the viewers as the nailed viewers and the new viewer\n  const viewers = [...nailedViewers];\n\n  // Keep listed all arrays which have been used (i.e. ngl viewers which have been nailed or closed)\n  const usedIds = useRef([]);\n\n  if (newViewer) {\n    // Find a new suitable Id that meet 2 conditions:\n    // - There is never 2 viewers with the same id, so we avoid errors\n    // - If we pick diferent frames in the graph without nailing anything, the current viewer has always the same id\n    // (This way the current viewer does not appear in the origin position every time)\n    const getNewId = () => {\n      let id = 0;\n      while (id < 999) {\n        if (usedIds.current.indexOf(id) === -1) return id;\n        id += 1;\n      }\n      console.error('Maximum number of viewers reached');\n    };\n\n    // Set a unique id for this props based in the last nailed viewer\n    newViewer.id = getNewId();\n    newViewer.close = () => {\n      if (nailing) {\n        setNailedViewers(nailed => {\n          const newNailed = [...nailed];\n          const index = nailed.indexOf(newViewer);\n          if (index !== -1) newNailed.splice(index, 1);\n          return newNailed;\n        });\n      }\n      if (onClose) onClose(newViewer);\n      usedIds.current.push(newViewer.id);\n    };\n    // If the nailer function is passed, add the logic for the viewer to be nailed further\n    if (nailing)\n      newViewer.nail = () => {\n        setNailedViewers(nailed => [...nailed, newViewer]);\n        if (onNail) onNail(newViewer);\n        usedIds.current.push(newViewer.id);\n      };\n    // Add the current viewer to the viewers list\n    viewers.push(newViewer);\n  }\n\n  // Render a viewer for each prop. Use the 'selected' parameter as unique id\n  return viewers.map(viewer => <NGLViewerInDND key={viewer.id} {...viewer} />);\n};\n\n// This component render a small NGL viewer\n// It is called when user clicks in a point in the projections component\n// Also it is called by the generic analysis page\nconst NGLViewerInDND = props => {\n  // Set a reference for the viewer\n  // If a reference is passed among the viewer arguments then use it instead\n  const viewerRef = props.viewerRef || useRef(null);\n\n  // Set the default position and size\n  const [place, setPlace] = useState(() => {\n    // Set an extra margin\n    const MARGIN = 20;\n    // Get the screen pixel sizes and vertical scroll position\n    const { innerWidth, innerHeight, scrollY } = window;\n    // The spawned elements are parented to the 'main' element, not to the 'body'\n    // We have to take this in count, since the header adds an extra offset in vertical position\n    const offsetHeight = document.querySelector('main').offsetTop;\n    // Set a reasonable dimension for the ngl window\n    const dimension = Math.max(\n      Math.min(innerWidth / 4, innerHeight / 4),\n      MIN_NGL_DIMENSION,\n    );\n    const reasonableHeight = 1.5 * dimension;\n    const reasonableWidth = 2 * dimension;\n    return {\n      // WARNING: If you set the width as 'auto' the window stays very wide when exiting fullscreen\n      width: reasonableWidth, // Let the Rnd logic set the width automatically\n      height: reasonableHeight, // Reasonable height\n      x: 0, // Left border\n      y: innerHeight - offsetHeight - reasonableHeight - MARGIN + scrollY, // Bottom border\n    };\n  });\n\n  return (\n    // Rnd is the draggable and resizable system where the ngl viewer is placed\n    <Rnd\n      position={{ x: place.x, y: place.y }}\n      size={{ width: place.width, height: place.height }}\n      // Update the zIndex to make this window the first visible\n      style={{ zIndex: nextZ() }}\n      className={style.rnd}\n      data-rnd\n      // Limits where the window can be dragged/resized to\n      // WARNING: bounds=\"main\" is problematic since the window may appear out of bounds\n      // WARNING: Then when it is moved for the first time it jumps inside the bonds, not elegant\n      bounds=\"window\"\n      // Prevent the mouse to drag/resize the window when it is over specific elements\n      cancel=\"canvas, [data-popover], #preventDragSize, .prevent-drag\"\n      // On drag/resize starts we do not change anything, but use the hook to re-render this component\n      // The Z Index is updated and the selected window becomes the first in the z axis automatically\n      // WARNING: Drag functions are also called when you just click (e.g. clicking buttons)\n      onDragStart={() => {\n        setPlace({ ...place });\n      }}\n      onResizeStart={() => {\n        setPlace({ ...place });\n      }}\n      onDragStop={(e, d) => {\n        // Use this to reject some bugged event calls: e.g. the frames number selector\n        if (e.layerX === 0 && e.layerY === 0) return;\n        // We re-render only if the new position does not equal the old position\n        if (place.x !== d.x || place.y !== d.y)\n          setPlace({\n            ...place,\n            x: d.x,\n            y: d.y,\n          });\n      }}\n      // Re-adapt the viewer and update the position/size when the window is resized\n      onResize={() => viewerRef.current && viewerRef.current.autoResize()}\n      onResizeStop={(e, direction, ref, delta, position) => {\n        setPlace({\n          width: ref.style.width,\n          height: ref.style.height,\n          ...position,\n        });\n        // if (!viewerRef.current) return;\n        // viewerRef.current.autoResize();\n        // viewerRef.current.autoResize.flush();\n      }}\n    >\n      <Card className={style['floating-card']} elevation={4}>\n        <Suspense fallback={null}>\n          <ViewerWithControls\n            className={style['floating-card']}\n            ref={viewerRef}\n            startsPlaying={false}\n            {...props}\n          />\n        </Suspense>\n      </Card>\n    </Rnd>\n  );\n};\n\nexport default ViewerSpawner;\n","// extracted by mini-css-extract-plugin\nexport default {\"graph\":\"style_graph__Q1ja5\",\"horizontal\":\"style_horizontal__makgF\",\"wide25\":\"style_wide25__KqdCT\",\"wide75\":\"style_wide75__p0NKz\",\"enabled\":\"style_enabled__ndc27\",\"disabled\":\"style_disabled__s5ohr\"};"],"names":["KEYFRAMES","opacity","reducedMotion","transform","ANIMATION_OPTIONS","fill","easing","duration","forwardRef","_ref","ref","overrideComponent","props","containerRef","useRef","useLayoutEffect","node","current","firstElementChild","animate","index","Array","from","document","querySelectorAll","findIndex","section","animation","delay","cancel","Component","Card","_jsx","className","style","children","component","label","options","selection","setter","_jsxs","CardContent","Typography","variant","Select","value","onChange","event","target","map","option","i","MenuItem","MarkovGraph","lazy","Clusters","accessionAndMdNumber","files","useContext","ProjectCtx","selectedFrame","setSelectedFrame","useState","nodesLimit","setNodesLimit","linksLimit","setLinksLimit","selectedAnalysis","setSelectedAnalysis","clustersSummary","useAPI","BASE_PATH_PROJECTS","availableAnalyses","useMemo","payload","analysis","name","selectedAnalysisName","find","Error","selectedAnalysisURL","clustersAnalysis","clustersDataRef","clustersData","screenshotsUrls","screenshotHeaderNames","replace","filter","filename","includes","sort","screenshotsResponses","useBatchAPI","screenshotLoading","some","response","loading","screenshotsRef","Buffer","toString","screenshots","graphData","availableLinks","clusterIndices","version","step","clusters","forEach","cluster","filteredClusters","nodeSortingFunction","clusterA","clusterB","frames","length","slice","mainFrames","main","totalFrames","reduce","acc","curr","populations","maximumPopulation","nodes","population","area","id","radius","Math","sqrt","PI","text","round","push","links","availableTransitions","transitions","transition","to","sortedTransitions","transitionSortingFunction","transitionA","transitionB","count","allCounts","maxCount","minCount","normalizer","source","indexOf","width","oppositeLink","link","Version","displayedScreenshots","handleNodeSelect","useCallback","newFrame","equals","_Fragment","Selector","disabled","enabled","data","images","selectedNodeValue","onSelectNode","graph","horizontal","wide25","Slider","title","_","min","max","valueLabelDisplay","wide75","ViewerSpawner","newViewer","requestedFrame","onNail","viewer","previous","onClose","Loading","error","ViewerWithControls","maxZ","NGLViewerInDND","viewerRef","place","setPlace","innerWidth","innerHeight","scrollY","window","offsetHeight","querySelector","offsetTop","dimension","reasonableHeight","height","x","y","Rnd","position","size","zIndex","bounds","onDragStart","onResizeStart","onDragStop","e","d","layerX","layerY","onResize","autoResize","onResizeStop","direction","delta","elevation","Suspense","fallback","startsPlaying","nailing","nailedViewers","setNailedViewers","viewers","usedIds","getNewId","console","close","nailed","newNailed","splice","nail"],"sourceRoot":""}