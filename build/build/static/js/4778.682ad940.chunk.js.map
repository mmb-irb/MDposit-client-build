{"version":3,"file":"static/js/4778.682ad940.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/TableFooter/tableFooterClasses.js","../node_modules/@mui/material/TableFooter/TableFooter.js","webpack://mdposit/./src/components/animated-card/style.module.css?d4d9","components/animated-card/index.js","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js","components/ngl-viewer/use-epitopes-representations/index.js","../node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@mui/material/internal/svg-icons/CheckBox.js","../node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@mui/material/Checkbox/checkboxClasses.js","../node_modules/@mui/material/Checkbox/Checkbox.js","pages/accession/epitopes/index.js","webpack://mdposit/./src/pages/accession/epitopes/style.module.css?4bd1","hooks/use-colors/index.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableFooterUtilityClass(slot) {\n  return generateUtilityClass('MuiTableFooter', slot);\n}\nconst tableFooterClasses = generateUtilityClasses('MuiTableFooter', ['root']);\nexport default tableFooterClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled from '../styles/styled';\nimport { getTableFooterUtilityClass } from './tableFooterClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTableFooterUtilityClass, classes);\n};\nconst TableFooterRoot = styled('tfoot', {\n  name: 'MuiTableFooter',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  display: 'table-footer-group'\n});\nconst tablelvl2 = {\n  variant: 'footer'\n};\nconst defaultComponent = 'tfoot';\nconst TableFooter = /*#__PURE__*/React.forwardRef(function TableFooter(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTableFooter'\n  });\n  const {\n      className,\n      component = defaultComponent\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(Tablelvl2Context.Provider, {\n    value: tablelvl2,\n    children: /*#__PURE__*/_jsx(TableFooterRoot, _extends({\n      as: component,\n      className: clsx(classes.root, className),\n      ref: ref,\n      role: component === defaultComponent ? null : 'rowgroup',\n      ownerState: ownerState\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TableFooter.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableFooter;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__M9GCG\"};","import React, { useLayoutEffect, useRef, forwardRef } from 'react';\nimport { Card } from '@mui/material';\n\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nconst KEYFRAMES = { opacity: [0, 1] };\n\nif (!reducedMotion()) {\n  KEYFRAMES.transform = ['translateY(50px)', 'translateY(0)'];\n}\n\nconst ANIMATION_OPTIONS = {\n  fill: 'both',\n  easing: 'cubic-bezier(0, .99, .56, 1.1)',\n  duration: 500,\n};\n\n// Make the card appear and slide softly from down to up when the page is loaded\nconst AnimatedCard = forwardRef(({ overrideComponent, ...props }, ref) => {\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const node = containerRef.current && containerRef.current.firstElementChild;\n    if (!(node && node.animate)) return;\n\n    const index = Array.from(\n      document.querySelectorAll('main section'),\n    ).findIndex(section => node === section);\n\n    const animation = node.animate(KEYFRAMES, {\n      ...ANIMATION_OPTIONS,\n      delay: index * 150,\n    });\n\n    return () => animation.cancel();\n  }, []);\n\n  const Component = overrideComponent ? 'section' : Card;\n\n  return (\n    <div ref={containerRef} className={style.container}>\n      <Component component=\"section\" {...props} ref={ref} />\n    </div>\n  );\n});\n\nexport default AnimatedCard;\n","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n  const {\n      className,\n      raised = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    raised\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;","import { useContext, useMemo } from 'react';\n\nimport { ProjectCtx } from '../../../contexts';\n\n// Use this hook to get the memoized NGL default representations\nconst useEpitopesRepresentations = () => {\n  // Get the current project data\n  const { topology } = useContext(ProjectCtx);\n  // Set the representations for the NGL viewer\n  const epitopesRepresentations = useMemo(() => {\n    if (!topology) return;\n    // Check that at least one of the protein references has epitopes\n    const anyReferenceEpitopes = topology.proteinReferences.some(\n      reference => !!reference.epitopes,\n    );\n    if (!anyReferenceEpitopes) return;\n    // Get the residues on each reference epitopes in the current topology numeration\n    const mappedResiduesPerReference = topology.proteinReferences.map(reference => {\n      // Get the reference name and epitopes\n      const referenceId = reference.uniprot;\n      const referenceEpitopes = reference.epitopes;\n      if (!referenceEpitopes) return [];\n      // Save all epitope residues together and eliminate duplicates\n      const epitopeResidues = Object.values(referenceEpitopes).map(\n        epitope => epitope.residues,\n      );\n      const allResidues = [].concat.apply([], epitopeResidues);\n      const uniqueResidues = Array.from(new Set(allResidues));\n      const mappedResidues = topology.getReferenceResidueIndices(\n        referenceId,\n        uniqueResidues,\n      );\n      if (!mappedResidues) return [];\n      return mappedResidues;\n    });\n    // Join all previous mapped residues together\n    const allMappedResidues = [].concat.apply(\n      [],\n      Object.values(mappedResiduesPerReference),\n    );\n    // Transform mapped residues indices to an NGL selection\n    const { rangedSelection, small } = topology.residueIndices2Ngl(\n      allMappedResidues,\n    );\n    const reps = [\n      {\n        name: 'Epitopes',\n        selection: rangedSelection || 'none',\n        type: small ? 'licorice' : 'cartoon',\n        color: 'purple',\n      },\n    ];\n    return reps;\n  }, [topology]);\n\n  return epitopesRepresentations;\n};\n\nexport default useEpitopesRepresentations;\n","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCheckboxUtilityClass(slot) {\n  return generateUtilityClass('MuiCheckbox', slot);\n}\nconst checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium']);\nexport default checkboxClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checkedIcon\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport checkboxClasses, { getCheckboxUtilityClass } from './checkboxClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    indeterminate,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`, `size${capitalize(size)}`]\n  };\n  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\nconst CheckboxRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiCheckbox',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.indeterminate && styles.indeterminate, styles[`size${capitalize(ownerState.size)}`], ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  color: (theme.vars || theme).palette.text.secondary\n}, !ownerState.disableRipple && {\n  '&:hover': {\n    backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  }\n}, ownerState.color !== 'default' && {\n  [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {\n    color: (theme.vars || theme).palette[ownerState.color].main\n  },\n  [`&.${checkboxClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  }\n}));\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(CheckBoxIcon, {});\nconst defaultIcon = /*#__PURE__*/_jsx(CheckBoxOutlineBlankIcon, {});\nconst defaultIndeterminateIcon = /*#__PURE__*/_jsx(IndeterminateCheckBoxIcon, {});\nconst Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(inProps, ref) {\n  var _icon$props$fontSize, _indeterminateIcon$pr;\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCheckbox'\n  });\n  const {\n      checkedIcon = defaultCheckedIcon,\n      color = 'primary',\n      icon: iconProp = defaultIcon,\n      indeterminate = false,\n      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,\n      inputProps,\n      size = 'medium',\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const icon = indeterminate ? indeterminateIconProp : iconProp;\n  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n  const ownerState = _extends({}, props, {\n    color,\n    indeterminate,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CheckboxRoot, _extends({\n    type: \"checkbox\",\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size\n    }),\n    ownerState: ownerState,\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other, {\n    classes: classes\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckBoxIcon />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <CheckBoxOutlineBlankIcon />\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate: PropTypes.bool,\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateCheckBoxIcon />\n   */\n  indeterminateIcon: PropTypes.node,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense checkbox styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Checkbox;","import React, {\n  lazy,\n  useContext,\n  useState,\n  useRef,\n  useMemo,\n  useCallback,\n} from 'react';\n// A hook to track whenever some element is on screen\nimport { useInView } from 'react-intersection-observer';\n\nimport {\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  TableFooter,\n  TablePagination,\n  FormControlLabel,\n  Checkbox,\n  Typography,\n} from '@mui/material';\n\nimport Card from '../../../components/animated-card';\nimport ViewerWithControls from '../../../components/viewer-with-controls';\nimport useDefaultRepresentations from '../../../components/ngl-viewer/use-default-representations';\n\nimport style from './style.module.css';\n\nimport { ProjectCtx } from '../../../contexts';\n\nimport Loading from '../../../components/loading';\n\nimport useAPI from '../../../hooks/use-api';\n\nimport useColors from '../../../hooks/use-colors';\n\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\n\nimport useEpitopesRepresentations from '../../../components/ngl-viewer/use-epitopes-representations';\n\nconst pdbUrlBase = 'https://www.rcsb.org/structure/';\n\nconst hoveredEpitopeColor = 'yellow';\nconst defaultRepresentationsColor = 'black';\n\nconst dashStyles = [\n  null,\n  '10, 4',\n  '4, 4',\n  '10, 4, 1, 4',\n  '10, 4, 1, 4, 1, 4',\n  '1, 4',\n];\n\nconst rowsPerPageDefault = 10;\nconst rowsPerPageOptions = [10, 25, 50, 100];\n\nconst Graph = lazy(() =>\n  import(/* webpackChunkName: 'graph' */ '../../../components/graph'),\n);\n\n// Define permanent options for the \"useInView\"\nconst useInViewOptions = { triggerOnce: true, rootMargin: '100px' };\n\n// Get a number after rounding to decimals\nconst decimalRound = value => Math.round(value * 10) / 10;\n// Set a function to calculate the average value from a values array\nconst roundedAvg = values => {\n  const sum = values.reduce((pv, cv) => pv + cv, 0);\n  const length = values.length;\n  const average = sum / length;\n  const rounded = decimalRound(average);\n  return rounded;\n};\n\nconst Epitopes = () => {\n  // Track if the NGL viewer\n  // The status isNglVisible is returned true/false when the element is in/out the screen respectively\n  const [nglRef, isNglVisible] = useInView(useInViewOptions);\n\n  // Get the current project metadata\n  const {\n    accessionAndMdNumber,\n    metadata,\n    proteinReferences,\n    topology: topologyManager,\n  } = useContext(ProjectCtx);\n\n  // Get the references data\n  const epitopes = useMemo(() => {\n    if (!proteinReferences) return [];\n    const epitopes = [];\n    proteinReferences.forEach(reference => {\n      const referenceEpitopes = reference.epitopes;\n      if (!referenceEpitopes) return;\n      const formattedEpitopes = Object.entries(referenceEpitopes).map(\n        ([name, epitope]) => [\n          reference.uniprot,\n          name,\n          epitope.residues,\n          epitope.mas,\n        ],\n      );\n      epitopes.push(...formattedEpitopes);\n    });\n    return epitopes;\n  }, [proteinReferences]);\n\n  // This blockRef is a workaround to avoid selecting a row when clicking on the checkbox\n  const blockRef = useRef(null);\n\n  // Set a ref to the table to access its scroll parameters\n  const tableRef = useRef(null);\n  // Set a ref to the ngl which allows access to its exposed methods\n  const viewerRef = useRef(null);\n  // Set a ref to the graph which allows access to its exposed methods\n  const graphRef = useRef(null);\n\n  // Use the colors hook\n  const [getColor, freeColor] = useColors();\n\n  // Track which epitope is beeing hovered in the list\n  const [showAllEpitopes, setShowAllEpitopes] = useState(false);\n\n  // Track which epitope is beeing hovered in the list\n  const [hoveredEpitope, setHoveredEpitope] = useState(null);\n  // Track which epitope is selected by the user\n  const [selectedEpitopes, setSelectedEpitopes] = useState([]);\n\n  // Table pagination states\n  const [selectedPage, setSelectedPage] = useState(0);\n  const [selectedRowsPerPage, setSelectedRowsPerPage] = useState(\n    rowsPerPageDefault,\n  );\n\n  // Send a request to the API with the url of the rgyr analysis\n  const { loading, payload, error } = useAPI(\n    `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/sasa/`,\n  );\n\n  // Set the epitopes formatted data\n  const {\n    data,\n    epitopesData,\n    frameStep,\n    frameCount,\n    xTooltip,\n  } = useMemo(() => {\n    // Wait for data and metadata to be ready\n    if (!payload || !metadata || !topologyManager || epitopes.length === 0) return {};\n    // Get the main data\n    const data = payload.saspf;\n    // Calculate the frames step of the first residue SAS analysis\n    // All residues must have the same frames step\n    const frameCount = data[0].length;\n    const frameStep =\n      payload.step || Math.floor(metadata.mdFrames / (frameCount - 1));\n    // Set the input objets for the graph\n    const epitopesData = [];\n    epitopes.forEach(\n      ([referenceId, epitopeName, epitopeResidues, epitopeSurface]) => {\n        // Parse the reference residues list to a mapped NGL selection string\n        const mappedResidues = topologyManager.getReferenceResidueIndices(\n          referenceId,\n          epitopeResidues,\n        );\n        // In case the epitope is not found in the current structure we do not push it\n        if (mappedResidues.length === 0) return {};\n        const chainedResidues = topologyManager.byChains(mappedResidues);\n        const chains = Object.keys(chainedResidues);\n        // Get the SAS values for each residue in each chain\n        const chainedResiduesData = {};\n        Object.entries(chainedResidues).forEach(([chain, residues]) => {\n          const residuesData = residues.map(residueIndex => {\n            const residueData = { saspf: data[residueIndex] };\n            residueData.atoms = topologyManager.getResidueByIndex(residueIndex).atomCount;\n            return residueData;\n          });\n          chainedResiduesData[chain] = residuesData;\n        });\n        // Handle epitope SAS for each chain independently\n        const chainedFramedData = {};\n        const summary = [];\n        Object.entries(chainedResiduesData).forEach(([chain, residuesData]) => {\n          // It may happen that the epitope is found several times in a single chain\n          // In this case we have to found hoy many times it is there in order to multiply de epitope surface\n          // WARNING: If any epitope is only partially in the structure then we are introducing an error with this multiplication\n          // WARNING: We must then mark the percent to warn the user\n          const epitopeCoverage = residuesData.length / epitopeResidues.length;\n          const fullEpitopeCoverage = epitopeCoverage % 1 === 0;\n          const totalEpitopeSurface = epitopeSurface * epitopeCoverage;\n          // Add SAS values along frames for each chain\n          const sasPerFrame = [];\n          const exposurePerFrame = [];\n          for (let i = 0; i < frameCount; i++) {\n            const residuesSAS = residuesData.map(\n              residue => residue.saspf[i] * residue.atoms,\n            );\n            const totalSAS = residuesSAS.reduce((a, b) => a + b, 0);\n            sasPerFrame.push(totalSAS);\n            const exposure = (totalSAS / totalEpitopeSurface) * 100;\n            exposurePerFrame.push(exposure);\n          }\n          // Calculate the averages of each chain and prepare a string summary for display\n          const averageSAS = roundedAvg(sasPerFrame);\n          const averageExposure = decimalRound(\n            (averageSAS / totalEpitopeSurface) * 100,\n          );\n          const chainSummary = `${chain}:${averageSAS} Å² (${averageExposure}%)${\n            fullEpitopeCoverage ? '' : '*'\n          }`;\n          summary.push(chainSummary);\n          //chainedFramedData[chain] = sasPerFrame;\n          chainedFramedData[chain] = exposurePerFrame;\n        });\n        // Get also the NGL selection from the mapped residues\n        // This is not separated in chains so the selection is for all chains together\n        const {\n          rangedSelection,\n          small,\n        } = topologyManager.residueIndices2Ngl(mappedResidues);\n        epitopesData.push({\n          name: epitopeName,\n          data: chainedFramedData,\n          selection: rangedSelection,\n          small: small,\n          chains: chains,\n          summary: summary.join('\\n'),\n        });\n      },\n    );\n\n    // Instantiate the selected epitopes state using the number of epitopes data\n    setSelectedEpitopes(new Array(epitopesData.length).fill(null));\n\n    // Set the tooltip generator for the graph hover\n    const xTooltip = xValue => 'frame ' + xValue;\n\n    return { data, epitopesData, frameStep, frameCount, xTooltip };\n  }, [payload, metadata, topologyManager, epitopes]);\n\n  // Use this hook to get the memoized NGL default representations\n  const defaultRepresentations = useDefaultRepresentations();\n  // Use this hook to get the memoized NGL epitopes representations\n  const allEpitopesRepresentations = useEpitopesRepresentations();\n\n  // Set the component to be passed to the viewer\n  const components = useMemo(() => {\n    if (!accessionAndMdNumber) return;\n    // Load the required frames from the main trajectory\n    const trajectoryUrl = `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/files/trajectory`;\n    const mainURL = `${trajectoryUrl}?frames=1:${metadata.mdFrames}:${frameStep}`;\n    // Set the components by setting a custom component with an extended trajectory\n    return [ { trajectoryURLs: [mainURL] } ];\n  }, [accessionAndMdNumber, metadata, frameStep]);\n\n  // Define the representations to be displayed in the viewer\n  const [ representations, setRepresentations ] = useState(null);\n\n  // Set or update the viewer representations\n  useMemo(() => {\n    // Wait until we have both the default and the all epitopes representations\n    if (!defaultRepresentations || defaultRepresentations.length === 0) return;\n    if (!allEpitopesRepresentations || allEpitopesRepresentations.length === 0) return;\n    // Wait until we have epitopes data\n    if (!epitopesData) return;\n    // Set the representations\n    setRepresentations(previousRepresentations => {\n      // If this is the first time we set the representations then set some default values\n      if (previousRepresentations === null) {\n        const newRepresentations = [];\n        // Reduce the opacity of all default representations and set their color as black\n        defaultRepresentations.forEach(representation => {\n          representation.opacity = 0.3;\n          representation.color = defaultRepresentationsColor;\n          newRepresentations.push(representation);\n        });\n        // In case there are selected epitopes add an extra representation for each one\n        selectedEpitopes.forEach((color, i) => {\n          if (color === null) return;\n          const epitopeData = epitopesData[i];\n          const newRepresentation = {\n            name: epitopeData.name,\n            selection: epitopeData.selection,\n            type: epitopeData.small ? 'licorice' : 'cartoon',\n            color: color,\n          };\n          newRepresentations.push(newRepresentation);\n        });\n        // In case the showAllEpitopes is marked show the all epitopes representation\n        if (showAllEpitopes) newRepresentations.push(...allEpitopesRepresentations);\n        return newRepresentations;\n      }\n      // If we already have previous representations then update them\n      const newRepresentations = [];\n      // Add default representations as they are\n      // Note that we used originals so they will remain the same, even if they the user modified them\n      newRepresentations.push(...defaultRepresentations);\n      // Set epitope representations using previous representations when possible\n      // In case there are selected epitopes add an extra representation for each one\n      // Note that epitopes which are no longer selected will have no representation\n      selectedEpitopes.forEach((color, i) => {\n        if (color === null) return;\n        const epitopeData = epitopesData[i];\n        // If there is a previous representation for this epitope then use it\n        const previous = previousRepresentations.find(\n          previousRepresentation => previousRepresentation.name ===  epitopeData.name);\n        if (previous) return newRepresentations.push(previous);\n        // Otherwise set a new representation with default values\n        const newRepresentation = {\n          name: epitopeData.name,\n          selection: epitopeData.selection,\n          type: epitopeData.small ? 'licorice' : 'cartoon',\n          color: color,\n        };\n        newRepresentations.push(newRepresentation);\n      });\n      // In case the showAllEpitopes is marked then add the all epitopes representations as they are\n      // Note that we used originals so they will remain the same, even if they the user modified them\n      if (showAllEpitopes) newRepresentations.push(...allEpitopesRepresentations);\n      // Keep custom representations (added by the user)\n      const customRepresentations = previousRepresentations.filter(rep => rep.custom);\n      newRepresentations.push(...customRepresentations);\n      // Update the state\n      return newRepresentations;\n    });\n    \n  }, [\n    epitopesData,\n    defaultRepresentations,\n    allEpitopesRepresentations,\n    selectedEpitopes,\n    showAllEpitopes,\n  ]);\n\n  // Set a fast representation for the hoverd epitope\n  const snapRepresentations = useMemo(() => {\n    if (!epitopesData) return;\n    if (hoveredEpitope === null) return;\n    const epitopeData = epitopesData[hoveredEpitope];\n    const newRepresentation = {\n      name: epitopeData.name,\n      selection: epitopeData.selection,\n      type: 'spacefill',\n      color: hoveredEpitopeColor,\n      opacity: 0.15,\n    };\n    return [ newRepresentation ];\n  }, [epitopesData, hoveredEpitope]);\n\n  // Set the graph parameters\n  const graphInputData = useMemo(() => {\n    // Wait for data and metadata to be ready\n    if (!data || !metadata || !epitopesData) return;\n\n    // Set the input objets for the graph and when they must be displayed\n    const graphInputData = {};\n    epitopesData.forEach(({ name, data }, i) => {\n      if (!selectedEpitopes[i]) return;\n      const color = selectedEpitopes[i];\n      // Graph\n      Object.entries(data).forEach(([chain, chainData], index) => {\n        const tag = name + '-' + chain;\n        const dash = dashStyles[index];\n        graphInputData[tag] = {\n          data: chainData,\n          color: color,\n          dash: dash,\n        };\n      });\n    });\n\n    return graphInputData;\n  }, [data, metadata, epitopesData, selectedEpitopes]);\n\n  // When the user clicks on the graph\n  const handleFrameSelection = useCallback(frame => {\n    viewerRef.current.togglePlaying(false);\n    viewerRef.current.currentFrame = frame;\n  }, []);\n\n  // When the ngl frame changes\n  const handleFrameProgress = useCallback(\n    progress => {\n      // Process is a float number which ranges from 0 to 1\n      // Guess the frame number which belongs to the process\n      // WARNING: The follwoing multiplication must return always a whole number\n      // WARNING: This 'round' is only for the float problem (e.g. 57 = 56.9999...)\n      const frame = Math.round(progress * (frameCount - 1));\n      graphRef.current.marks = [\n        {\n          x: frame,\n          attr: { fill: '#c8c8c8' },\n        },\n      ];\n    },\n    [frameCount],\n  );\n\n  // Render loading or error messages according with the API response\n  if (loading) return <Loading />;\n  else if (error) return error.toString();\n  else if (!payload) return 'Something bad happened';\n\n  if (!topologyManager || !proteinReferences) return <Loading />;\n\n  // This data was added manually to the spike reference\n  // If this is missing you may be not in the covid database or the reference has been overwritten\n  if (epitopes.length === 0) return 'Missing epitopes data';\n\n  const firstEpitopeIndex = selectedPage * selectedRowsPerPage;\n  const lastEpitopeIndex = (selectedPage + 1) * selectedRowsPerPage;\n\n  return (\n    <>\n      <Card className={style.tablecard}>\n        <div className={style.paper} ref={tableRef}>\n          <Table stickyHeader size=\"small\">\n            <TableHead>\n              <TableRow>\n                <TableCell key={0}>\n                  {\n                    <FormControlLabel\n                      onChange={() => setShowAllEpitopes(previous => !previous)}\n                      control={<Checkbox checked={showAllEpitopes} />}\n                      label={'Epitopes'}\n                    />\n                  }\n                </TableCell>\n                <TableCell key={1}>{'Average SAS and exposure'}</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {epitopesData\n                .slice(firstEpitopeIndex, lastEpitopeIndex)\n                .map(({ name: epitopeName, summary }, e) => {\n                  const num = selectedPage * selectedRowsPerPage + e;\n                  return (\n                    <TableRow\n                      key={epitopeName}\n                      role=\"checkbox\"\n                      className={\n                        num === hoveredEpitope ? style.selectedrow : style.row\n                      }\n                      onMouseEnter={() => setHoveredEpitope(num)}\n                      onMouseLeave={() =>\n                        setHoveredEpitope(previous =>\n                          previous === num ? null : previous,\n                        )\n                      }\n                    >\n                      {[\n                        <FormControlLabel\n                          data-key={epitopeName}\n                          key={epitopeName}\n                          onMouseOver={() => {\n                            blockRef.current = num;\n                          }}\n                          onMouseOut={() => {\n                            blockRef.current = null;\n                          }}\n                          onChange={() =>\n                            setSelectedEpitopes(previous => {\n                              if (!previous[num]) previous[num] = getColor();\n                              else {\n                                freeColor(previous[num]);\n                                previous[num] = null;\n                              }\n                              return [...previous];\n                            })\n                          }\n                          control={\n                            <Checkbox\n                              checked={selectedEpitopes[num] ? true : false}\n                              style={{\n                                color: selectedEpitopes[num]\n                                  ? selectedEpitopes[num]\n                                  : 'black',\n                              }}\n                              inputProps={{ 'data-key': epitopeName }}\n                            />\n                          }\n                          label={\n                            <a\n                              href={pdbUrlBase + epitopeName}\n                              target=\"_blank\"\n                              rel=\"noreferrer noopener\"\n                            >\n                              {epitopeName}\n                            </a>\n                          }\n                        />,\n                        summary,\n                      ].map(cell => (\n                        <TableCell key={cell}>{cell}</TableCell>\n                      ))}\n                    </TableRow>\n                  );\n                })}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                <TablePagination\n                  rowsPerPageOptions={rowsPerPageOptions} // Optional numbers of rows displayed in each page. It can be modified by the user.\n                  colSpan={4} // Set the anchor of columns which is taken as a reference for the horizontal position of the footer\n                  count={epitopesData.length} // Total number of rows\n                  rowsPerPage={selectedRowsPerPage} // The actual number of rows displayed\n                  page={selectedPage} // The actual page\n                  onPageChange={(_, page) => {\n                    setSelectedPage(page);\n                    // Scroll to the top of the table\n                    tableRef.current.scrollTop = 0;\n                  }}\n                  onRowsPerPageChange={({ target: { value } }) => {\n                    setSelectedRowsPerPage(value);\n                    setSelectedPage(0);\n                  }}\n                />\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </div>\n      </Card>\n      <Card className={style.nglcard} ref={nglRef}>\n        {/* Render the NGL viewer when it is on screen*/}\n        {isNglVisible ? (\n          <ViewerWithControls\n            className={style.container}\n            startingComponents={components}\n            representationsState={[representations, setRepresentations]}\n            snapRepresentations={snapRepresentations}\n            onProgress={handleFrameProgress}\n            ref={viewerRef}\n          />\n        ) : (\n          <div style={{ height: '50vh' }} />\n        )}\n      </Card>\n      <Card className={style.graph}>\n        {selectedEpitopes.every(epitope => epitope === null) && (\n          <div className={style['graph-placeholder']}>\n            <Typography variant=\"h6\">No epitope selected</Typography>\n          </div>\n        )}\n        <Graph\n          yData={graphInputData}\n          step={frameStep}\n          xTooltip={xTooltip}\n          xScaleFactor={1}\n          xAxisLabel={'Frames'}\n          yAxisLabel={`Exposure (%)`}\n          showPrecisionSlider={false}\n          blockMaxPrecision={true}\n          roundcents={false}\n          onSelect={handleFrameSelection}\n          displayLegend\n          className={style.graph}\n          ref={graphRef}\n        />\n      </Card>\n    </>\n  );\n};\n\nexport default Epitopes;\n","// extracted by mini-css-extract-plugin\nexport default {\"paper\":\"style_paper__INgwI\",\"tablecard\":\"style_tablecard__04qFr\",\"nglcard\":\"style_nglcard__L-RSO\",\"margined\":\"style_margined__SQ+iA\",\"container\":\"style_container__UgV8T\",\"selectedrow\":\"style_selectedrow__vdp-o\",\"row\":\"style_row__6TSz1\",\"graph\":\"style_graph__IyyKm\",\"graph-placeholder\":\"style_graph-placeholder__ZJ5fh\"};","import { useMemo, useRef } from 'react';\n\n// These colors are used to mark different selections\n// When all colors are used the next selections are marked in black\nconst defaultAvailableColors = ['red', 'green', 'blue', 'orange', 'purple'];\n\n// This hook is a special getter of available colors that tracks which colors have been already got\n// This way you will not get the same color twice\n// In addition 2 more functions are returned to free a specific color or all colors\nconst useColors = (\n  availableColors = defaultAvailableColors,\n  overColor = 'black',\n) => {\n  // Track used colors\n  const usedColors = useRef([]);\n\n  // Return a color from the asigned colors list which has not been given yet\n  return useMemo(() => {\n    const getColor = () => {\n      for (const color of availableColors) {\n        const index = usedColors.current.indexOf(color);\n        if (index === -1) {\n          usedColors.current.push(color);\n          return color;\n        }\n      }\n      return overColor;\n    };\n    // Consider the specified color as available to be given again\n    const freeColor = color => {\n      if (color === overColor) return;\n      const index = usedColors.current.indexOf(color);\n      if (index === -1) throw new Error(`Color ${color} is not used`);\n      usedColors.current.splice(index, 1);\n    };\n\n    // Consider all colors as available to be given again\n    const freeAllColors = () => {\n      usedColors.current = [];\n    };\n    return [getColor, freeColor, freeAllColors];\n  }, [availableColors, overColor]);\n};\n\nexport default useColors;\n"],"names":["getTableFooterUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","TableFooterRoot","styled","name","overridesResolver","props","styles","root","display","tablelvl2","variant","defaultComponent","React","inProps","ref","useDefaultProps","className","component","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","_jsx","Tablelvl2Context","Provider","value","children","as","clsx","role","KEYFRAMES","opacity","reducedMotion","transform","ANIMATION_OPTIONS","fill","easing","duration","forwardRef","_ref","overrideComponent","containerRef","useRef","useLayoutEffect","node","current","firstElementChild","animate","index","Array","from","document","querySelectorAll","findIndex","section","animation","delay","cancel","Component","Card","style","getCardUtilityClass","CardRoot","Paper","overflow","raised","elevation","undefined","useEpitopesRepresentations","topology","useContext","ProjectCtx","useMemo","proteinReferences","some","reference","epitopes","mappedResiduesPerReference","map","referenceId","uniprot","referenceEpitopes","epitopeResidues","Object","values","epitope","residues","allResidues","concat","apply","uniqueResidues","Set","mappedResidues","getReferenceResidueIndices","allMappedResidues","rangedSelection","small","residueIndices2Ngl","selection","type","color","createSvgIcon","d","getCheckboxUtilityClass","CheckboxRoot","SwitchBase","shouldForwardProp","prop","rootShouldForwardProp","indeterminate","capitalize","size","theme","vars","palette","text","secondary","disableRipple","backgroundColor","action","activeChannel","mainChannel","hoverOpacity","alpha","active","main","checkboxClasses","checked","disabled","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","_icon$props$fontSize","_indeterminateIcon$pr","checkedIcon","icon","iconProp","indeterminateIcon","indeterminateIconProp","inputProps","slots","composedClasses","fontSize","dashStyles","rowsPerPageOptions","Graph","lazy","useInViewOptions","triggerOnce","rootMargin","decimalRound","Math","round","Epitopes","nglRef","isNglVisible","useInView","accessionAndMdNumber","metadata","topologyManager","forEach","formattedEpitopes","entries","mas","push","blockRef","tableRef","viewerRef","graphRef","getColor","freeColor","useColors","showAllEpitopes","setShowAllEpitopes","useState","hoveredEpitope","setHoveredEpitope","selectedEpitopes","setSelectedEpitopes","selectedPage","setSelectedPage","selectedRowsPerPage","setSelectedRowsPerPage","loading","payload","error","useAPI","BASE_PATH_PROJECTS","data","epitopesData","frameStep","frameCount","xTooltip","length","saspf","step","floor","mdFrames","_ref2","epitopeName","epitopeSurface","chainedResidues","byChains","chains","keys","chainedResiduesData","_ref3","chain","residuesData","residueIndex","residueData","atoms","getResidueByIndex","atomCount","chainedFramedData","summary","_ref4","epitopeCoverage","fullEpitopeCoverage","totalEpitopeSurface","sasPerFrame","exposurePerFrame","i","totalSAS","residue","reduce","a","b","exposure","averageSAS","sum","pv","cv","roundedAvg","chainSummary","join","xValue","defaultRepresentations","useDefaultRepresentations","allEpitopesRepresentations","components","trajectoryURLs","representations","setRepresentations","previousRepresentations","newRepresentations","representation","epitopeData","newRepresentation","previous","find","previousRepresentation","customRepresentations","filter","rep","custom","snapRepresentations","graphInputData","_ref5","_ref6","chainData","dash","handleFrameSelection","useCallback","frame","togglePlaying","currentFrame","handleFrameProgress","progress","marks","x","attr","Loading","toString","firstEpitopeIndex","lastEpitopeIndex","_jsxs","_Fragment","tablecard","paper","Table","stickyHeader","TableHead","TableRow","TableCell","FormControlLabel","onChange","control","Checkbox","label","TableBody","slice","_ref7","e","num","selectedrow","row","onMouseEnter","onMouseLeave","onMouseOver","onMouseOut","href","target","rel","cell","TableFooter","TablePagination","colSpan","count","rowsPerPage","page","onPageChange","_","scrollTop","onRowsPerPageChange","_ref8","nglcard","ViewerWithControls","container","startingComponents","representationsState","onProgress","height","graph","every","Typography","yData","xScaleFactor","xAxisLabel","yAxisLabel","showPrecisionSlider","blockMaxPrecision","roundcents","onSelect","displayLegend","defaultAvailableColors","availableColors","arguments","overColor","usedColors","indexOf","Error","splice","freeAllColors"],"sourceRoot":""}