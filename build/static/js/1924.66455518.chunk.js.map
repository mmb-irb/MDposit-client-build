{"version":3,"file":"static/js/1924.66455518.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/interaction-selector/style.module.css?5392","components/interaction-selector/index.js","webpack://mdposit/./src/pages/accession/energies/style.module.css?bb76","webpack://mdposit/./src/components/legend/style.module.css?c59e","components/legend/index.js","pages/accession/energies/index.js","../node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@mui/material/internal/svg-icons/CheckBox.js","../node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@mui/material/Checkbox/checkboxClasses.js","../node_modules/@mui/material/Checkbox/Checkbox.js","hooks/use-remfo/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"horizontal\":\"style_horizontal__2DIWx\",\"horizontal-margined\":\"style_horizontal-margined__e9fQR\"};","import React, { Suspense } from 'react';\n\nimport {\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Select,\n  MenuItem,\n  TextField,\n  IconButton,\n} from '@mui/material';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport Loading from '../loading';\n\nimport style from './style.module.css';\n\nconst residueOptions = [\n  { label: 'All residues', value: 'residue_indices' },\n  { label: 'Interface residues', value: 'interface_indices' },\n];\n\n// Render a panel which allows to select the desired interaction\n// If the user selects a new interaction then the 'setSelectedInteraction' is set as its index\n// Interactions have the following structure:\n// { name: string, label: string, ... }\n// The 'label' field will replace the 'name' in the selector labels if exists\n// When 'selectedResidues' is passed, render also tools to select interaction residues\n// Residue options are 'all' or 'interface' residues\n// DANI: La guinda sería un 'custom' en las opciones de residuos\n// DANI: La idea sería desplegar dos residue selectors, uno para cada interaction agent\nconst InteractionSelector = ({\n  interactions,\n  selectedInteraction,\n  setSelectedInteraction,\n  selectedResidues,\n  setSelectedResidues,\n  selectedOrder,\n  handleToggleOrder,\n  firstOrderLabel, // The label to be represented over the first order rectangle\n  firstOrderTooltip, // The tooltip to be shown for the first order rectangle\n  secondOrderLabel, // The label to be represented over the second order rectangle\n  secondOrderTooltip, // The tooltip to be shown for the second order rectangle\n  toggleOrderTooltip, // The tooltip to be shown for the toggle order button\n  interfaceOnly = false, // Set if the 'All residues' button is enabled\n}) => {\n  const changeInteraction = event => {\n    setSelectedInteraction(event.target.value);\n  };\n\n  const changeResidues = event => {\n    setSelectedResidues(event.target.value);\n  };\n\n  const changeOrder = () => {\n    handleToggleOrder();\n  };\n\n  const currentInteraction = interactions[selectedInteraction];\n\n  // Render\n  return (\n    <Suspense fallback={<Loading />}>\n      <Select\n        value={selectedInteraction}\n        onChange={changeInteraction}\n        className={style['horizontal-margined']}\n      >\n        {interactions.map((interaction, i) => (\n          <MenuItem key={i} value={i} disabled={interaction.failed}>\n            {interaction.label || interaction.name}\n          </MenuItem>\n        ))}\n      </Select>\n      {selectedResidues && (\n        <RadioGroup\n          value={selectedResidues}\n          onChange={changeResidues}\n          className={style.horizontal}\n        >\n          {residueOptions.map((opt, i) => (\n            <FormControlLabel\n              key={i}\n              value={opt.value}\n              control={<Radio color=\"primary\" />}\n              label={opt.label}\n              disabled={opt.label === 'All residues' && interfaceOnly}\n            />\n          ))}\n        </RadioGroup>\n      )}\n      {selectedOrder !== undefined && (\n        <>\n          <TextField\n            //margin=\"dense\"\n            label={firstOrderLabel}\n            title={firstOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_1\n                : currentInteraction.agent_2\n            }\n          />\n          <IconButton\n            title={toggleOrderTooltip}\n            onClick={changeOrder}\n            size=\"large\"\n          >\n            <FontAwesomeIcon icon={faExchangeAlt} />\n          </IconButton>\n          <TextField\n            //margin=\"dense\"\n            label={secondOrderLabel}\n            title={secondOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_2\n                : currentInteraction.agent_1\n            }\n          />\n        </>\n      )}\n    </Suspense>\n  );\n};\n\nexport default InteractionSelector;\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"style_card__vXTgq\",\"horizontal\":\"style_horizontal__t0owt\",\"text-field\":\"style_text-field__bQrv2\",\"margined-bottom\":\"style_margined-bottom__pVY9i\",\"enabled\":\"style_enabled__3P0ll\",\"disabled\":\"style_disabled__XLm-A\"};","// extracted by mini-css-extract-plugin\nexport default {\"graph-legend\":\"style_graph-legend__TA-gh\",\"precision\":\"style_precision__pJJFp\"};","import React from 'react';\n\nimport { FormControlLabel, Checkbox } from '@mui/material';\n\nimport style from './style.module.css';\n\n// Expected input format is entires =\n//  [\n//    {\n//      name: 'entry name',\n//      color: 'black',\n//      check: true,\n//    }\n//  ]\nconst Legend = ({ entries, onChange, onMouseOver, onMouseOut }) => {\n  return (\n    <div className={style['graph-legend']}>\n      {entries.map(({ name, color, check }) => (\n        <FormControlLabel\n          data-key={name}\n          key={name}\n          onChange={p => onChange(p.target.dataset.key)}\n          onMouseOver={onMouseOver}\n          onMouseOut={onMouseOut}\n          control={\n            <Checkbox\n              checked={check}\n              style={{ color: color || 'black' }}\n              inputProps={{ 'data-key': name }}\n            />\n          }\n          label={name}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Legend;\n","import React, { lazy, Suspense, useState, useContext, useMemo, useEffect, useCallback } from 'react';\n// Import tools to retrieve data using the API\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\nimport useAPI from '../../../hooks/use-api';\n// Import project data\nimport { ProjectCtx } from '../../../contexts';\n// Import MUI components\nimport { CardContent, Typography, TextField } from '@mui/material';\n// Import some custom components\nimport Card from '../../../components/animated-card';\nimport ViewerSpawner from '../../../components/viewer-spawner';\nimport Loading from '../../../components/loading';\nimport InteractionSelector from '../../../components/interaction-selector';\nimport DoubleSideSwitch from 'src/components/double-side-switch';\nimport Legend from '../../../components/legend';\n// Import NGL default representations\nimport useDefaultRepresentations from '../../../components/ngl-viewer/use-default-representations';\n// Import CSS style\nimport style from './style.module.css';\n// Import some auxiliar functions\nimport { Version } from 'src/utils/auxiliar-functions';\n// Import a custom hook\nimport useRemfo from 'src/hooks/use-remfo';\n\nconst Graph = lazy(() =>\n  import(/* webpackChunkName: 'graph' */ '../../../components/graph'),\n);\n\n// Set references to find representations between different renders\nconst GUEST_REFERENCE = 'guest';\n\n// Return the rounded summatory\nconst getSum = values => {\n  const sum = values.reduce((a, b) => a + b, 0);\n  const rounded = Math.round(sum * 10000) / 10000;\n  return rounded;\n};\n\n// DANI: Note that here coexit the old and the new energies data format\n// DANI: Old energies contained all interactions data in a single place\n// DANI: New energies has an index in the main analysis and the results for every interaction separated\nconst Energies = () => {\n  // Get the current project data\n  const { accessionAndMdNumber, topology, interactions } = useContext(ProjectCtx);\n\n  // Send a request to the API with the url of the energies analyses index\n  const analysesUrlBase = `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses`;\n  const indexUrl = `${analysesUrlBase}/energies`;\n  const { loading: indexLoading, payload: indexPayload, error: indexError } = useAPI(indexUrl);\n\n  // The interaction to be displayed\n  const [selectedInteraction, setSelectedInteraction] = useState(0);\n\n  // Set the target interaction name\n  const { interactionName, analysisName } = useMemo(() => {\n    // Wait for main data to be downloaded\n    if (!interactions || !indexPayload) return {};\n    // Get the selected interaction\n    const interaction = interactions[selectedInteraction];\n    // Check if the analysis is in the old or the new format\n    const isOld = indexPayload.data !== undefined;\n    // If so, there is no target analysis name, but the whole data is already in the payload\n    if (isOld) return { interactionName: interaction.name };\n    const targetEntry = indexPayload.find(entry => entry.name === interaction.name);\n    return { interactionName: interaction.name, analysisName: targetEntry.analysis }\n  }, [interactions, selectedInteraction, indexPayload]);\n\n  // Send a request to the API with the url of some specific energies analysis\n  const interactionAnalysisUrl = analysisName ? `${analysesUrlBase}/${analysisName}` : null;\n  const { loading, payload, error } = useAPI(interactionAnalysisUrl);\n\n  // Now set the actual dataset to be used\n  // Note that this is a compatibility layer between the old and the new energies system\n  const dataset = useRemfo(previous => {\n    // Wait for the download to finish\n    if (!indexPayload) return previous;\n    // Check if the analysis is in the old or the new format\n    const isOld = indexPayload.data !== undefined;\n    // If this is the new system then the dataset is the payload itself\n    if (!isOld) {\n      if (!payload) return previous;\n      return payload;\n    }\n    // If this is the old system then the dataset is in the index payload\n    const interactionData = indexPayload.data.find(entry => entry.name === interactionName);\n    if (!interactionData) return { error: `Dataset for interaction \"${interactionName}\" not found` };\n    return interactionData;\n  }, [indexPayload, payload, interactionName]);\n\n  // This is a toggle state for which agent data is shown\n  const [selectedOrder, setSelectedOrder] = useState(true);\n\n  // Mine data from the selected interaction\n  // Set some required host and gues atom/residue selections\n  const {\n    hostAtomIndices,\n    hostResidueIndices,\n    guestInterfaceAtomIndices,\n    strongBonds\n  } = useMemo(() => {\n    // Wait for main data to be downloaded\n    if (!topology || !interactions) return {}\n    // Get the selected interaction\n    const interaction = interactions[selectedInteraction];\n    // Get host atom indices\n    const hostAtomIndices = selectedOrder\n      ? interaction.atom_indices_1\n      : interaction.atom_indices_2;\n    // Convert atom indices to residue indices\n    const hostResidueIndices = topology.atom2residueIndices(hostAtomIndices);\n    // Get the guest interface atom indcies\n    const guestInterfaceAtomIndices = selectedOrder\n      ? interaction.interface_atom_indices_2\n      : interaction.interface_atom_indices_1;\n    // Get atom indices from covalent bonds between both interacting agents\n    const strongBonds = interaction['strong_bonds'];\n    return { hostAtomIndices, hostResidueIndices, guestInterfaceAtomIndices, strongBonds };\n  }, [topology, interactions, selectedInteraction, selectedOrder]);\n\n  // Get the default representations\n  const defaultRepresentations = useDefaultRepresentations();\n\n  // Define the representations to be displayed in the viewer\n  const [ representations, setRepresentations ] = useState(null);\n\n  // Set the representations\n  useEffect(() => {\n    // Wait for main data to be downloaded\n    if (!topology || !defaultRepresentations || !guestInterfaceAtomIndices) return;\n    // Set the host NGL selection\n    const guestNglSelection = topology.atomIndices2Ngl(guestInterfaceAtomIndices);\n    // Set the viewer representations\n    setRepresentations(previousRepresentations => {\n      // If this is the first render then set the default values\n      if (previousRepresentations === null) return [\n        ...defaultRepresentations,\n        {\n          selection: guestNglSelection,\n          name: 'Guest elements',\n          type: 'ball+stick',\n          color: 'element',\n          opacity: 0.3,\n          //other: { radius: 0.6 },\n          reference: GUEST_REFERENCE\n        }\n      ];\n      // Otherwise just update the guest representation\n      const previousGuest = previousRepresentations.find(rep => rep.reference === GUEST_REFERENCE);\n      previousGuest.selection = guestNglSelection;\n      return [...previousRepresentations];\n    });\n  }, [topology, defaultRepresentations, guestInterfaceAtomIndices]);\n\n  // This is a toggle state for when data is displayed per atom or per residue\n  const [perResidue, setPerResidue] = useState(true);\n\n  // Reformat data se we can input it to the graph\n  const {\n    data,\n    dataError,\n    isDataPerResidue,\n    strongBondMarks,\n    esData,\n    vdwData,\n    bothData,\n    xTooltip,\n  } = useMemo(() => {\n    // Return if the dataset is not ready yet\n    if (!dataset || !topology) return {};\n    if (dataset.error) return {};\n    // Get the dataset version\n    const datasetVersion = new Version(dataset.version);\n    // Old versions of energies have only residue data, not atom data\n    const isDataPerResidue = datasetVersion.major < 1;\n    // Prepare data in a graph-friendly format\n    let data;\n    // Set the agent whose data will be displayed in the graph\n    const hostAgent = selectedOrder ? 'agent1' : 'agent2';\n    // Get the corresponding agent data\n    data = dataset[hostAgent];\n    // Data should exist at this point\n    if (!data) return {\n      data: null,\n      dataError: `Data for ${hostAgent} not found in the interaction \"${dataset.name}\"`\n    };\n\n    // Set the tags to be displayed on each graph x axis\n    // If data is represented per residue then we need the corresponding residue labels\n    if (perResidue) {\n      // Convert residue indices to their correspondong labels\n      const hostResiduesLabels = hostResidueIndices.map(\n        residueIndex => topology.getResidueByIndex(residueIndex).standardLabel\n      );\n      // Add this to the output formatted data\n      data.xTags = hostResiduesLabels;\n    }\n    // If data is represented per atom then we need the corresponding atom labels\n    else {\n      // Convert atom indices to atom labels\n      const hostAtomLabels = hostAtomIndices.map(\n        index => topology.getAtomByIndex(index).label\n      )\n      // Add this to the output formatted data\n      data.xTags = hostAtomLabels;\n    }\n\n    // In case of strong bonds, find the implicated residues and their position in the x axis\n    // They will be marked in the graph\n    const strongBondAtoms = [].concat.apply([], strongBonds);\n    const strongBondLabels = perResidue\n      ? strongBondAtoms.map(atomIndex =>\n        topology.getAtomByIndex(atomIndex).residue.standardLabel,\n      )\n      : strongBondAtoms.map(atomIndex =>\n        topology.getAtomByIndex(atomIndex).label,\n      );\n    const strongBondMarks = [];\n    strongBondLabels.forEach(residue => {\n      const xPosition = data.xTags.indexOf(residue);\n      if (xPosition !== -1)\n        strongBondMarks.push({\n          x: xPosition,\n          attr: {\n            fill: 'orange',\n            opacity: 0.5,\n          },\n        });\n    });\n\n    // Group data by residue IF data is to be represented by residue\n    const grouper = perResidue && !isDataPerResidue\n      ? values => {\n        const residueValues = {};\n        values.forEach((value, v) => {\n          const atomIndex = hostAtomIndices[v];\n          const residueIndex = topology.getAtomByIndex(atomIndex).residueIndex;\n          residueValues[residueIndex] = (residueValues[residueIndex] || 0) + value\n        });\n        return hostResidueIndices.map(residueIndex => residueValues[residueIndex]);\n      }\n      : values => values;\n\n    // Set the dataset for each graph\n    const esData = {\n      esi: { data: grouper(data.ies), color: 'red' },\n      esf: { data: grouper(data.fes), color: 'blue' },\n      es: { data: grouper(data.es), color: 'black' },\n    };\n    const vdwData = {\n      vdwi: { data: grouper(data.ivdw), color: 'red' },\n      vdwf: { data: grouper(data.fvdw), color: 'blue' },\n      vdw: { data: grouper(data.vdw), color: 'black' },\n    };\n    const bothData = {\n      bothi: { data: grouper(data.iboth), color: 'red' },\n      bothf: { data: grouper(data.fboth), color: 'blue' },\n      both: { data: grouper(data.both), color: 'black' },\n    };\n\n    // Set the tooltip generator for the graph hover\n    const xTooltip = (_, xIndex) =>\n      `${perResidue ? 'residue' : 'atom'} ${(data.xTags && data.xTags[xIndex]) || xIndex}`;\n\n    return {\n      data,\n      isDataPerResidue,\n      strongBondMarks,\n      esData,\n      vdwData,\n      bothData,\n      xTooltip,\n    };\n  }, [\n    dataset,\n    selectedOrder,\n    perResidue,\n    topology,\n    hostAtomIndices,\n    hostResidueIndices,\n    strongBonds,\n  ]);\n\n  // Set which data is displayed: all, start, end or any combination of them\n  const [display, setDisplay] = useState({ all: true, start: true, end: true });\n\n  // Memoize the display parameters for each graph\n  const { esDisplay, vdwDisplay, bothDisplay } = useMemo(() => {\n    const esDisplay = {\n      esi: display.start,\n      esf: display.end,\n      es: display.all,\n    };\n    const vdwDisplay = {\n      vdwi: display.start,\n      vdwf: display.end,\n      vdw: display.all,\n    };\n    const bothDisplay = {\n      bothi: display.start,\n      bothf: display.end,\n      both: display.all,\n    };\n    return { esDisplay, vdwDisplay, bothDisplay };\n  }, [display]);\n\n  // Track when one point in the graph is selected\n  const [selectedX, setSelectedX] = useState(null);\n\n  // Memoize the marks\n  const marks = useMemo(() => {\n    if (selectedX === null) return strongBondMarks;\n    const selectedMark = {\n      x: selectedX,\n      attr: { fill: '#c8c8c8' },\n    };\n    return [selectedMark, ...strongBondMarks];\n  }, [selectedX, strongBondMarks]);\n\n  // Set the selected residue indices (only one index with the current implmementation)\n  const selectedResidueIndices = useMemo(() => {\n    // If there is nothing selected then exit\n    if (selectedX === null) return null;\n    // If we are representing data by atom, not by residue, then exit\n    if (!perResidue) return null;\n    // Get the selected residue index\n    const residueIndex = hostResidueIndices[selectedX];\n    return [residueIndex];\n  }, [hostResidueIndices, perResidue, selectedX]);\n\n  // Set the selected residue indices (only one index with the current implmementation)\n  const selectedAtomIndices = useMemo(() => {\n    // If there is nothing selected then exit\n    if (selectedX === null) return null;\n    // If we are representing data by residue, not by atom, then exit\n    if (perResidue) return null;\n    // Get the selected residue index\n    const atomIndex = hostAtomIndices[selectedX];\n    return [atomIndex];\n  }, [hostAtomIndices, perResidue, selectedX]);\n\n  // Set a callback to reset the X selection whenever the viewer is closed or nail\n  const resetX = useCallback(viewer =>\n    setSelectedX(previous => {\n      if (viewer && viewer.selectedX === previous)\n        return null;\n      else return previous;\n    }), []);\n\n  // Set some state setters\n  const handleSelectInteraction = useCallback(newValue => {\n    setSelectedInteraction(newValue);\n    setSelectedX(null);\n  }, []);\n  const handleToggleOrder = useCallback(() => {\n    setSelectedOrder(previous => !previous);\n    setSelectedX(null);\n  }, []);\n  const handleTogglePerResidue = useCallback(() => {\n    setPerResidue(previous => !previous);\n    setSelectedX(null);\n  }, []);\n\n  // Check if anything is still beeing loaded\n  const anyLoading = indexLoading || loading\n\n  // Render loading or error messages according with the API response\n  if (indexError) return indexError.toString();\n  if (error) return error.toString();\n  if (dataset && dataset.error) return dataset.error;\n  if (!dataset) {\n    if (anyLoading) return <Loading />;\n    if (!interactions) return 'There are no interactions';\n    if (!topology) return 'There is no topology';\n    return 'Something bad happened';\n  }\n\n  // Check if there is only 1 residue\n  const singleValue = esData && esData.es.data.length === 1;\n\n  // Render\n  return (\n    <Suspense fallback={<Loading />}>\n      <Card className={style.card}>\n        <CardContent className={style.horizontal}>\n          <Typography variant=\"h6\">Interaction:</Typography>\n          <InteractionSelector\n            interactions={interactions}\n            selectedInteraction={selectedInteraction}\n            setSelectedInteraction={handleSelectInteraction}\n            selectedOrder={selectedOrder}\n            handleToggleOrder={handleToggleOrder}\n            firstOrderLabel={'Host'}\n            firstOrderTooltip={'Interactor whose energies are to be shown'}\n            secondOrderLabel={'Guest'}\n            secondOrderTooltip={'Interactor with the opposite energies'}\n            toggleOrderTooltip={'Toggle interactors'}\n          />\n        </CardContent>\n        <div className={anyLoading ? style.disabled : style.enabled}>\n          {dataError || !data ? null : (\n            <CardContent>\n              <legend className={style['margined-bottom']}>Overall energies summatory</legend>\n              <div>\n                <TextField\n                  className={style['text-field']}\n                  label=\"Electrostatic\"\n                  title=\"Sum electorstatic value along the whole trajectory\"\n                  value={getSum(data.es) + ' kcal/mol'}\n                />\n                <TextField\n                  className={style['text-field']}\n                  label=\"Electrostatic Initial\"\n                  title=\"Sum electorstatic value along the first 20% trajectory frames\"\n                  value={getSum(data.ies) + ' kcal/mol'}\n                />\n                <TextField\n                  className={style['text-field']}\n                  label=\"Electrostatic Final\"\n                  title=\"Sum electorstatic value along the last 20% trajectory frames\"\n                  value={getSum(data.fes) + ' kcal/mol'}\n                />\n              </div>\n              <div>\n                <TextField\n                  className={style['text-field']}\n                  label=\"Van der Waals\"\n                  title=\"Sum Van der Waals value along the whole trajectory\"\n                  value={getSum(data.vdw) + ' kcal/mol'}\n                />\n                <TextField\n                  className={style['text-field']}\n                  label=\"Van der Waals Initial\"\n                  title=\"Sum Van der Waals value along the first 20% trajectory frames\"\n                  value={getSum(data.ivdw) + ' kcal/mol'}\n                />\n                <TextField\n                  className={style['text-field']}\n                  label=\"Van der Waals Final\"\n                  title=\"Sum Van der Waals value along the last 20% trajectory frames\"\n                  value={getSum(data.fvdw) + ' kcal/mol'}\n                />\n              </div>\n              <div>\n                <TextField\n                  className={style['text-field']}\n                  label=\"Electrostatic + Van der Waals\"\n                  title=\"Sum electorstatic + Van der Waals value along the whole trajectory\"\n                  value={getSum(data.both) + ' kcal/mol'}\n                />\n                <TextField\n                  className={style['text-field']}\n                  label=\"Electrostatic + Van der Waals Initial\"\n                  title=\"Sum electorstatic + Van der Waals value along the first 20% trajectory frames\"\n                  value={getSum(data.iboth) + ' kcal/mol'}\n                />\n                <TextField\n                  className={style['text-field']}\n                  label=\"Electrostatic + Van der Waals Final\"\n                  title=\"Sum electorstatic + Van der Waals value along the last 20% trajectory frames\"\n                  value={getSum(data.fboth) + ' kcal/mol'}\n                />\n              </div>\n            </CardContent>\n          )}\n          {!isDataPerResidue && <DoubleSideSwitch\n            firstLabel={'Residues'}\n            secondLabel={'Atoms'}\n            isFirst={perResidue}\n            onChange={handleTogglePerResidue}\n          />}\n          {dataError || singleValue ? (\n            <CardContent>\n              <Typography variant=\"h6\">\n                {dataError ? dataError : `The host has only 1 ${perResidue ? 'residue' : 'atom'}`}\n              </Typography>\n            </CardContent>\n          ) : (\n            <CardContent>\n              <Graph\n                yData={esData}\n                xAxisValues={data.xTags}\n                xTooltip={xTooltip}\n                title={'Electrostatic'}\n                xScaleFactor={0.001}\n                yAxisLabel={'Interaction energy (kcal/mol)'}\n                onSelect={setSelectedX}\n                dataDisplay={esDisplay}\n                fullPrecision\n                marks={marks}\n              />\n              <Graph\n                yData={vdwData}\n                title={'Van der Waals'}\n                xAxisValues={data.xTags}\n                xTooltip={xTooltip}\n                yAxisLabel={'Interaction energy (kcal/mol)'}\n                onSelect={setSelectedX}\n                dataDisplay={vdwDisplay}\n                fullPrecision\n                marks={marks}\n              />\n              <Graph\n                yData={bothData}\n                title={'Electrostatic + Van der Waals'}\n                xAxisLabel={perResidue ? 'Residue' : 'Atom'}\n                xAxisValues={data.xTags}\n                xTooltip={xTooltip}\n                yAxisLabel={'Interaction energy (kcal/mol)'}\n                onSelect={setSelectedX}\n                dataDisplay={bothDisplay}\n                fullPrecision\n                marks={marks}\n              />\n              <Legend\n                entries={[\n                  { name: 'all', color: 'black', check: display.all },\n                  { name: 'start', color: 'red', check: display.start },\n                  { name: 'end', color: 'blue', check: display.end },\n                ]}\n                onChange={result =>\n                  setDisplay(previous => {\n                    // WARNING: Do not return the previous object modified\n                    // It won't trigger the re-render since it is the same object\n                    const newDisplay = { ...previous };\n                    newDisplay[result] = !newDisplay[result];\n                    return newDisplay;\n                  })\n                }\n              />\n              \n            </CardContent>\n          )}\n        </div>\n      </Card>\n      <ViewerSpawner\n        // Set the new viewer or null if there is not a proper \"selectedResidueIndices\" value\n        newViewer={selectedResidueIndices || selectedAtomIndices\n          ? {\n              selectedResidueIndices: selectedResidueIndices,\n              selectedAtoms: selectedAtomIndices,\n              representationsState: [ representations, setRepresentations ],\n              // Just for further reference\n              selectedX\n            }\n          : null\n        }\n        // If the nailed/closed viewer is the current viewer then reset the 'selectedX'\n        onNail={resetX}\n        onClose={resetX}\n      />\n    </Suspense>\n  );\n};\n\nexport default Energies;\n","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCheckboxUtilityClass(slot) {\n  return generateUtilityClass('MuiCheckbox', slot);\n}\nconst checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium']);\nexport default checkboxClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checkedIcon\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport checkboxClasses, { getCheckboxUtilityClass } from './checkboxClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    indeterminate,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`, `size${capitalize(size)}`]\n  };\n  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\nconst CheckboxRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiCheckbox',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.indeterminate && styles.indeterminate, styles[`size${capitalize(ownerState.size)}`], ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  color: (theme.vars || theme).palette.text.secondary\n}, !ownerState.disableRipple && {\n  '&:hover': {\n    backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  }\n}, ownerState.color !== 'default' && {\n  [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {\n    color: (theme.vars || theme).palette[ownerState.color].main\n  },\n  [`&.${checkboxClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  }\n}));\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(CheckBoxIcon, {});\nconst defaultIcon = /*#__PURE__*/_jsx(CheckBoxOutlineBlankIcon, {});\nconst defaultIndeterminateIcon = /*#__PURE__*/_jsx(IndeterminateCheckBoxIcon, {});\nconst Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(inProps, ref) {\n  var _icon$props$fontSize, _indeterminateIcon$pr;\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCheckbox'\n  });\n  const {\n      checkedIcon = defaultCheckedIcon,\n      color = 'primary',\n      icon: iconProp = defaultIcon,\n      indeterminate = false,\n      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,\n      inputProps,\n      size = 'medium',\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const icon = indeterminate ? indeterminateIconProp : iconProp;\n  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n  const ownerState = _extends({}, props, {\n    color,\n    indeterminate,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CheckboxRoot, _extends({\n    type: \"checkbox\",\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size\n    }),\n    ownerState: ownerState,\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other, {\n    classes: classes\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckBoxIcon />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <CheckBoxOutlineBlankIcon />\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate: PropTypes.bool,\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateCheckBoxIcon />\n   */\n  indeterminateIcon: PropTypes.node,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense checkbox styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Checkbox;","import { useMemo, useRef } from 'react';\n\n// Get a memoized value just like a useMemo would\n// However you can access the previous memoized value as the first (and only) function argument\nconst useRemfo = (func, deps) => {\n    const previousValue = useRef();\n    const newValue = useMemo(() => func(previousValue.current), deps);\n    previousValue.current = newValue;\n    return newValue;\n};\n\nexport default useRemfo;\n"],"names":["residueOptions","label","value","_ref","interactions","selectedInteraction","setSelectedInteraction","selectedResidues","setSelectedResidues","selectedOrder","handleToggleOrder","firstOrderLabel","firstOrderTooltip","secondOrderLabel","secondOrderTooltip","toggleOrderTooltip","interfaceOnly","currentInteraction","_jsxs","Suspense","fallback","_jsx","Loading","children","Select","onChange","event","target","className","style","map","interaction","i","MenuItem","disabled","failed","name","RadioGroup","opt","FormControlLabel","control","Radio","color","undefined","_Fragment","TextField","title","agent_1","agent_2","IconButton","onClick","changeOrder","size","FontAwesomeIcon","icon","faExchangeAlt","entries","onMouseOver","onMouseOut","_ref2","check","p","dataset","key","Checkbox","checked","inputProps","Graph","lazy","GUEST_REFERENCE","getSum","values","sum","reduce","a","b","Math","round","Energies","accessionAndMdNumber","topology","useContext","ProjectCtx","analysesUrlBase","concat","BASE_PATH_PROJECTS","indexUrl","loading","indexLoading","payload","indexPayload","error","indexError","useAPI","useState","interactionName","analysisName","useMemo","data","targetEntry","find","entry","analysis","interactionAnalysisUrl","useRemfo","previous","interactionData","setSelectedOrder","hostAtomIndices","hostResidueIndices","guestInterfaceAtomIndices","strongBonds","atom_indices_1","atom_indices_2","atom2residueIndices","interface_atom_indices_2","interface_atom_indices_1","defaultRepresentations","useDefaultRepresentations","representations","setRepresentations","useEffect","guestNglSelection","atomIndices2Ngl","previousRepresentations","selection","type","opacity","reference","rep","perResidue","setPerResidue","dataError","isDataPerResidue","strongBondMarks","esData","vdwData","bothData","xTooltip","Version","version","major","hostAgent","hostResiduesLabels","residueIndex","getResidueByIndex","standardLabel","xTags","hostAtomLabels","index","getAtomByIndex","strongBondAtoms","apply","strongBondLabels","atomIndex","residue","forEach","xPosition","indexOf","push","x","attr","fill","grouper","residueValues","v","esi","ies","esf","fes","es","vdwi","ivdw","vdwf","fvdw","vdw","bothi","iboth","bothf","fboth","both","_","xIndex","display","setDisplay","all","start","end","esDisplay","vdwDisplay","bothDisplay","selectedX","setSelectedX","marks","selectedResidueIndices","selectedAtomIndices","resetX","useCallback","viewer","handleSelectInteraction","newValue","handleTogglePerResidue","anyLoading","toString","singleValue","length","Card","card","CardContent","horizontal","Typography","variant","InteractionSelector","enabled","DoubleSideSwitch","firstLabel","secondLabel","isFirst","yData","xAxisValues","xScaleFactor","yAxisLabel","onSelect","dataDisplay","fullPrecision","xAxisLabel","Legend","result","newDisplay","_objectSpread","ViewerSpawner","newViewer","selectedAtoms","representationsState","onNail","onClose","createSvgIcon","d","getCheckboxUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CheckboxRoot","styled","SwitchBase","shouldForwardProp","prop","rootShouldForwardProp","overridesResolver","props","styles","ownerState","root","indeterminate","capitalize","theme","_extends","vars","palette","text","secondary","disableRipple","backgroundColor","action","activeChannel","mainChannel","hoverOpacity","alpha","active","main","checkboxClasses","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","React","inProps","ref","_icon$props$fontSize","_indeterminateIcon$pr","useDefaultProps","checkedIcon","iconProp","indeterminateIcon","indeterminateIconProp","other","_objectWithoutPropertiesLoose","classes","slots","composedClasses","composeClasses","useUtilityClasses","fontSize","clsx","func","deps","previousValue","useRef","current"],"sourceRoot":""}