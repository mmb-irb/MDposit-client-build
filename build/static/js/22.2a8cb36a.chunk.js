"use strict";(self.webpackChunkmdposit=self.webpackChunkmdposit||[]).push([[22],{17545:(e,t,i)=>{i.d(t,{A:()=>l});var s=i(65043),n=i(64600),r=i.n(n),o=i(81637),a=i(92954);const h="style_loading__Vdgbc",c="style_show__wIdQ5";var d=i(70579);const u=750,l=e=>{let{wait:t=u}=e;const[i,n]=(0,a.A)(!1);return(0,s.useLayoutEffect)((()=>{const e=setTimeout((()=>{n()}),t);return()=>clearTimeout(e)}),[n,t]),(0,d.jsx)("div",{title:"loading...",className:r()(h,{[c]:i}),children:i&&(0,d.jsx)(o.A,{variant:"indeterminate",color:"primary",size:50,thickness:5})})}},58338:(e,t,i)=>{i.d(t,{A:()=>d});var s=i(65043),n=i(40854),r=i.n(n);const o={loading:!1,payload:null,error:null},a={loading:!0},h=36e5;let c=(()=>{const e=localStorage.getItem("apiCache");return e?JSON.parse(e):{}})();const d=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const{name:i="",cacheOn:n=!1,cacheExpiration:d=h}=t,u=(()=>{if(n&&c[i]){const e=c[i];if(Date.now()-new Date(e.received).getTime()<d)return e}return o})(),[l,f]=(0,s.useState)(u);return(0,s.useEffect)((()=>{if(!e)return void f(o);const t=r().CancelToken.source();let s=!1;return r()(e,{cancelToken:t.token,startTime:new Date}).then((t=>{if(s)return;const r=new Date,o=r-t.config.startTime,a={url:e,loading:!1,payload:t.data,error:null,time:o,received:r};n&&(c[i]=a,(e=>{localStorage.setItem("apiCache",JSON.stringify(e))})(c)),f(a)})).catch((t=>{if(s)return;f({url:e,loading:!1,payload:null,error:t})})),()=>{t.cancel(),s=!0}}),[e]),e?l.url===e||u.url===e?l:a:o}},79342:(e,t,i)=>{i.d(t,{M:()=>S});var s=i(65043),n=i(58338),r=i(95747);const o={ALA:"A",ALAN:"A",ALAC:"A",ARG:"R",ARGN:"R",ARGC:"R",ASN:"N",ASNN:"N",ASNC:"N",ASP:"D",ASPN:"D",ASPC:"D",CYS:"C",CYSN:"C",CYSC:"C",CYH:"C",CSH:"C",CSS:"C",CYX:"C",CYP:"C",GLN:"Q",GLNN:"Q",GLNC:"Q",GLU:"E",GLUN:"E",GLUC:"E",GLUP:"E",GLY:"G",GLYN:"G",GLYC:"G",HIS:"H",HISN:"H",HISC:"H",HID:"H",HIE:"H",HIP:"H",HSD:"H",HSE:"H",ILE:"I",ILEN:"I",ILEC:"I",ILU:"I",LEU:"L",LEUN:"L",LEUC:"L",LYS:"K",LYSN:"K",LYSC:"K",MET:"M",METN:"M",METC:"M",PHE:"F",PHEN:"F",PHEC:"F",PRO:"P",PRON:"P",PROC:"P","PR\xd8":"P",PR0:"P",PRZ:"P",SER:"S",SERN:"S",SERC:"S",THR:"T",THRN:"T",THRC:"R",TRP:"W",TRPN:"W",TRPC:"W",TRY:"W",TYR:"Y",TYRN:"Y",TYRC:"Y",VAL:"V",VALN:"V",VALC:"V"},a={DA:"A",T:"T",T3:"T",T5:"T",DT:"T",DC:"C",DG:"G",DA3:"A",DA5:"A",DT3:"T",DT5:"T",DC3:"C",DC5:"C",DG3:"G",DG5:"G"},h={RA:"A",U:"U",U3:"U",U5:"U",RU:"U",RC:"C",RG:"G",RA3:"A",RA5:"A",RU3:"U",RU5:"U",RC3:"C",RC5:"C",RG3:"G",RG5:"G"},c={...a,...h,A:"A",A3:"A",A5:"A",C:"C",C3:"C",C5:"C",G:"G",G3:"G",G5:"G"},d={...o,...c},u=new Set(["POPC","POPG","POPS","POPE","PYPC","PAzePCprot","PAzePCdeprot","DMPC","DPPC","DPPE","DPPG","DEPC","DRPC","DYPC","DLPC","DLIPC","DOG","DOPC","DOPE","DDOPC","DOPS","DSPC","DAPC","DMTAP","SDG","SDPE","SOPC","POPI","SAPI","SAPI24","SAPI25","SLPI","CER","CER180","DHMDMAB","SLiPC","SM16","SM18","TOCL","TLCL_0H","TMCL","GM1","DPPGK","GB3","BOG"]),l=new Set(["CHL","CHL1","CHOL","DCHOL"]),f=new Set(["SOL","WAT","HOH","TIP","TP3","SWM4"]),m=new Set(["K","NA","SOD","POT"]),g=new Set(["CL","CLA"]),p=m.union(g);new Set(["MW"]);var C=i(71261);const y={H:"white",C:"grey",N:"blue",O:"red",S:"yellow",P:"orange"};class R{constructor(e,t){this.topology=e,this.index=t}get name(){return this.topology.atomNames[this.index]}get residueIndex(){return this.topology.atomResidueIndices[this.index]}get residue(){return this.topology.getResidueByIndex(this.residueIndex)}get element(){return this.topology.atomElements[this.index]}get elementColor(){const e=y[this.element];return e||"black"}get isCg(){return"Cg"===this.element}}class N{constructor(e,t){this.topology=e,this.index=t,this._classification=void 0}get number(){return this.topology.residueNumbers[this.index]}get chainIndex(){return this.topology.residueChainIndices[this.index]}get chainName(){return this.topology.chainNames[this.chainIndex]}get chain(){return this.topology.getChainByIndex(this.chainIndex)}get icode(){return this.topology.residueIcodes?this.topology.residueIcodes[this.index]:null}get nglSelection(){let e=`:${this.chainName} and ${this.number}`;return this.icode&&(e+=` ^${this.icode}`),e}get name(){return this.topology.residueNames[this.index]}get letter(){if(!this.name)return;const e=d[this.name];return e||"X"}get classification(){if(void 0!==this._classification)return this._classification;if(this.isCg)return this._classification=this.classificationByName,this._classification;if(1===this.atomCount)return this._classification="ion",this._classification;if(this.name in f)return this._classification="solvent",this._classification;if(3===this.atomCount){const e=this.atoms.map((e=>e.element)),t=(0,C.Gg)(e,"H"),i=(0,C.Gg)(e,"O");if(2===t&&1===i)return this._classification="solvent",this._classification}const e=new Set(this.atoms.map((e=>e.name)));return["C","N","CA"].every((t=>e.has(t)))&&(e.has("O")||["OC1","OC2"].every((t=>e.has(t)))||["OT1","OT2"].every((t=>e.has(t))))?(this._classification="protein",this._classification):["O3'","C3'","C4'","C5'","O5'"].every((t=>e.has(t)))||["O3*","C3*","C4*","C5*","O5*"].every((t=>e.has(t)))?(e.has("O2'")||e.has("O2*")?this._classification="rna":this._classification="dna",this._classification):"ligand"===this.referenceType?(this._classification="ligand",this._classification):(this._classification=this.classificationByName,this._classification)}get classificationByName(){return this.name in o?"protein":this.name in a?"dna":this.name in h?"rna":this.name in c?"nucleic":u.has(this.name)?"fatty":l.has(this.name)?"steroid":p.has(this.name)?"ion":f.has(this.name)?"solvent":"unknown"}get referenceIndex(){return this.topology.residueReferenceIndices?this.topology.residueReferenceIndices[this.index]:null}get referenceId(){const e=this.referenceIndex;return null===e?null:this.topology.references[e]}get referenceType(){const e=this.referenceIndex;return null===e?null:this.topology.referenceTypes[e]}get referenceNumber(){return this.topology.residueReferenceNumbers?this.topology.residueReferenceNumbers[this.index]:null}get referenceData(){if(null===this.referenceId)return null;if("protein"===this.referenceType){const e=this.topology.proteinReferences.find((e=>e.uniprot===this.referenceId));if(!e)throw new Error(`Reference id ${this.referenceId} is not found among protein references`);return e}if("ligand"===this.referenceType){const e=this.topology.ligandReferences.find((e=>e.pubchem===this.referenceId));if(!e)throw new Error(`Reference id ${this.referenceId} is not found among ligand references`);return e}throw new Error(`Not supported reference type ${this.referenceType}`)}get referenceName(){const e=this.topology.metadataLigandNames&&this.topology.metadataLigandNames[this.referenceId];if(e)return e;const t=this.referenceData;return t?t.name:null}get isPbc(){return this.topology.pbcResidues.has(this.index)}get isCg(){for(const e of this.iteratoms())if(e.isCg)return!0;return!1}get standardLabel(){let e="";this.topology.chainNames.length>1&&(e=`${this.chainName}:`);const t=this.referenceNumber;let i;i=null!==t?`${t}`:`${this.number}*`;let s=this.icode;s||(s="");return e+i+s+`(${this.name})`}get atomIndices(){return this.topology.residueAtomIndices[this.index]}get atomCount(){return this.atomIndices.length}get hasCAlpha(){for(const e of this.iteratoms())if("CA"===e.name)return!0;return!1}*iteratoms(){for(const e of this.atomIndices)yield new R(this.topology,e)}get atoms(){return[...this.iteratoms()]}}class w{constructor(e,t){this.topology=e,this.index=t}get name(){return this.topology.chainNames[this.index]}get letter(){return this.name}get metadataChainName(){const e=this.topology.metadataChainNames;return e?Array.isArray(e)?e[this.index]||"":e[this.name]||"":""}get residueIndices(){return this.topology.chainResidueIndices[this.index]}get residueNumbers(){return this.topology.chainResidueNumbers[this.index]}get sequence(){return this.sequences[this.index]}*iterresidues(){for(const e of this.residueIndices)yield new N(this.topology,e)}get residues(){return[...this.iterresidues()]}}class E{constructor(e,t,i){var s=this;this.getAtomByIndex=e=>{const t=this.atomCount;if(e>=t)throw new Error(`The atom index ${e} is out of range. There are ${t} atoms in the topology`);return new R(this,e)},this.getResidueByIndex=e=>{const t=this.residueCount;if(e>=t)throw new Error(`The residue index ${e} is out of range. There are ${t} residues in the topology`);return new N(this,e)},this.getResidueByParameters=function(e,t){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;const n=s.getChainByName(e);for(const r of n.residueIndices){const e=new N(s,r);if(e.number===t&&e.icode===i)return e}throw new Error(`Residue with chain ${e}, number ${t} and ${i?`icode ${i}`:"no icode"} does not exist`)},this.getChainByIndex=e=>{const t=this.chainNames.length;if(e>=t)throw new Error(`The chain index ${e} is out of range. There are ${t} chains in the topology`);return new w(this,e)},this.getChainByName=e=>{const t=this.chainNames.indexOf(e);if(-1===t)throw new Error(`Chain ${e} is not found in the topology`);return new w(this,t)},this.getReferenceResidueIndices=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(!s.references)return;const i=s.references.indexOf(e);if(-1===i)return;const n=[];return s.residueReferenceIndices.forEach(((e,r)=>{if(e!==i)return;if(null===t)return n.push(r);const o=s.residueReferenceNumbers[r];t.includes(o)&&n.push(r)})),n},this.residueIndices2Ngl=e=>{const t=[];let i=!1;const s=e.map((e=>this.getResidueByIndex(e)));s.map((e=>e.chainName)).filter(((e,t,i)=>i.indexOf(e)===t)).forEach((e=>{const n=s.filter((t=>t.chainName===e)).map((e=>e.number)),{rangedSelection:r,small:o}=(0,C.ZH)(n);t.push(`(:${e} and (${r}))`),o&&(i=!0)}));return{rangedSelection:t.join(" or "),small:i}},this.byChains=e=>{const t={};return e.forEach((e=>{const i=this.getResidueByIndex(e).chainName,s=t[i];s?s.push(e):t[i]=[e]})),t},this.getAtomELEMENT_COLORS=()=>this.atomElements.map((e=>{const t=y[e];return t||"black"})),this.atomNames=e.atom_names,this.atomElements=e.atom_elements,this.atomCharges=e.atom_charges,this.atomResidueIndices=e.atom_residue_indices,this.residueNames=e.residue_names,this.residueNumbers=e.residue_numbers;const n=e.residue_icodes;n?(this.residueIcodes=Array(this.residueNames.length).fill(""),Object.entries(n).forEach((e=>{let[t,i]=e;this.residueIcodes[+t]=i}))):this.residueIcodes="",this.residueChainIndices=e.residue_chain_indices,this.chainNames=e.chain_names,this.references=e.references,this.referenceTypes=e.reference_types,!this.referenceTypes&&this.references&&(this.referenceTypes=this.references.map((e=>"protein"))),this.residueReferenceIndices=e.residue_reference_indices,this.residueReferenceNumbers=e.residue_reference_numbers,this.atomBonds=e.atom_bonds,this.pbcResidues=e.pbc_residues&&new Set(e.pbc_residues),this.residueAtomIndices=Array.from(Array(this.residueNames.length),(()=>[]));for(const[r,o]of this.atomResidueIndices.entries())this.residueAtomIndices[o].push(r);this.chainResidueIndices=Array.from(Array(this.chainNames.length),(()=>[]));for(const[r,o]of this.residueChainIndices.entries())this.chainResidueIndices[o].push(r);this.chainResidueNumbers=this.chainResidueIndices.map((e=>e.map((e=>this.residueNumbers[e])))),this.sequences=this.chainResidueIndices.map((e=>e.map((e=>this.getResidueByIndex(e).letter)).join(""))),this.metadataChainNames=t.CHAINNAMES,this.metadataLigandNames=t.LIGANDNAMES,this.proteinReferences=i.proteins,this.ligandReferences=i.ligands,this.chainReferences=i.chains;for(const r of this.chainReferences){r.chains=[],r.chain_indices=[];for(const[e,t]of Object.entries(this.chainNames)){this.sequences[e]===r.sequence&&(r.chains.push(t),r.chain_indices.push(+e))}0===r.chain_indices.length&&console.error("Unmatched chain reference "+r.sequence)}}get atomCount(){return this.atomNames.length}get residueCount(){return this.residueNumbers.length}get chainCount(){return this.chainNames.length}*iteratoms(){for(let e=0;e<this.atomCount;e++)yield new R(this,e)}*iterresidues(){for(let e=0;e<this.residueCount;e++)yield new N(this,e)}*iterchains(){for(let e=0;e<this.chainCount;e++)yield new w(this,e)}}var I=i(82746);class S{constructor(e){var t=this;if(this._apiEndpoints={topology:"/topology",structure:"/structure",interactions:"/analyses/interactions",references:"/references",fileDescriptors:"/filenotes",populations:"/files/populations.json"},this._apiQuery=function(e){let i=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],s=t._apiBaseUrl+t._apiEndpoints[e];i||(s=null),t._apiResponses[e]&&t._apiResponses[e].payload&&(s=null);const r=(0,n.A)(s);return null!==s&&(t._apiResponses[e]=r),t._apiResponses[e]},Object.entries(e).forEach((e=>{let[t,i]=e;this[t]=i})),!this.metadata)return;this.metadata.mdFrames||(this.metadata.mdFrames=this.metadata.SNAPSHOTS),this.metadata.timeLength=this.metadata.FRAMESTEP&&this.metadata.mdFrames&&this.metadata.FRAMESTEP*this.metadata.mdFrames||null,this.mdCount=this.mds?this.mds.filter((e=>"(removed)"!==e.slice(-9))).length:0;const i=this.accession||this.identifier;this.accessionAndMdNumber=this.mds?`${i}.${this.mdNumber}`:i,this.hasInteractions=this.analyses.includes("interactions"),this.isPopulated=Boolean(this.files&&this.files.find((e=>"populations.json"===e))),this.directions={overview:!0,trajectory:!0,files:!0};const s=["rmsds","rgyr","fluctuation","pca","rmsd-perres","rmsd-pairwise","dist-perres","hbonds","energies","pockets","sasa","clusters","density","thickness","apl","lipid-order","lipid-inter"];for(const n of s)this.directions[n]=this.analyses.includes(n);if(this.directions.electrostatic=this.analyses.includes("interactions"),this.directions["ligand-descriptors"]=Boolean(this.metadata&&this.metadata.LIGANDS&&this.metadata.LIGANDS.length>0),r._r.options.includes("covid")){const e=this.metadata&&this.metadata.REFERENCES&&this.metadata.REFERENCES.find((e=>r.kO.includes(e)));this.directions.mutations=Boolean(e);const t=this.metadata&&this.metadata.REFERENCES&&this.metadata.REFERENCES.find((e=>r.QO.includes(e)));this.directions.epitopes=Boolean(t)}this.metadata&&"Markov state model (MSM)"===this.metadata.METHOD&&(this.directions.populations=this.files&&this.files.find((e=>"populations.json"===e)),this.directions.markov=this.analyses.includes("markov")),this._apiResponses={topology:void 0,interactions:void 0,references:void 0,fileDescriptors:void 0,populations:void 0},this._topologyManager=null,this._apiBaseUrl=`${r.nP}/${this.accessionAndMdNumber}`,this.creationDate=new Date(this.creationDate).toLocaleDateString("en-GB"),this.updateDate=this.updateDate?new Date(this.updateDate).toLocaleDateString("en-GB"):void 0}get interactions(){const e=this._apiQuery("interactions",this.hasInteractions);if(void 0!==e&&!e.loading){if(e.error)throw new Error("Error when downloading project interactions: "+e.error.message);if(!e.payload)throw new Error("Something went wrong with project interactions");return e.payload}}get references(){const e=this._apiQuery("references");if(!e.loading){if(e.error)throw new Error("Error when downloading project references: "+e.error.message);if(!e.payload)throw new Error("Something went wrong with project references");return e.payload}}get proteinReferences(){const e=this.references;return(0,s.useMemo)((()=>e&&e.filter((e=>"proteins"===e.ref_type))),[e])}get ligandReferences(){const e=this.references;return(0,s.useMemo)((()=>e&&e.filter((e=>"ligands"===e.ref_type))),[e])}get pdbReferences(){const e=this.references;return(0,s.useMemo)((()=>e&&e.filter((e=>"pdbs"===e.ref_type))),[e])}get chainReferences(){const e=this.references;return(0,s.useMemo)((()=>e&&e.filter((e=>"chains"===e.ref_type))),[e])}get topology(){const e=this.references,t={proteins:this.proteinReferences,ligands:this.ligandReferences,chains:this.chainReferences},i=this._apiQuery("topology");if(!i.loading){if(i.error)throw new Error("Error when downloading project topology: "+i.error.message);if(!i.payload)throw new Error("Something went wrong with project topology");if(this._topologyManager)return this._topologyManager;if(void 0!==e)return this._topologyManager=new E(i.payload,this.metadata,t),this._topologyManager}}get fileDescriptors(){return this._apiQuery("fileDescriptors")}get populations(){return this._apiQuery("populations",this.isPopulated)}get referenceFrame(){return void 0===this.refframe?0:this.refframe}get structureData(){const e=this._apiQuery("structure"),t=(0,s.useMemo)((()=>{if(e.payload)return new Blob([e.payload],{type:"text/plain"})}),[e.payload]);if(!e.loading){if(e.error)throw new Error("Error when downloading project structure: "+e.error.message);if(!e.payload)throw new Error("Something went wrong with project structure");return t}}get nglStructure(){const[e,t]=(0,s.useState)(void 0),i=this.structureData;return(0,s.useEffect)((()=>{i&&(0,I.un)(i,{defaultRepresentation:!1,ext:"pdb"}).then((e=>{t({file:e})})).catch((e=>{console.error(e),t({error:e})}))}),[i]),e}}},92954:(e,t,i)=>{i.d(t,{A:()=>n});var s=i(65043);const n=e=>{const[t,i]=(0,s.useState)(!!e),n=(0,s.useCallback)((e=>{switch(typeof e){case"function":i(e);break;case"boolean":case"number":case"string":i(Boolean(e));break;default:i((e=>!e))}}),[]);return[t,n]}}}]);
//# sourceMappingURL=22.2a8cb36a.chunk.js.map