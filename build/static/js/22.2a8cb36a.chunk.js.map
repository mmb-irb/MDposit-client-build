{"version":3,"file":"static/js/22.2a8cb36a.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/loading/style.module.css?350d","components/loading/index.js","hooks/use-api/index.js","utils/topology-manager/residues-library/index.js","utils/topology-manager/index.js","utils/project-manager/index.js","hooks/use-toggle-state/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loading\":\"style_loading__Vdgbc\",\"show\":\"style_show__wIdQ5\"};","import React, { useLayoutEffect } from 'react';\nimport cn from 'classnames';\n//import { sleep, frame } from 'timing-functions';\n\nimport { CircularProgress } from '@mui/material';\n\nimport useToggleState from '../../hooks/use-toggle-state';\n\nimport style from './style.module.css';\n\nconst WAIT_DELAY = 750; // 750ms\n\n// This component is used to hide the loading indicator for a bit (just in case\n// the next content is quick enough, because we don't want a flash with the\n// indicator), then slowly display it.\n// In the best of cases this component will *never* even have to be displayed\nconst Loading = ({ wait = WAIT_DELAY }) => {\n  const [flag, toggleFlag] = useToggleState(false);\n  // This is a hook\n  useLayoutEffect(() => {\n    const timer = setTimeout(() => {\n      toggleFlag();\n    }, wait);\n    return () => clearTimeout(timer);\n\n    /*\n    let mounted = true;\n    sleep(wait) // wait for a bit\n      // this might be useful if the page is not even visible\n      .then(() => frame()) // Wait for the next animation frame\n      // After waiting, check if mounted is still true\n      .then(() => {\n        // If mounted is false it means that the loading was over before the wait ended\n        if (mounted) toggleFlag(); // This toggleFlag changes the flag from false to true\n      });\n    // In a useEffect or similar hooks, \"return\" stands for an ending function\n    // The ending function is called when the components is no longer rendered\n    return () => (mounted = false); // When useLayoutEffect is over or cancelled, set mounted to false\n    */\n  }, [toggleFlag, wait]); // useLayoutEffect is only called when the toggleFlag is called (only once)\n  // Return an animated circle\n  return (\n    <div\n      title=\"loading...\" // This tag appears when the mouse remains over the circle\n      className={cn(style.loading, { [style.show]: flag })}\n    >\n      {flag && (\n        <CircularProgress\n          variant=\"indeterminate\"\n          color=\"primary\"\n          size={50}\n          thickness={5}\n        /> // Renders the circle\n      )}\n    </div>\n  );\n};\n\nexport default Loading;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Empty response\nconst blank = {\n  loading: false,\n  payload: null,\n  error: null,\n};\n\n// Loading response\nconst loading = {\n  loading: true,\n};\n\n\n// Default cache expiration time (e.g., 1 hour in milliseconds)\nconst DEFAULT_CACHE_EXPIRATION = 60 * 60 * 1000;\n\n// Load cache from localStorage\nconst loadCache = () => {\n  const cachedData = localStorage.getItem('apiCache');\n  return cachedData ? JSON.parse(cachedData) : {};\n};\n\n// Save cache to localStorage\nconst saveCache = (cache) => {\n  localStorage.setItem('apiCache', JSON.stringify(cache));\n};\n\n// Cache object to store API responses\nlet cache = loadCache();\n// Get data from the API\nconst useAPI = (url, cacheOptions = {}) => {\n  // Destructure options and set default values\n  const {\n    name = '',\n    cacheOn = false,\n    cacheExpiration = DEFAULT_CACHE_EXPIRATION, // Default cache expiration\n  } = cacheOptions;\n  \n  // Check cache synchronously before initializing state\n  const initialData = (() => {\n    if (cacheOn && cache[name]) {\n      const responseData = cache[name];\n      const now = Date.now();\n      const receivedTime = new Date(responseData.received).getTime()\n      // Use cached data if it hasn't expired\n      if (now - receivedTime < cacheExpiration) {\n        return responseData;\n      }\n    }\n    return blank;\n  })();\n  // Set the 'data' state object, which is returned at the end of this function\n  const [data, setData] = useState(initialData);\n\n  // This react hook is responisble for sending the request to the API\n  // This react hook has 'url' dependencies, so it is only runned once per request\n  useEffect(() => {\n    // In case there is no valid url\n    // This may be useful as a workaround to not call the API, since hooks can not be called conditionally\n    if (!url) {\n      setData(blank);\n      return;\n    }\n    // This is axios (https://www.npmjs.com/package/axios)\n    // Set a cancel option (token). If a request includes this cancel token in its options, the request can be cancelled\n    // In order to cancel the request, the same token must be used through axios\n    const source = axios.CancelToken.source();\n    let didCancel = false;\n    // Make a request in a Promise/await way\n    axios(url, {\n      // This token allows us to further cancel the request if necessary\n      cancelToken: source.token,\n      // Send the start time so we can calculate the response time when we get the response\n      startTime: new Date()\n    })\n      // (.then is async) If the request has succeed\n      .then(response => {\n        if (didCancel) return;\n        // Calculate the response time\n        const endTime = new Date();\n        const startTime = response.config.startTime;\n        const responseTime = endTime - startTime; // In ms\n        // Return response data\n        const responseData = {\n          url: url,\n          loading: false,\n          payload: response.data,\n          error: null,\n          time: responseTime,\n          received: endTime,\n        };\n        // Cache the response if caching is enabled\n        if (cacheOn) {\n          cache[name] = responseData;\n          saveCache(cache);\n        }\n        setData(responseData);\n      })\n      // Otherwise\n      .catch(error => {\n        if (didCancel) return;\n        const responseData = {\n          url: url,\n          loading: false,\n          payload: null,\n          error: error,\n        };\n        setData(responseData);\n      });\n\n    return () => {\n      // Cancel the request\n      source.cancel();\n      didCancel = true;\n    };\n\n    // 'useEffect' will only be called when the url changes\n  }, [url]);\n  // If there is no url then return the blank response\n  if (!url) return blank;\n  // Data is returned this way\n  // Data is returned only if the data.url matches the url from this request\n  // These urls do not macth each first time 'useAPI' is called\n  // 'data' is not reset each time 'useAPI' is called so the url is from the previous request\n  if (data.url === url || initialData.url === url) return data;\n  // The first time 'useAPI' is called only { loading: true } is returned\n  else return loading;\n};\n\nexport default useAPI;\n","// Set a library of residues useful for topology handling\n\n// Amino acids\nexport const PROTEIN_RESIDUE_NAME_LETTERS = {\n    'ALA':'A',\n    'ALAN':'A',\n    'ALAC':'A',\n    'ARG':'R',\n    'ARGN':'R',\n    'ARGC':'R',\n    'ASN':'N',\n    'ASNN':'N',\n    'ASNC':'N',\n    'ASP':'D',\n    'ASPN':'D',\n    'ASPC':'D',\n    'CYS':'C',\n    'CYSN':'C',\n    'CYSC':'C',\n    'CYH':'C',\n    'CSH':'C',\n    'CSS':'C',\n    'CYX':'C',\n    'CYP':'C',\n    'GLN':'Q',\n    'GLNN':'Q',\n    'GLNC':'Q',\n    'GLU':'E',\n    'GLUN':'E',\n    'GLUC':'E',\n    'GLUP':'E',\n    'GLY':'G',\n    'GLYN':'G',\n    'GLYC':'G',\n    'HIS':'H',\n    'HISN':'H',\n    'HISC':'H',\n    'HID':'H',\n    'HIE':'H',\n    'HIP':'H',\n    'HSD':'H',\n    'HSE':'H',\n    'ILE':'I',\n    'ILEN':'I',\n    'ILEC':'I',\n    'ILU':'I',\n    'LEU':'L',\n    'LEUN':'L',\n    'LEUC':'L',\n    'LYS':'K',\n    'LYSN':'K',\n    'LYSC':'K',\n    'MET':'M',\n    'METN':'M',\n    'METC':'M',\n    'PHE':'F',\n    'PHEN':'F',\n    'PHEC':'F',\n    'PRO':'P',\n    'PRON':'P',\n    'PROC':'P',\n    'PRØ':'P',\n    'PR0':'P',\n    'PRZ':'P',\n    'SER':'S',\n    'SERN':'S',\n    'SERC':'S',\n    'THR':'T',\n    'THRN':'T',\n    'THRC':'R',\n    'TRP':'W',\n    'TRPN':'W',\n    'TRPC':'W',\n    'TRY':'W',\n    'TYR':'Y',\n    'TYRN':'Y',\n    'TYRC':'Y',\n    'VAL':'V',\n    'VALN':'V',\n    'VALC':'V',\n};\n// Nucleotides\nexport const DNA_RESIDUE_NAME_LETTERS = {\n    'DA': 'A',\n    'T': 'T',\n    'T3': 'T',\n    'T5': 'T',\n    'DT': 'T',\n    'DC': 'C',\n    'DG': 'G',\n    'DA3': 'A',\n    'DA5': 'A',\n    'DT3': 'T',\n    'DT5': 'T',\n    'DC3': 'C',\n    'DC5': 'C',\n    'DG3': 'G',\n    'DG5': 'G',\n};\nexport const RNA_RESIDUE_NAME_LETTERS = {\n    'RA': 'A',\n    'U': 'U',\n    'U3': 'U',\n    'U5': 'U',\n    'RU': 'U',\n    'RC': 'C',\n    'RG': 'G',\n    'RA3': 'A',\n    'RA5': 'A',\n    'RU3': 'U',\n    'RU5': 'U',\n    'RC3': 'C',\n    'RC5': 'C',\n    'RG3': 'G',\n    'RG5': 'G',\n};\nexport const NUCLEIC_RESIDUE_NAME_LETTERS = {\n    ...DNA_RESIDUE_NAME_LETTERS,\n    ...RNA_RESIDUE_NAME_LETTERS,\n    'A': 'A',\n    'A3': 'A',\n    'A5': 'A',\n    'C': 'C',\n    'C3': 'C',\n    'C5': 'C',\n    'G': 'G',\n    'G3': 'G',\n    'G5': 'G',\n};\n// All of them together\nexport const RESIDUE_NAME_LETTERS = {\n    ...PROTEIN_RESIDUE_NAME_LETTERS,\n    ...NUCLEIC_RESIDUE_NAME_LETTERS\n};\n\n// Lipid common residue names\n// Source: https://github.com/NMRLipids/Databank/blob/main/Scripts/DatabankLib/settings/molecules.py#L10\n// Meanings: https://github.com/NMRLipids/Databank/blob/48fdf2c4149d0db8900ce08b0e74dc1836dcfab3/Scripts/BuildDatabank/docs/source/moleculesAndMapping.md?plain=1#L50\nexport const FATTY_RESIDUE_NAMES = new Set([\n    \"POPC\", \"POPG\", \"POPS\", \"POPE\", \"PYPC\", \"PAzePCprot\", \"PAzePCdeprot\", \"DMPC\", \n    \"DPPC\", \"DPPE\", \"DPPG\", \"DEPC\", \"DRPC\", \"DYPC\", \"DLPC\", \"DLIPC\", \"DOG\", \"DOPC\", \n    \"DOPE\", \"DDOPC\", \"DOPS\", \"DSPC\", \"DAPC\", \"DMTAP\", \"SDG\", \"SDPE\", \"SOPC\", \"POPI\", \n    \"SAPI\", \"SAPI24\", \"SAPI25\", \"SLPI\", \"CER\", \"CER180\", \"DHMDMAB\", \"SLiPC\", \"SM16\",\n    \"SM18\", \"TOCL\", \"TLCL_0H\", \"TMCL\", \"GM1\", \"DPPGK\", \"GB3\", \"BOG\"\n]);\nexport const STEROID_RESIDUE_NAMES = new Set([ \"CHL\", \"CHL1\", \"CHOL\", \"DCHOL\" ]);\n\n// Set typical residue names to guess what residues are\nexport const STANDARD_SOLVENT_RESIDUE_NAMES = new Set([ 'SOL', 'WAT', 'HOH', 'TIP', 'TP3', 'SWM4' ]);\n// WARNING: Note that standard names also include + and - symbols\n// Use functions such as Structure.select_counter_ions instead of checking if the set includes a name\nexport const STANDARD_COUNTER_CATION_ATOM_NAMES = new Set([ 'K', 'NA', 'SOD', 'POT' ]);\nexport const STANDARD_COUNTER_ANION_ATOM_NAMES = new Set([ 'CL', 'CLA' ]);\nexport const STANDARD_COUNTER_ION_ATOM_NAMES = STANDARD_COUNTER_CATION_ATOM_NAMES.union(STANDARD_COUNTER_ANION_ATOM_NAMES)\nexport const STANDARD_DUMMY_ATOM_NAMES = new Set([ 'MW' ]);\nexport const DUMMY_ATOM_ELEMENT = 'Dm'\nexport const CG_ATOM_ELEMENT = 'Cg'","import {\n  RESIDUE_NAME_LETTERS,\n  PROTEIN_RESIDUE_NAME_LETTERS,\n  DNA_RESIDUE_NAME_LETTERS,\n  RNA_RESIDUE_NAME_LETTERS,\n  NUCLEIC_RESIDUE_NAME_LETTERS,\n  FATTY_RESIDUE_NAMES,\n  STEROID_RESIDUE_NAMES,\n  STANDARD_SOLVENT_RESIDUE_NAMES,\n  STANDARD_COUNTER_ION_ATOM_NAMES,\n  STANDARD_DUMMY_ATOM_NAMES,\n  DUMMY_ATOM_ELEMENT,\n  CG_ATOM_ELEMENT\n} from './residues-library';\nimport { countElement, parsedSelectionRanger } from 'src/utils/auxiliar-functions';\n\n// Topology manager\n// Many functions to handle atom/residue/chain numeration conversions and more\n// All these functions which need the topology are able to read the context topology\n// However, it may be better to pass them the topology as an argument since the context may be null\n\n// Set the element colors for displaying\nconst ELEMENT_COLORS = {\n  H: 'white',\n  C: 'grey',\n  N: 'blue',\n  O: 'red',\n  S: 'yellow',\n  P: 'orange',\n};\n\n// Set an atom handler\nclass Atom {\n  // Constructor expects the topology this atom belongs to and the atom index\n  constructor (topology, atomIndex) {\n    this.topology = topology;\n    this.index = atomIndex;\n  }\n  // Atom name\n  get name () {\n    return this.topology.atomNames[this.index];\n  }\n  // Index of the residue this atom belongs to\n  get residueIndex () {\n    return this.topology.atomResidueIndices[this.index];\n  }\n  // Residue this atom belongs to\n  get residue () {\n    return this.topology.getResidueByIndex(this.residueIndex);\n  }\n  // Atom element\n  get element () {\n    return this.topology.atomElements[this.index];\n  }\n  // Viewer color representations for this atom according to tis element\n  get elementColor () {\n    const color = ELEMENT_COLORS[this.element];\n    if (!color) return 'black';\n    return color;\n  }\n  // Check if the resiude is coarse grained\n  get isCg () {\n    return this.element === CG_ATOM_ELEMENT;\n  }\n}\n\n// Set a residue handler\nclass Residue {\n  // Constructor expects the topology this residue belongs to and the residue index\n  constructor(topology, residueIndex) {\n    this.topology = topology;\n    this.index = residueIndex;\n    // Internal variables\n    this._classification = undefined;\n  }\n  // Original residue number (source numeration)\n  get number () {\n    return this.topology.residueNumbers[this.index];\n  }\n  // Chain index\n  get chainIndex () {\n    return this.topology.residueChainIndices[this.index];\n  }\n  // Chain name\n  get chainName () {\n    return this.topology.chainNames[this.chainIndex];\n  }\n  // Chain handler\n  get chain () {\n    return this.topology.getChainByIndex(this.chainIndex);\n  }\n  // Insertion code\n  get icode () {\n    if (!this.topology.residueIcodes) return null;\n    return this.topology.residueIcodes[this.index];\n  }\n  // NGL selection of this specific residue\n  get nglSelection () {\n    let selection = `:${this.chainName} and ${this.number}`\n    if (this.icode) selection += ` ^${this.icode}`\n    return selection;\n  }\n  // Residue name\n  get name () {\n    return this.topology.residueNames[this.index];\n  }\n  // Residue standard letter (e.g. ARG -> R)\n  get letter () {\n    if (!this.name) return;\n    const letter = RESIDUE_NAME_LETTERS[this.name];\n    if (letter) return letter;\n    return 'X';\n  }\n  // Get a cassification for this residue\n  // This is quite standard for proteins and nucleic acids\n  // It also relies on references to classify ligands\n  // However, it delegates in the 'classificationByName' function for the rest\n  // Available classifications:\n  // - protein\n  // - dna\n  // - rna\n  // - carbohydrate\n  // - fatty\n  // - steroid\n  // - ion\n  // - solvent\n  // - acetyl\n  // - amide\n  // - other\n  get classification () {\n    // If the classification was previously found then return the stored value\n    if (this._classification !== undefined) return this._classification;\n    // If this is a coarse grain residue then we can not classify it through the smart way\n    // We can only rely in residue names\n    if (this.isCg) {\n      this._classification = this.classificationByName;\n      return this._classification;\n    }\n    // Classify according this residue according to its atom composition\n    // ----- Ions -----------------------------------------------\n    // If it has only one atom then it must be an ion\n    if (this.atomCount === 1) {\n      this._classification = 'ion';\n      return this._classification;\n    }\n    // ----- Solvent -----------------------------------------------\n    // Solvent is water molecules\n    // First rely on the residue name\n    if (this.name in STANDARD_SOLVENT_RESIDUE_NAMES) {\n      this._classification = 'solvent'\n      return this._classification\n    }\n    // It may be water with a not known name\n    // Literally check if its a molecule with 3 atoms: 2 hydrogens and 1 oxygen\n    if (this.atomCount === 3) {\n      const atomElements = this.atoms.map(atom => atom.element);\n      const hydrogenCount = countElement(atomElements, 'H');\n      const oxygenCount = countElement(atomElements, 'O');\n      if (hydrogenCount === 2 && oxygenCount === 1) {\n        this._classification = 'solvent'\n        return this._classification\n      }\n    }\n    // ----- Protein -----------------------------------------------\n    // Protein definition according to vmd:\n    // a residue with atoms named C, N, CA, and O\n    // In our case we accept OC1 and OC2 or OT1 and OT2 instead of O for terminal residues\n    const atomNames = new Set(this.atoms.map(atom => atom.name));\n    if (['C', 'N', 'CA'].every(name => atomNames.has(name)) && (\n      atomNames.has('O') ||\n      ['OC1', 'OC2'].every(name => atomNames.has(name)) ||\n      ['OT1', 'OT2'].every(name => atomNames.has(name))\n    )) {\n      this._classification = 'protein'\n      return this._classification\n    }\n    // ----- Nucleic -----------------------------------------------\n    // Nucleic acids definition according to vmd:\n    // a residue with atoms named P, O1P, O2P and either O3’, C3’, C4’, C5’, O5’ or O3*, C3*, C4*, C5*, O5*\n    // Apparently it has been fixed so now a residue does not need to be phosphorylated to be considered nucleic\n    if ([\"O3'\", \"C3'\", \"C4'\", \"C5'\", \"O5'\"].every(name => atomNames.has(name))\n    || [\"O3*\", \"C3*\", \"C4*\", \"C5*\", \"O5*\"].every(name => atomNames.has(name))) {\n      // At this point we know it is nucleic\n      // We must tell the difference between DNA and RNA\n      if (atomNames.has(\"O2'\") || atomNames.has(\"O2*\")) this._classification = 'rna'\n      else this._classification = 'dna'\n      return this._classification\n    }\n    // ----- Ligands -----------------------------------------------\n    // If this residue is a ligand according to the references then classify it as ligand\n    if (this.referenceType === 'ligand') {\n      this._classification = 'ligand'\n      return this._classification\n    }\n    // ----- Others -----------------------------------------------\n    // If the residue does not fall in any of the previous conditions then try it with the residue name\n    this._classification = this.classificationByName;\n    return this._classification;\n  }\n  // Set an alternative function to \"try\" to classify the residues according only to its name\n  // This is useful for corase grain residues whose atoms may not reflect the real atoms\n  // WARNING: This logic is very limited and may return \"unknown\"\n  // WARNING: This logic relies in atom names, which may be not standard\n  get classificationByName () {\n    if (this.name in PROTEIN_RESIDUE_NAME_LETTERS) return 'protein';\n    if (this.name in DNA_RESIDUE_NAME_LETTERS) return 'dna';\n    if (this.name in RNA_RESIDUE_NAME_LETTERS) return 'rna';\n    if (this.name in NUCLEIC_RESIDUE_NAME_LETTERS) return 'nucleic';\n    if (FATTY_RESIDUE_NAMES.has(this.name)) return 'fatty';\n    if (STEROID_RESIDUE_NAMES.has(this.name)) return 'steroid';\n    if (STANDARD_COUNTER_ION_ATOM_NAMES.has(this.name)) return 'ion';\n    if (STANDARD_SOLVENT_RESIDUE_NAMES.has(this.name)) return 'solvent';\n    // If we do not know what it is\n    return 'unknown'\n  }\n  // Reference index in the topology\n  get referenceIndex () {\n    if (!this.topology.residueReferenceIndices) return null;\n    return this.topology.residueReferenceIndices[this.index];\n  }\n  // Reference id\n  get referenceId () {\n    const referenceIndex = this.referenceIndex;\n    if (referenceIndex === null) return null;\n    return this.topology.references[referenceIndex];\n  }\n  // Reference type\n  get referenceType () {\n    const referenceIndex = this.referenceIndex;\n    if (referenceIndex === null) return null;\n    return this.topology.referenceTypes[referenceIndex];\n  }\n  // Reference residue number (reference numeration)\n  get referenceNumber () {\n    if (!this.topology.residueReferenceNumbers) return null;\n    return this.topology.residueReferenceNumbers[this.index];\n  }\n  // Reference data\n  get referenceData () {\n    // If this residue has reference id then it belongs to no reference at all\n    if (this.referenceId === null) return null;\n    // Otherwise get the corresponding reference data\n    if (this.referenceType === 'protein') {\n      const reference = this.topology.proteinReferences.find(ref => ref.uniprot === this.referenceId);\n      if (!reference) throw new Error(`Reference id ${this.referenceId} is not found among protein references`);\n      return reference;\n    }\n    if (this.referenceType === 'ligand') {\n      const reference = this.topology.ligandReferences.find(ref => ref.pubchem === this.referenceId);\n      if (!reference) throw new Error(`Reference id ${this.referenceId} is not found among ligand references`);\n      return reference;\n    }\n    throw new Error(`Not supported reference type ${this.referenceType}`);\n  }\n  // Reference name\n  get referenceName () {\n    // If this is a ligand we may have a forced name in metadata\n    const forcedLigandName = this.topology.metadataLigandNames && this.topology.metadataLigandNames[this.referenceId];\n    if (forcedLigandName) return forcedLigandName;\n    // Get reference data\n    const referenceData = this.referenceData;\n    if (!referenceData) return null;\n    // Now return its name\n    return referenceData.name;\n  }\n  // Check if the resiude is in periodic boundary conditions\n  get isPbc () {\n    return this.topology.pbcResidues.has(this.index);\n  }\n  // Check if the resiude is coarse grained\n  get isCg () {\n    for (const atom of this.iteratoms())\n      if (atom.isCg) return true;\n    return false;\n  }\n  // Standard label for display\n  get standardLabel () {\n    // Add the chain to the label only if there is more than ona chain\n    let labelChain = '';\n    if (this.topology.chainNames.length > 1 ) labelChain = `${this.chainName}:`;\n    // Use the reference numeration if possible\n    // Use the source numeration otherwise\n    const referenceNumber = this.referenceNumber;\n    let labelNumber;\n    if (referenceNumber !== null) labelNumber = `${referenceNumber}`;\n    else labelNumber = `${this.number}*`;\n    // Get the insertion code\n    let labelIcode = this.icode;\n    if (!labelIcode) labelIcode = '';\n    // Get the residue name\n    const labelType = `(${this.name})`;\n    // Finally return the label\n    return labelChain + labelNumber + labelIcode + labelType;\n  }\n  // Atom indices for atoms which belong to this residue\n  get atomIndices () {\n    return this.topology.residueAtomIndices[this.index];\n  }\n  // Number of atoms which belong to this residue\n  get atomCount () {\n    return this.atomIndices.length;\n  }\n  // Check if the residue has an alpha carbon\n  get hasCAlpha () {\n    for (const atom of this.iteratoms())\n      if (atom.name === 'CA') return true;\n    return false;\n  }\n  // Iterate residue atoms\n  * iteratoms () {\n    for (const atomIndex of this.atomIndices)\n      yield new Atom(this.topology, atomIndex);\n  }\n  // Get all atoms already parsed\n  get atoms () {\n    return [...this.iteratoms()];\n  }\n};\n\n// Set a chain handler\nclass Chain {\n  // Constructor expects the chain index\n  constructor(topology, chainIndex) {\n    this.topology = topology;\n    this.index = chainIndex;\n  }\n  // Get the chain name\n  get name () {\n    return this.topology.chainNames[this.index];\n  }\n  get letter () {\n    return this.name;\n  }\n  // Get the metadata chain name\n  get metadataChainName () {\n    const metadataChainNames = this.topology.metadataChainNames;\n    if (!metadataChainNames) return '';\n    // OBSOLETE: Chains were stored as an array of names long time ago\n    if (Array.isArray(metadataChainNames)) return metadataChainNames[this.index] || '';\n    // Chains are stored as and object (e.g. { 'A': 'ACE2', 'B': 'RBD' })\n    else return metadataChainNames[this.name] || '';\n  }\n  // Get residue indcies\n  get residueIndices () {\n    return this.topology.chainResidueIndices[this.index];\n  }\n  // Get residue numbers\n  get residueNumbers () {\n    return this.topology.chainResidueNumbers[this.index];\n  }\n  // Get the residue sequence\n  get sequence () {\n    return this.sequences[this.index];\n  }\n  // Iterate chain residues\n  * iterresidues () {\n    for (const residueIndex of this.residueIndices)\n      yield new Residue(this.topology, residueIndex);\n  }\n  // Get all residues already parsed\n  get residues () {\n    return [...this.iterresidues()];\n  }\n}\n\nexport class Topology {\n  constructor(topology, metadata, references) {\n    // Save the topology data as it comes\n    this.atomNames = topology.atom_names;\n    this.atomElements = topology.atom_elements;\n    this.atomCharges = topology.atom_charges;\n    this.atomResidueIndices = topology.atom_residue_indices;\n    this.residueNames = topology.residue_names;\n    this.residueNumbers = topology.residue_numbers;\n    // Residue icodes have a different structure, since usually there are only a few icodes and not 1 per residue\n    // It is an object where keys are residue indices\n    // It is null when there are not icodes at all in the topology\n    // In order to convert it to the other values format we transform the object into an array\n    // Non assigned indices will become empty strings\n    const icodes = topology.residue_icodes;\n    // In case we have no icodes at all we set the icodes list as an empty string\n    // This is usefull for icode getters that do 'icodes && ...'\n    if (!icodes) this.residueIcodes = '';\n    else {\n      this.residueIcodes = Array(this.residueNames.length).fill('');\n      Object.entries(icodes).forEach(([residueIndex, icode]) => {\n        this.residueIcodes[+residueIndex] = icode;\n      });\n    }\n    this.residueChainIndices = topology.residue_chain_indices;\n    this.chainNames = topology.chain_names;\n    this.references = topology.references;\n    this.referenceTypes = topology.reference_types;\n    // DANI: Esta linea es para mantener las topologías viejas que solo tienen referencias de proteínas\n    if (!this.referenceTypes && this.references) this.referenceTypes = this.references.map(r => 'protein');\n    this.residueReferenceIndices = topology.residue_reference_indices;\n    this.residueReferenceNumbers = topology.residue_reference_numbers;\n    // Save atom bonds\n    this.atomBonds = topology.atom_bonds\n    // Save the PBC (Priodic Boundary Conditions) residues\n    this.pbcResidues = topology.pbc_residues && new Set(topology.pbc_residues);\n    // Data is stored in a down-top structure according to atom-residue-chain indices\n    // i.e. atoms know which residue they belong to and residues know which chain they belong to\n    // Now set the top-down structure values\n    // i.e. set which atoms are contained on every residue and which residues are contained on every chain\n    // WARNING: Note that arrays of empty arrays can not be filled as when filled with nulls or empty strings\n    // WARNING: We must fill them with this complicated method or all empty arrays would be the same array\n    this.residueAtomIndices = Array.from(Array(this.residueNames.length), () => []);\n    for (const [atomIndex, residueIndex] of this.atomResidueIndices.entries()) {\n      this.residueAtomIndices[residueIndex].push(atomIndex);\n    }\n    this.chainResidueIndices = Array.from(Array(this.chainNames.length), () => []);\n    for (const [ residueIndex, chainIndex ] of this.residueChainIndices.entries()) {\n      this.chainResidueIndices[chainIndex].push(residueIndex);\n    }\n    this.chainResidueNumbers = this.chainResidueIndices.map(\n      residueIndices => residueIndices.map(residueIndex => this.residueNumbers[residueIndex])\n    );\n    // Get chain sequences by adding all residue letters together for each chain\n    this.sequences = this.chainResidueIndices.map(residueIndices => \n      residueIndices.map(residueIndex => this.getResidueByIndex(residueIndex).letter).join('')\n    );\n    // Save metadata chain names\n    // They are not letters ('A', 'B', etc.) but actual names ('Spike', 'Glycans', etc.)\n    this.metadataChainNames = metadata.CHAINNAMES;\n    // Save metadata forced ligand names\n    this.metadataLigandNames = metadata.LIGANDNAMES;\n    // Save the references so we can further return reference data from here\n    this.proteinReferences = references.proteins;\n    this.ligandReferences = references.ligands;\n    this.chainReferences = references.chains;\n    // Assign the chain name and index to every chain reference\n    // Match every chain reference with its chain relying on sequence\n    for (const chainReference of this.chainReferences) {\n      chainReference.chains = [];\n      chainReference.chain_indices = [];\n      for (const [chainIndex, chainName] of Object.entries(this.chainNames)) {\n        // Match sequence\n        const chainSequence = this.sequences[chainIndex];\n        if (chainSequence !== chainReference.sequence) continue;\n        // Once we have a match assign the corresponding name and index\n        chainReference.chains.push(chainName);\n        chainReference.chain_indices.push(+chainIndex);\n      }\n      // If we did not manage to match this chain then log an error\n      if (chainReference.chain_indices.length === 0)\n        console.error('Unmatched chain reference ' + chainReference.sequence);\n    }\n  }\n\n  // --------------------------------------------------------------------\n  // BASICS\n  // --------------------------------------------------------------------\n\n  get atomCount () {\n    return this.atomNames.length;\n  }\n\n  get residueCount () {\n    return this.residueNumbers.length;\n  }\n\n  get chainCount () {\n    return this.chainNames.length;\n  }\n\n  // --------------------------------------------------------------------\n  // Atom getters\n  // --------------------------------------------------------------------\n\n  getAtomByIndex = atomIndex => {\n    const count = this.atomCount;\n    if (atomIndex >= count) throw new Error(\n      `The atom index ${atomIndex} is out of range. There are ${count} atoms in the topology`,\n    );\n    return new Atom(this, atomIndex);\n  };\n\n  // --------------------------------------------------------------------\n  // Residue getters\n  // --------------------------------------------------------------------\n\n  // Given a residue index, return its handler\n  getResidueByIndex = residueIndex => {\n    const count = this.residueCount;\n    if (residueIndex >= count) throw new Error(\n      `The residue index ${residueIndex} is out of range. There are ${count} residues in the topology`,\n    );\n    return new Residue(this, residueIndex);\n  };\n\n  // Given a residue parameters, find the residue and then return its handler\n  getResidueByParameters = (chainName, number, icode = null) => {\n    // Get the residue chain\n    const chain = this.getChainByName(chainName);\n    // Now iterate residues starting at this index\n    for (const residueIndex of chain.residueIndices) {\n      const residue = new Residue(this, residueIndex);\n      // Check if the residue number matches\n      if (residue.number !== number) continue;\n      // Check if the insertion code matches\n      if (residue.icode !== icode) continue;\n      // If everything matches then return this residue\n      return residue;\n    }\n    // There should always be a match\n    const icode_message = icode ? `icode ${icode}` : `no icode`\n    throw new Error(\n      `Residue with chain ${chainName}, number ${number} and ${icode_message} does not exist`,\n    );\n  };\n\n  // --------------------------------------------------------------------\n  // Chain getters\n  // --------------------------------------------------------------------\n\n  // Given a chain index, return its handler\n  getChainByIndex = chainIndex => {\n    const count = this.chainNames.length;\n    if (chainIndex >= count) throw new Error(\n      `The chain index ${chainIndex} is out of range. There are ${count} chains in the topology`,\n    );\n    return new Chain(this, chainIndex);\n  }\n\n  // Given a chain name, find the chain and return its handler\n  getChainByName = chainName => {\n    const chainIndex = this.chainNames.indexOf(chainName);\n    if (chainIndex === -1)\n      throw new Error(`Chain ${chainName} is not found in the topology`);\n    return new Chain(this, chainIndex);\n  }\n\n  // --------------------------------------------------------------------\n  // ITERATORS\n  // --------------------------------------------------------------------\n\n  // Iterate topology atoms\n  * iteratoms () {\n    for (let atomIndex = 0; atomIndex < this.atomCount; atomIndex++) \n      yield new Atom(this, atomIndex);\n  }\n\n  // Iterate topology residues\n  * iterresidues () {\n    for (let residueIndex = 0; residueIndex < this.residueCount; residueIndex++) \n      yield new Residue(this, residueIndex);\n  }\n\n  // Iterate topology chains\n  * iterchains () {\n    for (let chainIndex = 0; chainIndex < this.chainCount; chainIndex++) \n      yield new Chain(this, chainIndex);\n  }\n\n  // --------------------------------------------------------------------\n  // OTHER\n  // --------------------------------------------------------------------\n\n  // This function returns residue indices for every residue which belongs to a reference\n  // The reference must be specified with the topology reference id (i.e. uniprot id)\n  // Optionally, you may request only specific residue numbers according to reference numeration\n  // Note that one residue in the reference may be more than once or not be at all in the topology\n  getReferenceResidueIndices = (reference, residueNumbers = null) => {\n    if (!this.references) return;\n    // Get the requested reference index\n    const referenceIndex = this.references.indexOf(reference);\n    if (referenceIndex === -1) return;\n    const residueIndices = [];\n    this.residueReferenceIndices.forEach((refIndex, residueIndex) => {\n      if (refIndex !== referenceIndex) return;\n      // If no residue number were specified then simply return all residue indcies\n      if (residueNumbers === null) return residueIndices.push(residueIndex);\n      // Otherwise we must check\n      const residueNumber = this.residueReferenceNumbers[residueIndex];\n      if (residueNumbers.includes(residueNumber)) residueIndices.push(residueIndex);\n    });\n    return residueIndices;\n  };\n\n  // Set an NGL selection from a list of residue indices\n  // e.g. [0, 1, 2, 3, ...] => nglSelection = \"(A: and 1, 3-5) or (B: and 1)\"\n  // In addition track if there is any small serie (i.e. 3 residues or less)\n  // DANI: Esta función no sería necesaria si se pudiesen hacer selecciones en NGL con índices de residuos\n  // DANI: De hecho no haría falta eliminar residuos duplicados si se pudiesen hacer selecciones en NGL con índices de residuos\n  residueIndices2Ngl = residueIndices => {\n    const rangedSelections = [];\n    let small = false;\n    // Parse each residue in complex notation\n    const parsedResidues = residueIndices.map(residueIndex => this.getResidueByIndex(residueIndex));\n    // Get unique chains\n    const chains = parsedResidues.map(r => r.chainName).filter((v, i, a) => a.indexOf(v) === i);\n    // For each chain, get all residues and \"range\" them\n    chains.forEach(chain => {\n      const chainResidues = parsedResidues.filter(v => v.chainName === chain).map(r => r.number);\n      const { rangedSelection: ranged, small: smallChain } = parsedSelectionRanger(chainResidues);\n      rangedSelections.push(`(:${chain} and (${ranged}))`); // Al parenthesis are mandatory\n      if (smallChain) small = true; // If any chain small is true then the overall small is true\n    });\n    // Join all ranged selections\n    const rangedSelection = rangedSelections.join(' or ');\n    return { rangedSelection, small };\n  };\n\n  // Given a list of residues indices, separate them by chain and return an object where keys are chain names\n  // e.g. [ 1, 2, 3, 17 ] -> { 'A': [1,2,3], 'B': [17] }\n  byChains = residuesIndices => {\n    const chained = {};\n    residuesIndices.forEach(residueIndex => {\n      const chainName = this.getResidueByIndex(residueIndex).chainName;\n      const current = chained[chainName];\n      if (current) current.push(residueIndex);\n      else chained[chainName] = [residueIndex];\n    });\n    return chained;\n  };\n\n  // Get all atom colors according to their elements\n  getAtomELEMENT_COLORS = () => {\n    return this.atomElements.map(element => {\n      const color = ELEMENT_COLORS[element];\n      if (!color) return 'black';\n      return color;\n    });\n  };\n}\n","// Get the use memo hook\nimport React, { useEffect, useMemo, useState } from 'react';\n// Function to request data through the API\nimport useAPI from '../../hooks/use-api';\n// Constants\nimport {\n    BASE_PATH_PROJECTS,\n    HOST_CONFIG,\n    REFERENCES_WITH_ENTROPIES,\n    REFERENCES_WITH_EPITOPES\n} from '../constants';\n// Import the topology manager class\nimport { Topology } from '../../utils/topology-manager';\n// Import the NGL structure parser\nimport { autoLoad } from 'ngl';\n\n// Set the project class\nexport class Project {\n    constructor(projectPayload) {\n        // Replicate all payload values in the project object\n        // This includes values such as metadata, files index, accession, etc.\n        Object.entries(projectPayload).forEach(([key, value]) => {\n            this[key] = value;\n        });\n        // If the project is si wrong we do not even have metadata then stop here\n        if (!this.metadata) return;\n        // Calculate any additional metadata\n        if (!this.metadata.mdFrames) this.metadata.mdFrames = this.metadata.SNAPSHOTS;\n        this.metadata.timeLength = (this.metadata.FRAMESTEP && this.metadata.mdFrames &&\n            this.metadata.FRAMESTEP * this.metadata.mdFrames) || null;\n        // Set the count of MDs by excluding those MDs flagged as 'removed'\n        this.mdCount = this.mds ? this.mds.filter(md => md.slice(-9) !== '(removed)').length : 0;\n        // Calculate a few internal things\n        // Get the accession and the MD number in a single string which is useful to make API requests\n        // If project is in the old format then do not add the point and the MD number\n        const accessionOrId = this.accession || this.identifier;\n        this.accessionAndMdNumber = this.mds ? `${accessionOrId}.${this.mdNumber}` : accessionOrId;\n        // Check if there are interactions\n        this.hasInteractions = this.analyses.includes('interactions');\n        // Check if the populations file is found in the files index\n        this.isPopulated = Boolean(\n            this.files && this.files.find(filename => filename === 'populations.json'),\n        );\n        // Set the available directions in the client according to project data and host configuration\n        // IMPORTANT: Note that for every direction there must be a directory with equal name under src/pages/accession/\n        // Start with the directions which are to be always available\n        this.directions = {\n            overview: true,\n            trajectory: true,\n            files: true\n        }\n        // Set available analyses\n        // Start with the generic analyses\n        // These analyses are always visible but not clickable when data is missing\n        const genericAnalyses = [ 'rmsds', 'rgyr', 'fluctuation', 'pca', 'rmsd-perres',\n            'rmsd-pairwise', 'dist-perres', 'hbonds', 'energies', 'pockets', 'sasa', 'clusters',\n             'density', 'thickness', 'apl', 'lipid-order', 'lipid-inter' ];\n        for (const analysis of genericAnalyses) {\n            this.directions[analysis] = this.analyses.includes(analysis);\n        }\n        // Add the electrostatic direction whenever there are interactions\n        this.directions['electrostatic'] = this.analyses.includes('interactions');\n        // Add reference specific directions\n        this.directions['ligand-descriptors'] = Boolean(this.metadata && this.metadata.LIGANDS && this.metadata.LIGANDS.length > 0);\n        // Now set some specialized analyses\n        // These analyses are hidden when the project is out of context\n        // Their availability may be also more complicated than the generic ones\n        // Set covid-19 specific analyses\n        if (HOST_CONFIG.options.includes('covid')) {\n            const anyReferenceWithEntropies = this.metadata && this.metadata.REFERENCES &&\n                this.metadata.REFERENCES.find(ref => REFERENCES_WITH_ENTROPIES.includes(ref));\n            this.directions['mutations'] = Boolean(anyReferenceWithEntropies);\n            const anyReferenceWithEpitopes = this.metadata && this.metadata.REFERENCES &&\n                this.metadata.REFERENCES.find(ref => REFERENCES_WITH_EPITOPES.includes(ref));\n            this.directions['epitopes'] = Boolean(anyReferenceWithEpitopes);\n        }\n        // Set MSM specific analyses\n        if (this.metadata && this.metadata.METHOD === 'Markov state model (MSM)') {\n            this.directions['populations'] = this.files && this.files.find(file => file === 'populations.json');\n            this.directions['markov'] = this.analyses.includes('markov');\n        }\n        // Set an internal object to save data requested through the API\n        this._apiResponses = {\n            topology: undefined,\n            interactions: undefined,\n            references: undefined,\n            fileDescriptors: undefined,\n            populations: undefined\n        };\n        // Save the topology manager apart so we do not have to re-instantiate the class every time\n        this._topologyManager = null;\n        // Set the project base URL to request the API\n        this._apiBaseUrl = `${BASE_PATH_PROJECTS}/${this.accessionAndMdNumber}`;\n        // Set the creation date as a date object\n        this.creationDate = new Date(this.creationDate).toLocaleDateString('en-GB');\n        this.updateDate = this.updateDate ? new Date(this.updateDate).toLocaleDateString('en-GB') : undefined;\n    }\n    // Declare the different field endpoints to request the API\n    _apiEndpoints = {\n        topology: `/topology`,\n        structure: `/structure`,\n        interactions: `/analyses/interactions`,\n        references: `/references`,\n        fileDescriptors: `/filenotes`,\n        populations: `/files/populations.json`,\n    }\n    // Set a function to query the API and store the response for internal variables\n    _apiQuery = (fieldname, available = true) => {\n        // Set the request URL\n        let url = this._apiBaseUrl + this._apiEndpoints[fieldname];\n        // Request the value if it is available only\n        if (!available) url = null;\n        // If data for the requested fieldname is already saved then set the url as null\n        // This makes the useAPI hook not to repeat the query\n        if (this._apiResponses[fieldname] && this._apiResponses[fieldname].payload) url = null;\n        // Do the API query but save the result only if the url is not null\n        // Note that if url is null from the first render (i.e. there is not value at all) then its value will be null\n        const query = useAPI(url);\n        if (url !== null) this._apiResponses[fieldname] = query;\n        // If we are still loading then\n        return this._apiResponses[fieldname];\n    };\n\n    // Interactions getter\n    get interactions () {\n        const response = this._apiQuery('interactions', this.hasInteractions);\n        if (response === undefined) return undefined;\n        if (response.loading) return undefined;\n        if (response.error) throw new Error('Error when downloading project interactions: ' + response.error.message);\n        if (!response.payload) throw new Error('Something went wrong with project interactions');\n        return response.payload;\n    }\n\n    // References getter\n    get references () {\n        const response = this._apiQuery('references');\n        if (response.loading) return undefined;\n        if (response.error) throw new Error('Error when downloading project references: ' + response.error.message);\n        if (!response.payload) throw new Error('Something went wrong with project references');\n        return response.payload;\n    }\n    // Specific references getters\n    get proteinReferences () {\n        const references = this.references;\n        return useMemo(() => references && references.filter(ref => ref.ref_type === 'proteins'), [references]);\n    }\n    get ligandReferences () {\n        const references = this.references;\n        return useMemo(() => references && references.filter(ref => ref.ref_type === 'ligands'), [references]);\n    }\n    get pdbReferences () {\n        const references = this.references;\n        return useMemo(() => references && references.filter(ref => ref.ref_type === 'pdbs'), [references]);\n    }\n    get chainReferences () {\n        const references = this.references;\n        return useMemo(() => references && references.filter(ref => ref.ref_type === 'chains'), [references]);\n    }\n\n    // Topology getter\n    get topology () {\n        // Get references to further load them to the topology manager\n        // Note that this must be done here to respect hooks\n        const references = this.references;\n        // Set an object with references used by the topology manager already classified\n        const topologyManagerReferences = {\n            proteins: this.proteinReferences,\n            ligands: this.ligandReferences,\n            chains: this.chainReferences\n        };\n        // Request topology data\n        const response = this._apiQuery('topology');\n        // Make sure data is available\n        if (response.loading) return undefined;\n        if (response.error) throw new Error('Error when downloading project topology: ' + response.error.message);\n        if (!response.payload) throw new Error('Something went wrong with project topology');\n        // Return the stored value in case we already have it\n        if (this._topologyManager) return this._topologyManager;\n        // Make sure references are available\n        if (references === undefined) return undefined;\n        this._topologyManager = new Topology(response.payload, this.metadata, topologyManagerReferences);\n        return this._topologyManager;\n    }\n\n    // File descriptors getter\n    get fileDescriptors () {\n        return this._apiQuery('fileDescriptors');\n    }\n    // Populations getter (populated ensembles only)\n    // Populations are requested only when this variable is read for the first time\n    // Then populations are stored so there is no need to repeat the query again\n    get populations () {\n        return this._apiQuery('populations', this.isPopulated);\n    }\n\n    // Get the reference frame\n    // Coordinates from this frame are to be used when representing the structure\n    // It is a frame which has been selected for distance between atoms to be coherent with atom bonds\n    // i.e. there are not bonded atoms to far or non-bonded atoms to close\n    // If bonds were to be guessed by atom distance they would be guess right\n    get referenceFrame () {\n        // If there is no reference frame then we use the first frame by default\n        // Note that old outdated projects may not have reference frame\n        if (this.refframe === undefined) return 0;\n        return this.refframe;\n    }\n\n    // Get the main structure data\n    // Note that the viewer would be already able to do it itself\n    // However we do it from here since this data is to be reused along different pages\n    // Thus we avoid having to download the same data every time\n    get structureData () {\n        // Ask the API for the structural data\n        const response = this._apiQuery('structure');\n        // Parse and memoize the result\n        const structureData = useMemo(() => {\n            if (!response.payload) return undefined;\n            return new Blob( [ response.payload ], { type: 'text/plain'} );\n        }, [response.payload]);\n        // Wait for the response and handle some possible errors\n        if (response.loading) return undefined;\n        if (response.error) throw new Error('Error when downloading project structure: ' + response.error.message);\n        if (!response.payload) throw new Error('Something went wrong with project structure');\n        return structureData\n    }\n\n    // Get the main structure data parsed by NGL\n    get nglStructure () {\n        // Set a state to store the already parsed data\n        const [ nglStructure, setNglStructure ] = useState(undefined);\n        // Get the current structure data\n        const structureData = this.structureData;\n        // Load the structure data in NGL asynchronously    \n        useEffect(() => {\n            if (!structureData) return;\n            autoLoad(structureData, { defaultRepresentation: false, ext: \"pdb\" })\n                // Once the parse has been completed update the parsed structure state\n                .then(prasedStructure => { setNglStructure({ file: prasedStructure }) })\n                // If there is any problem then log it to the console\n                .catch(error => {\n                    console.error(error);\n                    setNglStructure({ error });\n                });\n        }, [structureData])\n        return nglStructure;\n    }\n}\n  ","import { useState, useCallback } from 'react';\n\n// useToggleState is a custom hook which returns a state and a custom function to calculate the new state\nconst useToggleState = initialState => {\n  // useState is a React hook which returns a state and a function to change this state respectively\n  // The state is the initialState at the moment it is called\n  const [state, setState] = useState(!!initialState);\n  // useCallback is a React hook which returns a memoize callback\n  const toggleState = useCallback(valueOrSetter => {\n    // Set the state according to the input type\n    switch (typeof valueOrSetter) {\n      // Funtions are accepted and set as state\n      case 'function':\n        setState(valueOrSetter);\n        break;\n      // In case of booleans, numers and strings, a function that returns the opposite in boolean format is returned\n      case 'boolean':\n      case 'number':\n      case 'string':\n        setState(Boolean(valueOrSetter));\n        break;\n      // In other cases, returns a function which just change the state to the opposite of the previours state in boolean format\n      default:\n        setState(state => !state);\n    }\n  }, []);\n\n  return [state, toggleState];\n};\n\nexport default useToggleState;\n"],"names":["WAIT_DELAY","_ref","wait","flag","toggleFlag","useToggleState","useLayoutEffect","timer","setTimeout","clearTimeout","_jsx","title","className","cn","style","children","CircularProgress","variant","color","size","thickness","blank","loading","payload","error","DEFAULT_CACHE_EXPIRATION","cache","loadCache","cachedData","localStorage","getItem","JSON","parse","url","cacheOptions","arguments","length","undefined","name","cacheOn","cacheExpiration","initialData","responseData","Date","now","received","getTime","data","setData","useState","useEffect","source","axios","didCancel","cancelToken","token","startTime","then","response","endTime","responseTime","config","time","setItem","stringify","saveCache","catch","cancel","PROTEIN_RESIDUE_NAME_LETTERS","DNA_RESIDUE_NAME_LETTERS","RNA_RESIDUE_NAME_LETTERS","NUCLEIC_RESIDUE_NAME_LETTERS","RESIDUE_NAME_LETTERS","FATTY_RESIDUE_NAMES","Set","STEROID_RESIDUE_NAMES","STANDARD_SOLVENT_RESIDUE_NAMES","STANDARD_COUNTER_CATION_ATOM_NAMES","STANDARD_COUNTER_ANION_ATOM_NAMES","STANDARD_COUNTER_ION_ATOM_NAMES","union","ELEMENT_COLORS","H","C","N","O","S","P","Atom","constructor","topology","atomIndex","this","index","atomNames","residueIndex","atomResidueIndices","residue","getResidueByIndex","element","atomElements","elementColor","isCg","Residue","_classification","number","residueNumbers","chainIndex","residueChainIndices","chainName","chainNames","chain","getChainByIndex","icode","residueIcodes","nglSelection","selection","residueNames","letter","classification","classificationByName","atomCount","atoms","map","atom","hydrogenCount","countElement","oxygenCount","every","has","referenceType","referenceIndex","residueReferenceIndices","referenceId","references","referenceTypes","referenceNumber","residueReferenceNumbers","referenceData","reference","proteinReferences","find","ref","uniprot","Error","ligandReferences","pubchem","referenceName","forcedLigandName","metadataLigandNames","isPbc","pbcResidues","iteratoms","standardLabel","labelChain","labelNumber","labelIcode","atomIndices","residueAtomIndices","hasCAlpha","Chain","metadataChainName","metadataChainNames","Array","isArray","residueIndices","chainResidueIndices","chainResidueNumbers","sequence","sequences","iterresidues","residues","Topology","metadata","_this","getAtomByIndex","count","residueCount","getResidueByParameters","getChainByName","indexOf","getReferenceResidueIndices","forEach","refIndex","push","residueNumber","includes","residueIndices2Ngl","rangedSelections","small","parsedResidues","r","filter","v","i","a","chainResidues","rangedSelection","ranged","smallChain","parsedSelectionRanger","join","byChains","residuesIndices","chained","current","getAtomELEMENT_COLORS","atom_names","atom_elements","atomCharges","atom_charges","atom_residue_indices","residue_names","residue_numbers","icodes","residue_icodes","fill","Object","entries","residue_chain_indices","chain_names","reference_types","residue_reference_indices","residue_reference_numbers","atomBonds","atom_bonds","pbc_residues","from","CHAINNAMES","LIGANDNAMES","proteins","ligands","chainReferences","chains","chainReference","chain_indices","console","chainCount","iterchains","Project","projectPayload","_apiEndpoints","structure","interactions","fileDescriptors","populations","_apiQuery","fieldname","available","_apiBaseUrl","_apiResponses","query","useAPI","key","value","mdFrames","SNAPSHOTS","timeLength","FRAMESTEP","mdCount","mds","md","slice","accessionOrId","accession","identifier","accessionAndMdNumber","mdNumber","hasInteractions","analyses","isPopulated","Boolean","files","filename","directions","overview","trajectory","genericAnalyses","analysis","LIGANDS","HOST_CONFIG","options","anyReferenceWithEntropies","REFERENCES","REFERENCES_WITH_ENTROPIES","anyReferenceWithEpitopes","REFERENCES_WITH_EPITOPES","METHOD","file","_topologyManager","BASE_PATH_PROJECTS","creationDate","toLocaleDateString","updateDate","message","useMemo","ref_type","pdbReferences","topologyManagerReferences","referenceFrame","refframe","structureData","Blob","type","nglStructure","setNglStructure","autoLoad","defaultRepresentation","ext","prasedStructure","initialState","state","setState","toggleState","useCallback","valueOrSetter"],"sourceRoot":""}