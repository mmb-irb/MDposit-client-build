{"version":3,"file":"static/js/22.817600f1.chunk.js","mappings":"2KACA,QAA0B,uBAA1B,EAAwD,oB,eCSxD,MAAMA,EAAa,IAgDnB,EA1CgBC,IAA4B,IAA3B,KAAEC,EAAOF,GAAYC,EACpC,MAAOE,EAAMC,IAAcC,EAAAA,EAAAA,IAAe,GAwB1C,OAtBAC,EAAAA,EAAAA,iBAAgB,KACd,MAAMC,EAAQC,WAAW,KACvBJ,KACCF,GACH,MAAO,IAAMO,aAAaF,IAgBzB,CAACH,EAAYF,KAGdQ,EAAAA,EAAAA,KAAA,OACEC,MAAM,aACNC,UAAWC,IAAGC,EAAe,CAAE,CAACA,GAAaX,IAAQY,SAEpDZ,IACCO,EAAAA,EAAAA,KAACM,EAAAA,EAAgB,CACfC,QAAQ,gBACRC,MAAM,UACNC,KAAM,GACNC,UAAW,M,sEC/CrB,MAAMC,EAAQ,CACZC,SAAS,EACTC,QAAS,KACTC,MAAO,MAIHF,EAAU,CACdA,SAAS,GAKLG,EAA2B,KAcjC,IAAIC,EAXcC,MAChB,MAAMC,EAAaC,aAAaC,QAAQ,YACxC,OAAOF,EAAaG,KAAKC,MAAMJ,GAAc,CAAC,GASpCD,GAEZ,MAmGA,EAnGe,SAACM,GAA4B,IAAvBC,EAAYC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEnC,MAAM,KACJG,EAAO,GAAE,QACTC,GAAU,EAAK,gBACfC,EAAkBf,GAChBS,EAGEO,EAAc,MAClB,GAAIF,GAAWb,EAAMY,GAAO,CAC1B,MAAMI,EAAehB,EAAMY,GAI3B,GAHYK,KAAKC,MACI,IAAID,KAAKD,EAAaG,UAAUC,UAE5BN,EACvB,OAAOE,CAEX,CACA,OAAOrB,CACR,EAXmB,IAab0B,EAAMC,IAAWC,EAAAA,EAAAA,UAASR,GAmEjC,OA/DAS,EAAAA,EAAAA,WAAU,KAGR,IAAKjB,EAEH,YADAe,EAAQ3B,GAMV,MAAM8B,EAASC,IAAAA,YAAkBD,SACjC,IAAIE,GAAY,EA2ChB,OAzCAD,IAAMnB,EAAK,CAETqB,YAAaH,EAAOI,MAEpBC,UAAW,IAAIb,OAGdc,KAAKC,IACJ,GAAIL,EAAW,OAEf,MAAMM,EAAU,IAAIhB,KAEdiB,EAAeD,EADHD,EAASG,OAAOL,UAG5Bd,EAAe,CACnBT,IAAKA,EACLX,SAAS,EACTC,QAASmC,EAASX,KAClBvB,MAAO,KACPsC,KAAMF,EACNf,SAAUc,GAGRpB,IACFb,EAAMY,GAAQI,EAtELhB,KACjBG,aAAakC,QAAQ,WAAYhC,KAAKiC,UAAUtC,KAsExCuC,CAAUvC,IAEZsB,EAAQN,KAGTwB,MAAM1C,IACL,GAAI6B,EAAW,OAOfL,EANqB,CACnBf,IAAKA,EACLX,SAAS,EACTC,QAAS,KACTC,MAAOA,MAKN,KAEL2B,EAAOgB,SACPd,GAAY,IAIb,CAACpB,IAECA,EAKDc,EAAKd,MAAQA,GAAOQ,EAAYR,MAAQA,EAAYc,EAE5CzB,EAPKD,CAQnB,C,mFC/HO,MAAM+C,EAA+B,CACxC,IAAM,IACN,KAAO,IACP,KAAO,IACP,IAAM,IACN,KAAO,IACP,KAAO,IACP,IAAM,IACN,KAAO,IACP,KAAO,IACP,IAAM,IACN,KAAO,IACP,KAAO,IACP,IAAM,IACN,KAAO,IACP,KAAO,IACP,IAAM,IACN,IAAM,IACN,IAAM,IACN,IAAM,IACN,IAAM,IACN,IAAM,IACN,KAAO,IACP,KAAO,IACP,IAAM,IACN,KAAO,IACP,KAAO,IACP,KAAO,IACP,IAAM,IACN,KAAO,IACP,KAAO,IACP,IAAM,IACN,KAAO,IACP,KAAO,IACP,IAAM,IACN,IAAM,IACN,IAAM,IACN,IAAM,IACN,IAAM,IACN,IAAM,IACN,KAAO,IACP,KAAO,IACP,IAAM,IACN,IAAM,IACN,KAAO,IACP,KAAO,IACP,IAAM,IACN,KAAO,IACP,KAAO,IACP,IAAM,IACN,KAAO,IACP,KAAO,IACP,IAAM,IACN,KAAO,IACP,KAAO,IACP,IAAM,IACN,KAAO,IACP,KAAO,IACP,SAAM,IACN,IAAM,IACN,IAAM,IACN,IAAM,IACN,KAAO,IACP,KAAO,IACP,IAAM,IACN,KAAO,IACP,KAAO,IACP,IAAM,IACN,KAAO,IACP,KAAO,IACP,IAAM,IACN,IAAM,IACN,KAAO,IACP,KAAO,IACP,IAAM,IACN,KAAO,IACP,KAAO,KAGEC,EAA2B,CACpC,GAAM,IACN,EAAK,IACL,GAAM,IACN,GAAM,IACN,GAAM,IACN,GAAM,IACN,GAAM,IACN,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,KAEEC,EAA2B,CACpC,GAAM,IACN,EAAK,IACL,GAAM,IACN,GAAM,IACN,GAAM,IACN,GAAM,IACN,GAAM,IACN,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,KAEEC,GAA4BC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAClCH,GACAC,GAAwB,IAC3B,EAAK,IACL,GAAM,IACN,GAAM,IACN,EAAK,IACL,GAAM,IACN,GAAM,IACN,EAAK,IACL,GAAM,IACN,GAAM,MAGGG,GAAoBD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC1BJ,GACAG,GAMMG,EAAsB,IAAIC,IAAI,CACvC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,aAAc,eAAgB,OACtE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,MAAO,OACxE,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,QAAS,MAAO,OAAQ,OAAQ,OACzE,OAAQ,SAAU,SAAU,OAAQ,MAAO,SAAU,UAAW,QAAS,OACzE,OAAQ,OAAQ,UAAW,OAAQ,MAAO,QAAS,MAAO,QAEjDC,EAAwB,IAAID,IAAI,CAAE,MAAO,OAAQ,OAAQ,UAGzDE,EAAiC,IAAIF,IAAI,CAAE,MAAO,MAAO,MAAO,MAAO,MAAO,SAG9EG,EAAqC,IAAIH,IAAI,CAAE,IAAK,KAAM,MAAO,QACjEI,EAAoC,IAAIJ,IAAI,CAAE,KAAM,QACpDK,EAAkCF,EAAmCG,MAAMF,GAC/C,IAAIJ,IAAI,CAAE,O,eC/HnD,MAAMO,EAAiB,CACrBC,EAAG,QACHC,EAAG,OACHC,EAAG,OACHC,EAAG,MACHC,EAAG,SACHC,EAAG,UAQL,MAAMC,EAEJC,WAAAA,CAAaC,EAAUC,GACrBC,KAAKF,SAAWA,EAChBE,KAAKC,MAAQF,CACf,CAEA,QAAItD,GACF,OAAOuD,KAAKF,SAASI,UAAUF,KAAKC,MACtC,CAEA,SAAIE,GACF,MAAM,GAANC,OAAUJ,KAAKK,QAAQC,cAAa,KAAAF,OAAIJ,KAAKvD,KAC/C,CAEA,gBAAI8D,GACF,OAAOP,KAAKF,SAASU,mBAAmBR,KAAKC,MAC/C,CAEA,WAAII,GACF,OAAOL,KAAKF,SAASW,kBAAkBT,KAAKO,aAC9C,CAEA,WAAIG,GACF,OAAOV,KAAKF,SAASa,aAAaX,KAAKC,MACzC,CAEA,gBAAIW,GACF,MAAMvF,EAAQgE,EAAeW,KAAKU,SAClC,OAAKrF,GAAc,OAErB,CAEA,QAAIwF,GACF,MDiF2B,OCjFpBb,KAAKU,OACd,EAIF,MAAMI,EAEJjB,WAAAA,CAAYC,EAAUS,GACpBP,KAAKF,SAAWA,EAChBE,KAAKC,MAAQM,EAEbP,KAAKe,qBAAkBvE,CACzB,CAEA,UAAIwE,GACF,OAAOhB,KAAKF,SAASmB,eAAejB,KAAKC,MAC3C,CAEA,cAAIiB,GACF,OAAOlB,KAAKF,SAASqB,oBAAoBnB,KAAKC,MAChD,CAEA,aAAImB,GACF,OAAOpB,KAAKF,SAASuB,WAAWrB,KAAKkB,WACvC,CAEA,SAAII,GACF,OAAOtB,KAAKF,SAASyB,gBAAgBvB,KAAKkB,WAC5C,CAEA,SAAIM,GACF,OAAKxB,KAAKF,SAAS2B,cACZzB,KAAKF,SAAS2B,cAAczB,KAAKC,OADC,IAE3C,CAEA,gBAAIyB,GACF,IAAIC,EAAS,IAAAvB,OAAOJ,KAAKoB,UAAS,SAAAhB,OAAQJ,KAAKgB,QAE/C,OADIhB,KAAKwB,QAAOG,GAAS,KAAAvB,OAASJ,KAAKwB,QAChCG,CACT,CAEA,QAAIlF,GACF,OAAOuD,KAAKF,SAAS8B,aAAa5B,KAAKC,MACzC,CAEA,UAAI4B,GACF,IAAK7B,KAAKvD,KAAM,OAChB,MAAMoF,EAASjD,EAAqBoB,KAAKvD,MACzC,OAAIoF,GACG,GACT,CAiBA,kBAAIC,GAEF,QAA6BtF,IAAzBwD,KAAKe,gBAA+B,OAAOf,KAAKe,gBAGpD,GAAIf,KAAKa,KAEP,OADAb,KAAKe,gBAAkBf,KAAK+B,qBACrB/B,KAAKe,gBAKd,GAAuB,IAAnBf,KAAKgC,UAEP,OADAhC,KAAKe,gBAAkB,MAChBf,KAAKe,gBAKd,GAAIf,KAAKvD,QAAQuC,EAEf,OADAgB,KAAKe,gBAAkB,UAChBf,KAAKe,gBAId,GAAuB,IAAnBf,KAAKgC,UAAiB,CACxB,MAAMrB,EAAeX,KAAKiC,MAAMC,IAAIC,GAAQA,EAAKzB,SAC3C0B,GAAgBC,EAAAA,EAAAA,IAAa1B,EAAc,KAC3C2B,GAAcD,EAAAA,EAAAA,IAAa1B,EAAc,KAC/C,GAAsB,IAAlByB,GAAuC,IAAhBE,EAEzB,OADAtC,KAAKe,gBAAkB,UAChBf,KAAKe,eAEhB,CAKA,MAAMb,EAAY,IAAIpB,IAAIkB,KAAKiC,MAAMC,IAAIC,GAAQA,EAAK1F,OACtD,MAAI,CAAC,IAAK,IAAK,MAAM8F,MAAM9F,GAAQyD,EAAUsC,IAAI/F,MAC/CyD,EAAUsC,IAAI,MACd,CAAC,MAAO,OAAOD,MAAM9F,GAAQyD,EAAUsC,IAAI/F,KAC3C,CAAC,MAAO,OAAO8F,MAAM9F,GAAQyD,EAAUsC,IAAI/F,MAE3CuD,KAAKe,gBAAkB,UAChBf,KAAKe,iBAMV,CAAC,MAAO,MAAO,MAAO,MAAO,OAAOwB,MAAM9F,GAAQyD,EAAUsC,IAAI/F,KACjE,CAAC,MAAO,MAAO,MAAO,MAAO,OAAO8F,MAAM9F,GAAQyD,EAAUsC,IAAI/F,KAG7DyD,EAAUsC,IAAI,QAAUtC,EAAUsC,IAAI,OAAQxC,KAAKe,gBAAkB,MACpEf,KAAKe,gBAAkB,MACrBf,KAAKe,iBAIa,WAAvBf,KAAKyC,eACPzC,KAAKe,gBAAkB,SAChBf,KAAKe,kBAIdf,KAAKe,gBAAkBf,KAAK+B,qBACrB/B,KAAKe,gBACd,CAKA,wBAAIgB,GACF,OAAI/B,KAAKvD,QAAQ8B,EAAqC,UAClDyB,KAAKvD,QAAQ+B,EAAiC,MAC9CwB,KAAKvD,QAAQgC,EAAiC,MAC9CuB,KAAKvD,QAAQiC,EAAqC,UAClDG,EAAoB2D,IAAIxC,KAAKvD,MAAc,QAC3CsC,EAAsByD,IAAIxC,KAAKvD,MAAc,UAC7C0C,EAAgCqD,IAAIxC,KAAKvD,MAAc,MACvDuC,EAA+BwD,IAAIxC,KAAKvD,MAAc,UAEnD,SACT,CAEA,kBAAIiG,GACF,OAAK1C,KAAKF,SAAS6C,wBACZ3C,KAAKF,SAAS6C,wBAAwB3C,KAAKC,OADC,IAErD,CAEA,eAAI2C,GACF,MAAMF,EAAiB1C,KAAK0C,eAC5B,OAAuB,OAAnBA,EAAgC,KAC7B1C,KAAKF,SAAS+C,WAAWH,EAClC,CAEA,iBAAID,GACF,MAAMC,EAAiB1C,KAAK0C,eAC5B,OAAuB,OAAnBA,EAAgC,KAC7B1C,KAAKF,SAASgD,eAAeJ,EACtC,CAEA,mBAAIK,GACF,OAAK/C,KAAKF,SAASkD,wBACZhD,KAAKF,SAASkD,wBAAwBhD,KAAKC,OADC,IAErD,CAEA,iBAAIgD,GAEF,GAAyB,OAArBjD,KAAK4C,YAAsB,OAAO,KAEtC,GAA2B,YAAvB5C,KAAKyC,cAA6B,CACpC,MAAMS,EAAYlD,KAAKF,SAASqD,kBAAkBC,KAAKC,GAAOA,EAAIC,UAAYtD,KAAK4C,aACnF,IAAKM,EAAW,MAAM,IAAIK,MAAM,gBAADnD,OAAiBJ,KAAK4C,YAAW,2CAChE,OAAOM,CACT,CACA,GAA2B,WAAvBlD,KAAKyC,cAA4B,CACnC,MAAMS,EAAYlD,KAAKF,SAAS0D,iBAAiBJ,KAAKC,GAAOA,EAAII,UAAYzD,KAAK4C,aAClF,IAAKM,EAAW,MAAM,IAAIK,MAAM,gBAADnD,OAAiBJ,KAAK4C,YAAW,0CAChE,OAAOM,CACT,CACA,MAAM,IAAIK,MAAM,gCAADnD,OAAiCJ,KAAKyC,eACvD,CAEA,iBAAIiB,GAEF,MAAMC,EAAmB3D,KAAKF,SAAS8D,qBAAuB5D,KAAKF,SAAS8D,oBAAoB5D,KAAK4C,aACrG,GAAIe,EAAkB,OAAOA,EAE7B,MAAMV,EAAgBjD,KAAKiD,cAC3B,OAAKA,EAEEA,EAAcxG,KAFM,IAG7B,CAEA,SAAIoH,GACF,OAAO7D,KAAKF,SAASgE,YAAYtB,IAAIxC,KAAKC,MAC5C,CAEA,QAAIY,GACF,IAAK,MAAMsB,KAAQnC,KAAK+D,YACtB,GAAI5B,EAAKtB,KAAM,OAAO,EACxB,OAAO,CACT,CAEA,iBAAIP,GAEF,IAAI0D,EAAa,GACbhE,KAAKF,SAASuB,WAAW9E,OAAS,IAAIyH,EAAU,GAAA5D,OAAMJ,KAAKoB,UAAS,MAGxE,MAAM2B,EAAkB/C,KAAK+C,gBAC7B,IAAIkB,EAC0BA,EAAN,OAApBlB,EAAqC,GAAA3C,OAAM2C,GAC/B,GAAA3C,OAAMJ,KAAKgB,OAAM,KAEjC,IAAIkD,EAAalE,KAAKwB,MACjB0C,IAAYA,EAAa,IAI9B,OAAOF,EAAaC,EAAcC,EAFnB,IAAA9D,OAAOJ,KAAKvD,KAAI,IAGjC,CAEA,eAAI0H,GACF,OAAOnE,KAAKF,SAASsE,mBAAmBpE,KAAKC,MAC/C,CAEA,aAAI+B,GACF,OAAOhC,KAAKmE,YAAY5H,MAC1B,CAEA,aAAI8H,GACF,IAAK,MAAMlC,KAAQnC,KAAK+D,YACtB,GAAkB,OAAd5B,EAAK1F,KAAe,OAAO,EACjC,OAAO,CACT,CAEA,UAAEsH,GACA,IAAK,MAAMhE,KAAaC,KAAKmE,kBACrB,IAAIvE,EAAKI,KAAKF,SAAUC,EAClC,CAEA,SAAIkC,GACF,MAAO,IAAIjC,KAAK+D,YAClB,EAIF,MAAMO,EAEJzE,WAAAA,CAAYC,EAAUoB,GACpBlB,KAAKF,SAAWA,EAChBE,KAAKC,MAAQiB,CACf,CAEA,QAAIzE,GACF,OAAOuD,KAAKF,SAASuB,WAAWrB,KAAKC,MACvC,CACA,UAAI4B,GACF,OAAO7B,KAAKvD,IACd,CAEA,qBAAI8H,GACF,MAAMC,EAAqBxE,KAAKF,SAAS0E,mBACzC,OAAKA,EAEDC,MAAMC,QAAQF,GAA4BA,EAAmBxE,KAAKC,QAAU,GAEpEuE,EAAmBxE,KAAKvD,OAAS,GAJb,EAKlC,CAEA,kBAAIkI,GACF,OAAO3E,KAAKF,SAAS8E,oBAAoB5E,KAAKC,MAChD,CAEA,kBAAIgB,GACF,OAAOjB,KAAKF,SAAS+E,oBAAoB7E,KAAKC,MAChD,CAEA,YAAI6E,GACF,OAAO9E,KAAK+E,UAAU/E,KAAKC,MAC7B,CAEA,aAAE+E,GACA,IAAK,MAAMzE,KAAgBP,KAAK2E,qBACxB,IAAI7D,EAAQd,KAAKF,SAAUS,EACrC,CAEA,YAAI0E,GACF,MAAO,IAAIjF,KAAKgF,eAClB,EAGK,MAAME,EACXrF,WAAAA,CAAYC,EAAUqF,EAAUtC,GAAa,IAADuC,EAAA,KAyG5C,KAEAC,eAAiBtF,IACf,MAAMuF,EAAQtF,KAAKgC,UACnB,GAAIjC,GAAauF,EAAO,MAAM,IAAI/B,MAAM,kBAADnD,OACnBL,EAAS,gCAAAK,OAA+BkF,EAAK,2BAEjE,OAAO,IAAI1F,EAAKI,KAAMD,IAOxB,KACAU,kBAAoBF,IAClB,MAAM+E,EAAQtF,KAAKuF,aACnB,GAAIhF,GAAgB+E,EAAO,MAAM,IAAI/B,MAAM,qBAADnD,OACnBG,EAAY,gCAAAH,OAA+BkF,EAAK,8BAEvE,OAAO,IAAIxE,EAAQd,KAAMO,IAG3B,KACAiF,uBAAyB,SAACpE,EAAWJ,GAA0B,IAAlBQ,EAAKlF,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAEnD,MAAMgF,EAAQ8D,EAAKK,eAAerE,GAElC,IAAK,MAAMb,KAAgBe,EAAMqD,eAAgB,CAC/C,MAAMtE,EAAU,IAAIS,EAAQsE,EAAM7E,GAElC,GAAIF,EAAQW,SAAWA,GAEnBX,EAAQmB,QAAUA,EAEtB,OAAOnB,CACT,CAEA,MAAMqF,EAAgBlE,EAAK,SAAApB,OAAYoB,GAAK,WAC5C,MAAM,IAAI+B,MAAM,sBAADnD,OACSgB,EAAS,aAAAhB,OAAYY,EAAM,SAAAZ,OAAQsF,EAAa,mBAE1E,EAMA,KACAnE,gBAAkBL,IAChB,MAAMoE,EAAQtF,KAAKqB,WAAW9E,OAC9B,GAAI2E,GAAcoE,EAAO,MAAM,IAAI/B,MAAM,mBAADnD,OACnBc,EAAU,gCAAAd,OAA+BkF,EAAK,4BAEnE,OAAO,IAAIhB,EAAMtE,KAAMkB,IAGzB,KACAuE,eAAiBrE,IACf,MAAMF,EAAalB,KAAKqB,WAAWsE,QAAQvE,GAC3C,IAAoB,IAAhBF,EACF,MAAM,IAAIqC,MAAM,SAADnD,OAAUgB,EAAS,kCACpC,OAAO,IAAIkD,EAAMtE,KAAMkB,IA6BzB,KACA0E,oBAAsBjB,IACpB,IAAIR,EAAc,GAClB,IAAK,MAAM5D,KAAgBoE,EAAgB,CACzC,MAAMtE,EAAUL,KAAKS,kBAAkBF,GACvC4D,EAAcA,EAAY/D,OAAOC,EAAQ8D,YAC3C,CACA,OAAOA,GAGT,KACA0B,oBAAsB1B,IACpB,MAAMQ,GAAiBmB,EAAAA,EAAAA,IAAO3B,EAAYjC,IAAIjC,GAASD,KAAKQ,mBAAmBP,KAE/E,OADA0E,EAAeoB,KAAK,CAACC,EAAGC,IAAMD,EAAIC,GAC3BtB,GAMT,KACAuB,2BAA6B,SAAChD,GAAsC,IAA3BjC,EAAc3E,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KACxD,IAAK8I,EAAKvC,WAAY,OAEtB,MAAMH,EAAiB0C,EAAKvC,WAAW8C,QAAQzC,GAC/C,IAAwB,IAApBR,EAAuB,OAC3B,MAAMiC,EAAiB,GASvB,OARAS,EAAKzC,wBAAwBwD,QAAQ,CAACC,EAAU7F,KAC9C,GAAI6F,IAAa1D,EAAgB,OAEjC,GAAuB,OAAnBzB,EAAyB,OAAO0D,EAAe0B,KAAK9F,GAExD,MAAM+F,EAAgBlB,EAAKpC,wBAAwBzC,GAC/CU,EAAesF,SAASD,IAAgB3B,EAAe0B,KAAK9F,KAE3DoE,CACT,EAMA,KACA6B,mBAAqB7B,IACnB,MAAM8B,EAAmB,GACzB,IAAIC,GAAQ,EAEZ,MAAMC,EAAiBhC,EAAezC,IAAI3B,GAAgBP,KAAKS,kBAAkBF,IAElEoG,EAAezE,IAAI0E,GAAKA,EAAExF,WAAWyF,OAAO,CAACC,EAAGC,EAAGf,IAAMA,EAAEL,QAAQmB,KAAOC,GAElFZ,QAAQ7E,IACb,MAAM0F,EAAgBL,EAAeE,OAAOC,GAAKA,EAAE1F,YAAcE,GAAOY,IAAI0E,GAAKA,EAAE5F,SAC3EiG,gBAAiBC,EAAQR,MAAOS,IAAeC,EAAAA,EAAAA,IAAsBJ,GAC7EP,EAAiBJ,KAAK,KAADjG,OAAMkB,EAAK,UAAAlB,OAAS8G,EAAM,OAC3CC,IAAYT,GAAQ,KAI1B,MAAO,CAAEO,gBADeR,EAAiBY,KAAK,QACpBX,UAI5B,KACAY,gBAAkBnD,GACT,IAAMA,EAAYkD,KAAK,KAIhC,KACAE,SAAWC,IACT,MAAMC,EAAU,CAAC,EAOjB,OANAD,EAAgBrB,QAAQ5F,IACtB,MAAMa,EAAYpB,KAAKS,kBAAkBF,GAAca,UACjDsG,EAAUD,EAAQrG,GACpBsG,EAASA,EAAQrB,KAAK9F,GACrBkH,EAAQrG,GAAa,CAACb,KAEtBkH,GAGT,KACAE,qBAAuB,IACd3H,KAAKW,aAAauB,IAAIxB,IAC3B,MAAMrF,EAAQgE,EAAeqB,GAC7B,OAAKrF,GAAc,UAvRrB2E,KAAKE,UAAYJ,EAAS8H,WAC1B5H,KAAKW,aAAeb,EAAS+H,cAC7B7H,KAAK8H,YAAchI,EAASiI,aAC5B/H,KAAKQ,mBAAqBV,EAASkI,qBACnChI,KAAK4B,aAAe9B,EAASmI,cAC7BjI,KAAKiB,eAAiBnB,EAASoI,gBAM/B,MAAMC,EAASrI,EAASsI,eAGnBD,GAEHnI,KAAKyB,cAAgBgD,MAAMzE,KAAK4B,aAAarF,QAAQ8L,KAAK,IAC1DC,OAAOC,QAAQJ,GAAQhC,QAAQ/L,IAA4B,IAA1BmG,EAAciB,GAAMpH,EACnD4F,KAAKyB,eAAelB,GAAgBiB,KAJ3BxB,KAAKyB,cAAgB,GAOlCzB,KAAKmB,oBAAsBrB,EAAS0I,sBACpCxI,KAAKqB,WAAavB,EAAS2I,YAC3BzI,KAAK6C,WAAa/C,EAAS+C,WAC3B7C,KAAK8C,eAAiBhD,EAAS4I,iBAE1B1I,KAAK8C,gBAAkB9C,KAAK6C,aAAY7C,KAAK8C,eAAiB9C,KAAK6C,WAAWX,IAAI0E,GAAK,YAC5F5G,KAAK2C,wBAA0B7C,EAAS6I,0BACxC3I,KAAKgD,wBAA0BlD,EAAS8I,0BAGxC5I,KAAK6I,UAAY/I,EAASgJ,YAAchJ,EAASgJ,WAAW5G,IAAI6G,GAtXzC,OAuXrBA,EAA+B,GAAKA,GAGtC/I,KAAK8D,YAAchE,EAASkJ,cAAgB,IAAIlK,IAAIgB,EAASkJ,cAO7DhJ,KAAKoE,mBAAqBK,MAAMwE,KAAKxE,MAAMzE,KAAK4B,aAAarF,QAAS,IAAM,IAC5E,IAAK,MAAOwD,EAAWQ,KAAiBP,KAAKQ,mBAAmB+H,UAC9DvI,KAAKoE,mBAAmB7D,GAAc8F,KAAKtG,GAE7CC,KAAK4E,oBAAsBH,MAAMwE,KAAKxE,MAAMzE,KAAKqB,WAAW9E,QAAS,IAAM,IAC3E,IAAK,MAAQgE,EAAcW,KAAgBlB,KAAKmB,oBAAoBoH,UAClEvI,KAAK4E,oBAAoB1D,GAAYmF,KAAK9F,GAE5CP,KAAK6E,oBAAsB7E,KAAK4E,oBAAoB1C,IAClDyC,GAAkBA,EAAezC,IAAI3B,GAAgBP,KAAKiB,eAAeV,KAG3EP,KAAK+E,UAAY/E,KAAK4E,oBAAoB1C,IAAIyC,GAC5CA,EAAezC,IAAI3B,GAAgBP,KAAKS,kBAAkBF,GAAcsB,QAAQwF,KAAK,KAIvFrH,KAAKwE,mBAAqBW,EAAS+D,WAEnClJ,KAAK4D,oBAAsBuB,EAASgE,YAEpCnJ,KAAKmD,kBAAoBN,EAAWuG,SACpCpJ,KAAKwD,iBAAmBX,EAAWwG,QACnCrJ,KAAKsJ,gBAAkBzG,EAAW0G,OAGlC,IAAK,MAAMC,KAAkBxJ,KAAKsJ,gBAAiB,CACjDE,EAAeD,OAAS,GACxBC,EAAeC,cAAgB,GAC/B,IAAK,MAAOvI,EAAYE,KAAckH,OAAOC,QAAQvI,KAAKqB,YAAa,CAE/CrB,KAAK+E,UAAU7D,KACfsI,EAAe1E,WAErC0E,EAAeD,OAAOlD,KAAKjF,GAC3BoI,EAAeC,cAAcpD,MAAMnF,GACrC,CAE4C,IAAxCsI,EAAeC,cAAclN,QAC/BmN,QAAQ/N,MAAM,6BAA+B6N,EAAe1E,SAChE,CACF,CAMA,aAAI9C,GACF,OAAOhC,KAAKE,UAAU3D,MACxB,CAEA,gBAAIgJ,GACF,OAAOvF,KAAKiB,eAAe1E,MAC7B,CAEA,cAAIoN,GACF,OAAO3J,KAAKqB,WAAW9E,MACzB,CA0EA,UAAEwH,GACA,IAAK,IAAIhE,EAAY,EAAGA,EAAYC,KAAKgC,UAAWjC,UAC5C,IAAIH,EAAKI,KAAMD,EACzB,CAGA,aAAEiF,GACA,IAAK,IAAIzE,EAAe,EAAGA,EAAeP,KAAKuF,aAAchF,UACrD,IAAIO,EAAQd,KAAMO,EAC5B,CAGA,WAAEqJ,GACA,IAAK,IAAI1I,EAAa,EAAGA,EAAalB,KAAK2J,WAAYzI,UAC/C,IAAIoD,EAAMtE,KAAMkB,EAC1B,E,eCxiBK,MAAM2I,EACThK,WAAAA,CAAYiK,GAAiB,IAAD1E,EAAA,KAOxB,GAwEJ,KACA2E,cAAgB,CACZjK,SAAS,YACTkK,UAAU,aACVC,aAAa,yBACbpH,WAAW,cACXqH,gBAAgB,aAChBC,YAAY,2BAEhB,KACAC,UAAY,SAACC,GAAiC,IAAtBC,IAAShO,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAEzBF,EAAMgJ,EAAKmF,YAAcnF,EAAK2E,cAAcM,GAE3CC,IAAWlO,EAAM,MAGlBgJ,EAAKoF,cAAcH,IAAcjF,EAAKoF,cAAcH,GAAW3O,UAASU,EAAM,MAGlF,MAAMqO,GAAQC,EAAAA,EAAAA,GAAOtO,GAGrB,OAFY,OAARA,IAAcgJ,EAAKoF,cAAcH,GAAaI,GAE3CrF,EAAKoF,cAAcH,EAC9B,EApGI/B,OAAOC,QAAQuB,GAAgB3D,QAAQ/L,IAAmB,IAAjBuQ,EAAKC,GAAMxQ,EAChD4F,KAAK2K,GAAOC,KAGX5K,KAAKmF,SAAU,OAEfnF,KAAKmF,SAAS0F,WAAU7K,KAAKmF,SAAS0F,SAAW7K,KAAKmF,SAAS2F,WACpE9K,KAAKmF,SAAS4F,WAAc/K,KAAKmF,SAAS6F,WAAahL,KAAKmF,SAAS0F,UACjE7K,KAAKmF,SAAS6F,UAAYhL,KAAKmF,SAAS0F,UAAa,KAEzD7K,KAAKiL,QAAUjL,KAAKkL,IAAMlL,KAAKkL,IAAIrE,OAAOsE,GAAuB,cAAjBA,EAAGC,OAAO,IAAoB7O,OAAS,EAIvF,MAAM8O,EAAgBrL,KAAKsL,WAAatL,KAAKuL,WAC7CvL,KAAKwL,qBAAuBxL,KAAKkL,IAAG,GAAA9K,OAAMiL,EAAa,KAAAjL,OAAIJ,KAAKyL,UAAaJ,EAE7ErL,KAAK0L,gBAAkB1L,KAAK2L,SAASpF,SAAS,gBAE9CvG,KAAK4L,YAAcC,QACf7L,KAAK8L,OAAS9L,KAAK8L,MAAM1I,KAAK2I,GAAyB,qBAAbA,IAK9C/L,KAAKgM,WAAa,CACdC,UAAU,EACVC,YAAY,EACZJ,OAAO,GAKX,MAAMK,EAAkB,CAAE,QAAS,OAAQ,cAAe,MAAO,cAC7D,gBAAiB,cAAe,SAAU,WAAY,UAAW,OAAQ,WACxE,UAAW,YAAa,MAAO,cAAe,cAAe,eAClE,IAAK,MAAMC,KAAYD,EACnBnM,KAAKgM,WAAWI,GAAYpM,KAAK2L,SAASpF,SAAS6F,GAUvD,GAPApM,KAAKgM,WAA0B,cAAIhM,KAAK2L,SAASpF,SAAS,gBAE1DvG,KAAKgM,WAAW,sBAAwBH,QAAQ7L,KAAKmF,UAAYnF,KAAKmF,SAASkH,SAAWrM,KAAKmF,SAASkH,QAAQ9P,OAAS,GAKrH+P,EAAAA,GAAYC,QAAQhG,SAAS,SAAU,CACvC,MAAMiG,EAA4BxM,KAAKmF,UAAYnF,KAAKmF,SAASsH,YAC7DzM,KAAKmF,SAASsH,WAAWrJ,KAAKC,GAAOqJ,EAAAA,GAA0BnG,SAASlD,IAC5ErD,KAAKgM,WAAsB,UAAIH,QAAQW,GACvC,MAAMG,EAA2B3M,KAAKmF,UAAYnF,KAAKmF,SAASsH,YAC5DzM,KAAKmF,SAASsH,WAAWrJ,KAAKC,GAAOuJ,EAAAA,GAAyBrG,SAASlD,IAC3ErD,KAAKgM,WAAqB,SAAIH,QAAQc,EAC1C,CAEI3M,KAAKmF,UAAqC,6BAAzBnF,KAAKmF,SAAS0H,SAC/B7M,KAAKgM,WAAwB,YAAIhM,KAAK8L,OAAS9L,KAAK8L,MAAM1I,KAAK0J,GAAiB,qBAATA,GACvE9M,KAAKgM,WAAmB,OAAIhM,KAAK2L,SAASpF,SAAS,WAGvDvG,KAAKwK,cAAgB,CACjB1K,cAAUtD,EACVyN,kBAAczN,EACdqG,gBAAYrG,EACZ0N,qBAAiB1N,EACjB2N,iBAAa3N,GAGjBwD,KAAK+M,iBAAmB,KAExB/M,KAAKuK,YAAW,GAAAnK,OAAM4M,EAAAA,GAAkB,KAAA5M,OAAIJ,KAAKwL,sBAEjDxL,KAAKiN,aAAe,IAAInQ,KAAKkD,KAAKiN,cAAcC,mBAAmB,SACnElN,KAAKmN,WAAanN,KAAKmN,WAAa,IAAIrQ,KAAKkD,KAAKmN,YAAYD,mBAAmB,cAAW1Q,CAChG,CA4BA,gBAAIyN,GAEA,MAAMpM,EAAWmC,KAAKoK,UAAU,eAAgBpK,KAAK0L,iBAC/ChQ,EAAUmC,GAAYA,EAASnC,QAE/BoE,EAAWE,KAAKF,SAEhBmK,GAAemD,EAAAA,EAAAA,SAAQ,KACzB,GAAK1R,GAAYoE,EAAjB,CAGA,IAAK,MAAMuN,KAAexP,EAASnC,QAE3B2R,EAAYC,iBAEhBD,EAAYC,eAAiBxN,EAAS8F,oBAAoByH,EAAYE,mBACtEF,EAAYG,eAAiB1N,EAAS8F,oBAAoByH,EAAYI,mBACtEJ,EAAYK,yBAA2B5N,EAAS8F,oBAAoByH,EAAYM,qBAChFN,EAAYO,yBAA2B9N,EAAS8F,oBAAoByH,EAAYM,sBAIpF,IAAK,MAAMN,KAAexP,EAASnC,QAE3B2R,EAAYE,oBAEhBF,EAAYE,kBAAoBzN,EAAS+F,oBAAoBwH,EAAYC,gBACzED,EAAYI,kBAAoB3N,EAAS+F,oBAAoBwH,EAAYG,gBACzEH,EAAYM,oBAAsB7N,EAAS+F,oBAAoBwH,EAAYK,0BAC3EL,EAAYQ,oBAAsB/N,EAAS+F,oBAAoBwH,EAAYO,2BAE/E,OAAO/P,EAASnC,OAvBiB,GAwBlC,CAACA,EAASoE,IACb,QAAiBtD,IAAbqB,IACAA,EAASpC,QAAb,CACA,GAAIoC,EAASlC,MAAO,MAAM,IAAI4H,MAAM,gDAAkD1F,EAASlC,MAAMmS,SACrG,IAAKjQ,EAASnC,QAAS,MAAM,IAAI6H,MAAM,kDACvC,OAAO0G,CAH+B,CAI1C,CAGA,cAAIpH,GACA,MAAMhF,EAAWmC,KAAKoK,UAAU,cAChC,IAAIvM,EAASpC,QAAb,CACA,GAAIoC,EAASlC,MAAO,MAAM,IAAI4H,MAAM,8CAAgD1F,EAASlC,MAAMmS,SACnG,IAAKjQ,EAASnC,QAAS,MAAM,IAAI6H,MAAM,gDACvC,OAAO1F,EAASnC,OAHsB,CAI1C,CAEA,qBAAIyH,GACA,MAAMN,EAAa7C,KAAK6C,WACxB,OAAOuK,EAAAA,EAAAA,SAAQ,IAAMvK,GAAcA,EAAWgE,OAAOxD,GAAwB,aAAjBA,EAAI0K,UAA0B,CAAClL,GAC/F,CACA,oBAAIW,GACA,MAAMX,EAAa7C,KAAK6C,WACxB,OAAOuK,EAAAA,EAAAA,SAAQ,IAAMvK,GAAcA,EAAWgE,OAAOxD,GAAwB,YAAjBA,EAAI0K,UAAyB,CAAClL,GAC9F,CACA,iBAAImL,GACA,MAAMnL,EAAa7C,KAAK6C,WACxB,OAAOuK,EAAAA,EAAAA,SAAQ,IAAMvK,GAAcA,EAAWgE,OAAOxD,GAAwB,SAAjBA,EAAI0K,UAAsB,CAAClL,GAC3F,CACA,mBAAIyG,GACA,MAAMzG,EAAa7C,KAAK6C,WACxB,OAAOuK,EAAAA,EAAAA,SAAQ,IAAMvK,GAAcA,EAAWgE,OAAOxD,GAAwB,WAAjBA,EAAI0K,UAAwB,CAAClL,GAC7F,CAGA,YAAI/C,GAGA,MAAM+C,EAAa7C,KAAK6C,WAElBoL,EAA4B,CAC9B7E,SAAUpJ,KAAKmD,kBACfkG,QAASrJ,KAAKwD,iBACd+F,OAAQvJ,KAAKsJ,iBAGXzL,EAAWmC,KAAKoK,UAAU,YAEhC,IAAIvM,EAASpC,QAAb,CACA,GAAIoC,EAASlC,MAAO,MAAM,IAAI4H,MAAM,4CAA8C1F,EAASlC,MAAMmS,SACjG,IAAKjQ,EAASnC,QAAS,MAAM,IAAI6H,MAAM,8CAEvC,GAAIvD,KAAK+M,iBAAkB,OAAO/M,KAAK+M,iBAEvC,QAAmBvQ,IAAfqG,EAEJ,OADA7C,KAAK+M,iBAAmB,IAAI7H,EAASrH,EAASnC,QAASsE,KAAKmF,SAAU8I,GAC/DjO,KAAK+M,gBAR0B,CAS1C,CAGA,mBAAI7C,GACA,OAAOlK,KAAKoK,UAAU,kBAC1B,CAIA,eAAID,GACA,OAAOnK,KAAKoK,UAAU,cAAepK,KAAK4L,YAC9C,CAOA,kBAAIsC,GAGA,YAAsB1R,IAAlBwD,KAAKmO,SAA+B,EACjCnO,KAAKmO,QAChB,CAMA,iBAAIC,GAEA,MAAMvQ,EAAWmC,KAAKoK,UAAU,aAE1BgE,GAAgBhB,EAAAA,EAAAA,SAAQ,KAC1B,GAAKvP,EAASnC,QACd,OAAO,IAAI2S,KAAM,CAAExQ,EAASnC,SAAW,CAAE4S,KAAM,gBAChD,CAACzQ,EAASnC,UAEb,IAAImC,EAASpC,QAAb,CACA,GAAIoC,EAASlC,MAAO,MAAM,IAAI4H,MAAM,6CAA+C1F,EAASlC,MAAMmS,SAClG,IAAKjQ,EAASnC,QAAS,MAAM,IAAI6H,MAAM,+CACvC,OAAO6K,CAH+B,CAI1C,CAGA,gBAAIG,GAEA,MAAQA,EAAcC,IAAoBpR,EAAAA,EAAAA,eAASZ,GAE7C4R,EAAgBpO,KAAKoO,cAa3B,OAXA/Q,EAAAA,EAAAA,WAAU,KACD+Q,IACLK,EAAAA,EAAAA,IAASL,EAAe,CAAEM,uBAAuB,EAAOC,IAAK,QAExD/Q,KAAKgR,IAAqBJ,EAAgB,CAAE1B,KAAM8B,MAElDvQ,MAAM1C,IACH+N,QAAQ/N,MAAMA,GACd6S,EAAgB,CAAE7S,aAE3B,CAACyS,IACGG,CACX,E,kDCjRJ,MA2BA,EA3BuBM,IAGrB,MAAOC,EAAOC,IAAY3R,EAAAA,EAAAA,YAAWyR,GAE/BG,GAAcC,EAAAA,EAAAA,aAAYC,IAE9B,cAAeA,GAEb,IAAK,WACHH,EAASG,GACT,MAEF,IAAK,UACL,IAAK,SACL,IAAK,SACHH,EAASlD,QAAQqD,IACjB,MAEF,QACEH,EAASD,IAAUA,KAEtB,IAEH,MAAO,CAACA,EAAOE,G","sources":["webpack://mdposit/./src/components/loading/style.module.css?350d","components/loading/index.js","hooks/use-api/index.js","utils/topology-manager/residues-library/index.js","utils/topology-manager/index.js","utils/project-manager/index.js","hooks/use-toggle-state/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loading\":\"style_loading__Vdgbc\",\"show\":\"style_show__wIdQ5\"};","import React, { useLayoutEffect } from 'react';\nimport cn from 'classnames';\n//import { sleep, frame } from 'timing-functions';\n\nimport { CircularProgress } from '@mui/material';\n\nimport useToggleState from '../../hooks/use-toggle-state';\n\nimport style from './style.module.css';\n\nconst WAIT_DELAY = 750; // 750ms\n\n// This component is used to hide the loading indicator for a bit (just in case\n// the next content is quick enough, because we don't want a flash with the\n// indicator), then slowly display it.\n// In the best of cases this component will *never* even have to be displayed\nconst Loading = ({ wait = WAIT_DELAY }) => {\n  const [flag, toggleFlag] = useToggleState(false);\n  // This is a hook\n  useLayoutEffect(() => {\n    const timer = setTimeout(() => {\n      toggleFlag();\n    }, wait);\n    return () => clearTimeout(timer);\n\n    /*\n    let mounted = true;\n    sleep(wait) // wait for a bit\n      // this might be useful if the page is not even visible\n      .then(() => frame()) // Wait for the next animation frame\n      // After waiting, check if mounted is still true\n      .then(() => {\n        // If mounted is false it means that the loading was over before the wait ended\n        if (mounted) toggleFlag(); // This toggleFlag changes the flag from false to true\n      });\n    // In a useEffect or similar hooks, \"return\" stands for an ending function\n    // The ending function is called when the components is no longer rendered\n    return () => (mounted = false); // When useLayoutEffect is over or cancelled, set mounted to false\n    */\n  }, [toggleFlag, wait]); // useLayoutEffect is only called when the toggleFlag is called (only once)\n  // Return an animated circle\n  return (\n    <div\n      title=\"loading...\" // This tag appears when the mouse remains over the circle\n      className={cn(style.loading, { [style.show]: flag })}\n    >\n      {flag && (\n        <CircularProgress\n          variant=\"indeterminate\"\n          color=\"primary\"\n          size={50}\n          thickness={5}\n        /> // Renders the circle\n      )}\n    </div>\n  );\n};\n\nexport default Loading;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Empty response\nconst blank = {\n  loading: false,\n  payload: null,\n  error: null,\n};\n\n// Loading response\nconst loading = {\n  loading: true,\n};\n\n\n// Default cache expiration time (e.g., 1 hour in milliseconds)\nconst DEFAULT_CACHE_EXPIRATION = 60 * 60 * 1000;\n\n// Load cache from localStorage\nconst loadCache = () => {\n  const cachedData = localStorage.getItem('apiCache');\n  return cachedData ? JSON.parse(cachedData) : {};\n};\n\n// Save cache to localStorage\nconst saveCache = (cache) => {\n  localStorage.setItem('apiCache', JSON.stringify(cache));\n};\n\n// Cache object to store API responses\nlet cache = loadCache();\n// Get data from the API\nconst useAPI = (url, cacheOptions = {}) => {\n  // Destructure options and set default values\n  const {\n    name = '',\n    cacheOn = false,\n    cacheExpiration = DEFAULT_CACHE_EXPIRATION, // Default cache expiration\n  } = cacheOptions;\n  \n  // Check cache synchronously before initializing state\n  const initialData = (() => {\n    if (cacheOn && cache[name]) {\n      const responseData = cache[name];\n      const now = Date.now();\n      const receivedTime = new Date(responseData.received).getTime()\n      // Use cached data if it hasn't expired\n      if (now - receivedTime < cacheExpiration) {\n        return responseData;\n      }\n    }\n    return blank;\n  })();\n  // Set the 'data' state object, which is returned at the end of this function\n  const [data, setData] = useState(initialData);\n\n  // This react hook is responisble for sending the request to the API\n  // This react hook has 'url' dependencies, so it is only runned once per request\n  useEffect(() => {\n    // In case there is no valid url\n    // This may be useful as a workaround to not call the API, since hooks can not be called conditionally\n    if (!url) {\n      setData(blank);\n      return;\n    }\n    // This is axios (https://www.npmjs.com/package/axios)\n    // Set a cancel option (token). If a request includes this cancel token in its options, the request can be cancelled\n    // In order to cancel the request, the same token must be used through axios\n    const source = axios.CancelToken.source();\n    let didCancel = false;\n    // Make a request in a Promise/await way\n    axios(url, {\n      // This token allows us to further cancel the request if necessary\n      cancelToken: source.token,\n      // Send the start time so we can calculate the response time when we get the response\n      startTime: new Date()\n    })\n      // (.then is async) If the request has succeed\n      .then(response => {\n        if (didCancel) return;\n        // Calculate the response time\n        const endTime = new Date();\n        const startTime = response.config.startTime;\n        const responseTime = endTime - startTime; // In ms\n        // Return response data\n        const responseData = {\n          url: url,\n          loading: false,\n          payload: response.data,\n          error: null,\n          time: responseTime,\n          received: endTime,\n        };\n        // Cache the response if caching is enabled\n        if (cacheOn) {\n          cache[name] = responseData;\n          saveCache(cache);\n        }\n        setData(responseData);\n      })\n      // Otherwise\n      .catch(error => {\n        if (didCancel) return;\n        const responseData = {\n          url: url,\n          loading: false,\n          payload: null,\n          error: error,\n        };\n        setData(responseData);\n      });\n\n    return () => {\n      // Cancel the request\n      source.cancel();\n      didCancel = true;\n    };\n\n    // 'useEffect' will only be called when the url changes\n  }, [url]);\n  // If there is no url then return the blank response\n  if (!url) return blank;\n  // Data is returned this way\n  // Data is returned only if the data.url matches the url from this request\n  // These urls do not macth each first time 'useAPI' is called\n  // 'data' is not reset each time 'useAPI' is called so the url is from the previous request\n  if (data.url === url || initialData.url === url) return data;\n  // The first time 'useAPI' is called only { loading: true } is returned\n  else return loading;\n};\n\nexport default useAPI;\n","// Set a library of residues useful for topology handling\n\n// Amino acids\nexport const PROTEIN_RESIDUE_NAME_LETTERS = {\n    'ALA':'A',\n    'ALAN':'A',\n    'ALAC':'A',\n    'ARG':'R',\n    'ARGN':'R',\n    'ARGC':'R',\n    'ASN':'N',\n    'ASNN':'N',\n    'ASNC':'N',\n    'ASP':'D',\n    'ASPN':'D',\n    'ASPC':'D',\n    'CYS':'C',\n    'CYSN':'C',\n    'CYSC':'C',\n    'CYH':'C',\n    'CSH':'C',\n    'CSS':'C',\n    'CYX':'C',\n    'CYP':'C',\n    'GLN':'Q',\n    'GLNN':'Q',\n    'GLNC':'Q',\n    'GLU':'E',\n    'GLUN':'E',\n    'GLUC':'E',\n    'GLUP':'E',\n    'GLY':'G',\n    'GLYN':'G',\n    'GLYC':'G',\n    'HIS':'H',\n    'HISN':'H',\n    'HISC':'H',\n    'HID':'H',\n    'HIE':'H',\n    'HIP':'H',\n    'HSD':'H',\n    'HSE':'H',\n    'ILE':'I',\n    'ILEN':'I',\n    'ILEC':'I',\n    'ILU':'I',\n    'LEU':'L',\n    'LEUN':'L',\n    'LEUC':'L',\n    'LYS':'K',\n    'LYSN':'K',\n    'LYSC':'K',\n    'MET':'M',\n    'METN':'M',\n    'METC':'M',\n    'PHE':'F',\n    'PHEN':'F',\n    'PHEC':'F',\n    'PRO':'P',\n    'PRON':'P',\n    'PROC':'P',\n    'PRØ':'P',\n    'PR0':'P',\n    'PRZ':'P',\n    'SER':'S',\n    'SERN':'S',\n    'SERC':'S',\n    'THR':'T',\n    'THRN':'T',\n    'THRC':'R',\n    'TRP':'W',\n    'TRPN':'W',\n    'TRPC':'W',\n    'TRY':'W',\n    'TYR':'Y',\n    'TYRN':'Y',\n    'TYRC':'Y',\n    'VAL':'V',\n    'VALN':'V',\n    'VALC':'V',\n};\n// Nucleotides\nexport const DNA_RESIDUE_NAME_LETTERS = {\n    'DA': 'A',\n    'T': 'T',\n    'T3': 'T',\n    'T5': 'T',\n    'DT': 'T',\n    'DC': 'C',\n    'DG': 'G',\n    'DA3': 'A',\n    'DA5': 'A',\n    'DT3': 'T',\n    'DT5': 'T',\n    'DC3': 'C',\n    'DC5': 'C',\n    'DG3': 'G',\n    'DG5': 'G',\n};\nexport const RNA_RESIDUE_NAME_LETTERS = {\n    'RA': 'A',\n    'U': 'U',\n    'U3': 'U',\n    'U5': 'U',\n    'RU': 'U',\n    'RC': 'C',\n    'RG': 'G',\n    'RA3': 'A',\n    'RA5': 'A',\n    'RU3': 'U',\n    'RU5': 'U',\n    'RC3': 'C',\n    'RC5': 'C',\n    'RG3': 'G',\n    'RG5': 'G',\n};\nexport const NUCLEIC_RESIDUE_NAME_LETTERS = {\n    ...DNA_RESIDUE_NAME_LETTERS,\n    ...RNA_RESIDUE_NAME_LETTERS,\n    'A': 'A',\n    'A3': 'A',\n    'A5': 'A',\n    'C': 'C',\n    'C3': 'C',\n    'C5': 'C',\n    'G': 'G',\n    'G3': 'G',\n    'G5': 'G',\n};\n// All of them together\nexport const RESIDUE_NAME_LETTERS = {\n    ...PROTEIN_RESIDUE_NAME_LETTERS,\n    ...NUCLEIC_RESIDUE_NAME_LETTERS\n};\n\n// Lipid common residue names\n// Source: https://github.com/NMRLipids/Databank/blob/main/Scripts/DatabankLib/settings/molecules.py#L10\n// Meanings: https://github.com/NMRLipids/Databank/blob/48fdf2c4149d0db8900ce08b0e74dc1836dcfab3/Scripts/BuildDatabank/docs/source/moleculesAndMapping.md?plain=1#L50\nexport const FATTY_RESIDUE_NAMES = new Set([\n    \"POPC\", \"POPG\", \"POPS\", \"POPE\", \"PYPC\", \"PAzePCprot\", \"PAzePCdeprot\", \"DMPC\", \n    \"DPPC\", \"DPPE\", \"DPPG\", \"DEPC\", \"DRPC\", \"DYPC\", \"DLPC\", \"DLIPC\", \"DOG\", \"DOPC\", \n    \"DOPE\", \"DDOPC\", \"DOPS\", \"DSPC\", \"DAPC\", \"DMTAP\", \"SDG\", \"SDPE\", \"SOPC\", \"POPI\", \n    \"SAPI\", \"SAPI24\", \"SAPI25\", \"SLPI\", \"CER\", \"CER180\", \"DHMDMAB\", \"SLiPC\", \"SM16\",\n    \"SM18\", \"TOCL\", \"TLCL_0H\", \"TMCL\", \"GM1\", \"DPPGK\", \"GB3\", \"BOG\"\n]);\nexport const STEROID_RESIDUE_NAMES = new Set([ \"CHL\", \"CHL1\", \"CHOL\", \"DCHOL\" ]);\n\n// Set typical residue names to guess what residues are\nexport const STANDARD_SOLVENT_RESIDUE_NAMES = new Set([ 'SOL', 'WAT', 'HOH', 'TIP', 'TP3', 'SWM4' ]);\n// WARNING: Note that standard names also include + and - symbols\n// Use functions such as Structure.select_counter_ions instead of checking if the set includes a name\nexport const STANDARD_COUNTER_CATION_ATOM_NAMES = new Set([ 'K', 'NA', 'SOD', 'POT' ]);\nexport const STANDARD_COUNTER_ANION_ATOM_NAMES = new Set([ 'CL', 'CLA' ]);\nexport const STANDARD_COUNTER_ION_ATOM_NAMES = STANDARD_COUNTER_CATION_ATOM_NAMES.union(STANDARD_COUNTER_ANION_ATOM_NAMES)\nexport const STANDARD_DUMMY_ATOM_NAMES = new Set([ 'MW' ]);\nexport const DUMMY_ATOM_ELEMENT = 'Dm'\nexport const CG_ATOM_ELEMENT = 'Cg'","import {\n  RESIDUE_NAME_LETTERS,\n  PROTEIN_RESIDUE_NAME_LETTERS,\n  DNA_RESIDUE_NAME_LETTERS,\n  RNA_RESIDUE_NAME_LETTERS,\n  NUCLEIC_RESIDUE_NAME_LETTERS,\n  FATTY_RESIDUE_NAMES,\n  STEROID_RESIDUE_NAMES,\n  STANDARD_SOLVENT_RESIDUE_NAMES,\n  STANDARD_COUNTER_ION_ATOM_NAMES,\n  STANDARD_DUMMY_ATOM_NAMES,\n  DUMMY_ATOM_ELEMENT,\n  CG_ATOM_ELEMENT\n} from './residues-library';\n// Import some auxiliar functions\nimport {\n  countElement,\n  parsedSelectionRanger,\n  unique\n} from 'src/utils/auxiliar-functions';\n\n// Topology manager\n// Many functions to handle atom/residue/chain numeration conversions and more\n// All these functions which need the topology are able to read the context topology\n// However, it may be better to pass them the topology as an argument since the context may be null\n\n// Set the element colors for displaying\nconst ELEMENT_COLORS = {\n  H: 'white',\n  C: 'grey',\n  N: 'blue',\n  O: 'red',\n  S: 'yellow',\n  P: 'orange',\n};\n\n// Set a flag which may be found in atom bonds to represent irremediably missing bonds\n// These como from coarse grain simulations with no topology\nconst MISSING_BONDS_FLAG = 'MB';\n\n// Set an atom handler\nclass Atom {\n  // Constructor expects the topology this atom belongs to and the atom index\n  constructor (topology, atomIndex) {\n    this.topology = topology;\n    this.index = atomIndex;\n  }\n  // Atom name\n  get name () {\n    return this.topology.atomNames[this.index];\n  }\n  // Standard label\n  get label () {\n    return `${this.residue.standardLabel}.${this.name}`;\n  }\n  // Index of the residue this atom belongs to\n  get residueIndex () {\n    return this.topology.atomResidueIndices[this.index];\n  }\n  // Residue this atom belongs to\n  get residue () {\n    return this.topology.getResidueByIndex(this.residueIndex);\n  }\n  // Atom element\n  get element () {\n    return this.topology.atomElements[this.index];\n  }\n  // Viewer color representations for this atom according to tis element\n  get elementColor () {\n    const color = ELEMENT_COLORS[this.element];\n    if (!color) return 'black';\n    return color;\n  }\n  // Check if the resiude is coarse grained\n  get isCg () {\n    return this.element === CG_ATOM_ELEMENT;\n  }\n}\n\n// Set a residue handler\nclass Residue {\n  // Constructor expects the topology this residue belongs to and the residue index\n  constructor(topology, residueIndex) {\n    this.topology = topology;\n    this.index = residueIndex;\n    // Internal variables\n    this._classification = undefined;\n  }\n  // Original residue number (source numeration)\n  get number () {\n    return this.topology.residueNumbers[this.index];\n  }\n  // Chain index\n  get chainIndex () {\n    return this.topology.residueChainIndices[this.index];\n  }\n  // Chain name\n  get chainName () {\n    return this.topology.chainNames[this.chainIndex];\n  }\n  // Chain handler\n  get chain () {\n    return this.topology.getChainByIndex(this.chainIndex);\n  }\n  // Insertion code\n  get icode () {\n    if (!this.topology.residueIcodes) return null;\n    return this.topology.residueIcodes[this.index];\n  }\n  // NGL selection of this specific residue\n  get nglSelection () {\n    let selection = `:${this.chainName} and ${this.number}`\n    if (this.icode) selection += ` ^${this.icode}`\n    return selection;\n  }\n  // Residue name\n  get name () {\n    return this.topology.residueNames[this.index];\n  }\n  // Residue standard letter (e.g. ARG -> R)\n  get letter () {\n    if (!this.name) return;\n    const letter = RESIDUE_NAME_LETTERS[this.name];\n    if (letter) return letter;\n    return 'X';\n  }\n  // Get a cassification for this residue\n  // This is quite standard for proteins and nucleic acids\n  // It also relies on references to classify ligands\n  // However, it delegates in the 'classificationByName' function for the rest\n  // Available classifications:\n  // - protein\n  // - dna\n  // - rna\n  // - carbohydrate\n  // - fatty\n  // - steroid\n  // - ion\n  // - solvent\n  // - acetyl\n  // - amide\n  // - other\n  get classification () {\n    // If the classification was previously found then return the stored value\n    if (this._classification !== undefined) return this._classification;\n    // If this is a coarse grain residue then we can not classify it through the smart way\n    // We can only rely in residue names\n    if (this.isCg) {\n      this._classification = this.classificationByName;\n      return this._classification;\n    }\n    // Classify according this residue according to its atom composition\n    // ----- Ions -----------------------------------------------\n    // If it has only one atom then it must be an ion\n    if (this.atomCount === 1) {\n      this._classification = 'ion';\n      return this._classification;\n    }\n    // ----- Solvent -----------------------------------------------\n    // Solvent is water molecules\n    // First rely on the residue name\n    if (this.name in STANDARD_SOLVENT_RESIDUE_NAMES) {\n      this._classification = 'solvent'\n      return this._classification\n    }\n    // It may be water with a not known name\n    // Literally check if its a molecule with 3 atoms: 2 hydrogens and 1 oxygen\n    if (this.atomCount === 3) {\n      const atomElements = this.atoms.map(atom => atom.element);\n      const hydrogenCount = countElement(atomElements, 'H');\n      const oxygenCount = countElement(atomElements, 'O');\n      if (hydrogenCount === 2 && oxygenCount === 1) {\n        this._classification = 'solvent'\n        return this._classification\n      }\n    }\n    // ----- Protein -----------------------------------------------\n    // Protein definition according to vmd:\n    // a residue with atoms named C, N, CA, and O\n    // In our case we accept OC1 and OC2 or OT1 and OT2 instead of O for terminal residues\n    const atomNames = new Set(this.atoms.map(atom => atom.name));\n    if (['C', 'N', 'CA'].every(name => atomNames.has(name)) && (\n      atomNames.has('O') ||\n      ['OC1', 'OC2'].every(name => atomNames.has(name)) ||\n      ['OT1', 'OT2'].every(name => atomNames.has(name))\n    )) {\n      this._classification = 'protein'\n      return this._classification\n    }\n    // ----- Nucleic -----------------------------------------------\n    // Nucleic acids definition according to vmd:\n    // a residue with atoms named P, O1P, O2P and either O3’, C3’, C4’, C5’, O5’ or O3*, C3*, C4*, C5*, O5*\n    // Apparently it has been fixed so now a residue does not need to be phosphorylated to be considered nucleic\n    if ([\"O3'\", \"C3'\", \"C4'\", \"C5'\", \"O5'\"].every(name => atomNames.has(name))\n    || [\"O3*\", \"C3*\", \"C4*\", \"C5*\", \"O5*\"].every(name => atomNames.has(name))) {\n      // At this point we know it is nucleic\n      // We must tell the difference between DNA and RNA\n      if (atomNames.has(\"O2'\") || atomNames.has(\"O2*\")) this._classification = 'rna'\n      else this._classification = 'dna'\n      return this._classification\n    }\n    // ----- Ligands -----------------------------------------------\n    // If this residue is a ligand according to the references then classify it as ligand\n    if (this.referenceType === 'ligand') {\n      this._classification = 'ligand'\n      return this._classification\n    }\n    // ----- Others -----------------------------------------------\n    // If the residue does not fall in any of the previous conditions then try it with the residue name\n    this._classification = this.classificationByName;\n    return this._classification;\n  }\n  // Set an alternative function to \"try\" to classify the residues according only to its name\n  // This is useful for corase grain residues whose atoms may not reflect the real atoms\n  // WARNING: This logic is very limited and may return \"unknown\"\n  // WARNING: This logic relies in atom names, which may be not standard\n  get classificationByName () {\n    if (this.name in PROTEIN_RESIDUE_NAME_LETTERS) return 'protein';\n    if (this.name in DNA_RESIDUE_NAME_LETTERS) return 'dna';\n    if (this.name in RNA_RESIDUE_NAME_LETTERS) return 'rna';\n    if (this.name in NUCLEIC_RESIDUE_NAME_LETTERS) return 'nucleic';\n    if (FATTY_RESIDUE_NAMES.has(this.name)) return 'fatty';\n    if (STEROID_RESIDUE_NAMES.has(this.name)) return 'steroid';\n    if (STANDARD_COUNTER_ION_ATOM_NAMES.has(this.name)) return 'ion';\n    if (STANDARD_SOLVENT_RESIDUE_NAMES.has(this.name)) return 'solvent';\n    // If we do not know what it is\n    return 'unknown'\n  }\n  // Reference index in the topology\n  get referenceIndex () {\n    if (!this.topology.residueReferenceIndices) return null;\n    return this.topology.residueReferenceIndices[this.index];\n  }\n  // Reference id\n  get referenceId () {\n    const referenceIndex = this.referenceIndex;\n    if (referenceIndex === null) return null;\n    return this.topology.references[referenceIndex];\n  }\n  // Reference type\n  get referenceType () {\n    const referenceIndex = this.referenceIndex;\n    if (referenceIndex === null) return null;\n    return this.topology.referenceTypes[referenceIndex];\n  }\n  // Reference residue number (reference numeration)\n  get referenceNumber () {\n    if (!this.topology.residueReferenceNumbers) return null;\n    return this.topology.residueReferenceNumbers[this.index];\n  }\n  // Reference data\n  get referenceData () {\n    // If this residue has reference id then it belongs to no reference at all\n    if (this.referenceId === null) return null;\n    // Otherwise get the corresponding reference data\n    if (this.referenceType === 'protein') {\n      const reference = this.topology.proteinReferences.find(ref => ref.uniprot === this.referenceId);\n      if (!reference) throw new Error(`Reference id ${this.referenceId} is not found among protein references`);\n      return reference;\n    }\n    if (this.referenceType === 'ligand') {\n      const reference = this.topology.ligandReferences.find(ref => ref.pubchem === this.referenceId);\n      if (!reference) throw new Error(`Reference id ${this.referenceId} is not found among ligand references`);\n      return reference;\n    }\n    throw new Error(`Not supported reference type ${this.referenceType}`);\n  }\n  // Reference name\n  get referenceName () {\n    // If this is a ligand we may have a forced name in metadata\n    const forcedLigandName = this.topology.metadataLigandNames && this.topology.metadataLigandNames[this.referenceId];\n    if (forcedLigandName) return forcedLigandName;\n    // Get reference data\n    const referenceData = this.referenceData;\n    if (!referenceData) return null;\n    // Now return its name\n    return referenceData.name;\n  }\n  // Check if the resiude is in periodic boundary conditions\n  get isPbc () {\n    return this.topology.pbcResidues.has(this.index);\n  }\n  // Check if the resiude is coarse grained\n  get isCg () {\n    for (const atom of this.iteratoms())\n      if (atom.isCg) return true;\n    return false;\n  }\n  // Standard label for display\n  get standardLabel () {\n    // Add the chain to the label only if there is more than ona chain\n    let labelChain = '';\n    if (this.topology.chainNames.length > 1 ) labelChain = `${this.chainName}:`;\n    // Use the reference numeration if possible\n    // Use the source numeration otherwise\n    const referenceNumber = this.referenceNumber;\n    let labelNumber;\n    if (referenceNumber !== null) labelNumber = `${referenceNumber}`;\n    else labelNumber = `${this.number}*`;\n    // Get the insertion code\n    let labelIcode = this.icode;\n    if (!labelIcode) labelIcode = '';\n    // Get the residue name\n    const labelType = `(${this.name})`;\n    // Finally return the label\n    return labelChain + labelNumber + labelIcode + labelType;\n  }\n  // Atom indices for atoms which belong to this residue\n  get atomIndices () {\n    return this.topology.residueAtomIndices[this.index];\n  }\n  // Number of atoms which belong to this residue\n  get atomCount () {\n    return this.atomIndices.length;\n  }\n  // Check if the residue has an alpha carbon\n  get hasCAlpha () {\n    for (const atom of this.iteratoms())\n      if (atom.name === 'CA') return true;\n    return false;\n  }\n  // Iterate residue atoms\n  * iteratoms () {\n    for (const atomIndex of this.atomIndices)\n      yield new Atom(this.topology, atomIndex);\n  }\n  // Get all atoms already parsed\n  get atoms () {\n    return [...this.iteratoms()];\n  }\n};\n\n// Set a chain handler\nclass Chain {\n  // Constructor expects the chain index\n  constructor(topology, chainIndex) {\n    this.topology = topology;\n    this.index = chainIndex;\n  }\n  // Get the chain name\n  get name () {\n    return this.topology.chainNames[this.index];\n  }\n  get letter () {\n    return this.name;\n  }\n  // Get the metadata chain name\n  get metadataChainName () {\n    const metadataChainNames = this.topology.metadataChainNames;\n    if (!metadataChainNames) return '';\n    // OBSOLETE: Chains were stored as an array of names long time ago\n    if (Array.isArray(metadataChainNames)) return metadataChainNames[this.index] || '';\n    // Chains are stored as and object (e.g. { 'A': 'ACE2', 'B': 'RBD' })\n    else return metadataChainNames[this.name] || '';\n  }\n  // Get residue indcies\n  get residueIndices () {\n    return this.topology.chainResidueIndices[this.index];\n  }\n  // Get residue numbers\n  get residueNumbers () {\n    return this.topology.chainResidueNumbers[this.index];\n  }\n  // Get the residue sequence\n  get sequence () {\n    return this.sequences[this.index];\n  }\n  // Iterate chain residues\n  * iterresidues () {\n    for (const residueIndex of this.residueIndices)\n      yield new Residue(this.topology, residueIndex);\n  }\n  // Get all residues already parsed\n  get residues () {\n    return [...this.iterresidues()];\n  }\n}\n\nexport class Topology {\n  constructor(topology, metadata, references) {\n    // Save the topology data as it comes\n    this.atomNames = topology.atom_names;\n    this.atomElements = topology.atom_elements;\n    this.atomCharges = topology.atom_charges;\n    this.atomResidueIndices = topology.atom_residue_indices;\n    this.residueNames = topology.residue_names;\n    this.residueNumbers = topology.residue_numbers;\n    // Residue icodes have a different structure, since usually there are only a few icodes and not 1 per residue\n    // It is an object where keys are residue indices\n    // It is null when there are not icodes at all in the topology\n    // In order to convert it to the other values format we transform the object into an array\n    // Non assigned indices will become empty strings\n    const icodes = topology.residue_icodes;\n    // In case we have no icodes at all we set the icodes list as an empty string\n    // This is usefull for icode getters that do 'icodes && ...'\n    if (!icodes) this.residueIcodes = '';\n    else {\n      this.residueIcodes = Array(this.residueNames.length).fill('');\n      Object.entries(icodes).forEach(([residueIndex, icode]) => {\n        this.residueIcodes[+residueIndex] = icode;\n      });\n    }\n    this.residueChainIndices = topology.residue_chain_indices;\n    this.chainNames = topology.chain_names;\n    this.references = topology.references;\n    this.referenceTypes = topology.reference_types;\n    // DANI: Esta linea es para mantener las topologías viejas que solo tienen referencias de proteínas\n    if (!this.referenceTypes && this.references) this.referenceTypes = this.references.map(r => 'protein');\n    this.residueReferenceIndices = topology.residue_reference_indices;\n    this.residueReferenceNumbers = topology.residue_reference_numbers;\n    // Save atom bonds\n    // Replace missing bonds flags by empty arrays\n    this.atomBonds = topology.atom_bonds && topology.atom_bonds.map(bonds => \n      bonds === MISSING_BONDS_FLAG ? [] : bonds\n    )\n    // Save the PBC (Priodic Boundary Conditions) residues\n    this.pbcResidues = topology.pbc_residues && new Set(topology.pbc_residues);\n    // Data is stored in a down-top structure according to atom-residue-chain indices\n    // i.e. atoms know which residue they belong to and residues know which chain they belong to\n    // Now set the top-down structure values\n    // i.e. set which atoms are contained on every residue and which residues are contained on every chain\n    // WARNING: Note that arrays of empty arrays can not be filled as when filled with nulls or empty strings\n    // WARNING: We must fill them with this complicated method or all empty arrays would be the same array\n    this.residueAtomIndices = Array.from(Array(this.residueNames.length), () => []);\n    for (const [atomIndex, residueIndex] of this.atomResidueIndices.entries()) {\n      this.residueAtomIndices[residueIndex].push(atomIndex);\n    }\n    this.chainResidueIndices = Array.from(Array(this.chainNames.length), () => []);\n    for (const [ residueIndex, chainIndex ] of this.residueChainIndices.entries()) {\n      this.chainResidueIndices[chainIndex].push(residueIndex);\n    }\n    this.chainResidueNumbers = this.chainResidueIndices.map(\n      residueIndices => residueIndices.map(residueIndex => this.residueNumbers[residueIndex])\n    );\n    // Get chain sequences by adding all residue letters together for each chain\n    this.sequences = this.chainResidueIndices.map(residueIndices => \n      residueIndices.map(residueIndex => this.getResidueByIndex(residueIndex).letter).join('')\n    );\n    // Save metadata chain names\n    // They are not letters ('A', 'B', etc.) but actual names ('Spike', 'Glycans', etc.)\n    this.metadataChainNames = metadata.CHAINNAMES;\n    // Save metadata forced ligand names\n    this.metadataLigandNames = metadata.LIGANDNAMES;\n    // Save the references so we can further return reference data from here\n    this.proteinReferences = references.proteins;\n    this.ligandReferences = references.ligands;\n    this.chainReferences = references.chains;\n    // Assign the chain name and index to every chain reference\n    // Match every chain reference with its chain relying on sequence\n    for (const chainReference of this.chainReferences) {\n      chainReference.chains = [];\n      chainReference.chain_indices = [];\n      for (const [chainIndex, chainName] of Object.entries(this.chainNames)) {\n        // Match sequence\n        const chainSequence = this.sequences[chainIndex];\n        if (chainSequence !== chainReference.sequence) continue;\n        // Once we have a match assign the corresponding name and index\n        chainReference.chains.push(chainName);\n        chainReference.chain_indices.push(+chainIndex);\n      }\n      // If we did not manage to match this chain then log an error\n      if (chainReference.chain_indices.length === 0)\n        console.error('Unmatched chain reference ' + chainReference.sequence);\n    }\n  }\n\n  // --------------------------------------------------------------------\n  // BASICS\n  // --------------------------------------------------------------------\n\n  get atomCount () {\n    return this.atomNames.length;\n  }\n\n  get residueCount () {\n    return this.residueNumbers.length;\n  }\n\n  get chainCount () {\n    return this.chainNames.length;\n  }\n\n  // --------------------------------------------------------------------\n  // Atom getters\n  // --------------------------------------------------------------------\n\n  getAtomByIndex = atomIndex => {\n    const count = this.atomCount;\n    if (atomIndex >= count) throw new Error(\n      `The atom index ${atomIndex} is out of range. There are ${count} atoms in the topology`,\n    );\n    return new Atom(this, atomIndex);\n  };\n\n  // --------------------------------------------------------------------\n  // Residue getters\n  // --------------------------------------------------------------------\n\n  // Given a residue index, return its handler\n  getResidueByIndex = residueIndex => {\n    const count = this.residueCount;\n    if (residueIndex >= count) throw new Error(\n      `The residue index ${residueIndex} is out of range. There are ${count} residues in the topology`,\n    );\n    return new Residue(this, residueIndex);\n  };\n\n  // Given a residue parameters, find the residue and then return its handler\n  getResidueByParameters = (chainName, number, icode = null) => {\n    // Get the residue chain\n    const chain = this.getChainByName(chainName);\n    // Now iterate residues starting at this index\n    for (const residueIndex of chain.residueIndices) {\n      const residue = new Residue(this, residueIndex);\n      // Check if the residue number matches\n      if (residue.number !== number) continue;\n      // Check if the insertion code matches\n      if (residue.icode !== icode) continue;\n      // If everything matches then return this residue\n      return residue;\n    }\n    // There should always be a match\n    const icode_message = icode ? `icode ${icode}` : `no icode`\n    throw new Error(\n      `Residue with chain ${chainName}, number ${number} and ${icode_message} does not exist`,\n    );\n  };\n\n  // --------------------------------------------------------------------\n  // Chain getters\n  // --------------------------------------------------------------------\n\n  // Given a chain index, return its handler\n  getChainByIndex = chainIndex => {\n    const count = this.chainNames.length;\n    if (chainIndex >= count) throw new Error(\n      `The chain index ${chainIndex} is out of range. There are ${count} chains in the topology`,\n    );\n    return new Chain(this, chainIndex);\n  }\n\n  // Given a chain name, find the chain and return its handler\n  getChainByName = chainName => {\n    const chainIndex = this.chainNames.indexOf(chainName);\n    if (chainIndex === -1)\n      throw new Error(`Chain ${chainName} is not found in the topology`);\n    return new Chain(this, chainIndex);\n  }\n\n  // --------------------------------------------------------------------\n  // ITERATORS\n  // --------------------------------------------------------------------\n\n  // Iterate topology atoms\n  * iteratoms () {\n    for (let atomIndex = 0; atomIndex < this.atomCount; atomIndex++) \n      yield new Atom(this, atomIndex);\n  }\n\n  // Iterate topology residues\n  * iterresidues () {\n    for (let residueIndex = 0; residueIndex < this.residueCount; residueIndex++) \n      yield new Residue(this, residueIndex);\n  }\n\n  // Iterate topology chains\n  * iterchains () {\n    for (let chainIndex = 0; chainIndex < this.chainCount; chainIndex++) \n      yield new Chain(this, chainIndex);\n  }\n\n  // --------------------------------------------------------------------\n  // OTHER\n  // --------------------------------------------------------------------\n\n  // Given a list of residue indices, convert it to atom indices\n  residue2atomIndices = residueIndices => {\n    let atomIndices = [];\n    for (const residueIndex of residueIndices) {\n      const residue = this.getResidueByIndex(residueIndex);\n      atomIndices = atomIndices.concat(residue.atomIndices);\n    }\n    return atomIndices;\n  }\n\n  // Given a list of atom indices, convert it to residue indices\n  atom2residueIndices = atomIndices => {\n    const residueIndices = unique(atomIndices.map(index => this.atomResidueIndices[index]));\n    residueIndices.sort((a, b) => a - b);\n    return residueIndices;\n  }\n\n  // This function returns residue indices for every residue which belongs to a reference\n  // The reference must be specified with the topology reference id (i.e. uniprot id)\n  // Optionally, you may request only specific residue numbers according to reference numeration\n  // Note that one residue in the reference may be more than once or not be at all in the topology\n  getReferenceResidueIndices = (reference, residueNumbers = null) => {\n    if (!this.references) return;\n    // Get the requested reference index\n    const referenceIndex = this.references.indexOf(reference);\n    if (referenceIndex === -1) return;\n    const residueIndices = [];\n    this.residueReferenceIndices.forEach((refIndex, residueIndex) => {\n      if (refIndex !== referenceIndex) return;\n      // If no residue number were specified then simply return all residue indcies\n      if (residueNumbers === null) return residueIndices.push(residueIndex);\n      // Otherwise we must check\n      const residueNumber = this.residueReferenceNumbers[residueIndex];\n      if (residueNumbers.includes(residueNumber)) residueIndices.push(residueIndex);\n    });\n    return residueIndices;\n  };\n\n  // Set an NGL selection from a list of residue indices\n  // e.g. [0, 1, 2, 3, ...] => nglSelection = \"(A: and 1, 3-5) or (B: and 1)\"\n  // In addition track if there is any small serie (i.e. 3 residues or less)\n  // DANI: Esta función no sería necesaria si se pudiesen hacer selecciones en NGL con índices de residuos\n  // DANI: De hecho no haría falta eliminar residuos duplicados si se pudiesen hacer selecciones en NGL con índices de residuos\n  residueIndices2Ngl = residueIndices => {\n    const rangedSelections = [];\n    let small = false;\n    // Parse each residue in complex notation\n    const parsedResidues = residueIndices.map(residueIndex => this.getResidueByIndex(residueIndex));\n    // Get unique chains\n    const chains = parsedResidues.map(r => r.chainName).filter((v, i, a) => a.indexOf(v) === i);\n    // For each chain, get all residues and \"range\" them\n    chains.forEach(chain => {\n      const chainResidues = parsedResidues.filter(v => v.chainName === chain).map(r => r.number);\n      const { rangedSelection: ranged, small: smallChain } = parsedSelectionRanger(chainResidues);\n      rangedSelections.push(`(:${chain} and (${ranged}))`); // Al parenthesis are mandatory\n      if (smallChain) small = true; // If any chain small is true then the overall small is true\n    });\n    // Join all ranged selections\n    const rangedSelection = rangedSelections.join(' or ');\n    return { rangedSelection, small };\n  };\n\n  // Set an NGL selection from a list of atom indices\n  // Note that atom selection in NGL does not support ranges\n  atomIndices2Ngl = atomIndices => {\n    return '@' + atomIndices.join(',');\n  };\n\n  // Given a list of residues indices, separate them by chain and return an object where keys are chain names\n  // e.g. [ 1, 2, 3, 17 ] -> { 'A': [1,2,3], 'B': [17] }\n  byChains = residuesIndices => {\n    const chained = {};\n    residuesIndices.forEach(residueIndex => {\n      const chainName = this.getResidueByIndex(residueIndex).chainName;\n      const current = chained[chainName];\n      if (current) current.push(residueIndex);\n      else chained[chainName] = [residueIndex];\n    });\n    return chained;\n  };\n\n  // Get all atom colors according to their elements\n  getAtomElementColors = () => {\n    return this.atomElements.map(element => {\n      const color = ELEMENT_COLORS[element];\n      if (!color) return 'black';\n      return color;\n    });\n  };\n}\n","// Get the use memo hook\nimport React, { useEffect, useMemo, useState } from 'react';\n// Function to request data through the API\nimport useAPI from '../../hooks/use-api';\n// Constants\nimport {\n    BASE_PATH_PROJECTS,\n    HOST_CONFIG,\n    REFERENCES_WITH_ENTROPIES,\n    REFERENCES_WITH_EPITOPES\n} from '../constants';\n// Import the topology manager class\nimport { Topology } from '../../utils/topology-manager';\n// Import the NGL structure parser\nimport { autoLoad } from 'ngl';\n\n// Set the project class\nexport class Project {\n    constructor(projectPayload) {\n        // Replicate all payload values in the project object\n        // This includes values such as metadata, files index, accession, etc.\n        Object.entries(projectPayload).forEach(([key, value]) => {\n            this[key] = value;\n        });\n        // If the project is wrong we do not even have metadata then stop here\n        if (!this.metadata) return;\n        // Calculate any additional metadata\n        if (!this.metadata.mdFrames) this.metadata.mdFrames = this.metadata.SNAPSHOTS;\n        this.metadata.timeLength = (this.metadata.FRAMESTEP && this.metadata.mdFrames &&\n            this.metadata.FRAMESTEP * this.metadata.mdFrames) || null;\n        // Set the count of MDs by excluding those MDs flagged as 'removed'\n        this.mdCount = this.mds ? this.mds.filter(md => md.slice(-9) !== '(removed)').length : 0;\n        // Calculate a few internal things\n        // Get the accession and the MD number in a single string which is useful to make API requests\n        // If project is in the old format then do not add the point and the MD number\n        const accessionOrId = this.accession || this.identifier;\n        this.accessionAndMdNumber = this.mds ? `${accessionOrId}.${this.mdNumber}` : accessionOrId;\n        // Check if there are interactions\n        this.hasInteractions = this.analyses.includes('interactions');\n        // Check if the populations file is found in the files index\n        this.isPopulated = Boolean(\n            this.files && this.files.find(filename => filename === 'populations.json'),\n        );\n        // Set the available directions in the client according to project data and host configuration\n        // IMPORTANT: Note that for every direction there must be a directory with equal name under src/pages/accession/\n        // Start with the directions which are to be always available\n        this.directions = {\n            overview: true,\n            trajectory: true,\n            files: true\n        }\n        // Set available analyses\n        // Start with the generic analyses\n        // These analyses are always visible but not clickable when data is missing\n        const genericAnalyses = [ 'rmsds', 'rgyr', 'fluctuation', 'pca', 'rmsd-perres',\n            'rmsd-pairwise', 'dist-perres', 'hbonds', 'energies', 'pockets', 'sasa', 'clusters',\n             'density', 'thickness', 'apl', 'lipid-order', 'lipid-inter', 'dihenergies' ];\n        for (const analysis of genericAnalyses) {\n            this.directions[analysis] = this.analyses.includes(analysis);\n        }\n        // Add the electrostatic direction whenever there are interactions\n        this.directions['electrostatic'] = this.analyses.includes('interactions');\n        // Add reference specific directions\n        this.directions['ligand-descriptors'] = Boolean(this.metadata && this.metadata.LIGANDS && this.metadata.LIGANDS.length > 0);\n        // Now set some specialized analyses\n        // These analyses are hidden when the project is out of context\n        // Their availability may be also more complicated than the generic ones\n        // Set covid-19 specific analyses\n        if (HOST_CONFIG.options.includes('covid')) {\n            const anyReferenceWithEntropies = this.metadata && this.metadata.REFERENCES &&\n                this.metadata.REFERENCES.find(ref => REFERENCES_WITH_ENTROPIES.includes(ref));\n            this.directions['mutations'] = Boolean(anyReferenceWithEntropies);\n            const anyReferenceWithEpitopes = this.metadata && this.metadata.REFERENCES &&\n                this.metadata.REFERENCES.find(ref => REFERENCES_WITH_EPITOPES.includes(ref));\n            this.directions['epitopes'] = Boolean(anyReferenceWithEpitopes);\n        }\n        // Set MSM specific analyses\n        if (this.metadata && this.metadata.METHOD === 'Markov state model (MSM)') {\n            this.directions['populations'] = this.files && this.files.find(file => file === 'populations.json');\n            this.directions['markov'] = this.analyses.includes('markov');\n        }\n        // Set an internal object to save data requested through the API\n        this._apiResponses = {\n            topology: undefined,\n            interactions: undefined,\n            references: undefined,\n            fileDescriptors: undefined,\n            populations: undefined\n        };\n        // Save the topology manager apart so we do not have to re-instantiate the class every time\n        this._topologyManager = null;\n        // Set the project base URL to request the API\n        this._apiBaseUrl = `${BASE_PATH_PROJECTS}/${this.accessionAndMdNumber}`;\n        // Set the creation date as a date object\n        this.creationDate = new Date(this.creationDate).toLocaleDateString('en-GB');\n        this.updateDate = this.updateDate ? new Date(this.updateDate).toLocaleDateString('en-GB') : undefined;\n    }\n    // Declare the different field endpoints to request the API\n    _apiEndpoints = {\n        topology: `/topology`,\n        structure: `/structure`,\n        interactions: `/analyses/interactions`,\n        references: `/references`,\n        fileDescriptors: `/filenotes`,\n        populations: `/files/populations.json`,\n    }\n    // Set a function to query the API and store the response for internal variables\n    _apiQuery = (fieldname, available = true) => {\n        // Set the request URL\n        let url = this._apiBaseUrl + this._apiEndpoints[fieldname];\n        // Request the value if it is available only\n        if (!available) url = null;\n        // If data for the requested fieldname is already saved then set the url as null\n        // This makes the useAPI hook not to repeat the query\n        if (this._apiResponses[fieldname] && this._apiResponses[fieldname].payload) url = null;\n        // Do the API query but save the result only if the url is not null\n        // Note that if url is null from the first render (i.e. there is not value at all) then its value will be null\n        const query = useAPI(url);\n        if (url !== null) this._apiResponses[fieldname] = query;\n        // If we are still loading then\n        return this._apiResponses[fieldname];\n    };\n\n    // Interactions getter\n    get interactions () {\n        // Ask the API for the interactions analysis\n        const response = this._apiQuery('interactions', this.hasInteractions);\n        const payload = response && response.payload;\n        // We will need the topology to make some corretions in old interactions\n        const topology = this.topology;\n        // Once we have interactions data, in case it is in the old format, adapt it to the new format\n        const interactions = useMemo(() => {\n            if (!payload || !topology) return;\n            // Fix old interaction by adding atom indices\n            // Iterate interactions in the payload\n            for (const interaction of response.payload) {\n                // If the interaction already has atom indices then there is nothing to do here\n                if (interaction.atom_indices_1) continue;\n                // If this is an old version then add atom indices\n                interaction.atom_indices_1 = topology.residue2atomIndices(interaction.residue_indices_1);\n                interaction.atom_indices_2 = topology.residue2atomIndices(interaction.residue_indices_2);\n                interaction.interface_atom_indices_1 = topology.residue2atomIndices(interaction.interface_indices_1);\n                interaction.interface_atom_indices_2 = topology.residue2atomIndices(interaction.interface_indices_1);\n            }\n            // Fill new interactions by adding residue indices\n            // Iterate interactions in the payload again\n            for (const interaction of response.payload) {\n                // If the interaction already has atom indices then there is nothing to do here\n                if (interaction.residue_indices_1) continue;\n                // If this is an old version then add atom indices\n                interaction.residue_indices_1 = topology.atom2residueIndices(interaction.atom_indices_1);\n                interaction.residue_indices_2 = topology.atom2residueIndices(interaction.atom_indices_2);\n                interaction.interface_indices_1 = topology.atom2residueIndices(interaction.interface_atom_indices_1);\n                interaction.interface_indices_2 = topology.atom2residueIndices(interaction.interface_atom_indices_2);\n            }\n            return response.payload;\n        }, [payload, topology]);\n        if (response === undefined) return undefined;\n        if (response.loading) return undefined;\n        if (response.error) throw new Error('Error when downloading project interactions: ' + response.error.message);\n        if (!response.payload) throw new Error('Something went wrong with project interactions');\n        return interactions;\n    }\n\n    // References getter\n    get references () {\n        const response = this._apiQuery('references');\n        if (response.loading) return undefined;\n        if (response.error) throw new Error('Error when downloading project references: ' + response.error.message);\n        if (!response.payload) throw new Error('Something went wrong with project references');\n        return response.payload;\n    }\n    // Specific references getters\n    get proteinReferences () {\n        const references = this.references;\n        return useMemo(() => references && references.filter(ref => ref.ref_type === 'proteins'), [references]);\n    }\n    get ligandReferences () {\n        const references = this.references;\n        return useMemo(() => references && references.filter(ref => ref.ref_type === 'ligands'), [references]);\n    }\n    get pdbReferences () {\n        const references = this.references;\n        return useMemo(() => references && references.filter(ref => ref.ref_type === 'pdbs'), [references]);\n    }\n    get chainReferences () {\n        const references = this.references;\n        return useMemo(() => references && references.filter(ref => ref.ref_type === 'chains'), [references]);\n    }\n\n    // Topology getter\n    get topology () {\n        // Get references to further load them to the topology manager\n        // Note that this must be done here to respect hooks\n        const references = this.references;\n        // Set an object with references used by the topology manager already classified\n        const topologyManagerReferences = {\n            proteins: this.proteinReferences,\n            ligands: this.ligandReferences,\n            chains: this.chainReferences\n        };\n        // Request topology data\n        const response = this._apiQuery('topology');\n        // Make sure data is available\n        if (response.loading) return undefined;\n        if (response.error) throw new Error('Error when downloading project topology: ' + response.error.message);\n        if (!response.payload) throw new Error('Something went wrong with project topology');\n        // Return the stored value in case we already have it\n        if (this._topologyManager) return this._topologyManager;\n        // Make sure references are available\n        if (references === undefined) return undefined;\n        this._topologyManager = new Topology(response.payload, this.metadata, topologyManagerReferences);\n        return this._topologyManager;\n    }\n\n    // File descriptors getter\n    get fileDescriptors () {\n        return this._apiQuery('fileDescriptors');\n    }\n    // Populations getter (populated ensembles only)\n    // Populations are requested only when this variable is read for the first time\n    // Then populations are stored so there is no need to repeat the query again\n    get populations () {\n        return this._apiQuery('populations', this.isPopulated);\n    }\n\n    // Get the reference frame\n    // Coordinates from this frame are to be used when representing the structure\n    // It is a frame which has been selected for distance between atoms to be coherent with atom bonds\n    // i.e. there are not bonded atoms to far or non-bonded atoms to close\n    // If bonds were to be guessed by atom distance they would be guess right\n    get referenceFrame () {\n        // If there is no reference frame then we use the first frame by default\n        // Note that old outdated projects may not have reference frame\n        if (this.refframe === undefined) return 0;\n        return this.refframe;\n    }\n\n    // Get the main structure data\n    // Note that the viewer would be already able to do it itself\n    // However we do it from here since this data is to be reused along different pages\n    // Thus we avoid having to download the same data every time\n    get structureData () {\n        // Ask the API for the structural data\n        const response = this._apiQuery('structure');\n        // Parse and memoize the result\n        const structureData = useMemo(() => {\n            if (!response.payload) return undefined;\n            return new Blob( [ response.payload ], { type: 'text/plain'} );\n        }, [response.payload]);\n        // Wait for the response and handle some possible errors\n        if (response.loading) return undefined;\n        if (response.error) throw new Error('Error when downloading project structure: ' + response.error.message);\n        if (!response.payload) throw new Error('Something went wrong with project structure');\n        return structureData\n    }\n\n    // Get the main structure data parsed by NGL\n    get nglStructure () {\n        // Set a state to store the already parsed data\n        const [ nglStructure, setNglStructure ] = useState(undefined);\n        // Get the current structure data\n        const structureData = this.structureData;\n        // Load the structure data in NGL asynchronously    \n        useEffect(() => {\n            if (!structureData) return;\n            autoLoad(structureData, { defaultRepresentation: false, ext: \"pdb\" })\n                // Once the parse has been completed update the parsed structure state\n                .then(prasedStructure => { setNglStructure({ file: prasedStructure }) })\n                // If there is any problem then log it to the console\n                .catch(error => {\n                    console.error(error);\n                    setNglStructure({ error });\n                });\n        }, [structureData])\n        return nglStructure;\n    }\n}\n  ","import { useState, useCallback } from 'react';\n\n// useToggleState is a custom hook which returns a state and a custom function to calculate the new state\nconst useToggleState = initialState => {\n  // useState is a React hook which returns a state and a function to change this state respectively\n  // The state is the initialState at the moment it is called\n  const [state, setState] = useState(!!initialState);\n  // useCallback is a React hook which returns a memoize callback\n  const toggleState = useCallback(valueOrSetter => {\n    // Set the state according to the input type\n    switch (typeof valueOrSetter) {\n      // Funtions are accepted and set as state\n      case 'function':\n        setState(valueOrSetter);\n        break;\n      // In case of booleans, numers and strings, a function that returns the opposite in boolean format is returned\n      case 'boolean':\n      case 'number':\n      case 'string':\n        setState(Boolean(valueOrSetter));\n        break;\n      // In other cases, returns a function which just change the state to the opposite of the previours state in boolean format\n      default:\n        setState(state => !state);\n    }\n  }, []);\n\n  return [state, toggleState];\n};\n\nexport default useToggleState;\n"],"names":["WAIT_DELAY","_ref","wait","flag","toggleFlag","useToggleState","useLayoutEffect","timer","setTimeout","clearTimeout","_jsx","title","className","cn","style","children","CircularProgress","variant","color","size","thickness","blank","loading","payload","error","DEFAULT_CACHE_EXPIRATION","cache","loadCache","cachedData","localStorage","getItem","JSON","parse","url","cacheOptions","arguments","length","undefined","name","cacheOn","cacheExpiration","initialData","responseData","Date","now","received","getTime","data","setData","useState","useEffect","source","axios","didCancel","cancelToken","token","startTime","then","response","endTime","responseTime","config","time","setItem","stringify","saveCache","catch","cancel","PROTEIN_RESIDUE_NAME_LETTERS","DNA_RESIDUE_NAME_LETTERS","RNA_RESIDUE_NAME_LETTERS","NUCLEIC_RESIDUE_NAME_LETTERS","_objectSpread","RESIDUE_NAME_LETTERS","FATTY_RESIDUE_NAMES","Set","STEROID_RESIDUE_NAMES","STANDARD_SOLVENT_RESIDUE_NAMES","STANDARD_COUNTER_CATION_ATOM_NAMES","STANDARD_COUNTER_ANION_ATOM_NAMES","STANDARD_COUNTER_ION_ATOM_NAMES","union","ELEMENT_COLORS","H","C","N","O","S","P","Atom","constructor","topology","atomIndex","this","index","atomNames","label","concat","residue","standardLabel","residueIndex","atomResidueIndices","getResidueByIndex","element","atomElements","elementColor","isCg","Residue","_classification","number","residueNumbers","chainIndex","residueChainIndices","chainName","chainNames","chain","getChainByIndex","icode","residueIcodes","nglSelection","selection","residueNames","letter","classification","classificationByName","atomCount","atoms","map","atom","hydrogenCount","countElement","oxygenCount","every","has","referenceType","referenceIndex","residueReferenceIndices","referenceId","references","referenceTypes","referenceNumber","residueReferenceNumbers","referenceData","reference","proteinReferences","find","ref","uniprot","Error","ligandReferences","pubchem","referenceName","forcedLigandName","metadataLigandNames","isPbc","pbcResidues","iteratoms","labelChain","labelNumber","labelIcode","atomIndices","residueAtomIndices","hasCAlpha","Chain","metadataChainName","metadataChainNames","Array","isArray","residueIndices","chainResidueIndices","chainResidueNumbers","sequence","sequences","iterresidues","residues","Topology","metadata","_this","getAtomByIndex","count","residueCount","getResidueByParameters","getChainByName","icode_message","indexOf","residue2atomIndices","atom2residueIndices","unique","sort","a","b","getReferenceResidueIndices","forEach","refIndex","push","residueNumber","includes","residueIndices2Ngl","rangedSelections","small","parsedResidues","r","filter","v","i","chainResidues","rangedSelection","ranged","smallChain","parsedSelectionRanger","join","atomIndices2Ngl","byChains","residuesIndices","chained","current","getAtomElementColors","atom_names","atom_elements","atomCharges","atom_charges","atom_residue_indices","residue_names","residue_numbers","icodes","residue_icodes","fill","Object","entries","residue_chain_indices","chain_names","reference_types","residue_reference_indices","residue_reference_numbers","atomBonds","atom_bonds","bonds","pbc_residues","from","CHAINNAMES","LIGANDNAMES","proteins","ligands","chainReferences","chains","chainReference","chain_indices","console","chainCount","iterchains","Project","projectPayload","_apiEndpoints","structure","interactions","fileDescriptors","populations","_apiQuery","fieldname","available","_apiBaseUrl","_apiResponses","query","useAPI","key","value","mdFrames","SNAPSHOTS","timeLength","FRAMESTEP","mdCount","mds","md","slice","accessionOrId","accession","identifier","accessionAndMdNumber","mdNumber","hasInteractions","analyses","isPopulated","Boolean","files","filename","directions","overview","trajectory","genericAnalyses","analysis","LIGANDS","HOST_CONFIG","options","anyReferenceWithEntropies","REFERENCES","REFERENCES_WITH_ENTROPIES","anyReferenceWithEpitopes","REFERENCES_WITH_EPITOPES","METHOD","file","_topologyManager","BASE_PATH_PROJECTS","creationDate","toLocaleDateString","updateDate","useMemo","interaction","atom_indices_1","residue_indices_1","atom_indices_2","residue_indices_2","interface_atom_indices_1","interface_indices_1","interface_atom_indices_2","interface_indices_2","message","ref_type","pdbReferences","topologyManagerReferences","referenceFrame","refframe","structureData","Blob","type","nglStructure","setNglStructure","autoLoad","defaultRepresentation","ext","prasedStructure","initialState","state","setState","toggleState","useCallback","valueOrSetter"],"sourceRoot":""}