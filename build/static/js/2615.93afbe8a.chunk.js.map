{"version":3,"file":"static/js/2615.93afbe8a.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/TableFooter/tableFooterClasses.js","../node_modules/@mui/material/TableFooter/TableFooter.js","webpack://mdposit/./src/pages/accession/hbonds/style.module.css?75f0","webpack://mdposit/./src/components/interaction-selector/style.module.css?5392","components/interaction-selector/index.js","webpack://mdposit/./src/components/animated-card/style.module.css?d4d9","components/animated-card/index.js","pages/accession/hbonds/index.js","webpack://mdposit/./src/components/viewer-spawner/style.module.css?df6e","components/viewer-spawner/index.js","pages/accession/hbonds/bond-status/index.js","hooks/use-remfo/index.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableFooterUtilityClass(slot) {\n  return generateUtilityClass('MuiTableFooter', slot);\n}\nconst tableFooterClasses = generateUtilityClasses('MuiTableFooter', ['root']);\nexport default tableFooterClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled from '../styles/styled';\nimport { getTableFooterUtilityClass } from './tableFooterClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTableFooterUtilityClass, classes);\n};\nconst TableFooterRoot = styled('tfoot', {\n  name: 'MuiTableFooter',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  display: 'table-footer-group'\n});\nconst tablelvl2 = {\n  variant: 'footer'\n};\nconst defaultComponent = 'tfoot';\nconst TableFooter = /*#__PURE__*/React.forwardRef(function TableFooter(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTableFooter'\n  });\n  const {\n      className,\n      component = defaultComponent\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(Tablelvl2Context.Provider, {\n    value: tablelvl2,\n    children: /*#__PURE__*/_jsx(TableFooterRoot, _extends({\n      as: component,\n      className: clsx(classes.root, className),\n      ref: ref,\n      role: component === defaultComponent ? null : 'rowgroup',\n      ownerState: ownerState\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TableFooter.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableFooter;","// extracted by mini-css-extract-plugin\nexport default {\"margined\":\"style_margined__wjr-Y\",\"horizontal\":\"style_horizontal__R62Uj\",\"status\":\"style_status__nu7SZ\",\"enabled\":\"style_enabled__q3k51\",\"disabled\":\"style_disabled__fC3Bu\"};","// extracted by mini-css-extract-plugin\nexport default {\"horizontal\":\"style_horizontal__2DIWx\",\"horizontal-margined\":\"style_horizontal-margined__e9fQR\"};","import React, { Suspense } from 'react';\n\nimport {\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Select,\n  MenuItem,\n  TextField,\n  IconButton,\n} from '@mui/material';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport Loading from '../loading';\n\nimport style from './style.module.css';\n\nconst residueOptions = [\n  { label: 'All residues', value: 'residue_indices' },\n  { label: 'Interface residues', value: 'interface_indices' },\n];\n\n// Render a panel which allows to select the desired interaction\n// If the user selects a new interaction then the 'setSelectedInteraction' is set as its index\n// Interactions have the following structure:\n// { name: string, label: string, ... }\n// The 'label' field will replace the 'name' in the selector labels if exists\n// When 'selectedResidues' is passed, render also tools to select interaction residues\n// Residue options are 'all' or 'interface' residues\n// DANI: La guinda sería un 'custom' en las opciones de residuos\n// DANI: La idea sería desplegar dos residue selectors, uno para cada interaction agent\nconst InteractionSelector = ({\n  interactions,\n  selectedInteraction,\n  setSelectedInteraction,\n  selectedResidues,\n  setSelectedResidues,\n  selectedOrder,\n  handleToggleOrder,\n  firstOrderLabel, // The label to be represented over the first order rectangle\n  firstOrderTooltip, // The tooltip to be shown for the first order rectangle\n  secondOrderLabel, // The label to be represented over the second order rectangle\n  secondOrderTooltip, // The tooltip to be shown for the second order rectangle\n  toggleOrderTooltip, // The tooltip to be shown for the toggle order button\n  interfaceOnly = false, // Set if the 'All residues' button is enabled\n}) => {\n  const changeInteraction = event => {\n    setSelectedInteraction(event.target.value);\n  };\n\n  const changeResidues = event => {\n    setSelectedResidues(event.target.value);\n  };\n\n  const changeOrder = () => {\n    handleToggleOrder();\n  };\n\n  const currentInteraction = interactions[selectedInteraction];\n\n  // Render\n  return (\n    <Suspense fallback={<Loading />}>\n      <Select\n        value={selectedInteraction}\n        onChange={changeInteraction}\n        className={style['horizontal-margined']}\n      >\n        {interactions.map((interaction, i) => (\n          <MenuItem key={i} value={i} disabled={interaction.failed}>\n            {interaction.label || interaction.name}\n          </MenuItem>\n        ))}\n      </Select>\n      {selectedResidues && (\n        <RadioGroup\n          value={selectedResidues}\n          onChange={changeResidues}\n          className={style.horizontal}\n        >\n          {residueOptions.map((opt, i) => (\n            <FormControlLabel\n              key={i}\n              value={opt.value}\n              control={<Radio color=\"primary\" />}\n              label={opt.label}\n              disabled={opt.label === 'All residues' && interfaceOnly}\n            />\n          ))}\n        </RadioGroup>\n      )}\n      {selectedOrder !== undefined && (\n        <>\n          <TextField\n            //margin=\"dense\"\n            label={firstOrderLabel}\n            title={firstOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_1\n                : currentInteraction.agent_2\n            }\n          />\n          <IconButton\n            title={toggleOrderTooltip}\n            onClick={changeOrder}\n            size=\"large\"\n          >\n            <FontAwesomeIcon icon={faExchangeAlt} />\n          </IconButton>\n          <TextField\n            //margin=\"dense\"\n            label={secondOrderLabel}\n            title={secondOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_2\n                : currentInteraction.agent_1\n            }\n          />\n        </>\n      )}\n    </Suspense>\n  );\n};\n\nexport default InteractionSelector;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__M9GCG\"};","import React, { useLayoutEffect, useRef, forwardRef } from 'react';\nimport { Card } from '@mui/material';\n\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nconst KEYFRAMES = { opacity: [0, 1] };\n\nif (!reducedMotion()) {\n  KEYFRAMES.transform = ['translateY(50px)', 'translateY(0)'];\n}\n\nconst ANIMATION_OPTIONS = {\n  fill: 'both',\n  easing: 'cubic-bezier(0, .99, .56, 1.1)',\n  duration: 500,\n};\n\n// Make the card appear and slide softly from down to up when the page is loaded\nconst AnimatedCard = forwardRef(({ overrideComponent, ...props }, ref) => {\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const node = containerRef.current && containerRef.current.firstElementChild;\n    if (!(node && node.animate)) return;\n\n    const index = Array.from(\n      document.querySelectorAll('main section'),\n    ).findIndex(section => node === section);\n\n    const animation = node.animate(KEYFRAMES, {\n      ...ANIMATION_OPTIONS,\n      delay: index * 150,\n    });\n\n    return () => animation.cancel();\n  }, []);\n\n  const Component = overrideComponent ? 'section' : Card;\n\n  return (\n    <div ref={containerRef} className={style.container}>\n      <Component component=\"section\" {...props} ref={ref} />\n    </div>\n  );\n});\n\nexport default AnimatedCard;\n","import React, {\n  Suspense,\n  useContext,\n  useState,\n  useMemo,\n  Fragment,\n  useRef,\n  useCallback,\n} from 'react';\n// Import material UI components\nimport {\n  CardContent,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TablePagination,\n  TableFooter,\n  Typography,\n} from '@mui/material';\n// Import custom components\nimport Card from '../../../components/animated-card';\nimport Loading from '../../../components/loading';\nimport ViewerSpawner from '../../../components/viewer-spawner';\nimport InteractionSelector from '../../../components/interaction-selector';\nimport BondStatus from './bond-status';\n// Import our custom hooks\nimport useAPI from '../../../hooks/use-api';\nimport useRemfo from 'src/hooks/use-remfo';\n// Import the project context\nimport { ProjectCtx } from '../../../contexts';\n// Import some constants\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\n// Import CSS style\nimport style from './style.module.css';\n// Import auxiliar\nimport { add, max, Version } from 'src/utils/auxiliar-functions';\n\n// Set the minimum hydrogen bond stability peak to filter which hydrogen bonds are shown\nconst STABILITY_CUTOFF = 0.05;\n\n// Define non-changing props used by the table footer\nconst rowsPerPageDefault = 25;\nconst rowsPerPageOptions = [10, 25, 50, 100];\n\nconst Hbonds = () => {\n  // Get the current project data\n  const {\n    accessionAndMdNumber,\n    metadata,\n    topology,\n    interactions,\n    populations,\n  } = useContext(ProjectCtx);\n\n  // Set a reference to the table element so we can scroll to it\n  const tableRef = useRef();\n\n  // Send a request to the API with the url of the hbonds analyses index\n  const analysesUrlBase = `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses`;\n  const indexUrl = `${analysesUrlBase}/hbonds`;\n  const { loading: indexLoading, payload: indexPayload, error: indexError } = useAPI(indexUrl);\n\n  // The interaction to be displayed\n  const [selectedInteraction, setSelectedInteraction] = useState(0);\n\n  // The newest format has 4 fields: acceptors, donors, hydrogens and hbonds\n  // The hbonds includes arrays of true and false per frame\n  const interaction = interactions && interactions[selectedInteraction];\n\n  // Set the target interaction name\n  const { interactionName, analysisName } = useMemo(() => {\n    // Wait for main data to be downloaded\n    if (!interaction || !indexPayload) return {};\n    // Check if the analysis is in the old or the new format\n    const isOld = indexPayload.data !== undefined;\n    // If so, there is no target analysis name, but the whole data is already in the payload\n    if (isOld) return { interactionName: interaction.name };\n    const targetEntry = indexPayload.find(entry => entry.name === interaction.name);\n    return { interactionName: interaction.name, analysisName: targetEntry.analysis }\n  }, [interaction, indexPayload]);\n\n  // Send a request to the API with the url of some specific hbonds analysis\n  const interactionAnalysisUrl = analysisName ? `${analysesUrlBase}/${analysisName}` : null;\n  const { loading, payload, error } = useAPI(interactionAnalysisUrl);\n\n  // Now set the actual dataset to be used\n  // Note that this is a compatibility layer between the old and the new hbonds system\n  const dataset = useRemfo(previous => {\n    // Wait for the download to finish\n    if (!indexPayload) return previous;\n    // Check if the analysis is in the old or the new format\n    const isOld = indexPayload.data !== undefined;\n    // If this is the new system then the dataset is the payload itself\n    if (!isOld) {\n      if (!payload) return previous;\n      return payload;\n    }\n    // If this is the old system then the dataset is in the index payload\n    const interactionData = indexPayload.data.find(entry => entry.name === interactionName);\n    if (!interactionData) return { error: `Dataset for interaction \"${interactionName}\" not found` };\n    return interactionData;\n  }, [indexPayload, payload, interactionName]);\n\n  // Set the processed data which will be displayed\n  const { processedData, weights } = useMemo(() => {\n    // Return here if we are still waiting for data\n    if (!dataset || !topology || !metadata) return {};\n    if (populations && populations.loading) return {};\n\n    // If the dataset is empty it means no hydrogen bonds where found for this interaction\n    if (dataset.hbonds.length === 0) return {\n      message: 'No hydrogen bonds were found for this interaction'\n    };\n\n    // Get the version of the analysis\n    const version = new Version(dataset.version);\n    let hbondsKey = 'hbonds_timed';\n    // If the simulation is not time related then there will be no timed hbonds\n    // We will use the overall hbonds instead\n    const noTimeRelated = metadata.TYPE === 'ensemble';\n    if (noTimeRelated) hbondsKey = 'hbonds';\n    // In the old version the timed hbonds were in a different key\n    if (version.major < 1) hbondsKey = 'hbonds';\n\n    // Get the number of bonds\n    const bondCount = dataset.hbonds.length;\n\n    // Group bonds with a common acceptor and then group bonds with a common donor\n    const acceptorGroups = {};\n    const donorGroups = {};\n    for (let i = 0; i < bondCount; i++) {\n      // Set the bond object\n      const acceptor = dataset.acceptors[i];\n      const donor = dataset.donors[i];\n      const hydrogen = dataset.hydrogens[i];\n      let status = dataset[hbondsKey][i];\n      // Note that status will be a single float if this is an enseble\n      // We make sure it is an array to keep the types coherent\n      if (!Array.isArray(status)) status = [status];\n      // Find the maximum stability\n      // Use this value to filter which hydrogen bonds are shown\n      const maxStability = max(status);\n      if (maxStability < STABILITY_CUTOFF) continue;\n      // Define also the stability of the hydrogen bond by adding its status over time\n      // This value is then used to sort groups\n      const stability = add(status) / status.length;\n      const bond = { acceptor, donor, hydrogen, status, stability };\n      // Add current bond to its corresponding acceptor group\n      const acceptorGroup = acceptorGroups[acceptor];\n      if (acceptorGroup) acceptorGroup.push(bond);\n      else acceptorGroups[acceptor] = [bond];\n      // Add current bond to its corresponding donor group\n      const donorGroup = donorGroups[donor];\n      if (donorGroup) donorGroup.push(bond);\n      else donorGroups[donor] = [bond];\n    }\n\n    // Join all groups together discarding redundant groups\n    const groups = [];\n    const commons = [];\n    // Join unique acceptor groups\n    // Unique acceptor groups are those which have bonds with more than one different donor\n    Object.values(acceptorGroups).forEach(group => {\n      const donors = group.map(bond => bond.donor);\n      const uniqueDonors = new Set(donors);\n      if (uniqueDonors.size > 1) groups.push(group);\n      // Otherwise, add the group to the common groups list\n      else commons.push(group);\n    });\n    // Join unique donor groups\n    // Unique donor groups are those which have bonds with more than one different acceptor\n    Object.values(donorGroups).forEach(group => {\n      const acceptors = group.map(bond => bond.acceptor);\n      const uniqueAcceptors = new Set(acceptors);\n      if (uniqueAcceptors.size > 1) groups.push(group);\n      // WARNING: There is no need to add common groups to the list now\n      // They can only be repeater or redundant\n      // Repeated ones will be already in the list\n      // Redundant ones are discardes so we are not intereseted\n    });\n    // Common groups are thouse who have both an unique acceptor and an unique donor\n    // They will always be repeated or redundant (already included in bigger groups)\n    // If they are redundant then we are done\n    // Otherwise it means they are repeated so we only have to add it once to the list\n    commons.forEach(group => {\n      // Check if one of its bonds is included in any group already\n      const bondSample = group[0];\n      for (const group of groups) {\n        for (const bond of group) {\n          // In case the acceptor (or the donnor) matches is enought to discard the whole group\n          if (bond.acceptor === bondSample.acceptor) return;\n        }\n      }\n      // In case no coincidence was found we include the bond\n      groups.push(group);\n    });\n\n    // Sum up the groups in the list of atoms and status\n    // When all acceptors/donors/hydrogens are the same atom leave an unique value in the list\n    const processedData = groups.map(group => {\n      let acceptors = group.map(bond => bond.acceptor);\n      const uniqueAcceptors = new Set(acceptors);\n      if (uniqueAcceptors.size === 1) acceptors = [acceptors[0]];\n      let donors = group.map(bond => bond.donor);\n      const uniqueDonors = new Set(donors);\n      if (uniqueDonors.size === 1) donors = [donors[0]];\n      let hydrogens = group.map(bond => bond.hydrogen);\n      const uniqueHydrogens = new Set(hydrogens);\n      if (uniqueHydrogens.size === 1) hydrogens = [hydrogens[0]];\n      const status = group.map(bond => bond.status);\n      // Set the group stability score adding the stability of their individual bonds\n      // This value is then used to sort groups\n      const stability = add(group.map(bond => bond.stability));\n      return { acceptors, donors, hydrogens, status, stability };\n    });\n\n    // Find out for each group which atoms (acceptors or donnors) belong to each interacting agent\n    // Then set the labels to be displayed in the corresponding agent 1 and 2 sections in the table\n    processedData.forEach(group => {\n      // Find out which agent does the acceptors belong to\n      const acceptorIndex = group.acceptors[0];\n      const acceptorAtom = topology.getAtomByIndex(acceptorIndex);\n      const isAcceptorFromAgent1 =\n        interaction['interface_atom_indices_1'].indexOf(acceptorAtom.index) !== -1;\n      group.isAcceptorFromAgent1 = isAcceptorFromAgent1;\n      // Set the acceptor, donor and hydrogen labels to be displayed in the table\n      const [acceptorLabels, donorLabels] = [group.acceptors, group.donors].map(\n        atoms =>\n          atoms.map(atomIndex => {\n            const atom = topology.getAtomByIndex(atomIndex);\n            return `${atom.residue.standardLabel}.${atom.name}`;\n          }),\n      );\n      const hydrogenLabels = group.hydrogens.map(atomIndex => {\n        const atom = topology.getAtomByIndex(atomIndex);\n        let atomName = atom.name;\n        if (isAcceptorFromAgent1) atomName = atomName + ' —';\n        else atomName = '— ' + atomName;\n        return atomName;\n      });\n      group.hydrogenLabels = hydrogenLabels;\n      // Now set the agent 1 and 2 labels\n      if (isAcceptorFromAgent1) {\n        group.agent1Labels = acceptorLabels;\n        group.agent2Labels = donorLabels;\n      } else {\n        group.agent1Labels = donorLabels;\n        group.agent2Labels = acceptorLabels;\n      }\n    });\n\n    // Sort bond groups by status (all status added together)\n    processedData.sort((a, b) => b.stability - a.stability);\n\n    // Calculate the frame step for recorded hydrogen bonds\n    const dataLength = dataset.hbonds[0].length;\n    const frameStep = Math.round(metadata.mdFrames / (dataLength - 1));\n    // Set the weigths in order to resize bonds bandwidth accordingly\n    // Note that this is for the old verion, in the new version values are already weighted\n    let weights;\n    if (populations && populations.payload && version.major < 1) {\n      // Get the weights for each data value corresponding frame\n      weights = [];\n      for (let i = 0; i < populations.payload.length; i += frameStep) {\n        weights.push(populations.payload[i]);\n      }\n      // Check weights and data to match in the number of values\n      const weigthCount = weights.length;\n      if (dataLength !== weigthCount) throw new Error(\n        `Data values count (${dataLength}) does not match the weigths values count (${weigthCount})`,\n      );\n    }\n    return { processedData, weights };\n  }, [dataset, metadata, topology, interaction, populations]);\n\n  // Table pagination states\n  const [selectedPage, setSelectedPage] = useState(0);\n  const [selectedRowsPerPage, setSelectedRowsPerPage] = useState(\n    rowsPerPageDefault,\n  );\n\n  // Set all bonds to be displayed according to the current page and the number of bonds per page\n  const displayedBondGroups = useMemo(() => {\n    if (!processedData) return;\n    const firstBond = selectedPage * selectedRowsPerPage;\n    const lastBond = (selectedPage + 1) * selectedRowsPerPage;\n    return processedData.slice(firstBond, lastBond);\n  }, [processedData, selectedPage, selectedRowsPerPage]);\n\n  // The hydrogen bond bar which the mouse has clicked\n  const [selectedHB, setSelectedHB] = useState(null);\n\n  // Handle when the user clicks in a bond status\n  const handleBondClick = useCallback(keyLabel => {\n    const [b,i] = keyLabel.split('-');\n    const bondGroup = displayedBondGroups[b];\n    const acceptor =\n      bondGroup.acceptors[i] ||\n      bondGroup.acceptors[0];\n    const donor =\n      bondGroup.donors[i] || bondGroup.donors[0];\n    const hydrogen =\n      bondGroup.hydrogens[i] ||\n      bondGroup.hydrogens[0];\n    setSelectedHB({\n      selectedAtoms: [acceptor, donor],\n      selectedDistances: [[acceptor, donor]],\n      selectedAngles: [[acceptor, hydrogen, donor]],\n    });\n  }, [displayedBondGroups]);\n\n  // Handle when the user selects a different interaction\n  const handleChangeInteraction = useCallback(interaction => {\n    setSelectedInteraction(interaction);\n    setSelectedPage(0);\n  }, []);\n\n  // Render loading or error messages according with the API response\n  if (indexError) return indexError.toString();\n  if (error) return error.toString();\n  if (dataset && dataset.error) return dataset.error;\n  if (populations && populations.error) return populations.error.toString();\n  if (!dataset) {\n    if (indexLoading || loading) return <Loading />;\n    // If there are no interactions or topology\n    if (!interactions) return 'There are no interactions';\n    if (!topology) return 'There is no topology';\n    return 'Something bad happened with the analysis data';\n  }\n  if (populations && !populations.payload) {\n    if (populations.loading) return <Loading />;\n    return 'Something bad happened with populations data';\n  }\n\n  // Render\n  return (\n    <Suspense fallback={<Loading />}>\n      <Card>\n        <CardContent className={style.horizontal}>\n          <Typography variant=\"h6\">Interaction:</Typography>\n          <InteractionSelector\n            interactions={interactions}\n            selectedInteraction={selectedInteraction}\n            setSelectedInteraction={handleChangeInteraction}\n          />\n        </CardContent>\n      </Card>\n      <div className={indexLoading || loading ? style.disabled : style.enabled}>\n        {typeof processedData === 'string' && (\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\">{processedData}</Typography>\n            </CardContent>\n          </Card>\n        )}\n        {typeof processedData === 'object' && (\n          <Card className={style.margined}>\n            <CardContent>\n              <Table ref={tableRef}>\n                {/* Setting column widths explicitly is important for the bond status chart to adapt its width */}\n                <colgroup>\n                  <col style={{ width: '12%' }} />\n                  <col style={{ width: '12%' }} />\n                  <col style={{ width: '12%' }} />\n                  <col style={{ width: '64%' }} />\n                </colgroup>\n                <TableHead className={style['table-head']}>\n                  <TableRow>\n                    <TableCell>{interaction.agent_1}</TableCell>\n                    <TableCell>Hydrogen</TableCell>\n                    <TableCell>{interaction.agent_2}</TableCell>\n                    <TableCell>Bond status along trajectory</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {/* Create a row for each bond to be displayed*/}\n                  {displayedBondGroups.map((bondGroup, b) => (\n                    <Fragment key={b}>\n                      {bondGroup.status.map((status, i) => (\n                        <TableRow key={i}>\n                          {/* agent 1 atom/s */}\n                          {bondGroup.agent1Labels[i] && (\n                            <TableCell\n                              rowSpan={\n                                bondGroup.status.length /\n                                bondGroup.agent1Labels.length\n                              }\n                            >\n                              {bondGroup.agent1Labels[i]}\n                            </TableCell>\n                          )}\n                          {/* hydrogen */}\n                          {bondGroup.hydrogenLabels[i] && (\n                            <TableCell\n                              rowSpan={\n                                bondGroup.status.length /\n                                bondGroup.hydrogenLabels.length\n                              }\n                              align={\n                                bondGroup.isAcceptorFromAgent1 ? 'right' : 'left'\n                              }\n                            >\n                              {bondGroup.hydrogenLabels[i]}\n                            </TableCell>\n                          )}\n                          {/* agent 2 atom */}\n                          {bondGroup.agent2Labels[i] && (\n                            <TableCell\n                              rowSpan={\n                                bondGroup.status.length /\n                                bondGroup.agent2Labels.length\n                              }\n                            >\n                              {bondGroup.agent2Labels[i]}\n                            </TableCell>\n                          )}\n                          {/* bond status */}\n                          <TableCell>\n                            <BondStatus\n                              status={status}\n                              weights={weights}\n                              // Bond group and bond index are passed to further know which bond it is\n                              // Thus the on click function already has dis data as input argument\n                              keyLabel={`${b}-${i}`}\n                              onClick={handleBondClick}\n                              className={style.status}\n                            />\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </Fragment>\n                  ))}\n                </TableBody>\n                <TableFooter>\n                  <TableRow>\n                    <TablePagination\n                      rowsPerPageOptions={rowsPerPageOptions} // Optional numbers of rows displayed in each page. It can be modified by the user.\n                      colSpan={4} // Set the anchor of columns which is taken as a reference for the horizontal position of the footer\n                      count={processedData.length} // Total number of rows\n                      rowsPerPage={selectedRowsPerPage} // The actual number of rows displayed\n                      page={selectedPage} // The actual page\n                      onPageChange={(_, page) => {\n                        setSelectedPage(page);\n                        // Scroll to the top of the table\n                        tableRef.current.scrollIntoView();\n                      }}\n                      onRowsPerPageChange={({ target: { value } }) => {\n                        setSelectedRowsPerPage(value);\n                        setSelectedPage(0);\n                      }}\n                    />\n                  </TableRow>\n                </TableFooter>\n              </Table>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n      <ViewerSpawner\n        // Set the new viewer or null if there is not a proper \"selected\" value\n        newViewer={\n          selectedHB\n            ? {\n                selectedAtoms: selectedHB.selectedAtoms,\n                selectedDistances: selectedHB.selectedDistances,\n                selectedAngles: selectedHB.selectedAngles,\n              }\n            : null\n        }\n        // If the nailed/closed viewer is the current viewer then reset the 'selected'\n        onNail={viewer =>\n          setSelectedHB(previous => {\n            if (previous && previous.selectedAtoms === viewer.selectedAtoms)\n              return null;\n            else return previous;\n          })\n        }\n        onClose={viewer => {\n          setSelectedHB(previous => {\n            if (previous && previous.selectedAtoms === viewer.selectedAtoms)\n              return null;\n            else return previous;\n          });\n        }}\n      />\n    </Suspense>\n  );\n};\n\nexport default Hbonds;\n","// extracted by mini-css-extract-plugin\nexport default {\"rnd\":\"style_rnd__Txifm\",\"floating-card\":\"style_floating-card__HHpby\"};","import React, { lazy, Suspense, useRef, useState } from 'react';\n\n// Rnd is the resizable and draggable system where the ngl viewer is placed\nimport { Rnd } from 'react-rnd';\n\nimport Card from '../animated-card';\n\nimport style from './style.module.css';\n\nconst ViewerWithControls = lazy(() =>\n  import(\n    /* webpackChunkName: 'viewer-with-controls' */ '../viewer-with-controls'\n  ),\n);\n\n// Minimal ngl window height\nconst MIN_NGL_DIMENSION = 150;\n\n// Counter to get always the maximum zIndex\n// This is useful to set a new or currently dragged/resized ngl window over the others\nlet maxZ = 0;\nconst nextZ = () => {\n  maxZ += 1;\n  return maxZ;\n};\n\n// This function spawns all the NGL viewers needed\n// i.e. one viewer with the requested 'props' and all previous viewers which have been nailed\nconst ViewerSpawner = ({ newViewer, nailing = true, onNail, onClose }) => {\n  // Store here all nailed NGL viewers\n  const [nailedViewers, setNailedViewers] = useState([]);\n\n  // Set the viewers as the nailed viewers and the new viewer\n  const viewers = [...nailedViewers];\n\n  // Keep listed all arrays which have been used (i.e. ngl viewers which have been nailed or closed)\n  const usedIds = useRef([]);\n\n  if (newViewer) {\n    // Find a new suitable Id that meet 2 conditions:\n    // - There is never 2 viewers with the same id, so we avoid errors\n    // - If we pick diferent frames in the graph without nailing anything, the current viewer has always the same id\n    // (This way the current viewer does not appear in the origin position every time)\n    const getNewId = () => {\n      let id = 0;\n      while (id < 999) {\n        if (usedIds.current.indexOf(id) === -1) return id;\n        id += 1;\n      }\n      console.error('Maximum number of viewers reached');\n    };\n\n    // Set a unique id for this props based in the last nailed viewer\n    newViewer.id = getNewId();\n    newViewer.close = () => {\n      if (nailing) {\n        setNailedViewers(nailed => {\n          const newNailed = [...nailed];\n          const index = nailed.indexOf(newViewer);\n          if (index !== -1) newNailed.splice(index, 1);\n          return newNailed;\n        });\n      }\n      if (onClose) onClose(newViewer);\n      usedIds.current.push(newViewer.id);\n    };\n    // If the nailer function is passed, add the logic for the viewer to be nailed further\n    if (nailing)\n      newViewer.nail = () => {\n        setNailedViewers(nailed => [...nailed, newViewer]);\n        if (onNail) onNail(newViewer);\n        usedIds.current.push(newViewer.id);\n      };\n    // Add the current viewer to the viewers list\n    viewers.push(newViewer);\n  }\n\n  // Render a viewer for each prop. Use the 'selected' parameter as unique id\n  return viewers.map(viewer => <NGLViewerInDND key={viewer.id} {...viewer} />);\n};\n\n// This component render a small NGL viewer\n// It is called when user clicks in a point in the projections component\n// Also it is called by the generic analysis page\nconst NGLViewerInDND = props => {\n  // Set a reference for the viewer\n  // If a reference is passed among the viewer arguments then use it instead\n  const viewerRef = props.viewerRef || useRef(null);\n\n  // Set the default position and size\n  const [place, setPlace] = useState(() => {\n    // Set an extra margin\n    const MARGIN = 20;\n    // Get the screen pixel sizes and vertical scroll position\n    const { innerWidth, innerHeight, scrollY } = window;\n    // The spawned elements are parented to the 'main' element, not to the 'body'\n    // We have to take this in count, since the header adds an extra offset in vertical position\n    const offsetHeight = document.querySelector('main').offsetTop;\n    // Set a reasonable dimension for the ngl window\n    const dimension = Math.max(\n      Math.min(innerWidth / 4, innerHeight / 4),\n      MIN_NGL_DIMENSION,\n    );\n    const reasonableHeight = 1.5 * dimension;\n    const reasonableWidth = 2 * dimension;\n    return {\n      // WARNING: If you set the width as 'auto' the window stays very wide when exiting fullscreen\n      width: reasonableWidth, // Let the Rnd logic set the width automatically\n      height: reasonableHeight, // Reasonable height\n      x: 0, // Left border\n      y: innerHeight - offsetHeight - reasonableHeight - MARGIN + scrollY, // Bottom border\n    };\n  });\n\n  return (\n    // Rnd is the draggable and resizable system where the ngl viewer is placed\n    <Rnd\n      position={{ x: place.x, y: place.y }}\n      size={{ width: place.width, height: place.height }}\n      // Update the zIndex to make this window the first visible\n      style={{ zIndex: nextZ() }}\n      className={style.rnd}\n      data-rnd\n      // Limits where the window can be dragged/resized to\n      // WARNING: bounds=\"main\" is problematic since the window may appear out of bounds\n      // WARNING: Then when it is moved for the first time it jumps inside the bonds, not elegant\n      bounds=\"window\"\n      // Prevent the mouse to drag/resize the window when it is over specific elements\n      cancel=\"canvas, [data-popover], #preventDragSize, .prevent-drag\"\n      // On drag/resize starts we do not change anything, but use the hook to re-render this component\n      // The Z Index is updated and the selected window becomes the first in the z axis automatically\n      // WARNING: Drag functions are also called when you just click (e.g. clicking buttons)\n      onDragStart={() => {\n        setPlace({ ...place });\n      }}\n      onResizeStart={() => {\n        setPlace({ ...place });\n      }}\n      onDragStop={(e, d) => {\n        // Use this to reject some bugged event calls: e.g. the frames number selector\n        if (e.layerX === 0 && e.layerY === 0) return;\n        // We re-render only if the new position does not equal the old position\n        if (place.x !== d.x || place.y !== d.y)\n          setPlace({\n            ...place,\n            x: d.x,\n            y: d.y,\n          });\n      }}\n      // Re-adapt the viewer and update the position/size when the window is resized\n      onResize={() => viewerRef.current && viewerRef.current.autoResize()}\n      onResizeStop={(e, direction, ref, delta, position) => {\n        setPlace({\n          width: ref.style.width,\n          height: ref.style.height,\n          ...position,\n        });\n        // if (!viewerRef.current) return;\n        // viewerRef.current.autoResize();\n        // viewerRef.current.autoResize.flush();\n      }}\n    >\n      <Card className={style['floating-card']} elevation={4}>\n        <Suspense fallback={null}>\n          <ViewerWithControls\n            className={style['floating-card']}\n            ref={viewerRef}\n            startsPlaying={false}\n            {...props}\n          />\n        </Suspense>\n      </Card>\n    </Rnd>\n  );\n};\n\nexport default ViewerSpawner;\n","import React, { useRef, useEffect, useState, memo } from 'react';\n\nimport { select, scaleBand, scaleLinear, color as d3color } from 'd3';\n\n// Set status colors\nconst ACTIVE_BOND_COLOR = 'blue';\nconst BROKEN_BOND_COLOR = '#f0f0f0';\n\n// Set the color scale according to the maximum and minimum means\nconst COLOR_PLAN = [BROKEN_BOND_COLOR, ACTIVE_BOND_COLOR];\nconst COLOR_SCALE = scaleLinear()\n  .range(COLOR_PLAN)\n  .domain([0, 1]);\n\n// Represent a single row of rects according to the status\n// The status is an array of true/false values\nconst BondStatus = memo(({ status, weights, keyLabel, onClick, className }) => {\n  // Set the reference to the element where the heatmap will be allocated\n  const containerRef = useRef(null);\n  // Save the previous chart reference so we can remove it before a new render\n  const previousCharts = useRef(null);\n  // Use a state as a workaround to force rerenders on window resize\n  const [, setCurrentWindow] = useState(null);\n  // The chart is assigned to a referenced 'div' which must be rendered first\n  // All this process is runned after the render\n  useEffect(() => {\n    // Reset the chart\n    // WARNING: For some reason, if this part is re-render the original render is not gone\n    // WARNING: We must reset the element manually or infinite elements are rendered and stacked\n    if (previousCharts.current)\n      previousCharts.current.forEach(chart => chart.remove());\n\n    // Get the current element where all this heatmap is placed\n    const container = containerRef.current;\n    // The first render, when there is no reference to the current element yet, we skip the process\n    const {\n      clientWidth: width,\n      clientHeight: height,\n    } = container.parentElement;\n\n    // Use canvas to display the heatmap blocks since d3 is not as efficient\n    // Canvas is set this way so we can access this specific element later\n    // WARNING: Using the 'document.getElementById' is risky since there may be more\n    // WARNING: e.g. the color legend\n    const canvasElement = document.createElement('CANVAS');\n    select(container)\n      .node()\n      .appendChild(canvasElement);\n    const canvas = select(canvasElement)\n      .attr('id', 'canvas')\n      .attr('width', width)\n      .attr('height', height)\n      .style('position', 'absolute')\n      //.style('top', offset.top + 'px')\n      //.style('left', offset.left + 'px')\n      .style('cursor', onClick ? 'pointer' : undefined);\n    const canvasContext = canvas\n      .node()\n      .getContext('2d');\n\n    // append the svg object to the body of the page\n    const svg = select(container)\n      .append('svg')\n      .attr('id', 'svg')\n      .attr('viewBox', [0, 0, width, height]);\n\n    // Build X scales and axis:\n    if (weights) {\n\n      const x = scaleBand()\n        .range([0, width])\n        .domain([0, 1])\n        .paddingInner(0);\n\n      // Get the x Range in the d3/canvas available space\n      const minX = x(0);\n      const maxX = x(1);\n      const xRange = maxX - minX;\n\n      // Consider all the previous space to be splitted in the different weigths\n      const weigthsSum = weights.reduce((a, b) => a + b, 0);\n      const proportion = xRange / weigthsSum;\n\n      // Now place cells oneafter the other thus keeping the x offset position\n      let xOffset = 0;\n      status.forEach((stat, i) => {\n        const weigth = weights[i];\n        // DANI: El dibujo se quedaba a exactamente la mitad del espacio total, no entiendo por que\n        // DANI: El * 2 en el cellWidth arregla el problema\n        const cellWidth = weigth * proportion * 2;\n        const xPosition = xOffset;\n        const color = stat ? ACTIVE_BOND_COLOR : BROKEN_BOND_COLOR;\n        canvasContext.fillStyle = color;\n        canvasContext.fillRect(xPosition, 0, cellWidth, height);\n        xOffset += cellWidth;\n      });\n    } else {\n      const x = scaleBand()\n        .range([0, width])\n        .domain(status.map((s, i) => i))\n        .paddingInner(0);\n\n      // Get the width of each cell\n      const cellWidth = x.bandwidth();\n\n      // Display heatmap cells using canvas\n      status.forEach((stat, i) => {\n        const xPosition = x(i);\n        // Calculate the interpolated rgb for this value\n        // The interpolated color comes in rbg format\n        const color = d3color(COLOR_SCALE(stat)).formatHex();\n        canvasContext.fillStyle = color;\n        canvasContext.fillRect(xPosition, 0, cellWidth, height);\n      });\n\n      // If there is only one status then add also the number\n      if (status.length === 1) {\n        const value = Math.round(status[0] * 1000) / 10;\n        const label = value + '%';\n        canvasContext.font = \"14px arial\";\n        canvasContext.fillStyle = 'black';\n        canvasContext.textAlign = \"center\";\n        canvasContext.textBaseline = \"middle\";\n        canvasContext.fillText(label, cellWidth / 2, height / 2);\n      }\n    }\n\n    // Handle when a cell is clicked\n    if (onClick) {\n      canvasElement.onmousedown = () => {\n        // Call the on click function\n        onClick(keyLabel);\n      };\n    }\n\n    // Record all elements which must be removed manually when re-rendering\n    previousCharts.current = [svg, canvas];\n\n    const handleResize = () => {\n      setCurrentWindow({\n        innerWidth: window.innerWidth,\n        innerHeight: window.innerHeight,\n      });\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleaning function\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }); // This useEffect has no dependencies\n\n  // Finally, render the horizontal bar\n  return (\n    // It is important to specify a height value\n    // Otherwise canvas and svg may be not coordinated\n    <div\n      className={className}\n      style={className ? undefined : { height: '100px', width: '600px' }}\n    >\n      <div\n        ref={containerRef}\n        id={'container'}\n        // WARNING: This width 100% may seem redundant, but chrome needs it\n        style={{ position: 'relative', width: '100%', height: '100%' }}\n      />\n    </div>\n  );\n});\n\nexport default BondStatus;\n","import { useMemo, useRef } from 'react';\n\n// Get a memoized value just like a useMemo would\n// However you can access the previous memoized value as the first (and only) function argument\nconst useRemfo = (func, deps) => {\n    const previousValue = useRef();\n    const newValue = useMemo(() => func(previousValue.current), deps);\n    previousValue.current = newValue;\n    return newValue;\n};\n\nexport default useRemfo;\n"],"names":["getTableFooterUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","TableFooterRoot","styled","name","overridesResolver","props","styles","root","display","tablelvl2","variant","defaultComponent","React","inProps","ref","useDefaultProps","className","component","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","_jsx","Tablelvl2Context","Provider","value","children","as","clsx","role","residueOptions","label","_ref","interactions","selectedInteraction","setSelectedInteraction","selectedResidues","setSelectedResidues","selectedOrder","handleToggleOrder","firstOrderLabel","firstOrderTooltip","secondOrderLabel","secondOrderTooltip","toggleOrderTooltip","interfaceOnly","currentInteraction","_jsxs","Suspense","fallback","Loading","Select","onChange","event","target","style","map","interaction","i","MenuItem","disabled","failed","RadioGroup","opt","FormControlLabel","control","Radio","color","undefined","_Fragment","TextField","title","agent_1","agent_2","IconButton","onClick","changeOrder","size","FontAwesomeIcon","icon","faExchangeAlt","KEYFRAMES","opacity","reducedMotion","transform","ANIMATION_OPTIONS","fill","easing","duration","forwardRef","overrideComponent","containerRef","useRef","useLayoutEffect","node","current","firstElementChild","animate","index","Array","from","document","querySelectorAll","findIndex","section","animation","delay","cancel","Component","Card","rowsPerPageOptions","Hbonds","accessionAndMdNumber","metadata","topology","populations","useContext","ProjectCtx","tableRef","analysesUrlBase","BASE_PATH_PROJECTS","indexUrl","loading","indexLoading","payload","indexPayload","error","indexError","useAPI","useState","interactionName","analysisName","useMemo","data","targetEntry","find","entry","analysis","interactionAnalysisUrl","dataset","useRemfo","previous","interactionData","processedData","weights","hbonds","length","message","version","Version","hbondsKey","TYPE","major","bondCount","acceptorGroups","donorGroups","acceptor","acceptors","donor","donors","hydrogen","hydrogens","status","isArray","max","bond","stability","add","acceptorGroup","push","donorGroup","groups","commons","Object","values","forEach","group","Set","bondSample","acceptorIndex","acceptorAtom","getAtomByIndex","isAcceptorFromAgent1","indexOf","acceptorLabels","donorLabels","atoms","atomIndex","atom","residue","standardLabel","hydrogenLabels","atomName","agent1Labels","agent2Labels","sort","a","b","dataLength","frameStep","Math","round","mdFrames","weigthCount","Error","selectedPage","setSelectedPage","selectedRowsPerPage","setSelectedRowsPerPage","displayedBondGroups","firstBond","lastBond","slice","selectedHB","setSelectedHB","handleBondClick","useCallback","keyLabel","split","bondGroup","selectedAtoms","selectedDistances","selectedAngles","handleChangeInteraction","toString","CardContent","horizontal","Typography","InteractionSelector","enabled","margined","Table","width","TableHead","TableRow","TableCell","TableBody","Fragment","rowSpan","align","BondStatus","TableFooter","TablePagination","colSpan","count","rowsPerPage","page","onPageChange","_","scrollIntoView","onRowsPerPageChange","ViewerSpawner","newViewer","onNail","viewer","onClose","ViewerWithControls","lazy","maxZ","NGLViewerInDND","viewerRef","place","setPlace","innerWidth","innerHeight","scrollY","window","offsetHeight","querySelector","offsetTop","dimension","min","reasonableHeight","height","x","y","Rnd","position","zIndex","bounds","onDragStart","onResizeStart","onDragStop","e","d","layerX","layerY","onResize","autoResize","onResizeStop","direction","delta","elevation","startsPlaying","nailing","nailedViewers","setNailedViewers","viewers","usedIds","getNewId","id","console","close","nailed","newNailed","splice","nail","ACTIVE_BOND_COLOR","BROKEN_BOND_COLOR","COLOR_PLAN","COLOR_SCALE","scaleLinear","range","domain","memo","previousCharts","setCurrentWindow","useEffect","chart","remove","container","clientWidth","clientHeight","parentElement","canvasElement","createElement","select","appendChild","canvas","attr","canvasContext","getContext","svg","append","scaleBand","paddingInner","minX","proportion","reduce","xOffset","stat","cellWidth","xPosition","fillStyle","fillRect","s","bandwidth","d3color","formatHex","font","textAlign","textBaseline","fillText","onmousedown","handleResize","addEventListener","removeEventListener","func","deps","previousValue","newValue"],"sourceRoot":""}