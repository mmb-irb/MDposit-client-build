{"version":3,"file":"static/js/2822.7fb54202.chunk.js","mappings":"wKASIA,EAAcC,EAAAA,EAASA,EAAAA,EAAOC,eAAYC,EAC1CC,EAAiBJ,EAAcA,EAAYK,cAAWF,EA0B1D,QAhBA,SAASG,EAAaC,GAEpB,GAAoB,iBAATA,EACT,OAAOA,EAET,IAAIC,EAAAA,EAAAA,GAAQD,GAEV,OAAOE,EAAAA,EAAAA,GAASF,EAAOD,GAAgB,GAEzC,IAAII,EAAAA,EAAAA,GAASH,GACX,OAAOH,EAAiBA,EAAeO,KAAKJ,GAAS,GAEvD,IAAIK,EAAUL,EAAQ,GACtB,MAAkB,KAAVK,GAAkB,EAAIL,IAAU,IAAa,KAAOK,CAC9D,ECPA,QAJA,SAAkBL,GAChB,OAAgB,MAATA,EAAgB,GAAKD,EAAaC,EAC3C,C,iDCUA,QAPA,SAAmBA,GACjB,IAAIK,GAASC,EAAAA,EAAAA,GAASN,GAClBO,EAAYF,EAAS,EAEzB,OAAOA,IAAWA,EAAUE,EAAYF,EAASE,EAAYF,EAAU,CACzE,C,gFC3BIG,EAAiBC,EAAAA,EAAKC,SACtBC,EAAYC,KAAKC,ICkBrB,QDTA,SAAqBC,GACnB,IAAIC,EAAOH,KAAKE,GAChB,OAAO,SAASE,EAAQC,GAGtB,GAFAD,GAASE,EAAAA,EAAAA,GAASF,IAClBC,EAAyB,MAAbA,EAAoB,EAAIN,GAAUQ,EAAAA,EAAAA,GAAUF,GAAY,OACnDT,EAAeQ,GAAS,CAGvC,IAAII,IAAQtB,EAAAA,EAAAA,GAASkB,GAAU,KAAKK,MAAM,KACtCrB,EAAQe,EAAKK,EAAK,GAAK,MAAQA,EAAK,GAAKH,IAG7C,SADAG,IAAQtB,EAAAA,EAAAA,GAASE,GAAS,KAAKqB,MAAM,MACvB,GAAK,MAAQD,EAAK,GAAKH,GACvC,CACA,OAAOF,EAAKC,EACd,CACF,CCTYM,CAAY,Q,mCCHxB,QAXA,SAAkBC,EAAOC,GAKvB,IAJA,IAAIC,GAAS,EACTC,EAAkB,MAATH,EAAgB,EAAIA,EAAMG,OACnCrB,EAASsB,MAAMD,KAEVD,EAAQC,GACfrB,EAAOoB,GAASD,EAASD,EAAME,GAAQA,EAAOF,GAEhD,OAAOlB,CACT,C,mCCOA,QAFcsB,MAAM1B,O,wCCrBpB2B,SAAS,uBAAwB,KAC/BC,GAAG,iDAAkD,KACnD,MAAMC,GAAOC,EAAAA,EAAAA,SAAqB,GAAI,GACtCC,cAAcF,GAAMG,KAAK,UACzBD,OAAOF,GAAMI,oBAGfL,GAAG,mDAAoD,KACrD,MAAMC,GAAOC,EAAAA,EAAAA,SAAqB,CAAC,GAAI,KACvCC,cAAcF,GAAMG,KAAK,UACzBD,OAAOF,GAAMI,oBAGfL,GAAG,qDAAsD,KACvD,MAAMC,GAAOC,EAAAA,EAAAA,SAAqB,CAAC,EAAG,GAAI,WAC1CC,cAAcF,GAAMG,KAAK,UACzBD,OAAOF,GAAMI,oBAGfL,GAAG,qDAAsD,KACvD,MAAMC,GAAOC,EAAAA,EAAAA,SAAqB,CAAC,EAAG,EAAG,GAAI,IAC7CC,cAAcF,GAAMG,KAAK,UACzBD,OAAOF,GAAMI,qB,8DCtBjB,MA2BA,EA3B6BH,CAACI,EAAaC,KACzC,IAAKD,EAAYT,OACf,MAAM,8MAIR,IAAIW,EAaJ,OAXEA,EADyB,IAAvBF,EAAYT,OACGS,EAAY,GAAK,EACF,IAAvBA,EAAYT,OACP,GAAAY,OAAMH,EAAY,GAAK,EAAC,SAAAG,OAAQH,EAAY,GAAK,GAE9CA,EAAYI,OAC3B,CAACC,EAAKC,EAAYC,EAACC,KAAA,IAAE,OAAEjB,GAAQiB,EAAA,SAAAL,OAC1BE,GAAGF,OAAGE,EAAM,IAAM,IAAEF,OAAGI,IAAMhB,EAAS,EAAI,OAAS,GAAE,KAAAY,OAAIG,EAC1D,IACJ,IAGE,+BAANH,OACEH,EAAYT,OAAS,EAAI,IAAM,GAAE,KAAAY,OAC/BD,EAAc,qBAAAC,QAAoBM,EAAAA,EAAAA,GACtB,IAAdR,EACA,GACD,2B","sources":["../node_modules/lodash-es/_baseToString.js","../node_modules/lodash-es/toString.js","../node_modules/lodash-es/toInteger.js","../node_modules/lodash-es/_createRound.js","../node_modules/lodash-es/round.js","../node_modules/lodash-es/_arrayMap.js","../node_modules/lodash-es/isArray.js","pages/accession/pca/plain-text-explanation/index.test.js","pages/accession/pca/plain-text-explanation/index.js"],"sourcesContent":["import Symbol from './_Symbol.js';\nimport arrayMap from './_arrayMap.js';\nimport isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default baseToString;\n","import baseToString from './_baseToString.js';\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nexport default toString;\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n","import root from './_root.js';\nimport toInteger from './toInteger.js';\nimport toNumber from './toNumber.js';\nimport toString from './toString.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsFinite = root.isFinite,\n    nativeMin = Math.min;\n\n/**\n * Creates a function like `_.round`.\n *\n * @private\n * @param {string} methodName The name of the `Math` method to use when rounding.\n * @returns {Function} Returns the new round function.\n */\nfunction createRound(methodName) {\n  var func = Math[methodName];\n  return function(number, precision) {\n    number = toNumber(number);\n    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n    if (precision && nativeIsFinite(number)) {\n      // Shift with exponential notation to avoid floating-point issues.\n      // See [MDN](https://mdn.io/round#Examples) for more details.\n      var pair = (toString(number) + 'e').split('e'),\n          value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n      pair = (toString(value) + 'e').split('e');\n      return +(pair[0] + 'e' + (+pair[1] - precision));\n    }\n    return func(number);\n  };\n}\n\nexport default createRound;\n","import createRound from './_createRound.js';\n\n/**\n * Computes `number` rounded to `precision`.\n *\n * @static\n * @memberOf _\n * @since 3.10.0\n * @category Math\n * @param {number} number The number to round.\n * @param {number} [precision=0] The precision to round to.\n * @returns {number} Returns the rounded number.\n * @example\n *\n * _.round(4.006);\n * // => 4\n *\n * _.round(4.006, 2);\n * // => 4.01\n *\n * _.round(4060, -2);\n * // => 4100\n */\nvar round = createRound('round');\n\nexport default round;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nexport default arrayMap;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","import plainTextExplanation from '.';\n\ndescribe('plainTextExplanation', () => {\n  it('should return text when no projection selected', () => {\n    const text = plainTextExplanation([], 0);\n    expect(typeof text).toBe('string');\n    expect(text).toMatchSnapshot();\n  });\n\n  it('should return text when 1 projection is selected', () => {\n    const text = plainTextExplanation([0], 0.25);\n    expect(typeof text).toBe('string');\n    expect(text).toMatchSnapshot();\n  });\n\n  it('should return text when 2 projections are selected', () => {\n    const text = plainTextExplanation([0, 2], 0.30000005);\n    expect(typeof text).toBe('string');\n    expect(text).toMatchSnapshot();\n  });\n\n  it('should return text when 3 projections are selected', () => {\n    const text = plainTextExplanation([1, 4, 8], 0.5);\n    expect(typeof text).toBe('string');\n    expect(text).toMatchSnapshot();\n  });\n});\n","import { round } from 'lodash-es';\n\nconst plainTextExplanation = (projections, explanation) => {\n  if (!projections.length) {\n    return `No projection selected, please select one or multiple projections to\n    visualise its or their related data. Only the darker blue bars correspond to\n    projections for which data has been calculated.`;\n  }\n  let projectionText;\n  if (projections.length === 1) {\n    projectionText = projections[0] + 1;\n  } else if (projections.length === 2) {\n    projectionText = `${projections[0] + 1} and ${projections[1] + 1}`;\n  } else {\n    projectionText = projections.reduce(\n      (acc, projection, i, { length }) =>\n        `${acc}${acc ? ',' : ''}${i === length - 1 ? ' and' : ''} ${projection +\n          1}`,\n      '',\n    );\n  }\n  return `Selected principal component${\n    projections.length > 1 ? 's' : ''\n  } ${projectionText}, accounting for ${round(\n    explanation * 100,\n    1,\n  )}% of explained variance`;\n};\n\nexport default plainTextExplanation;\n"],"names":["symbolProto","Symbol","prototype","undefined","symbolToString","toString","baseToString","value","isArray","arrayMap","isSymbol","call","result","toFinite","remainder","nativeIsFinite","root","isFinite","nativeMin","Math","min","methodName","func","number","precision","toNumber","toInteger","pair","split","createRound","array","iteratee","index","length","Array","describe","it","text","plainTextExplanation","expect","toBe","toMatchSnapshot","projections","explanation","projectionText","concat","reduce","acc","projection","i","_ref","round"],"sourceRoot":""}