{"version":3,"file":"static/js/2930.445a3498.chunk.js","mappings":"mUAsBA,MAAMA,GAAQC,EAAAA,EAAAA,MAAK,IACf,oEAKEC,EAAe,CAAC,OAAQ,SAAU,OAuBlCC,EAAUC,GAAaA,EAAUC,OAAOC,OAIxCC,EAAmB,IAAIC,IAAI,CAC7B,CAACL,EAAQ,CAAC,MAAO,IAAK,MAAO,QAAS,SACtC,CAACA,EAAQ,CAAC,IAAK,MAAO,MAAO,QAAS,QACtC,CAACA,EAAQ,CAAC,MAAO,MAAO,MAAO,QAAS,SACxC,CAACA,EAAQ,CAAC,MAAO,MAAO,MAAO,QAAS,SACxC,CAACA,EAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,WACtC,CAACA,EAAQ,CAAC,MAAO,MAAO,IAAK,QAAS,QACtC,CAACA,EAAQ,CAAC,MAAO,MAAO,MAAO,QAAS,OACxC,CAACA,EAAQ,CAAC,MAAO,MAAO,KAAM,OAAQ,OACtC,CAACA,EAAQ,CAAC,MAAO,MAAO,KAAM,OAAQ,SAEpCM,EAA6BC,MAAMC,KAAK,IAAIC,IAAIL,EAAiBM,WAIjEC,EAAkC,CACpCC,MAAO,IACPC,KAAM,MACNC,MAAO,MACPC,MAAO,MACPC,QAAS,MACTC,KAAM,MACNC,IAAK,MACLC,IAAK,OAsXT,EAnXyBC,KAErB,MAAM,qBAAEC,EAAoB,SAAEC,IAAaC,EAAAA,EAAAA,YAAWC,EAAAA,GAEhDC,EAAG,GAAAC,OAAMC,EAAAA,GAAkB,KAAAD,OAAIL,EAAoB,0BACnD,QAAEO,EAAO,QAAEC,EAAO,MAAEC,IAAUC,EAAAA,EAAAA,GAAON,IAGrC,cAAEO,EAAa,aAAEC,IAAiBC,EAAAA,EAAAA,SAAQ,KAE5C,IAAKL,IAAYP,EAAU,MAAO,CAAC,EAEnC,MAAMU,EAAgB,GACtB1B,EAA2B6B,QAAQC,GAAgBJ,EAAcI,GAAgB,IAEjFP,EAAQM,QAAQE,IAEZ,MAAMC,GAAQC,EAAAA,EAAAA,GAAA,GAAQF,GAEhBG,EAAQF,EAASG,QAAQC,IAAIC,GAASrB,EAASsB,eAAeD,IAC9D1C,EAAYD,EAAQwC,EAAME,IAAIG,GAAQA,EAAKC,OAC3CV,EAAehC,EAAiB2C,IAAI9C,GAE1C,IAAKmC,EAAc,OACnBE,EAASQ,KAAOV,EAEhB,MAAMY,EAAoBrC,EAAgCyB,GACpDa,EAAgBT,EAAMU,KAAKL,GAAQA,EAAKC,OAASE,GACvDV,EAASa,QAAUF,EAAcE,QAEjCb,EAASc,MAAK,GAAA1B,OAAMY,EAASa,QAAQE,cAAa,KAAA3B,OAAIU,GAEtDE,EAASgB,OAAShB,EAASiB,GAAKjB,EAASiB,GAAK,EAC9CjB,EAASkB,QAAUlB,EAASmB,IAAMnB,EAASmB,IAAM,EACjDnB,EAASoB,MAAQpB,EAASqB,QAAUrB,EAASgB,OAAShB,EAASkB,QAC/DxB,EAAc4B,KAAKtB,KAGvB,MAAML,GAAe4B,EAAAA,EAAAA,IAAO7B,EAAcU,IAAIJ,GAAYA,EAASa,QAAQW,MAAMhB,OACjF,MAAO,CAAEd,gBAAeC,iBACzB,CAACJ,EAASP,KAGNyC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,MAE7CC,GAAoBC,EAAAA,EAAAA,aAAYC,IAClC,MAAMC,EAAa/C,EAASgD,WAAWC,QAAQH,GAC/CJ,EAAiBK,GACjBG,EAAa,OACd,CAAClD,KAEJmD,EAAAA,EAAAA,WAAU,KACDxC,GACLiC,EAAkBjC,EAAa,KAChC,CAACA,IAGJ,MAAOyC,EAAkBC,IAAuBV,EAAAA,EAAAA,UAAS,SAEnDW,GAAuBT,EAAAA,EAAAA,aAAYC,IACrCO,EAAoBP,GACpBI,EAAa,OACd,KAEIK,EAAYC,IAAiBb,EAAAA,EAAAA,WAAS,GAEvCc,GAAyBZ,EAAAA,EAAAA,aAAY,KACvCW,EAAcE,IAAaA,GAC3BR,EAAa,OACd,KAEG,aACFS,EAAY,YACZC,EAAW,YACXC,EAAW,OACXC,EAAM,QACNC,EAAO,UACPC,EAAS,YACTC,EAAW,SACXC,EAAQ,YACRC,IACAvD,EAAAA,EAAAA,SAAQ,KAER,IAAKF,GAAmC,OAAlB+B,EAAwB,MAAO,CAAC,EAEtD,MAAM2B,EAAe1D,EAAc2D,OAAOrD,GACtCA,EAASa,QAAQkB,aAAeN,GAE9B6B,EAAcf,EAjILgB,KACnB,MAAMC,EAAU,CAAC,EAMjB,OALAD,EAAU1D,QAAQG,IACd,MAAMyD,EAAUD,EAAQxD,EAASa,QAAQR,OACrCoD,EAASA,EAAQnC,KAAKtB,GACrBwD,EAAQxD,EAASa,QAAQR,OAAS,CAAEL,KAEtCwD,GA2HGE,CAAeN,GA3ILG,KACpB,MAAMC,EAAU,CAAC,EAMjB,OALAD,EAAU1D,QAAQG,IACd,MAAMyD,EAAUD,EAAQxD,EAASQ,MAC7BiD,EAASA,EAAQnC,KAAKtB,GACrBwD,EAAQxD,EAASQ,MAAQ,CAAER,KAE7BwD,GAqIGG,CAAgBP,GAEhBT,EAAeJ,EACfqB,OAAOxF,OAAOkF,GAAalD,IAAIyD,IAE7B,MAAMhD,EAAUgD,EAAc,GAAGhD,QAEjC,MAAO,CACHA,QAASA,EACTC,MAAOD,EAAQE,cACfM,SAASyC,EAAAA,EAAAA,IAAID,EAAczD,IAAIJ,GAAYA,EAASqB,UACpDL,QAAQ8C,EAAAA,EAAAA,IAAID,EAAczD,IAAIJ,GAAYA,EAASgB,SACnDE,SAAS4C,EAAAA,EAAAA,IAAID,EAAczD,IAAIJ,GAAYA,EAASkB,UACpDE,OAAO0C,EAAAA,EAAAA,IAAID,EAAczD,IAAIJ,GAAYA,EAASoB,WAExDkC,EAAYlB,GAKZ2B,GAAiBC,EAAAA,EAAAA,IAAiBrB,EAAavC,IAAIJ,GAAYA,EAASqB,UACxE4C,GAAYD,EAAAA,EAAAA,IAAiBrB,EAAavC,IAAIJ,GAAYA,EAASgB,SACnEkD,GAAaF,EAAAA,EAAAA,IAAiBrB,EAAavC,IAAIJ,GAAYA,EAASkB,UACpEiD,GAAeH,EAAAA,EAAAA,IAAiBrB,EAAavC,IAAIJ,GAAYA,EAASoB,QACtEwB,EAAc,CAChBvB,SAAS+C,EAAAA,EAAAA,IAAYL,GAAkB,YACvC9C,IAAImD,EAAAA,EAAAA,IAAYH,GAAa,YAC7B9C,KAAKiD,EAAAA,EAAAA,IAAYF,GAAc,YAC/B9C,OAAOgD,EAAAA,EAAAA,IAAYD,GAAgB,aAIjCtB,EAAc,CAChBxB,QAAS,CAAEgD,KAAM1B,EAAavC,IAAIJ,GAAYA,EAASqB,SAAUiD,MAAO,UAEtExB,EAAS,CACX7B,GAAI,CAAEoD,KAAM1B,EAAavC,IAAIJ,GAAYA,EAASgB,QAASsD,MAAO,UAEhEvB,EAAU,CACZ5B,IAAK,CAAEkD,KAAM1B,EAAavC,IAAIJ,GAAYA,EAASkB,SAAUoD,MAAO,UAElEC,EAAc5B,EAAavC,IAAIJ,GAAYA,EAASoB,OACpD4B,EAAY,CACd5B,MAAO,CAAEiD,KAAME,EAAaD,MAAO,UAGjCrB,EAAcN,EAAavC,IAAIJ,GAAYA,EAASc,OAEpD0D,EAAUjC,EAAa,UAAY,WAMnCkC,EAAsB,CAAC,EAC7B9B,EAAa9C,QAAQwE,GAAQI,EAAoBJ,EAAKxD,QAAQR,OAASgE,EAAKjD,OAE5E,MAAMsD,GAAWC,EAAAA,EAAAA,IAAIJ,GACfK,GAAWC,EAAAA,EAAAA,IAAIN,GACfO,GAAgBC,EAAAA,EAAAA,OACjBC,MAAMvH,GACNwH,OAAO,CAACP,GAAWA,EAAWE,GAAY,EAAGA,IAG5CzB,EAAc+B,EAAAA,GAAmBC,UAAU,SAASC,GACtDC,KAAKC,UAAY/E,IAEjB,MAAMgF,EAAehF,EAAKgF,aACpBC,EAAQf,EAAoBc,GAElC,QAAcE,IAAVD,EAAqB,OAAO,SAGhC,MAAME,GAAWC,EAAAA,EAAAA,KAAQb,EAAcU,IAAQI,YAI/C,OADcC,SAASH,EAASI,UAAU,GAAI,IAGlD,GACA,MAAO,CACHnD,eACAC,cACAC,cACAC,SACAC,UACAC,YACAC,cACAC,SAvCaA,CAAC6C,EAAGC,IAAM,GAAA5G,OACpBoF,EAAO,KAAApF,OAAK6D,EAAY+C,IAAYA,GAuCvC7C,gBAEL,CAAC1B,EAAe/B,EAAe0C,EAAkBG,IAG9C0D,EAAyBjH,GAAYA,EAASiH,wBAE5CC,EAAiBC,IAAuBxE,EAAAA,EAAAA,UAAS,OAIzDQ,EAAAA,EAAAA,WAAU,KAEN,IAAKnD,IAAaiH,EAAwB,OAE1C,MACMG,EAAoB,IADApH,EAASgD,WAAWP,GAExC4E,EAAwB,CAC1B,CACI7F,KAAM,oBACN8F,UAAWF,EACX9B,MAAO,SACPiC,aAAcpD,EACdqD,UAAW,eAEf,CACIhG,KAAM,YACN8F,UAAW,OAASF,EACpBK,KAAM,WACNnC,MAAO,UACPoC,QAAS,GACTF,UAAW,cAInBL,EAAmBQ,IAEf,MAAMC,EAAqD,OAA5BD,EACzBV,EACAU,EAAwBtD,OAAOwD,IAC7BA,EAAIL,WAAaK,EAAIL,UAAUM,OAAO,EAAE,KAGhD,MAAO,IACAT,KACAO,MAIZ,CAAC5H,EAAUiH,EAAwBxE,EAAe0B,IAGrD,MAAO4D,EAAW7E,IAAgBP,EAAAA,EAAAA,UAAS,MAGrCqF,IAAQpH,EAAAA,EAAAA,SAAQ,KAClB,GAAkB,OAAdmH,EAAoB,MAAO,GAK/B,MAAO,CAJc,CACjBE,EAAGF,EACHG,KAAM,CAAEC,KAAM,cAGnB,CAACJ,IAGEK,IAASvF,EAAAA,EAAAA,aAAYwF,GACvBnF,EAAaQ,GACL2E,GAAUA,EAAON,YAAcrE,EAC5B,KACKA,GACZ,IAER,OAAK1D,EAEDQ,EAAcA,EAAM8H,WACpBhI,GAAgBiI,EAAAA,EAAAA,KAACC,EAAAA,EAAO,IACvBjI,GAGGkI,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAACC,UAAUJ,EAAAA,EAAAA,KAACC,EAAAA,EAAO,IAAII,SAAA,EACpCH,EAAAA,EAAAA,MAACI,EAAAA,EAAI,CAACC,UAAWC,EAAAA,QAAMC,KAAKJ,SAAA,EACxBH,EAAAA,EAAAA,MAAA,OAAKK,UAAWC,EAAAA,QAAME,WAAWL,SAAA,EAC7BL,EAAAA,EAAAA,KAACW,EAAAA,EAAQ,CACLpH,MAAO,QACPqH,QAASxI,EACT2G,UAAWtH,EAASgD,WAAWP,GAC/B2G,OAAQxG,KAEZ2F,EAAAA,EAAAA,KAACW,EAAAA,EAAQ,CACLpH,MAAO,WACPqH,QAASnK,EACTsI,UAAWlE,EACXgG,OAAQ9F,EACR+F,SAAU9F,KAEdgF,EAAAA,EAAAA,KAACe,EAAAA,EAAgB,CACbC,WAAY,eACZC,YAAa,cACbC,SAAUlG,EACVmG,SAAUjG,QAGlB8E,EAAAA,EAAAA,KAACoB,EAAAA,EAAW,CAACb,UAAWC,EAAAA,QAAME,WAAWL,SACnChF,GAAsB6E,EAAAA,EAAAA,MAACkB,EAAAA,EAAW,CAAAf,SAAA,EACpCL,EAAAA,EAAAA,KAAA,UAAQO,UAAWC,EAAAA,QAAM,mBAAmBH,SAAC,qBAC7CL,EAAAA,EAAAA,KAACqB,EAAAA,EAAS,CACNd,UAAWC,EAAAA,QAAM,cACjBjH,MAAM,UACN+H,MAAM,yBACNrD,MAAO5C,EAAYvB,WAEvBkG,EAAAA,EAAAA,KAACqB,EAAAA,EAAS,CACNd,UAAWC,EAAAA,QAAM,cACjBjH,MAAM,gBACN+H,MAAM,+BACNrD,MAAO5C,EAAY3B,MAEvBsG,EAAAA,EAAAA,KAACqB,EAAAA,EAAS,CACNd,UAAWC,EAAAA,QAAM,cACjBjH,MAAM,gBACN+H,MAAM,+BACNrD,MAAO5C,EAAYzB,OAEvBoG,EAAAA,EAAAA,KAACqB,EAAAA,EAAS,CACNd,UAAWC,EAAAA,QAAM,cACjBjH,MAAM,QACN+H,MAAM,uBACNrD,MAAO5C,EAAYxB,WAxBP,QA4BpBqG,EAAAA,EAAAA,MAACkB,EAAAA,EAAW,CAAAf,SAAA,EACRL,EAAAA,EAAAA,KAAChK,EAAK,CACFuL,MAAOjG,EACPI,YAAaA,EACbC,SAAUA,EACV2F,MAAO,WACPE,WAAY,oBACZC,SAAU9G,EACV+G,eAAa,EACbjC,MAAOA,MAEXO,EAAAA,EAAAA,KAAChK,EAAK,CACFuL,MAAOhG,EACPG,YAAaA,EACbC,SAAUA,EACV2F,MAAO,gBACPE,WAAY,oBACZC,SAAU9G,EACV+G,eAAa,EACbjC,MAAOA,MAEXO,EAAAA,EAAAA,KAAChK,EAAK,CACFuL,MAAO/F,EACPE,YAAaA,EACbC,SAAUA,EACV2F,MAAO,gBACPE,WAAY,oBACZC,SAAU9G,EACV+G,eAAa,EACbjC,MAAOA,MAEXO,EAAAA,EAAAA,KAAChK,EAAK,CACFuL,MAAO9F,EACPC,YAAaA,EACbC,SAAUA,EACV2F,MAAO,QACPE,WAAY,oBACZC,SAAU9G,EACV+G,eAAa,EACbjC,MAAOA,YAInBO,EAAAA,EAAAA,KAAC2B,EAAAA,EACG,CACAC,UAAWpC,EACT,CACEqC,uBAAwB,CAAEzG,EAAaoE,GAAWlG,QAAQR,OAC1DgJ,qBAAsB,CAAEnD,EAAiBC,GAEzCY,aAEF,KAGFuC,OAAQlC,GACRmC,QAASnC,QA/GI,0BAJCG,EAAAA,EAAAA,KAACC,EAAAA,EAAO,I,gDC3UlC,SAAgB,KAAO,oBAAoB,WAAa,0BAA0B,aAAa,0BAA0B,kBAAkB,+BAA+B,SAAW,wB,qLCC9K,SAASgC,EAA0BC,GACxC,OAAOC,EAAAA,EAAAA,IAAqB,oBAAqBD,EACnD,EAC0BE,EAAAA,EAAAA,GAAuB,oBAAqB,CAAC,OAAQ,UAAW,WAAY,QAAS,YAAa,Y,eCD5H,MAAMC,EAAY,CAAC,YAAa,UAAW,cAAe,YAAa,iBAAkB,WAAY,qBAAsB,OAAQ,OAAQ,KAAM,aAAc,WAAY,OAAQ,SAAU,WAAY,UAAW,WAAY,WAAY,WAAY,OAAQ,SA2B1PC,GAAiBC,EAAAA,EAAAA,IAAOC,EAAAA,EAAY,CACxCvJ,KAAM,iBADesJ,CAEpBE,IAAA,IAAC,WACFC,GACDD,EAAA,OAAKE,EAAAA,EAAAA,GAAS,CACbC,QAAS,EACTC,aAAc,OACO,UAApBH,EAAWI,MAAoB,CAChCC,WAAgC,UAApBL,EAAWM,MAAoB,GAAK,IAC3B,QAApBN,EAAWI,MAAkB,CAC9BG,YAAiC,UAApBP,EAAWM,MAAoB,GAAK,OAE7CE,GAAkBX,EAAAA,EAAAA,IAAO,QAAS,CACtCtJ,KAAM,gBACNkK,kBAAmBC,EAAAA,GAFGb,CAGrB,CACDc,OAAQ,UACRC,SAAU,WACVnE,QAAS,EACToE,MAAO,OACPC,OAAQ,OACRC,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRf,QAAS,EACTgB,OAAQ,IA2NV,EArNgCC,EAAAA,WAAiB,SAAoBC,EAAOC,GAC1E,MAAM,UACFC,EACAC,QAASC,EAAW,YACpBC,EAAW,UACX5D,EAAS,eACT6D,EACAtD,SAAUuD,EAAY,mBACtBC,GAAqB,EAAK,KAC1BxB,GAAO,EAAK,KACZyB,EAAI,GACJC,EAAE,WACFC,EAAU,SACVC,EAAQ,KACRzL,EAAI,OACJ0L,EAAM,SACNxD,EAAQ,QACRyD,EAAO,SACPC,EAAQ,SACRC,GAAW,EAAK,SAChBC,EAAQ,KACR7F,EAAI,MACJjB,GACE6F,EACJkB,GAAQC,EAAAA,EAAAA,GAA8BnB,EAAOzB,IACxC4B,EAASiB,IAAmBC,EAAAA,EAAAA,GAAc,CAC/CC,WAAYlB,EACZmB,QAASC,QAAQlB,GACjBnL,KAAM,aACNsM,MAAO,YAEHC,GAAiBC,EAAAA,EAAAA,KA6BvB,IAAI3E,EAAWuD,EACXmB,GACsB,qBAAb1E,IACTA,EAAW0E,EAAe1E,UAG9B,MAAM4E,EAAuB,aAATxG,GAAgC,UAATA,EACrCwD,GAAaC,EAAAA,EAAAA,GAAS,CAAC,EAAGmB,EAAO,CACrCG,UACAnD,WACAwD,qBACAxB,SAEI6C,EArHkBjD,KACxB,MAAM,QACJiD,EAAO,QACP1B,EAAO,SACPnD,EAAQ,KACRgC,GACEJ,EACEkD,EAAQ,CACZC,KAAM,CAAC,OAAQ5B,GAAW,UAAWnD,GAAY,WAAYgC,GAAQ,OAAJjL,QAAWiO,EAAAA,EAAAA,GAAWhD,KACvFiD,MAAO,CAAC,UAEV,OAAOC,EAAAA,EAAAA,GAAeJ,EAAO3D,EAA2B0D,IA0GxCM,CAAkBvD,GAClC,OAAoBxC,EAAAA,EAAAA,MAAMoC,GAAgBK,EAAAA,EAAAA,GAAS,CACjDuD,UAAW,OACX3F,WAAW4F,EAAAA,EAAAA,GAAKR,EAAQE,KAAMtF,GAC9B6F,cAAc,EACdC,aAAc/B,EACdxD,SAAUA,EACViE,SAAU,KACVuB,UAAMpI,EACN0G,QAlDkB2B,IACd3B,GACFA,EAAQ2B,GAENf,GAAkBA,EAAeZ,SACnCY,EAAeZ,QAAQ2B,IA8CzB5B,OA3CiB4B,IACb5B,GACFA,EAAO4B,GAELf,GAAkBA,EAAeb,QACnCa,EAAeb,OAAO4B,IAuCxB7D,WAAYA,EACZqB,IAAKA,GACJiB,EAAO,CACR3E,SAAU,EAAcL,EAAAA,EAAAA,KAAKkD,GAAiBP,EAAAA,EAAAA,GAAS,CACrDqB,UAAWA,EACXC,QAASC,EACTE,eAAgBA,EAChB7D,UAAWoF,EAAQI,MACnBjF,SAAUA,EACV0D,GAAIkB,EAAclB,OAAKtG,EACvBjF,KAAMA,EACNkI,SA/CsBoF,IAExB,GAAIA,EAAMC,YAAYC,iBACpB,OAEF,MAAMC,EAAaH,EAAMI,OAAO1C,QAChCiB,EAAgBwB,GACZvF,GAEFA,EAASoF,EAAOG,IAuChB7B,SAAUA,EACVd,IAAKW,EACLI,SAAUA,EACVpC,WAAYA,EACZqC,SAAUA,EACV7F,KAAMA,GACI,aAATA,QAAiChB,IAAVD,EAAsB,CAAC,EAAI,CACnDA,SACCwG,IAAcR,EAAUE,EAAcI,KAE7C,E,2FCvKA,QAA0B,uBAA1B,EAAuE,mC,eCKvE,MA+BA,EA/BiB9B,IAAsD,IAArD,MAAElJ,EAAK,QAAEqH,EAAO,UAAE7B,EAAS,OAAE8B,EAAM,SAAEC,GAAU2B,EAE/D,IAAK7B,EAAS,MAAO,2BACrB,IAAK7B,EAAW,MAAO,6BACvB,IAAK8B,EAAQ,MAAO,0BAIpB,OACEX,EAAAA,EAAAA,MAACkB,EAAAA,EAAW,CAACb,UAAWC,EAAcH,SAAA,CACnC9G,IACCyG,EAAAA,EAAAA,KAAC4G,EAAAA,EAAU,CAACC,QAAQ,KAAIxG,SACrB9G,KAGLyG,EAAAA,EAAAA,KAAC8G,EAAAA,EAAM,CACL7I,MAAOc,EACPoC,SAXkBoF,IAAW1F,EAAO0F,EAAMI,OAAO1I,QAYjDsC,UAAWC,EACXM,SAAUA,EAAST,SAElBO,EAAQ/H,IAAI,CAACkO,EAAQC,KACpBhH,EAAAA,EAAAA,KAACiH,EAAAA,EAAQ,CAAShJ,MAAO8I,EAAO1G,SAC7B0G,GADYC,S","sources":["pages/accession/dihenergies/index.js","webpack://mdposit/./src/pages/accession/dihenergies/style.module.css?c452","../node_modules/@mui/material/internal/switchBaseClasses.js","../node_modules/@mui/material/internal/SwitchBase.js","webpack://mdposit/./src/components/selector/style.module.css?71ed","components/selector/index.js"],"sourcesContent":["import React, { lazy, Suspense, useState, useContext, useMemo, useCallback, useEffect } from 'react';\n// Import tools to retrieve data using the API\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\nimport useAPI from '../../../hooks/use-api';\n// Import project data\nimport { ProjectCtx } from '../../../contexts';\n// Import MUI components\nimport { CardContent, TextField } from '@mui/material';\n// Import tools to mae a custom color scheme\nimport { ColormakerRegistry } from 'ngl';\nimport { color as d3color, scaleLinear } from 'd3';\n// Import some custom components\nimport Card from '../../../components/animated-card';\nimport ViewerSpawner from '../../../components/viewer-spawner';\nimport Loading from '../../../components/loading';\nimport Selector from 'src/components/selector';\nimport DoubleSideSwitch from 'src/components/double-side-switch';\n// Import auxiliar function\nimport { caluclateAverage, round2cents, add, unique, min, max } from 'src/utils/auxiliar-functions';\n// Import CSS style\nimport style from './style.module.css';\n\nconst Graph = lazy(() =>\n    import(/* webpackChunkName: 'graph' */ '../../../components/graph'),\n);\n\n// Set the color of each residue in the NGL representation\n// WARNING: Grey looks better than white because the background may be white and residues are hard to see\nconst nglColorPlan = ['grey', 'yellow', 'red'];\n\n// Set functions to group a list of object according to one of its properties\nconst groupByDihedral = dihedrals => {\n    const grouped = {};\n    dihedrals.forEach(dihedral => {\n        const current = grouped[dihedral.name];\n        if (current) current.push(dihedral);\n        else grouped[dihedral.name] = [ dihedral ];\n    });\n    return grouped;\n}\nconst groupByResidue = dihedrals => {\n    const grouped = {};\n    dihedrals.forEach(dihedral => {\n        const current = grouped[dihedral.residue.index];\n        if (current) current.push(dihedral);\n        else grouped[dihedral.residue.index] = [ dihedral ];\n    });\n    return grouped;\n}\n\n// Two arrays with indetical atom names should have the same hash (if I am not wrong)\nconst getHash = atomNames => atomNames.sort().join();\n\n// The name how this analysis is tagged in the webpage\n// If no name is provided, the webpage will tag it with the default name\nconst TARGET_DIHEDRALS = new Map([\n    [getHash([\"O3'\", \"P\", \"O5'\", \"C5'\"]), 'alpha'],\n    [getHash([\"P\", \"O5'\", \"C5'\", \"C4'\"]), 'beta'],\n    [getHash([\"O5'\", \"C5'\", \"C4'\", \"C3'\"]), 'gamma'],\n    [getHash([\"C5'\", \"C4'\", \"C3'\", \"O3'\"]), 'delta'],\n    [getHash([\"C4'\", \"C3'\", \"O3'\", \"P\"]), 'epsilon'],\n    [getHash([\"C3'\", \"O3'\", \"P\", \"O5'\"]), 'zeta'],\n    [getHash([\"C1'\", \"C2'\", \"C3'\", \"C4'\"]), 'nu2'],\n    [getHash([\"O4'\", \"C1'\", \"N9\", \"C8\"]), 'chi'], // For purines\n    [getHash([\"O4'\", \"C1'\", \"N1\", \"C6\"]), 'chi'], // For pyrimidines\n]);\nconst AVAILABLE_TARGET_DIHEDRALS = Array.from(new Set(TARGET_DIHEDRALS.values()));\n\n// For each dihedral, set the name of the atom we take as reference to tell which is its residue\n// Note that we always use the second atom\nconst DIHEDRAL_RESIDUE_ATOM_REFERENCE = {\n    alpha: \"P\",\n    beta: \"O5'\",\n    gamma: \"C5'\",\n    delta: \"C4'\",\n    epsilon: \"C3'\",\n    zeta: \"O3'\",\n    nu2: \"C2'\",\n    chi: \"C1'\"\n}\n\nconst DihedralEnergies = () => {\n    // Get the current project data\n    const { accessionAndMdNumber, topology } = useContext(ProjectCtx);\n    // Send a request to the API with the url of some specific energies analysis\n    const url = `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/dihenergies`;\n    const { loading, payload, error } = useAPI(url);\n    // Classify dihedrals according to their name\n    // Then normalize non-bonded energies per dihedral group\n    const { dihedralsData, targetChains } = useMemo(() => {\n        // Wait for data to be downloaded\n        if (!payload || !topology) return {};\n        // Set an empty list for every dihedral type\n        const dihedralsData = [];\n        AVAILABLE_TARGET_DIHEDRALS.forEach(dihedralName => dihedralsData[dihedralName] = []);\n        // Iterate dihedrals in data and classify them\n        payload.forEach(dihedralData => {\n            // Make a shallow copy of dihedral data to avoid mutating the original payload\n            const dihedral = { ...dihedralData };\n            // Find the name of the dihedral according to its atom names\n            const atoms = dihedral.indices.map(index => topology.getAtomByIndex(index));\n            const atomNames = getHash(atoms.map(atom => atom.name));\n            const dihedralName = TARGET_DIHEDRALS.get(atomNames);\n            // If this is not one of our target dihedrals then ignore it\n            if (!dihedralName) return;\n            dihedral.name = dihedralName;\n            // Find the residue this dihedral belongs to\n            const referenceAtomName = DIHEDRAL_RESIDUE_ATOM_REFERENCE[dihedralName];\n            const referenceAtom = atoms.find(atom => atom.name === referenceAtomName);\n            dihedral.residue = referenceAtom.residue;\n            // Set the dihedral label according to its residue\n            dihedral.label = `${dihedral.residue.standardLabel} ${dihedralName}`;\n            // Normalize a few values\n            dihedral.normee = dihedral.ee ? dihedral.ee : 0;\n            dihedral.normvdw = dihedral.vdw ? dihedral.vdw : 0;\n            dihedral.total = dihedral.torsion + dihedral.normee + dihedral.normvdw\n            dihedralsData.push(dihedral);\n        });\n        // Get chain indices for chains with target dihedrals\n        const targetChains = unique(dihedralsData.map(dihedral => dihedral.residue.chain.name));\n        return { dihedralsData, targetChains };\n    }, [payload, topology]);\n\n    // Set the index of the chain whose data is to be displayed\n    const [selectedChain, setSelectedChain] = useState(null);\n    // Handle when a new chain is set\n    const handleChangeChain = useCallback(newValue => {\n        const chainIndex = topology.chainNames.indexOf(newValue);\n        setSelectedChain(chainIndex);\n        setSelectedX(null);\n    }, [topology]);\n    // Set the selected chain as the first target chain as soon as we know the available target chains\n    useEffect(() => {\n        if (!targetChains) return;\n        handleChangeChain(targetChains[0]);\n    }, [targetChains])\n\n    // Set the dihedral name/type whose data is to be displayed\n    const [selectedDihedral, setSelectedDihedral] = useState('alpha');\n    // Handle when the selected dihedral changes\n    const handleChangeDihedral = useCallback(newValue => {\n        setSelectedDihedral(newValue);\n        setSelectedX(null);\n    }, []);\n    // This is a toggle state for when data is displayed per atom or per residue\n    const [perResidue, setPerResidue] = useState(false);\n    // Handle when the per residue / per dihedral switch changes\n    const handleTogglePerResidue = useCallback(() => {\n        setPerResidue(previous => !previous);\n        setSelectedX(null);\n    }, []);\n    // Set selected data according to the selected dihedral or if it is to be sroted by residue\n    const {\n        selectedData,\n        summaryData,\n        torsionData,\n        eeData,\n        vdwData,\n        totalData,\n        xAxisValues,\n        xTooltip,\n        colorScheme\n    } = useMemo(() => {\n        // Wait for data to be downloaded and processed\n        if (!dihedralsData || selectedChain === null) return {};\n        // Filter away data which do not belong to the selected chain\n        const filteredData = dihedralsData.filter(dihedral =>\n            dihedral.residue.chainIndex === selectedChain);\n        // Group data according to user parameters\n        const groupedData = perResidue\n            ? groupByResidue(filteredData)\n            : groupByDihedral(filteredData);\n        // Set selected data according to user parameters\n        const selectedData = perResidue\n            ? Object.values(groupedData).map(dihedralGroup => {\n                // Get the residue label from a sample dihedral from the group\n                const residue = dihedralGroup[0].residue;\n                // Dihedrals must be joined by residue\n                return {\n                    residue: residue,\n                    label: residue.standardLabel,\n                    torsion: add(dihedralGroup.map(dihedral => dihedral.torsion)),\n                    normee: add(dihedralGroup.map(dihedral => dihedral.normee)),\n                    normvdw: add(dihedralGroup.map(dihedral => dihedral.normvdw)),\n                    total: add(dihedralGroup.map(dihedral => dihedral.total)),\n                } })\n            : groupedData[selectedDihedral];\n        // Set summary data\n        // This is data to be shown in the summary table\n        // Make an average of all values for every energy\n        // Note that in nu2 all electrostatic and Van Der Waals values are expected to be null\n        const torsionAverage = caluclateAverage(selectedData.map(dihedral => dihedral.torsion));\n        const eeAverage = caluclateAverage(selectedData.map(dihedral => dihedral.normee));\n        const vdwAverage = caluclateAverage(selectedData.map(dihedral => dihedral.normvdw));\n        const totalAverage = caluclateAverage(selectedData.map(dihedral => dihedral.total));\n        const summaryData = {\n            torsion: round2cents(torsionAverage) + ' kcal/mol',\n            ee: round2cents(eeAverage) + ' kcal/mol',\n            vdw: round2cents(vdwAverage) + ' kcal/mol',\n            total: round2cents(totalAverage) + ' kcal/mol',\n        }\n        // Now prepare graph data\n        // Set the dataset for each graph\n        const torsionData = {\n            torsion: { data: selectedData.map(dihedral => dihedral.torsion), color: 'black' },\n        };\n        const eeData = {\n            ee: { data: selectedData.map(dihedral => dihedral.normee), color: 'black' },\n        };\n        const vdwData = {\n            vdw: { data: selectedData.map(dihedral => dihedral.normvdw), color: 'black' },\n        };\n        const totalValues = selectedData.map(dihedral => dihedral.total);\n        const totalData = {\n            total: { data: totalValues, color: 'black' },\n        };\n        // Set x axes values\n        const xAxisValues = selectedData.map(dihedral => dihedral.label);\n        // Set the tooltip generator for the graph hover\n        const grouper = perResidue ? 'residue' : 'dihedral'\n        const xTooltip = (_, xIndex) =>\n            `${grouper} ${(xAxisValues[xIndex]) || xIndex}`;\n        // Save data per residue index so it is retrieved faster\n        // Note that selected data should never have more than one entry with the same residue index\n        // No matter if data is grouped by residue or by dihedral\n        const dataPerResidueIndex = {};\n        selectedData.forEach(data => dataPerResidueIndex[data.residue.index] = data.total);\n        // Set the color scale according to the maximum and minimum values\n        const minValue = min(totalValues);\n        const maxValue = max(totalValues);\n        const nglColorScale = scaleLinear()\n            .range(nglColorPlan)\n            .domain([minValue, (minValue + maxValue) / 2, maxValue]);\n        // Set each residue color in the ngl representation according to the color scale\n        // WARNING: Grey looks better than white because the background may be white\n        const colorScheme = ColormakerRegistry.addScheme(function(params) {\n            this.atomColor = atom => {\n            // Find the residue index and then the mean rmsd for this residue\n            const residueIndex = atom.residueIndex;\n            const value = dataPerResidueIndex[residueIndex];\n            // If there is no data for this residue then paint it white\n            if (value === undefined) return 16777215;\n            // Calculate the interpolated rgb for this value\n            // The interpolated color comes in rbg format\n            const hexColor = d3color(nglColorScale(value)).formatHex();\n            // The color interpolation returns a string like '#000000'\n            // We remove the first character ('#') and parse it to integer from hexadecimal\n            const color = parseInt(hexColor.substring(1), 16);\n            return color;\n            };\n        });\n        return {\n            selectedData,\n            summaryData,\n            torsionData,\n            eeData,\n            vdwData,\n            totalData,\n            xAxisValues,\n            xTooltip,\n            colorScheme\n        };\n    }, [selectedChain, dihedralsData, selectedDihedral, perResidue]);\n\n    // Get the default representations\n    const defaultRepresentations = topology && topology.defaultRepresentations;;\n    // Define the representations to be displayed in the viewer\n    const [ representations, setRepresentations ] = useState(null);\n\n    // Set the representations for the viewer\n    // Set a custom color scheme painting residues by their accumulated dihedral energy\n    useEffect(() => {\n        // Wait for topology and default representations to be ready\n        if (!topology || !defaultRepresentations) return;\n        // Set the custom representation\n        const selectedChainName = topology.chainNames[selectedChain];\n        const nglChainSelection = ':' + selectedChainName;\n        const customRepresentations = [\n            {\n                name: 'Dihedral energies',\n                selection: nglChainSelection,\n                color: 'custom',\n                customScheme: colorScheme,\n                reference: 'dihen_color'\n            },\n            {\n                name: 'Reference',\n                selection: 'not ' + nglChainSelection,\n                type: 'licorice',\n                color: 'element',\n                opacity: 0.2,\n                reference: 'dihen_ref'\n            }\n        ]\n        // Setup every representation or update the already existing ones\n        setRepresentations(previousRepresentations => {\n            // Set the list of the rest of representations besides our custom one\n            const restingRepresentations = previousRepresentations === null\n                ? defaultRepresentations\n                : previousRepresentations.filter(rep => {\n                    rep.reference && rep.reference.substr(0,5) !== 'dihen'\n                });\n            // Return new representations\n            return [\n                ...customRepresentations,\n                ...restingRepresentations\n            ]\n        });\n        \n    }, [topology, defaultRepresentations, selectedChain, colorScheme])\n\n    // Track when one point in the graph is selected\n    const [selectedX, setSelectedX] = useState(null);\n\n    // Memoize the marks\n    const marks = useMemo(() => {\n        if (selectedX === null) return [];\n        const selectedMark = {\n            x: selectedX,\n            attr: { fill: '#c8c8c8' },\n        };\n        return [selectedMark];\n    }, [selectedX]);\n\n    // Set a callback to reset the X selection whenever the viewer is closed or nail\n    const resetX = useCallback(viewer =>\n        setSelectedX(previous => {\n            if (viewer && viewer.selectedX === previous)\n            return null;\n            else return previous;\n        }), []);\n\n    if (!topology) return <Loading />;\n\n    if (error) return error.toString();\n    if (loading) return <Loading />;\n    if (!payload) return 'Something bad happened';\n\n    // Render\n    return (<Suspense fallback={<Loading />}>\n        <Card className={style.card}>\n            <div className={style.horizontal}>\n                <Selector\n                    label={'Chain'}\n                    options={targetChains}\n                    selection={topology.chainNames[selectedChain]}\n                    setter={handleChangeChain}\n                />\n                <Selector\n                    label={'Dihedral'}\n                    options={AVAILABLE_TARGET_DIHEDRALS}\n                    selection={selectedDihedral}\n                    setter={handleChangeDihedral}\n                    disabled={perResidue}\n                />\n                <DoubleSideSwitch\n                    firstLabel={'Per dihedral'}\n                    secondLabel={'Per residue'}\n                    isFirst={!perResidue}\n                    onChange={handleTogglePerResidue}\n                />\n            </div>\n            <CardContent className={style.horizontal}>\n                {!summaryData ? null : (<CardContent>\n                <legend className={style['margined-bottom']}>Energy averages</legend>\n                <TextField\n                    className={style['text-field']}\n                    label=\"Torsion\"\n                    title=\"Average torsion energy\"\n                    value={summaryData.torsion}\n                />\n                <TextField\n                    className={style['text-field']}\n                    label=\"Electrostatic\"\n                    title=\"Average electorstatic energy\"\n                    value={summaryData.ee}\n                />\n                <TextField\n                    className={style['text-field']}\n                    label=\"Van Der Waals\"\n                    title=\"Average Van Der Waals energy\"\n                    value={summaryData.vdw}\n                />\n                <TextField\n                    className={style['text-field']}\n                    label=\"Total\"\n                    title=\"Average total energy\"\n                    value={summaryData.total}\n                />\n                </CardContent>)}\n            </CardContent>\n            <CardContent>\n                <Graph\n                    yData={torsionData}\n                    xAxisValues={xAxisValues}\n                    xTooltip={xTooltip}\n                    title={'Torsions'}\n                    yAxisLabel={'Energy (kcal/mol)'}\n                    onSelect={setSelectedX}\n                    fullPrecision\n                    marks={marks}\n                />\n                <Graph\n                    yData={eeData}\n                    xAxisValues={xAxisValues}\n                    xTooltip={xTooltip}\n                    title={'Electrostatic'}\n                    yAxisLabel={'Energy (kcal/mol)'}\n                    onSelect={setSelectedX}\n                    fullPrecision\n                    marks={marks}\n                />\n                <Graph\n                    yData={vdwData}\n                    xAxisValues={xAxisValues}\n                    xTooltip={xTooltip}\n                    title={'Van Der Waals'}\n                    yAxisLabel={'Energy (kcal/mol)'}\n                    onSelect={setSelectedX}\n                    fullPrecision\n                    marks={marks}\n                />\n                <Graph\n                    yData={totalData}\n                    xAxisValues={xAxisValues}\n                    xTooltip={xTooltip}\n                    title={'Total'}\n                    yAxisLabel={'Energy (kcal/mol)'}\n                    onSelect={setSelectedX}\n                    fullPrecision\n                    marks={marks}\n                />\n            </CardContent>\n        </Card>\n        <ViewerSpawner\n            // Set the new viewer or null if there is not a proper \"selectedResidueIndices\" value\n            newViewer={selectedX\n            ? {\n                selectedResidueIndices: [ selectedData[selectedX].residue.index ],\n                representationsState: [ representations, setRepresentations ],\n                // Just for further reference\n                selectedX\n                }\n            : null\n            }\n            // If the nailed/closed viewer is the current viewer then reset the 'selectedX'\n            onNail={resetX}\n            onClose={resetX}\n        />\n    </Suspense>);\n};\n\nexport default DihedralEnergies;\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"style_card__bFecw\",\"horizontal\":\"style_horizontal__ZYIg8\",\"text-field\":\"style_text-field__CSo-z\",\"margined-bottom\":\"style_margined-bottom__kI93T\",\"disabled\":\"style_disabled__kJ0uc\"};","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getSwitchBaseUtilityClass(slot) {\n  return generateUtilityClass('PrivateSwitchBase', slot);\n}\nconst switchBaseClasses = generateUtilityClasses('PrivateSwitchBase', ['root', 'checked', 'disabled', 'input', 'edgeStart', 'edgeEnd']);\nexport default switchBaseClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"autoFocus\", \"checked\", \"checkedIcon\", \"className\", \"defaultChecked\", \"disabled\", \"disableFocusRipple\", \"edge\", \"icon\", \"id\", \"inputProps\", \"inputRef\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"readOnly\", \"required\", \"tabIndex\", \"type\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport capitalize from '../utils/capitalize';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport useControlled from '../utils/useControlled';\nimport useFormControl from '../FormControl/useFormControl';\nimport ButtonBase from '../ButtonBase';\nimport { getSwitchBaseUtilityClass } from './switchBaseClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    checked,\n    disabled,\n    edge\n  } = ownerState;\n  const slots = {\n    root: ['root', checked && 'checked', disabled && 'disabled', edge && `edge${capitalize(edge)}`],\n    input: ['input']\n  };\n  return composeClasses(slots, getSwitchBaseUtilityClass, classes);\n};\nconst SwitchBaseRoot = styled(ButtonBase, {\n  name: 'MuiSwitchBase'\n})(({\n  ownerState\n}) => _extends({\n  padding: 9,\n  borderRadius: '50%'\n}, ownerState.edge === 'start' && {\n  marginLeft: ownerState.size === 'small' ? -3 : -12\n}, ownerState.edge === 'end' && {\n  marginRight: ownerState.size === 'small' ? -3 : -12\n}));\nconst SwitchBaseInput = styled('input', {\n  name: 'MuiSwitchBase',\n  shouldForwardProp: rootShouldForwardProp\n})({\n  cursor: 'inherit',\n  position: 'absolute',\n  opacity: 0,\n  width: '100%',\n  height: '100%',\n  top: 0,\n  left: 0,\n  margin: 0,\n  padding: 0,\n  zIndex: 1\n});\n\n/**\n * @ignore - internal component.\n */\nconst SwitchBase = /*#__PURE__*/React.forwardRef(function SwitchBase(props, ref) {\n  const {\n      autoFocus,\n      checked: checkedProp,\n      checkedIcon,\n      className,\n      defaultChecked,\n      disabled: disabledProp,\n      disableFocusRipple = false,\n      edge = false,\n      icon,\n      id,\n      inputProps,\n      inputRef,\n      name,\n      onBlur,\n      onChange,\n      onFocus,\n      readOnly,\n      required = false,\n      tabIndex,\n      type,\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const [checked, setCheckedState] = useControlled({\n    controlled: checkedProp,\n    default: Boolean(defaultChecked),\n    name: 'SwitchBase',\n    state: 'checked'\n  });\n  const muiFormControl = useFormControl();\n  const handleFocus = event => {\n    if (onFocus) {\n      onFocus(event);\n    }\n    if (muiFormControl && muiFormControl.onFocus) {\n      muiFormControl.onFocus(event);\n    }\n  };\n  const handleBlur = event => {\n    if (onBlur) {\n      onBlur(event);\n    }\n    if (muiFormControl && muiFormControl.onBlur) {\n      muiFormControl.onBlur(event);\n    }\n  };\n  const handleInputChange = event => {\n    // Workaround for https://github.com/facebook/react/issues/9023\n    if (event.nativeEvent.defaultPrevented) {\n      return;\n    }\n    const newChecked = event.target.checked;\n    setCheckedState(newChecked);\n    if (onChange) {\n      // TODO v6: remove the second argument.\n      onChange(event, newChecked);\n    }\n  };\n  let disabled = disabledProp;\n  if (muiFormControl) {\n    if (typeof disabled === 'undefined') {\n      disabled = muiFormControl.disabled;\n    }\n  }\n  const hasLabelFor = type === 'checkbox' || type === 'radio';\n  const ownerState = _extends({}, props, {\n    checked,\n    disabled,\n    disableFocusRipple,\n    edge\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(SwitchBaseRoot, _extends({\n    component: \"span\",\n    className: clsx(classes.root, className),\n    centerRipple: true,\n    focusRipple: !disableFocusRipple,\n    disabled: disabled,\n    tabIndex: null,\n    role: undefined,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    ownerState: ownerState,\n    ref: ref\n  }, other, {\n    children: [/*#__PURE__*/_jsx(SwitchBaseInput, _extends({\n      autoFocus: autoFocus,\n      checked: checkedProp,\n      defaultChecked: defaultChecked,\n      className: classes.input,\n      disabled: disabled,\n      id: hasLabelFor ? id : undefined,\n      name: name,\n      onChange: handleInputChange,\n      readOnly: readOnly,\n      ref: inputRef,\n      required: required,\n      ownerState: ownerState,\n      tabIndex: tabIndex,\n      type: type\n    }, type === 'checkbox' && value === undefined ? {} : {\n      value\n    }, inputProps)), checked ? checkedIcon : icon]\n  }));\n});\n\n// NB: If changed, please update Checkbox, Switch and Radio\n// so that the API documentation is updated.\nprocess.env.NODE_ENV !== \"production\" ? SwitchBase.propTypes = {\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   * @default false\n   */\n  edge: PropTypes.oneOf(['end', 'start', false]),\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node.isRequired,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /*\n   * @ignore\n   */\n  name: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * If `true`, the `input` element is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n  /**\n   * @ignore\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * The input component prop `type`.\n   */\n  type: PropTypes.string.isRequired,\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default SwitchBase;","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"style_content__eXhNP\",\"horizontal-margined\":\"style_horizontal-margined__w4tJp\"};","import React from 'react';\n\nimport { Card, CardContent, MenuItem, Select, Typography } from '@mui/material';\n\nimport style from './style.module.css';\n\nconst Selector = ({ label, options, selection, setter, disabled }) => {\n  // Make sure we have the mandatory parameters\n  if (!options) return 'Missing options argument';\n  if (!selection) return 'Missing selection argument';\n  if (!setter) return 'Missing setter argument';\n  // Handle when interactions change\n  const changeSelection = event => { setter(event.target.value) };\n  // Render the component\n  return (\n    <CardContent className={style.content}>\n      {label && (\n        <Typography variant=\"h5\">\n          {label}\n        </Typography>\n      )}\n      <Select\n        value={selection}\n        onChange={changeSelection}\n        className={style['horizontal-margined']}\n        disabled={disabled}\n      >\n        {options.map((option, i) => (\n          <MenuItem key={i} value={option}>\n            {option}\n          </MenuItem>\n        ))}\n      </Select>\n    </CardContent>\n  );\n};\n\nexport default Selector;\n"],"names":["Graph","lazy","nglColorPlan","getHash","atomNames","sort","join","TARGET_DIHEDRALS","Map","AVAILABLE_TARGET_DIHEDRALS","Array","from","Set","values","DIHEDRAL_RESIDUE_ATOM_REFERENCE","alpha","beta","gamma","delta","epsilon","zeta","nu2","chi","DihedralEnergies","accessionAndMdNumber","topology","useContext","ProjectCtx","url","concat","BASE_PATH_PROJECTS","loading","payload","error","useAPI","dihedralsData","targetChains","useMemo","forEach","dihedralName","dihedralData","dihedral","_objectSpread","atoms","indices","map","index","getAtomByIndex","atom","name","get","referenceAtomName","referenceAtom","find","residue","label","standardLabel","normee","ee","normvdw","vdw","total","torsion","push","unique","chain","selectedChain","setSelectedChain","useState","handleChangeChain","useCallback","newValue","chainIndex","chainNames","indexOf","setSelectedX","useEffect","selectedDihedral","setSelectedDihedral","handleChangeDihedral","perResidue","setPerResidue","handleTogglePerResidue","previous","selectedData","summaryData","torsionData","eeData","vdwData","totalData","xAxisValues","xTooltip","colorScheme","filteredData","filter","groupedData","dihedrals","grouped","current","groupByResidue","groupByDihedral","Object","dihedralGroup","add","torsionAverage","caluclateAverage","eeAverage","vdwAverage","totalAverage","round2cents","data","color","totalValues","grouper","dataPerResidueIndex","minValue","min","maxValue","max","nglColorScale","scaleLinear","range","domain","ColormakerRegistry","addScheme","params","this","atomColor","residueIndex","value","undefined","hexColor","d3color","formatHex","parseInt","substring","_","xIndex","defaultRepresentations","representations","setRepresentations","nglChainSelection","customRepresentations","selection","customScheme","reference","type","opacity","previousRepresentations","restingRepresentations","rep","substr","selectedX","marks","x","attr","fill","resetX","viewer","toString","_jsx","Loading","_jsxs","Suspense","fallback","children","Card","className","style","card","horizontal","Selector","options","setter","disabled","DoubleSideSwitch","firstLabel","secondLabel","isFirst","onChange","CardContent","TextField","title","yData","yAxisLabel","onSelect","fullPrecision","ViewerSpawner","newViewer","selectedResidueIndices","representationsState","onNail","onClose","getSwitchBaseUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","SwitchBaseRoot","styled","ButtonBase","_ref","ownerState","_extends","padding","borderRadius","edge","marginLeft","size","marginRight","SwitchBaseInput","shouldForwardProp","rootShouldForwardProp","cursor","position","width","height","top","left","margin","zIndex","React","props","ref","autoFocus","checked","checkedProp","checkedIcon","defaultChecked","disabledProp","disableFocusRipple","icon","id","inputProps","inputRef","onBlur","onFocus","readOnly","required","tabIndex","other","_objectWithoutPropertiesLoose","setCheckedState","useControlled","controlled","default","Boolean","state","muiFormControl","useFormControl","hasLabelFor","classes","slots","root","capitalize","input","composeClasses","useUtilityClasses","component","clsx","centerRipple","focusRipple","role","event","nativeEvent","defaultPrevented","newChecked","target","Typography","variant","Select","option","i","MenuItem"],"sourceRoot":""}