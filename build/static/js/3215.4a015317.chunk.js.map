{"version":3,"file":"static/js/3215.4a015317.chunk.js","mappings":"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","sources":["pages/accession/mutations/index.js","webpack://mdposit/./src/pages/accession/mutations/style.module.css?b27c","components/ngl-viewer/use-mutations-representations/index.js","utils/document-measurer/index.js"],"sourcesContent":["import React, {\n  Suspense,\n  useContext,\n  useMemo,\n  useState,\n  useCallback,\n} from 'react';\n// A hook to track whenever some element is on screen\nimport { useInView } from 'react-intersection-observer';\n\nimport Card from '../../../components/animated-card';\n/*\nimport {\n  CardContent,\n} from '@mui/material';\n*/\nimport ViewerWithControls from '../../../components/viewer-with-controls';\nimport useMutationsRepresentations from '../../../components/ngl-viewer/use-mutations-representations';\n\nimport style from './style.module.css';\n\nimport Loading from '../../../components/loading';\n\nimport { REFERENCES_WITH_ENTROPIES } from '../../../utils/constants';\n\nimport { ProjectCtx } from '../../../contexts';\n\nimport ResidueSelector from '../../../components/residue-selector';\n\n// Define permanent options for the \"useInView\"\nconst useInViewOptions = { triggerOnce: true, rootMargin: '100px' };\n\nconst Mutations = () => {\n  // Track if the NGL viewer\n  // The status isNglVisible is returned true/false when the element is in/out the screen respectively\n  const [nglRef, isNglVisible] = useInView(useInViewOptions);\n\n  // Get the current project data\n  const { topology: topologyManager } = useContext(ProjectCtx);\n\n  const residueEntropies = useMemo(() => {\n    if (!topologyManager) return;\n    // Determine if this project has entropies\n    // Otherwise stop here\n    const validReferences = topologyManager.proteinReferences.filter(\n      ref => REFERENCES_WITH_ENTROPIES.includes(ref.uniprot) && ref.entropies\n    );\n    if (validReferences.length === 0) return;\n    // Iterate over all residues in the topology to find their corresponding entropy\n    const residuesCount = topologyManager.residueCount;\n    const residueEntropies = new Array(residuesCount).fill(null);\n    // Iterate over all residues in the topology to find their corresponding entropy\n    for (let i = 0; i < residuesCount; i++) {\n      const residue = topologyManager.getResidueByIndex(i);\n      const referenceId = residue.referenceId;\n      if (!referenceId) continue;\n      // We substract 1 from the residue index since it counts from 1 to n as references do\n      const residueReferenceIndex = residue.referenceNumber - 1;\n      const currentproteinReference = residue.referenceData;\n      const entropies = currentproteinReference.entropies;\n      if (!entropies) continue;\n      const entropy = entropies[residueReferenceIndex];\n      if (entropy === undefined) continue;\n      const logarithmicEntropy =\n        Math.round(Math.log(entropy + 0.0001) * 1000) / 1000;\n      residueEntropies[i] = logarithmicEntropy;\n    }\n    return residueEntropies;\n  }, [topologyManager]);\n\n  // Set when one point in the graph is selected\n  const [selectedResidues, setSelectedResidues] = useState([]);\n  // Get the selected residue indices\n  const selectedResidueIndices = selectedResidues.map(\n    residue => +residue.index,\n  );\n\n  // Set the representations for the NGL viewer\n  const representations = useMutationsRepresentations();\n\n  // When a residue is selected\n  const handleSelect = useCallback(\n    (residue, residueIndex, color) => {\n      const selectedResidue = { color, index: residueIndex };\n      setSelectedResidues(previous => [...previous, selectedResidue]);\n    },\n    [setSelectedResidues],\n  );\n  // When a residue is deselected\n  const handleDeselect = useCallback(\n    (residue, residueIndex) => {\n      setSelectedResidues(previous =>\n        previous.filter(residue => residue.index !== residueIndex),\n      );\n    },\n    [setSelectedResidues],\n  );\n  // When the clean all residues button is clicked\n  const handleClean = useCallback(() => {\n    setSelectedResidues([]);\n  }, [setSelectedResidues]);\n\n  // Handle what to write on the tooltip when the user hovers a specific residue letter\n  const handleTooltip = useCallback(residue => {\n    const value = Math.round(residue.value * 100) / 100;\n    return `Logarithmic entropy: ${value}`;\n  }, []);\n\n  // This data was added manually to the spike reference\n  // If this is missing you may be not in the covid database or the reference has been overwritten\n  if (topologyManager && !residueEntropies) return 'Missing entropies data';\n  if (!representations) return <Loading />;\n\n  return (\n    <Suspense fallback={<Loading />}>\n      <Card className={style.nglcard} ref={nglRef}>\n        {/* Render the NGL viewer when it is on screen*/}\n        {isNglVisible ? (\n          <ViewerWithControls\n            className={style.container}\n            startingRepresentations={representations}\n            selectedResidueIndices={selectedResidueIndices}\n          />\n        ) : (\n          <div style={{ height: '50vh' }} />\n        )}\n      </Card>\n      <Card>\n        <ResidueSelector\n          residueValues={residueEntropies}\n          legendTitle={'Logarithmic entropy'}\n          onSelect={handleSelect}\n          onDeselect={handleDeselect}\n          onClean={handleClean}\n          onTooltip={handleTooltip}\n          className={style.selector}\n        />\n      </Card>\n    </Suspense>\n  );\n};\n\nexport default Mutations;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__eJ9YA\",\"nglcard\":\"style_nglcard__lM3g-\",\"selector\":\"style_selector__WXY0g\"};","import { useContext, useMemo } from 'react';\n\nimport { ColormakerRegistry } from 'ngl';\n\nimport { color as d3color, scaleLinear } from 'd3';\n\nimport { ProjectCtx } from '../../../contexts';\n\n// Set the color of each residue in the NGL representation\n// WARNING: Grey looks better than white because the background may be white and resdiues are hard to see\nconst greyColorPlan = ['grey', 'yellow', 'red'];\n\n// Use this hook to get the memoized NGL default representations\nconst useMutationsRepresentations = () => {\n  // Get project data\n  const { topology: topologyManager } = useContext(ProjectCtx);\n\n  // Set the representations for the NGL viewer\n  const mutationRepresentations = useMemo(() => {\n    if (!topologyManager) return;\n    // Check that at least 1 of the references has entropies\n    const anyReferenceMutations = topologyManager.proteinReferences.some(\n      reference => !!reference.entropies,\n    );\n    if (!anyReferenceMutations) return;\n\n    // Get the entorpies of each reference\n    // Save the logarithmic values on each reference\n    const entropiesPerReference = topologyManager.proteinReferences.map(reference => {\n      if (!reference.entropies) return [];\n      const logarithmicEntropies = reference.entropies.map(entropy =>\n        Math.log(entropy + 0.0001),\n      );\n      reference.logarithmicEntropies = logarithmicEntropies;\n      return logarithmicEntropies;\n    });\n\n    // Save all array values together just to check the minimum and maximum values\n    const allEntropies = [].concat.apply([], entropiesPerReference);\n    const max = Math.max(...allEntropies);\n    const min = Math.min(...allEntropies);\n\n    // Set the color scale according to the maximum and minimum means\n    const colorScale = scaleLinear()\n      .range(greyColorPlan)\n      .domain([min, (min + max) / 2, max]);\n\n    const colorScheme = ColormakerRegistry.addScheme(function(params) {\n      this.atomColor = atom => {\n        // Find the residue index and then the entropy for this residue\n        // WARNING: atom.residueIndex starts the count at 0 although it may seem that starts at 1\n        // WARNING: It may happen that the first residue is a capping terminal and it is skipped\n        // WARNING: The cartoon representation would skip the non-standard residue and start by 1\n        const residueIndex = atom.residueIndex;\n        const residue = topologyManager.getResidueByIndex(residueIndex);\n        const referenceId = residue.referenceId;\n        // If no reference residue was found then paint it white\n        if (!referenceId) return parseInt('ffffff', 16);\n        // get the corresponding entropy\n        // -1 because the residue 'x' would be the index 'x-1' in the array\n        const reference = residue.referenceData;\n        const entropies = reference.logarithmicEntropies;\n        if (!entropies || entropies.length === 0) return parseInt('ffffff', 16);\n        const entropy = entropies[residue.referenceNumber - 1];\n        // If there is no entropy at this point probably there is something wrong with the map\n        if (!entropy) return parseInt('ffffff', 16);\n        // Calculate the interpolated rgb for this value\n        // The interpolated color comes in rbg format\n        const hexColor = d3color(colorScale(entropy)).formatHex();\n        // The color interpolation returns a string like '#000000'\n        // We remove the first character ('#') and parse it to integer from hexadecimal\n        const color = parseInt(hexColor.substring(1), 16);\n        return color;\n      };\n    });\n\n    const reps = [\n      { name: 'Mutations', color: 'custom', customScheme: colorScheme },\n    ];\n    return reps;\n  }, [topologyManager]);\n\n  return mutationRepresentations;\n};\n\nexport default useMutationsRepresentations;\n","// Function involved in getting text pixels width\n// WARNING: These functions do not work properly in Chrome (not an easy problem)\n\n// This function allows to calculate the width of a given string text\n// The font for the calculation in the d3 default font\nexport const getTextWidth = (text, font = 'bold 10px sans-serif') => {\n  const canvas =\n    getTextWidth.canvas ||\n    (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width;\n};\n\n// Alternative way to obtain text width\n// Probably the only way to obtain text height\nexport const getTextSizeDOM = (text, font = 'bold 10px sans-serif') => {\n  const element = document.createElement('div');\n  const content = document.createTextNode(text);\n  element.appendChild(content);\n  Object.assign(element.style, {\n    font: font,\n    position: 'absolute',\n    visibility: 'hidden',\n    height: 'auto',\n    width: 'auto',\n    'white-space': 'nowrap',\n  });\n  document.body.appendChild(element);\n  return { width: element.clientWidth, height: element.clientHeight };\n};\n\n// Get the whole body width\nexport const getBodyWidth = () => {\n  return Math.max(\n    document.body.scrollWidth,\n    document.documentElement.scrollWidth,\n    document.body.offsetWidth,\n    document.documentElement.offsetWidth,\n    document.documentElement.clientWidth,\n  );\n};\n\n// Get the whole body height\nexport const getBodyHeight = () => {\n  return Math.max(\n    document.body.scrollHeight,\n    document.documentElement.scrollHeight,\n    document.body.offsetHeight,\n    document.documentElement.offsetHeight,\n    document.documentElement.clientHeight,\n  );\n};\n"],"names":["useInViewOptions","triggerOnce","rootMargin","Mutations","nglRef","isNglVisible","useInView","topology","topologyManager","useContext","ProjectCtx","residueEntropies","useMemo","proteinReferences","filter","ref","REFERENCES_WITH_ENTROPIES","includes","uniprot","entropies","length","residuesCount","residueCount","Array","fill","i","residue","getResidueByIndex","referenceId","residueReferenceIndex","referenceNumber","referenceData","entropy","undefined","logarithmicEntropy","Math","round","log","selectedResidues","setSelectedResidues","useState","selectedResidueIndices","map","index","representations","useMutationsRepresentations","handleSelect","useCallback","residueIndex","color","selectedResidue","previous","handleDeselect","handleClean","handleTooltip","value","_jsxs","Suspense","fallback","_jsx","Loading","children","Card","className","style","nglcard","ViewerWithControls","container","startingRepresentations","height","ResidueSelector","residueValues","legendTitle","onSelect","onDeselect","onClean","onTooltip","selector","greyColorPlan","some","reference","entropiesPerReference","logarithmicEntropies","allEntropies","concat","apply","max","min","colorScale","scaleLinear","range","domain","name","customScheme","ColormakerRegistry","addScheme","params","this","atomColor","atom","parseInt","hexColor","d3color","formatHex","substring","getTextWidth","text","font","arguments","context","canvas","document","createElement","getContext","measureText","width","getTextSizeDOM","element","content","createTextNode","appendChild","Object","assign","position","visibility","body","clientWidth","clientHeight"],"sourceRoot":""}