{"version":3,"file":"static/js/3215.4ce28a55.chunk.js","mappings":"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","sources":["pages/accession/mutations/index.js","webpack://mdposit/./src/pages/accession/mutations/style.module.css?b27c","utils/document-measurer/index.js"],"sourcesContent":["import React, {\n  Suspense,\n  useContext,\n  useMemo,\n  useState,\n  useCallback,\n} from 'react';\n// A hook to track whenever some element is on screen\nimport { useInView } from 'react-intersection-observer';\n\nimport Card from '../../../components/animated-card';\n/*\nimport {\n  CardContent,\n} from '@mui/material';\n*/\nimport ViewerWithControls from '../../../components/viewer-with-controls';\n\nimport style from './style.module.css';\n\nimport Loading from '../../../components/loading';\n\nimport { REFERENCES_WITH_ENTROPIES } from '../../../utils/constants';\n\nimport { ProjectCtx } from '../../../contexts';\n\nimport ResidueSelector from '../../../components/residue-selector';\n\n// Define permanent options for the \"useInView\"\nconst useInViewOptions = { triggerOnce: true, rootMargin: '100px' };\n\nconst Mutations = () => {\n  // Track if the NGL viewer\n  // The status isNglVisible is returned true/false when the element is in/out the screen respectively\n  const [nglRef, isNglVisible] = useInView(useInViewOptions);\n\n  // Get the current project data\n  const { topology } = useContext(ProjectCtx);\n\n  const residueEntropies = useMemo(() => {\n    if (!topology) return;\n    // Determine if this project has entropies\n    // Otherwise stop here\n    const validReferences = topology.proteinReferences.filter(\n      ref => REFERENCES_WITH_ENTROPIES.includes(ref.uniprot) && ref.entropies\n    );\n    if (validReferences.length === 0) return;\n    // Iterate over all residues in the topology to find their corresponding entropy\n    const residuesCount = topology.residueCount;\n    const residueEntropies = new Array(residuesCount).fill(null);\n    // Iterate over all residues in the topology to find their corresponding entropy\n    for (let i = 0; i < residuesCount; i++) {\n      const residue = topology.getResidueByIndex(i);\n      const referenceId = residue.referenceId;\n      if (!referenceId) continue;\n      // We substract 1 from the residue index since it counts from 1 to n as references do\n      const residueReferenceIndex = residue.referenceNumber - 1;\n      const currentproteinReference = residue.referenceData;\n      const entropies = currentproteinReference.entropies;\n      if (!entropies) continue;\n      const entropy = entropies[residueReferenceIndex];\n      if (entropy === undefined) continue;\n      const logarithmicEntropy =\n        Math.round(Math.log(entropy + 0.0001) * 1000) / 1000;\n      residueEntropies[i] = logarithmicEntropy;\n    }\n    return residueEntropies;\n  }, [topology]);\n\n  // Set when one point in the graph is selected\n  const [selectedResidues, setSelectedResidues] = useState([]);\n  // Get the selected residue indices\n  const selectedResidueIndices = selectedResidues.map(\n    residue => +residue.index,\n  );\n\n  // Set the representations for the NGL viewer\n  const representations = topology && topology.mutationsRepresentations;\n\n  // When a residue is selected\n  const handleSelect = useCallback(\n    (residue, residueIndex, color) => {\n      const selectedResidue = { color, index: residueIndex };\n      setSelectedResidues(previous => [...previous, selectedResidue]);\n    },\n    [setSelectedResidues],\n  );\n  // When a residue is deselected\n  const handleDeselect = useCallback(\n    (residue, residueIndex) => {\n      setSelectedResidues(previous =>\n        previous.filter(residue => residue.index !== residueIndex),\n      );\n    },\n    [setSelectedResidues],\n  );\n  // When the clean all residues button is clicked\n  const handleClean = useCallback(() => {\n    setSelectedResidues([]);\n  }, [setSelectedResidues]);\n\n  // Handle what to write on the tooltip when the user hovers a specific residue letter\n  const handleTooltip = useCallback(residue => {\n    const value = Math.round(residue.value * 100) / 100;\n    return `Logarithmic entropy: ${value}`;\n  }, []);\n\n  // This data was added manually to the spike reference\n  // If this is missing you may be not in the covid database or the reference has been overwritten\n  if (topology && !residueEntropies) return 'Missing entropies data';\n  if (!representations) return <Loading />;\n\n  return (\n    <Suspense fallback={<Loading />}>\n      <Card className={style.nglcard} ref={nglRef}>\n        {/* Render the NGL viewer when it is on screen*/}\n        {isNglVisible ? (\n          <ViewerWithControls\n            className={style.container}\n            startingRepresentations={representations}\n            selectedResidueIndices={selectedResidueIndices}\n          />\n        ) : (\n          <div style={{ height: '50vh' }} />\n        )}\n      </Card>\n      <Card>\n        <ResidueSelector\n          residueValues={residueEntropies}\n          legendTitle={'Logarithmic entropy'}\n          onSelect={handleSelect}\n          onDeselect={handleDeselect}\n          onClean={handleClean}\n          onTooltip={handleTooltip}\n          className={style.selector}\n        />\n      </Card>\n    </Suspense>\n  );\n};\n\nexport default Mutations;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__eJ9YA\",\"nglcard\":\"style_nglcard__lM3g-\",\"selector\":\"style_selector__WXY0g\"};","// Function involved in getting text pixels width\n// WARNING: These functions do not work properly in Chrome (not an easy problem)\n\n// This function allows to calculate the width of a given string text\n// The font for the calculation in the d3 default font\nexport const getTextWidth = (text, font = 'bold 10px sans-serif') => {\n  const canvas =\n    getTextWidth.canvas ||\n    (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width;\n};\n\n// Alternative way to obtain text width\n// Probably the only way to obtain text height\nexport const getTextSizeDOM = (text, font = 'bold 10px sans-serif') => {\n  const element = document.createElement('div');\n  const content = document.createTextNode(text);\n  element.appendChild(content);\n  Object.assign(element.style, {\n    font: font,\n    position: 'absolute',\n    visibility: 'hidden',\n    height: 'auto',\n    width: 'auto',\n    'white-space': 'nowrap',\n  });\n  document.body.appendChild(element);\n  return { width: element.clientWidth, height: element.clientHeight };\n};\n\n// Get the whole body width\nexport const getBodyWidth = () => {\n  return Math.max(\n    document.body.scrollWidth,\n    document.documentElement.scrollWidth,\n    document.body.offsetWidth,\n    document.documentElement.offsetWidth,\n    document.documentElement.clientWidth,\n  );\n};\n\n// Get the whole body height\nexport const getBodyHeight = () => {\n  return Math.max(\n    document.body.scrollHeight,\n    document.documentElement.scrollHeight,\n    document.body.offsetHeight,\n    document.documentElement.offsetHeight,\n    document.documentElement.clientHeight,\n  );\n};\n"],"names":["useInViewOptions","triggerOnce","rootMargin","Mutations","nglRef","isNglVisible","useInView","topology","useContext","ProjectCtx","residueEntropies","useMemo","proteinReferences","filter","ref","REFERENCES_WITH_ENTROPIES","includes","uniprot","entropies","length","residuesCount","residueCount","Array","fill","i","residue","getResidueByIndex","referenceId","residueReferenceIndex","referenceNumber","referenceData","entropy","undefined","logarithmicEntropy","Math","round","log","selectedResidues","setSelectedResidues","useState","selectedResidueIndices","map","index","representations","mutationsRepresentations","handleSelect","useCallback","residueIndex","color","selectedResidue","previous","handleDeselect","handleClean","handleTooltip","value","_jsxs","Suspense","fallback","_jsx","Loading","children","Card","className","style","nglcard","ViewerWithControls","container","startingRepresentations","height","ResidueSelector","residueValues","legendTitle","onSelect","onDeselect","onClean","onTooltip","selector","getTextWidth","text","font","arguments","context","canvas","document","createElement","getContext","measureText","width","getTextSizeDOM","element","content","createTextNode","appendChild","Object","assign","position","visibility","body","clientWidth","clientHeight"],"sourceRoot":""}