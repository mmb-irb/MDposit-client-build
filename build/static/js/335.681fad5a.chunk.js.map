{"version":3,"file":"static/js/335.681fad5a.chunk.js","mappings":"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","sources":["components/ngl-viewer/use-default-representations/index.js","utils/tooltip-position-manager/index.js","webpack://mdposit/./src/components/viewer-with-controls/representations-manager/style.module.css?be77","components/viewer-with-controls/representations-manager/index.js","utils/storage/index.js","components/molstar-viewer/molstar-parser/index.ts","webpack://mdposit/./src/components/molstar-viewer/style.module.css?3a43","components/molstar-viewer/index.js","components/ngl-viewer/payload-to-ngl-file/index.js","webpack://mdposit/./src/components/ngl-viewer/style.module.css?eaa8","components/ngl-viewer/index.js","hooks/use-viewer-data/index.js","utils/connection-level/index.js","webpack://mdposit/./src/components/viewer-with-controls/style.module.css?bc6d","components/viewer-with-controls/index.js"],"sourcesContent":["// React logic\nimport { useMemo, useContext } from 'react';\n\nimport { ProjectCtx } from '../../../contexts';\n\nimport { generateRanges } from 'src/utils/auxiliar-functions';\n\n// Use this hook to get the memoized NGL default representations\nconst useDefaultRepresentations = () => {\n  // Get current project data\n  const { topology } = useContext(ProjectCtx);\n  // Set the chains to be represented in the NGL viewer by default\n  const defaultRepresentations = useMemo(() => {\n    // If there is no topology yet then return here and wait for data to be downloaded\n    if (!topology) return [];\n    // Set a list to store all final representations\n    const reps = [];\n    // Iterate the different chains\n    // Every representation, no matter the type, will be organized as one per chain\n    topology.iterchains().forEach(chain => {\n      // Set the chain label\n      const metadataChainName = chain.metadataChainName\n      const chainLabel = metadataChainName\n        ? `${metadataChainName} (Chain ${chain.name})`\n        : `Chain ${chain.name}`;\n      // Get residues in the current chain\n      const chainResidues = chain.residues;\n      // 1. Polymers such as proteins and nucleic acids\n      // Represent polymers in cartoon and colored by chain\n      // Note that coarse grain (CG) residues will not be propery represented in cartoon\n      // For this reason we must create a separated representation for them in spacefill (vdw)\n      const respresentPolymer = polymer => {\n        // Start by classify residues (note that this logic is actually run only once and then stored)\n        const residues = chainResidues.filter(residue => residue.classification === polymer);\n        if (residues.length === 0) return;\n        // First of all handle coarse grain residues\n        const cgResidues = residues.filter(residue => residue.isCg);\n        if (cgResidues.length > 0) {\n          const cgResiduesIndices = cgResidues.map(residue => residue.index);\n          const { rangedSelection: nglSelection } = topology.residueIndices2Ngl(cgResiduesIndices);\n          // Set the new representation\n          reps.push({\n            name: `${chainLabel} - ${polymer} polymer (coarse grain)`,\n            selection: nglSelection,\n            type: 'spacefill',\n            color: 'chainid',\n          });\n        }\n        // Now keep going with the all atom residues\n        const aaResidues = residues.filter(residue => !residue.isCg);\n        // Get ranges of residue indices in a row\n        const aaResiduesIndices = aaResidues.map(residue => residue.index);\n        const ranges =  [ ...generateRanges(aaResiduesIndices) ];\n        // Those regions with 3 residues or less are not representable by cartoon (NGL limitation)\n        // Therefore, we will set an additional licorice representation for them\n        const shortRanges = ranges.filter(range => range.length <= 3);\n        if (shortRanges.length > 0) {\n          // Transform the residue indices to a NGL selection\n          const shortResidueIndices = shortRanges.reduce((ac, curr) => ac.concat(curr), []);\n          const { rangedSelection: nglSelection } = topology.residueIndices2Ngl(shortResidueIndices);\n          // Set the new representation\n          reps.push({\n            name: `${chainLabel} - ${polymer} polymer (short)`,\n            selection: nglSelection,\n            type: 'licorice',\n            color: 'chainid',\n          });\n        }\n        // The long ranges are to be displayed in cartoon\n        const longRanges = ranges.filter(range => range.length > 3);\n        if (longRanges.length > 0) {\n          // Transform the residue indices to a NGL selection\n          const longResidueIndices = longRanges.reduce((ac, curr) => ac.concat(curr), []);\n          const { rangedSelection: nglSelection } = topology.residueIndices2Ngl(longResidueIndices);\n          // Set the new representation\n          reps.push({\n            name: `${chainLabel} - ${polymer} polymer`,\n            selection: nglSelection,\n            type: 'cartoon',\n            color: 'chainid',\n          });\n          // If this is a nucleic polymer then set also a representation for its bases\n          const nucleicPolymers = new Set([ 'dna', 'rna', 'nucleic' ]);\n          if (nucleicPolymers.has(polymer)) {\n            reps.push({\n              name: `${chainLabel} - ${polymer} bases`,\n              selection: nglSelection,\n              type: 'base',\n              color: 'resname',\n            });\n          }\n        }\n      }\n      // Represent protein polymers\n      respresentPolymer('protein');\n      // Represent DNA polymers\n      respresentPolymer('dna');\n      // Represent RNA polymers\n      respresentPolymer('rna');\n      // Represent other nucleic polymers\n      respresentPolymer('nucleic');\n      // 2. Ligands, small molecules which are referenced\n      // Represent ligands in ball+stick (cpk) colored by element\n      // Start by classify residues (note that this logic is actually run only once and then stored)\n      const ligandResidues = chainResidues.filter(residue => residue.classification === 'ligand');\n      if (ligandResidues.length > 0) {\n        // In case we have more than a different ligand in this chain, set a representation for each one\n        const ligandIds = new Set(ligandResidues.map(residue => residue.referenceId));\n        for (const ligandId of ligandIds) {\n          // Get the NGL selection of traget residues\n          const currentLigandResidueIndices = ligandResidues\n            .filter(residue => residue.referenceId === ligandId)\n            .map(residue => residue.index);\n          const { rangedSelection: nglSelection } = topology.residueIndices2Ngl(currentLigandResidueIndices);\n          // Add the representation\n          reps.push({\n            name: `${chainLabel} - ligand ${ligandId}`,\n            selection: nglSelection,\n            type: 'ball+stick',\n            color: 'element'\n          });\n        }\n      }\n      // 3. Lipids, usually membranes\n      // Represent membranes in grey licorice, with a reduced oppacity\n      // Thus we ease observing what is there inside of the membrane\n      // Start by finding lipid residues\n      const lipidClasses = new Set([ 'fatty', 'steroid' ]);\n      const lipidResidues = chainResidues.filter(residue => lipidClasses.has(residue.classification));\n      if (lipidResidues.length > 0) {\n        // Now parse them to a NGL selection\n        const lipidResidueIndices = lipidResidues.map(residue => residue.index);\n        const { rangedSelection: nglSelection } = topology.residueIndices2Ngl(lipidResidueIndices);\n        // Add the representation\n        reps.push({\n          name: `${chainLabel} - lipids`,\n          selection: nglSelection,\n          type: 'licorice',\n          color: 'grey',\n          opacity: 0.5,\n        });\n      }\n      // 4. Ions, single atoms\n      // Represent ions using spacefill (vdw) and colored by element\n      // Start by finding ion residues\n      const ionResidues = chainResidues.filter(residue => residue.classification === 'ion');\n      if (ionResidues.length > 0) {\n        // Now parse them to a NGL selection\n        const ionResidueIndices = ionResidues.map(residue => residue.index);\n        const { rangedSelection: nglSelection } = topology.residueIndices2Ngl(ionResidueIndices);\n        // Add the representation\n        reps.push({\n          name: `${chainLabel} - ions`,\n          selection: nglSelection,\n          type: 'spacefill',\n          color: 'element',\n        });\n      }\n      // 5. Other, anything else\n      // Residues not falling in any previous section will be represented in low opacity purple licorice\n      // This includes solvent and unknown residues (e.g. carbohydrates)\n      const otherClasses = new Set([ 'solvent', 'unknown' ]);\n      const otherResidues = chainResidues.filter(residue => otherClasses.has(residue.classification));\n      if (otherResidues.length > 0) {\n        // Now parse them to a NGL selection\n        const otherResiduesIndices = otherResidues.map(residue => residue.index);\n        const { rangedSelection: nglSelection } = topology.residueIndices2Ngl(otherResiduesIndices);\n        // Add the representation\n        reps.push({\n          name: `${chainLabel} - other`,\n          selection: nglSelection,\n          type: 'licorice',\n          color: 'purple',\n          opacity: 0.3,\n        });\n      }\n    });\n\n    return reps;\n  }, [topology]);\n\n  return defaultRepresentations;\n};\n\nexport default useDefaultRepresentations;\n","// Set the most suitable position for a tooltip\n// Use the parent element to set the limits where this tooltip may be\n// Use the tooltip element to get the suze of the tooltip\n// Use the reference position (e.g. mouse position) to place the tooltip\n// The offset is the pixels of separation between the reference and the tooltip\n// The idea is that the tooltip may be over/under and left/right of the reference position\n// It depends on how close to each limit is the reference position\nexport const setTooltipPosition = (parent, tooltip, reference, offset = 0) => {\n  const limits = parent.getBoundingClientRect();\n  const size = tooltip.getBoundingClientRect();\n  let x = reference.x;\n  // If it is more at the right side\n  if (Math.abs(limits.left - x) > Math.abs(x - limits.right)) {\n    const xSize = size.right - size.left;\n    x -= offset + xSize;\n  }\n  // If it is more at the left side\n  else {\n    x += offset;\n  }\n  // After this, apply the parent offset\n  x -= limits.left;\n  let y = reference.y;\n  // If it is more at the bottom side\n  if (Math.abs(limits.top - y) > Math.abs(y - limits.bottom)) {\n    const ySize = size.bottom - size.top;\n    y -= offset + ySize;\n  }\n  // If it is more at the top side\n  else {\n    y += offset;\n  }\n  // After this, apply the parent offset\n  y -= limits.top;\n  // Return the coordinates\n  return { x, y };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"popover-slider\":\"style_popover-slider__Rg-SB\",\"tablecard\":\"style_tablecard__1tgr+\",\"nglcard\":\"style_nglcard__xuaa2\",\"paper\":\"style_paper__G3Eus\",\"info\":\"style_info__itwxP\"};","import React, { memo } from 'react';\n\nimport {\n  Chip,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TextField,\n  Select,\n  Slider,\n  IconButton,\n} from '@mui/material';\nimport {\n  faEye,\n  faEyeSlash,\n  faPlusCircle,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Info from '../../info';\nimport style from './style.module.css';\n\nconst availableDrawingMethods = [\n  {\n    label: 'Cartoon',\n    value: 'cartoon',\n  },\n  {\n    label: 'Licorice',\n    value: 'licorice',\n  },\n  {\n    label: 'Ball and stick',\n    value: 'ball+stick',\n  },\n  {\n    label: 'Surface',\n    value: 'surface',\n  },\n  {\n    label: 'Spacefill',\n    value: 'spacefill',\n  },\n  {\n    label: 'Tube',\n    value: 'tube',\n  },\n  {\n    label: 'Trace',\n    value: 'trace',\n  },\n  {\n    label: 'Backbone',\n    value: 'backbone',\n  },\n];\n\n// Check if a value exists inside the available values\nconst DrawingMethodExists = value => {\n  for (const opt of availableDrawingMethods) {\n    if (opt.value === value) return true;\n  }\n  return false;\n};\n\nconst availableColoringMethods = [\n  {\n    label: 'By chain id',\n    value: 'chainid',\n  },\n  {\n    label: 'By residue',\n    value: 'resname',\n  },\n  {\n    label: 'By element',\n    value: 'element',\n  },\n  {\n    label: 'B factor',\n    value: 'bfactor',\n  },\n  {\n    label: 'Electrostatic',\n    value: 'electrostatic',\n  },\n  {\n    label: 'Secondary structure',\n    value: 'sstruc',\n  },\n  {\n    label: 'Uniform',\n    value: 'uniform',\n  },\n];\n\nconst availableColors = [\n  'red',\n  'yellow',\n  'blue',\n  'green',\n  'orange',\n  'purple',\n  'white',\n  'grey',\n  'black',\n];\n\n// Check if a value exists inside the available values\nconst coloringExists = value => {\n  if (value === 'custom') return true;\n  for (const opt of availableColoringMethods) {\n    if (opt.value === value) return true;\n  }\n  for (const opt of availableColors) {\n    if (opt === value) return true;\n  }\n  return false;\n};\n\n// Return a word but with the first letter in upper case\nconst firstLetterUpper = word => word[0].toUpperCase() + word.slice(1);\n\n// Display a huge panel to select which representations must be shown or hidden\n// In addition the user can manage the way these representatios are shown\nconst RepresentationsManager = memo(\n  ({\n    components, // Array with all components\n    representations, // Array with all representations\n    setRepresentations, // Representations setter\n  }) => {\n    return (\n      <>\n        <Table\n          aria-label=\"simple table\"\n          size=\"small\"\n          padding=\"checkbox\"\n          stickyHeader\n        >\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell align=\"right\">Show</TableCell>\n              <TableCell style={{ whiteSpace: 'nowrap' }} align=\"right\">\n                Selection <Info     tooltip={\n                <>\n                  Using{' '}\n                  <a href=\"https://nglviewer.org/ngl/api/manual/selection-language.html\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\">\n                    NGL selection language\n                  </a>.\n                </>\n              }  className={style.info} />\n              </TableCell>\n              <TableCell align=\"right\">Drawing method</TableCell>\n              <TableCell align=\"right\">Coloring method</TableCell>\n              <TableCell align=\"right\">Opacity</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {representations && representations.map((representation, index) => (\n              <TableRow key={representation.reference || index}>\n                {/* Name */}\n                <TableCell component=\"th\" scope=\"row\">\n                  {representation.name}\n                </TableCell>\n                {/* Show */}\n                <TableCell align=\"right\">\n                  <IconButton\n                    title=\"Show/Hide representation\"\n                    onClick={() =>\n                      setRepresentations(previousRepresentations => {\n                        previousRepresentations[index].show = !previousRepresentations[index].show;\n                        return [...previousRepresentations];\n                      })\n                    }\n                    color={'primary'}\n                  >\n                    <FontAwesomeIcon\n                      icon={representation.show ? faEye : faEyeSlash}\n                    />\n                  </IconButton>\n                </TableCell>\n                {/* Selection */}\n                <TableCell align=\"right\">\n                  <TextField\n                    defaultValue={representation.selection}\n                    variant=\"outlined\"\n                    onKeyPress={event => {\n                      if (event.key !== 'Enter') return;\n                      setRepresentations(previousRepresentations => {\n                        if (!event.target || !event.target.value) return previousRepresentations;\n                        previousRepresentations[index].selection = event.target.value;\n                        return [...previousRepresentations];\n                      });\n                    }}\n                    disabled={!representation.custom}\n                    size=\"small\"\n                    margin=\"dense\"\n                  />\n                </TableCell>\n                {/* Drawing method */}\n                <TableCell align=\"right\">\n                  <Select\n                    native\n                    value={representation.type}\n                    onChange={({ target: { value } }) => {\n                      setRepresentations(previousRepresentations => {\n                        previousRepresentations[index].type = value;\n                        return [...previousRepresentations];\n                      })\n                    }}\n                  >\n                    {!DrawingMethodExists(representation.type) && (\n                      <option value={representation.type}>\n                        {representation.type}\n                      </option>\n                    )}\n                    {availableDrawingMethods.map((cm, i) => (\n                      <option key={i} value={cm.value}>\n                        {cm.label}\n                      </option>\n                    ))}\n                  </Select>\n                </TableCell>\n                {/* Coloring method */}\n                <TableCell align=\"right\">\n                  <Select\n                    native\n                    value={representation.color}\n                    onChange={({ target: { value } }) => {\n                      setRepresentations(previousRepresentations => {\n                        previousRepresentations[index].color = value;\n                        return [...previousRepresentations];\n                      })\n                    }}\n                  >\n                    {representation.customScheme === 'distorsion' ? (\n                      <option value={representation.color}>{'Distorsion'}</option>\n                    ) : representation.customScheme ? (\n                      <option value={'custom'}>{'Custom'}</option>\n                    ) : null}\n                    \n                    {availableColoringMethods.map((cm, i) => (\n                      <option key={i} value={cm.value}>\n                        {cm.label}\n                      </option>\n                    ))}\n                    {availableColors.map((color, i) => (\n                      <option key={i} value={color}>\n                        {firstLetterUpper(color)}\n                      </option>\n                    ))}\n                  </Select>\n                </TableCell>\n                {/* Opacity */}\n                <TableCell align=\"right\">\n                  <Slider\n                    value={representation.opacity * 100}\n                    onChange={(_, value) => {\n                      setRepresentations(previousRepresentations => {\n                        previousRepresentations[index].opacity = value / 100;\n                        return [...previousRepresentations];\n                      })\n                    }}\n                    className={style['popover-slider']}\n                  />\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n          <TableBody>\n            <TableRow key={'addCustom'}>\n              <TableCell align=\"center\" colSpan={6}>\n                <Chip\n                  icon={<FontAwesomeIcon icon={faPlusCircle} />}\n                  label={'Add representation'}\n                  variant=\"outlined\"\n                  onClick={() =>\n                    setRepresentations(previousRepresentations => {\n                      // Set the default values for the custom representation\n                      const newRepresentation = {\n                        name: 'Custom', show: true,\n                        selection: 'None', type: 'licorice',\n                        color: 'chainid', opacity: 1,\n                        // Link the representation to the first (main) component\n                        component: components[0] && components[0].name,\n                        // Add the custom flag so this representation is treated differently\n                        custom: true,\n                      };\n                      const newRepresentations = [...previousRepresentations, newRepresentation];\n                      return newRepresentations;\n                    })\n                  }\n                />\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </>\n    );\n  },\n);\n\nexport default RepresentationsManager;\n","import { schedule } from 'timing-functions';\nimport pck from '../../../package.json';\n\nconst KEY = `${pck.name}-`;\n\nconst MAX_WAIT_TIME = 1000;\n\nexport const get = (key, defaultValue) => {\n  const storedValue = localStorage.getItem(KEY + key);\n  if (storedValue === null) return defaultValue;\n  return JSON.parse(storedValue);\n};\n\nexport const set = (key, value) => {\n  localStorage.setItem(KEY + key, JSON.stringify(value));\n};\n\nexport const setAsync = async (key, value) => {\n  await schedule(MAX_WAIT_TIME);\n  return set(key, value);\n};\n\nexport const deleteAll = () => {\n  Object.keys(localStorage)\n    .filter(key => key.startsWith(KEY))\n    .forEach(key => localStorage.removeItem(key));\n};\n","import { StateTransformer } from 'molstar/lib/mol-state';\nimport { PluginStateObject } from 'molstar/lib/mol-plugin-state/objects';\nimport { Task } from 'molstar/lib/mol-task';\nimport { ParamDefinition as PD } from 'molstar/lib/mol-util/param-definition';\nimport { Coordinates, Time } from 'molstar/lib/mol-model/structure';\n\nconst CreateTransformer = StateTransformer.builderFactory('custom-namespace');\n\nexport const TrajectoryFromCustomData = CreateTransformer({\n    name: 'trajectory-from-custom-data',\n    display: 'Trajectory',\n    from: PluginStateObject.Root,\n    to: PluginStateObject.Molecule.Coordinates,\n    params: {\n        data: PD.Value<Uint8Array>(new Uint8Array(), { isHidden: true }),\n        natoms: PD.Value<number>(0, { isHidden: true }),\n    },\n})({\n    apply({ params }) {\n        return Task.create('Parse atom coordinates', async (ctx) => {\n            //ctx.update({ canAbort: true, message: 'Parsing trajectory...' });\n            return await customParse(params.data, params.natoms);\n        });\n    },\n});\n\n// Parse binary atom coordinates\nasync function customParse (data: Uint8Array, natoms: number) {\n    // Check the number of atoms to not be 0 (the default)\n    if (natoms === 0) throw new Error('Number of atoms is 0');\n    // Each coordinates is a float32 an thus it takes 4 bytes of space\n    const coordSize = 4;\n    // Each atom has 3 coordinates: x, y and z\n    const atomSize = coordSize * 3;\n    // Each frame has coordinates for every atom\n    const frameSize = atomSize * natoms;\n    // Check data contains whole frames\n    if (data.byteLength % frameSize !== 0) throw new Error('Trajectory data ends abruptly');\n    // Calculate the number of frames\n    const nframes = data.byteLength / frameSize;\n    // Convert binary data to coordinates\n    const coordinates = new Float32Array(data);\n    // Set a list with the already read coordinates\n    const frameCoordinates = [];\n    // Keep track of the coordinate we are reading\n    let count = 0;\n    // Iterate over each frame number\n    for (let frame = 0; frame < nframes; frame++) {\n        // Coordinates are saved separately by dimensions, as it is done in molstar\n        const x_coords = new Float32Array(natoms);\n        const y_coords = new Float32Array(natoms);\n        const z_coords = new Float32Array(natoms);\n        // Iterate over each atom number\n        for (let atom = 0; atom < natoms; atom++) {\n            // Read the current atom coordinates\n            x_coords[atom] = coordinates[count]\n            y_coords[atom] = coordinates[count+1];\n            z_coords[atom] = coordinates[count+2];\n            // Update the byte offset\n            count += 3;\n        }\n        // Push the current frame to the overall frames list\n        frameCoordinates.push({\n            x: x_coords,\n            y: y_coords,\n            z: z_coords,\n            // Add a few extra parameters on each frame\n            elementCount: natoms,\n            time: Time(frame, 'step'),\n            xyzOrdering: { isIdentity: true }\n        });\n    }\n    // Set the molstar object for coordinates\n    const molstarCoords = Coordinates.create(\n        frameCoordinates,\n        Time(1, 'step'), // deltaTime\n        Time(0, 'step') // offsetTime\n    );\n    return new PluginStateObject.Molecule.Coordinates(molstarCoords, { label: 'label' });\n}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__d6R8E\",\"light-theme\":\"style_light-theme__l3EaT\",\"loading-trajectory\":\"style_loading-trajectory__ciokb\",\"loading-structure\":\"style_loading-structure__ce+kY\",\"tooltip\":\"style_tooltip__KXFgY\"};","import React, {\n  forwardRef,\n  memo,\n  useState,\n  useRef,\n  useImperativeHandle,\n  useCallback,\n  useMemo,\n  useEffect,\n  useContext,\n} from 'react';\n//import useToggleState from '../../hooks/use-toggle-state';\nimport { useInView } from 'react-intersection-observer';\nimport cn from 'classnames';\n\n// Load molstar logic\n//import { PluginUIContext } from \"molstar/lib/mol-plugin-ui/context\";\nimport { createPluginUI } from 'molstar/lib/mol-plugin-ui/index';\nimport { DefaultPluginUISpec } from 'molstar/lib/mol-plugin-ui/spec';\nimport { TrajectoryFromModelAndCoordinates } from 'molstar/lib/mol-plugin-state/transforms/model';\nimport { AnimateModelIndex } from 'molstar/lib/mol-plugin-state/animation/built-in/model-index';\nimport { createStructureRepresentationParams } from 'molstar/lib/mol-plugin-state/helpers/structure-representation-params';\nimport { StateTransforms } from 'molstar/lib/mol-plugin-state/transforms';\n/*  Might require extra configuration,\nsee https://webpack.js.org/loaders/sass-loader/ for example.\ncreate-react-app should support this natively. */\n//import \"molstar/lib/mol-plugin-ui/skin/light.scss\";\n\n// Load the parser for trajectory coordinates in our format to molstar format\nimport { TrajectoryFromCustomData } from './molstar-parser';\n\nimport { ProjectCtx } from '../../contexts';\n\n//import { setTooltipPosition } from '../../utils/tooltip-position-manager';\n\nimport style from './style.module.css';\n\n// Used to just wait\nimport { sleep } from 'timing-functions';\n\n// Load the molstar plugin context in a global and accessible place\n//window.molstar = PluginUIContext;\n\n// Customize molstar specifications\n// Here you can see more clues about molstar options:\n//   https://github.com/molstar/molstar/blob/0bf32148afd93a645b44dca6d81e9779e85b4300/src/apps/viewer/app.ts\nconst molstarSpec = DefaultPluginUISpec();\nmolstarSpec.layout = {\n  initial: {\n    // When isExpanded is set true the vertical scroll is blocked\n    isExpanded: false,\n    // DANI: Esto no se que hace, he provado distintos valores y no veo la diferencia\n    // Available options: 'outside', 'portrait', 'landscape' or 'reactive'\n    controlsDisplay: 'reactive',\n    // If showControls is set to true then some logs are rendered in molstar\n    // This is a problem since they offset the molecule and they eclipse the mouse interaction with it\n    // These controls can be hidden by parts firther in the specifications however\n    showControls: false,\n  },\n};\nmolstarSpec.components = {\n  // This is only useful if showControls are set to true\n  controls: {\n    // Hide sequence (question mark in the top right corner)\n    // DANI: Al hacer click no hace nada\n    top: 'none',\n    // Hide console logs (they block the mouse click interaction with the main viewer)\n    bottom: 'none',\n    // Hide left panel (this panels is offsetting and deforming the main viewer very bad)\n    // DANI: Hay un botón pero funciona mal: intenta abrir un desplegable con más botones pero colapsa al momento\n    left: 'none',\n    // DANI: No se que hace esto pero he visto que alguien lo ponía así que yo también\n    remoteState: 'none',\n  },\n};\n\n// Set the number of bytes per element in trajectory data\nconst BYTES_PER_COORDINATE = 4; // float 32\nconst COORDINATES_PER_ATOM = 3; // x, y and z\nconst BYTES_PER_ATOM = BYTES_PER_COORDINATE * COORDINATES_PER_ATOM;\n\n// Set the NGL player speed limits\n// The actual 'speed' input limits are 0-100\n// The speed set as the time to wait before moving to the next frame in miliseconds\nconst minimumSpeed = 0;\nconst maximumSpeed = 100;\nconst slowestTimeout = 1000;\nconst fastestTimeout = 50;\nconst interpolateSpeed = currentSpeed => (\n  slowestTimeout + (currentSpeed - minimumSpeed) *\n  ((fastestTimeout - slowestTimeout) / (maximumSpeed - minimumSpeed))\n);\n\n// Set representation types for the different types of highlights\nconst defaultHighlightTypes = {\n  atoms: 'spacefill',\n  residues: 'ball+stick',\n  chains: 'ball+stick',\n  selections: 'ball+stick',\n};\n\nconst MolstarViewer = memo(\n  forwardRef(\n    (\n      {\n        className,\n        playing,\n        spinning,\n        smooth,\n        onProgress,\n        bounce = false, // Set if the animation, when finished, starts again (false) or goes back (true)\n        selectedAtoms, // Atom index of the atom and residue to be represented\n        selectedResidueIndices, // Residue indices from residues to be highlighted\n        selectedChains, // Chain letters from chains to be represented\n        selectedCustom, // Free NGL selections to be directly represented\n        selectedDistances, // Groups of 2 atoms or residues to be represented as a distance\n        selectedAngles, // Groups of 3 atoms to be represented as an angle\n        selectedRepresentation, // String name of a representation to be painted in yellow color (only 1)\n        snapRepresentations,\n        noTrajectory, // True when only specific frames must be loaded\n        initialFocus, // The ngl selection to be focused by the camera initially\n        darkBackground,\n        perspective,\n        speed,\n        // Hooked values for changing representation parameters\n        drawingMethods,\n        coloringMethods,\n        opacities,\n        components,\n        showRepresentations,\n        nglSelections,\n        // Viewer data incluting both structure and coordinates\n        topologies,\n        trajectories,\n        anyLoadingTopology,\n        anyLoadingTrajectory,\n        // Set the highlight representations types\n        highlightTypes = defaultHighlightTypes,\n      },\n      ref,\n    ) => {\n      // Save the components object into a local constant which can be modified\n      const comps = useMemo(() => components, [components]);\n\n      // Get project data\n      const {\n        metadata,\n        topology: topologyManager,\n      } = useContext(ProjectCtx);\n\n      // The last automatic camera focus\n      const [focus, setFocus] = useState(initialFocus);\n      // Set the initial focus\n      useEffect(() => {\n        //console.log(initialFocus);\n        setFocus(initialFocus);\n      }, [initialFocus]);\n\n      // references\n      const parentRef = useRef(null);\n      const containerRef = useRef(null);\n      const stageRef = useRef(null);\n      const tooltipRef = useRef(null);\n\n      // in-view hook\n      const [inViewRef, isInView] = useInView();\n\n      // Set the content of the tooltip in JSX format\n      const [tooltipContent, setTooltipContent] = useState(null);\n\n      // Set the molstar instance\n      const [molstar, setMolstar] = useState(null);\n\n      // Setup molstar\n      useEffect(() => {\n        // This wrapper function is the most correct way to call awaits inside a use effect\n        const wrap = async () => {\n          // Create the plugin\n          const molstarInstance = await createPluginUI(\n            parentRef.current,\n            molstarSpec,\n          );\n          setMolstar(molstarInstance);\n        };\n        wrap();\n        // Cleanup function\n        return () => {\n          if (!molstar) return;\n          molstar.dispose();\n          molstar = null;\n        };\n      }, []);\n\n      // Set the molstar model reference\n      const [modelReference, setModelReference] = useState(null);\n\n      // Load topologies in molstar\n      useEffect(() => {\n        // Stop here if we are still loading topologies\n        if (anyLoadingTopology) return;\n        // Get the molstar reference\n        if (!molstar) return;\n        // Load each topology\n        topologies.forEach(async topology => {\n          // Download and apply data\n          const data = await molstar.builders.data.rawData(\n            { data: topology.file } /* replace with your URL */,\n            { state: { isGhost: true } },\n          );\n          // DANI: Aunque no llegues a 'aplicarla' acabas teniendo una trayectoria de una frame en la data\n          const trajectory = await molstar.builders.structure.parseTrajectory(data, 'pdb');\n          // WARNING: Do not modify this model\n          // WARNING: Althought it should be the same model\n          const model = await molstar.builders.structure.createModel(trajectory);\n\n          // DANI: Esta función te acepta igual una trayectory que un model que una structure\n          // await molstar.builders.structure.hierarchy.applyPreset(structure, \"default\");\n\n          // console.log(molstar);\n          // console.log(molstar.managers.structure.hierarchy.current);\n\n          // // Set the representations (https://github.com/molstar/molstar/issues/68)\n          // // WARNING: Default MolStar representation is not the most efficient one so we have to tweak it\n          // // First set the different features we may encounter within the structure\n          // const components = {\n          //     polymer: await molstar.builders.structure.tryCreateComponent(structure, 'polymer'),\n          //     ligand: await molstar.builders.structure.tryCreateComponent(structure, 'ligand'),\n          //     //water: await molstar.builders.structure.tryCreateComponent(structure, 'water'),\n          // };\n          // // Now\n          // const builder = molstar.builders.structure.representation;\n          // const update = molstar.build();\n          // if (components.polymer) builder.buildRepresentation(update, components.polymer, {\n          //   type: 'line',\n          //   //typeParams: { alpha: 0.51 } // Make it transparent\n          // }, { tag: 'polymer' });\n          // if (components.ligand) builder.buildRepresentation(update, components.ligand, {\n          //   type: 'ball-and-stick'\n          // }, { tag: 'ligand' });\n          // //if (components.water) builder.buildRepresentation(update, components.water, { type: 'ball-and-stick', typeParams: { alpha: 0.6 } }, { tag: 'water' });\n          // await update.commit();\n\n          // Save the model reference inside the molstar reference\n          setModelReference(model.ref);\n        });\n      }, [molstar, anyLoadingTopology, topologies]);\n\n      // Load trajectories in molstar\n      // Once the trajectories are downloaded, load them in corresponding NGL representations\n      // Every time the trajectory payloads change this useEffect must be rerun\n      useEffect(() => {\n        // Wait for the molstar reference to be available\n        if (!molstar) return;\n        // If there must be no trajectory then stop here\n        if (noTrajectory) return;\n        // This wrapper function is the most correct way to call awaits inside a use effect\n        const wrap = async () => {\n          // Check if trajectories are\n          if (!topologies || !trajectories || trajectories.length === 0) return;\n\n          // If molstar or the main model are not set yet then we must wait\n          if (!modelReference) return;\n\n          const trajectory = trajectories[0];\n\n          let trajectoryAtoms;\n          let trajectoryFinalExpectedFrames = 0;\n\n          trajectoryAtoms = trajectory.atoms;\n          if (trajectoryAtoms !== trajectory.atoms)\n            throw new Error(\n              `Atoms number in the different trajectories do not match`,\n            );\n\n          // Add the final expected frames for all frames in the component\n          trajectoryFinalExpectedFrames += trajectory.frames;\n\n          const payload = trajectory.payload;\n          const bytesPerFrame = trajectoryAtoms * BYTES_PER_ATOM;\n          const fitLength =\n            Math.floor(payload.byteLength / bytesPerFrame) * bytesPerFrame;\n          const totalPayload = payload.slice(0, fitLength);\n\n          // If the total payload is empty then stop here\n          if (totalPayload.byteLength === 0) return;\n\n          // Calculate how many frames are there in total\n          const totalFrames = totalPayload.byteLength / bytesPerFrame;\n          const lastFrameIndex = totalFrames - 1;\n\n          // Check if all required data is already downloaded\n          const completedTrajectory =\n            totalFrames === trajectoryFinalExpectedFrames;\n          if (!completedTrajectory) return;\n\n          // Load coordinates as they are parsed\n          const coords = await molstar\n            .build()\n            .toRoot()\n            .apply(TrajectoryFromCustomData, {\n              data: totalPayload,\n              natoms: trajectory.atoms,\n            })\n            .commit();\n\n          // Get the current loaded trajectories\n          // DANI: No te fies de este número\n          // DANI: Aquí aparecen todas las trayectorias declaradas, incluido aquellas que no han sido 'aplicadas'\n          const loadedTrajectories =\n            molstar.managers.structure.hierarchy.current.trajectories;\n\n          const molstarTrajectory = await molstar\n            .build()\n            .toRoot()\n            .apply(\n              TrajectoryFromModelAndCoordinates,\n              {\n                modelRef: modelReference,\n                coordinatesRef: coords.ref,\n              },\n              { dependsOn: [modelReference, coords.ref] },\n            )\n            .commit();\n\n          // Get the current trajectory model\n          // From now on, this is the model to be modified and not the model in modelReference\n          const newModel = await molstar.builders.structure.createModel(\n            molstarTrajectory,\n          );\n\n          // Set the default representation\n          // Use a lightweighted representation type\n          const structure = await molstar.builders.structure.createStructure(\n            newModel,\n          );\n          const components = molstar.build().to(structure);\n          const lightRepresentation = createStructureRepresentationParams(\n            molstar,\n            void 0,\n            {\n              type: 'cartoon',\n              typeParams: {\n                // Quality options: custom, auto, highest, higher, high, medium, low, lower, lowest\n                // https://github.com/molstar/molstar/blob/0e197b18857d59c27f51d4aa0226cd772bc872ca/src/mol-geo/geometry/base.ts\n                // DANI: 'lowest' se ve muy feo y no mejora mucho el rendimiento\n                quality: 'lower',\n                ignoreHydrogens: 'all',\n                ignoreHydrogensVariant: 'all',\n                ignoreLight: true,\n              },\n            },\n          );\n\n          components.apply(\n            StateTransforms.Representation.StructureRepresentation3D,\n            lightRepresentation,\n          );\n          await components.commit();\n\n          // DANI: Hay 2 presets: 'default' y 'all-models'. Aparecen siempre, aunque tu no los hayas creado\n          //const currentPresets = molstar.builders.structure.hierarchy.getPresetsWithOptions(molstarTrajectory);\n          //console.log(currentPresets);\n\n          // DANI: El apply preset puede hacerse a 'default' o a 'all-models'\n          // DANI: El 'all-models' te representa todas las frames superpuestas (y tarda)\n          // await molstar.builders.structure.hierarchy.applyPreset(\n          //   molstarTrajectory,\n          //   'default',\n          // );\n\n          // If there is a trajectory already update it with new data\n          if (loadedTrajectories.length > 0) {\n            //if (loadedTrajectories.length > 1) throw new Error('Molstar error: There should be only 1 trajectory');\n            //console.log('already loaded traj!!');\n          }\n          // If there is not trajectory yet then create a new trajectory\n          else {\n            //console.log('loading for the first time');\n          }\n        };\n        wrap();\n      }, [molstar, modelReference, topologies, trajectories, comps, noTrajectory]);\n\n      // play/pause button effect\n      useEffect(() => {\n        // If molstar has not been yet initiated then stop here\n        if (!molstar) return;\n\n        // If there is no trajectory then there is nothing to play\n        if (noTrajectory) return;\n\n        // Play\n        if (playing && isInView) {\n          molstar.managers.animation.play(AnimateModelIndex, {\n            // Select the time it takes to switch between frames\n            //duration: { name: 'fixed', params: { durationInS: 10 } },\n            //duration: { name: 'computed', params: { targetFps: 10 } },\n            duration: { name: 'sequential', params: { maxFps: 10 } },\n            // Select the mode it switches frames\n            //mode: { name: 'once', params: { direction: 'forward' } }\n            mode: { name: 'loop', params: { direction: 'forward' } },\n            //mode: { name: 'palindrome', params: {} }\n          });\n        }\n        // Pause\n        else {\n          molstar.managers.animation.stop();\n        }\n      }, [molstar, playing, isInView, noTrajectory, bounce]);\n\n      // Resize logic\n      // declare handler\n      const handleResize = useCallback(async () => {\n        if (!stageRef.current) return;\n        const canvas = containerRef.current.querySelector('canvas');\n        if (canvas) {\n          canvas.style.height = '';\n          canvas.style.cursor = 'default';\n        }\n        // WARNING: This sleep here is to fix a bug\n        // When we open/close settings we trigger this function but it takes the size of the window before changing\n        // The sleep fixes this problem altought the delay is 0\n        await sleep(0);\n        stageRef.current.handleResize();\n      }, []);\n      // connect the handle to events\n      useEffect(() => {\n        window.addEventListener('resize', handleResize);\n        return () => {\n          window.removeEventListener('resize', handleResize);\n        };\n      }, [handleResize]);\n\n      // Expose public methods and getters/setters\n      useImperativeHandle(\n        ref,\n        () => ({\n          autoResize: handleResize,\n          // Output the current orientation/focus in console\n          // Note: this is for the developer, not for the regular user\n          displayFocus() {\n            const orientation = stageRef.current.viewerControls.getOrientation();\n            const stringifiedArray = `[${orientation.elements.toString()}]`;\n            console.log(stringifiedArray);\n          },\n          centerFocus() {\n            setFocus({ comp: 0, sele: 'all' });\n            // Use the provided orientation, if any\n            // DANI: Sin hacer\n          },\n          get currentFrame() {\n            if (!(molstar && trajectories.length)) return -1;\n            try {\n              return stageRef.current.compList[0].trajList[0].trajectory\n                .currentFrame;\n            } catch (_) {\n              return -1;\n            }\n          },\n          set currentFrame(value) {\n            if (!(molstar && trajectories.length)) return;\n            try {\n              const total = this.totalFrames;\n              let frame = value;\n              if (frame < 0) frame = 0;\n              if (frame >= total) frame = total - 1;\n              stageRef.current.compList[0].trajList[0].trajectory.setFrame(\n                frame,\n              );\n            } catch (_) {\n              /* */\n            }\n          },\n          get totalFrames() {\n            if (!(molstar && trajectories.length)) return 1;\n            try {\n              return stageRef.current.compList[0].trajList[0].trajectory.frames\n                .length;\n            } catch (_) {\n              return 1;\n            }\n          },\n          get totalExpectedFrames() {\n            try {\n              return stageRef.current.compList[0].trajList[0].expectedFrames;\n            } catch (_) {\n              return 1;\n            }\n          },\n        }),\n        [molstar, trajectories, handleResize],\n      );\n\n      // workaround to have multiple ref logic on one element\n      // https://github.com/thebuilder/react-intersection-observer/issues/186#issuecomment-468641525\n      const handleRef = node => {\n        inViewRef(node);\n        parentRef.current = node;\n      };\n\n      // Finally, render the ngl window\n      return (\n        <>\n          <div\n            ref={handleRef}\n            className={cn(className, style.container, {\n              [style['loading-structure']]: anyLoadingTopology,\n              [style['loading-trajectory']]:\n                !noTrajectory && anyLoadingTrajectory,\n              [style['light-theme']]: !darkBackground,\n            })}\n            // Display loading status data in the upper left corner of the NGL window\n            data-loading={undefined}\n          />\n          <div ref={tooltipRef} className={style.tooltip}>\n            {tooltipContent}\n          </div>\n        </>\n      );\n    },\n  ),\n);\n\nexport default MolstarViewer;\n","import { Frames } from 'ngl';\n\n// Set the number of bytes per element in trajectory data\nconst BYTES_PER_COORDINATE = 4; // float 32\nconst COORDINATES_PER_ATOM = 3; // x, y and z\nconst BYTES_PER_ATOM = BYTES_PER_COORDINATE * COORDINATES_PER_ATOM;\n\n// This converts the trajectory payload (i.e. atom coordinates in raw binary data) into NGL formatted coordinates\nconst payloadToNGLCoordinates = (\n  trajectoryData,\n  trajectoryAtoms,\n  trajectoryFrames,\n) => {\n  // Parse binary to coordinates\n  const trajectoryCoordinates = new Float32Array(trajectoryData);\n  try {\n    // Save all coordinates here\n    // This array is to be returned at the end\n    const overallCoordinates = [];\n    for (let i = 0; i < trajectoryFrames; i++) {\n      // Create a new array with the length of the number of atoms in the pdbFile * 3\n      const coordinates = new Float32Array(\n        trajectoryAtoms * COORDINATES_PER_ATOM,\n      );\n      coordinates.set(\n        trajectoryCoordinates.subarray(\n          i * trajectoryAtoms * COORDINATES_PER_ATOM,\n          (i + 1) * trajectoryAtoms * COORDINATES_PER_ATOM,\n        ),\n      );\n      // Push the new coordinates each frame\n      overallCoordinates.push(coordinates);\n    }\n    return overallCoordinates;\n  } catch (error) {\n    // If this fails the topology may not match the trajectory in atom number\n    return null;\n  }\n};\n\n// This converts the trajectory payload (i.e. atom coordinates in raw binary data) into NGL formatted coordinates\n// This alternative function is used when the trajectory has less atoms than the structure\n// This may happen when trajectory data contains only heavy or backbone atoms (e.g. pca projections)\nconst payloadToNGLCoordinatesFiltered = (\n  atomCount,\n  atomIndices,\n  trajectoryData,\n  trajectoryAtoms,\n  trajectoryFrames,\n) => {\n  // Parse binary to coordinates\n  const trajectoryCoordinates = new Float32Array(trajectoryData);\n  // Check atom number to be as expected\n  const expectedAtomNumber =\n    trajectoryCoordinates.length / COORDINATES_PER_ATOM / trajectoryFrames;\n  if (expectedAtomNumber !== trajectoryAtoms) {\n    console.log('Number of coordinates: ' + trajectoryCoordinates.length);\n    console.log('Number of frames: ' + trajectoryFrames);\n    console.log('Expected number of atoms: ' + expectedAtomNumber);\n    console.log('Actual number of atoms: ' + trajectoryAtoms);\n    throw new Error(`Trajectory atom number is wrong`);\n  }\n\n  try {\n    // Save all coordinates here\n    // This array is to be returned at the end\n    const overallCoordinates = [];\n    for (let i = 0; i < trajectoryFrames; i++) {\n      // Create a new array with the length of the number of atoms in the structure * 3\n      const coordinates = new Float32Array(atomCount * COORDINATES_PER_ATOM);\n      let k = 0;\n      // Create our own trajectory with coordinates only for the specified atoms\n      // The coordinates of the excluded atoms are set to 0\n      // This makes the trajectory compatible with the structure\n      for (let j = 0; j < atomCount; j++) {\n        //if (k >= trajectoryAtoms) break;\n        if (atomIndices.indexOf(j) !== -1) {\n          coordinates[j * COORDINATES_PER_ATOM] =\n            trajectoryCoordinates[\n              i * trajectoryAtoms * COORDINATES_PER_ATOM +\n                k * COORDINATES_PER_ATOM\n            ];\n          coordinates[j * COORDINATES_PER_ATOM + 1] =\n            trajectoryCoordinates[\n              i * trajectoryAtoms * COORDINATES_PER_ATOM +\n                k * COORDINATES_PER_ATOM +\n                1\n            ];\n          coordinates[j * COORDINATES_PER_ATOM + 2] =\n            trajectoryCoordinates[\n              i * trajectoryAtoms * COORDINATES_PER_ATOM +\n                k * COORDINATES_PER_ATOM +\n                2\n            ];\n          k++;\n        }\n      }\n      // Push the new coordinates each frame\n      overallCoordinates.push(coordinates);\n    }\n    return overallCoordinates;\n  } catch (e) {\n    // If this fails the topology may not match the trajectory in atom number\n    return null;\n  }\n};\n\n// This converts the trajectory payload (i.e. atom coordinates in raw binary data) into NGL formatted coordinates\n// This alternative function is used when the trajectory has less atoms than the structure\n// This may happen when trajectory data contains only heavy or backbone atoms (e.g. pca projections)\nconst payloadToNGLCoordinatesAlternative = (\n  pdbFile,\n  trajectoryData,\n  trajectoryAtoms,\n  trajectoryFrames,\n) => {\n  // Parse binary to coordinates\n  const trajectoryCoordinates = new Float32Array(trajectoryData);\n  // Check atom number to be as expected\n  if (\n    trajectoryCoordinates.length / COORDINATES_PER_ATOM / trajectoryFrames !==\n    trajectoryAtoms\n  )\n    throw new Error(`Trajectory atom number is wrong`);\n\n  let format = '';\n\n  // Then count different combinations of atoms in the pdbFile\n  let k = 0;\n  let backboneAtoms = 0;\n  let heavyAtoms = 0;\n  for (let a = 0; a < pdbFile.atomCount; a++) {\n    // DANI: He probado a quitar esta condición. hay que probar que funcione bien en la vieja model\n    // DANI: En las trayectorias del Shaw el 'isProtein' no funcionaba y devolvía siempre 'false'\n    //if (!pdbFile.getAtomProxy(a).isProtein()) break;\n    if (k >= trajectoryAtoms) break;\n    if (\n      pdbFile.getAtomProxy(a).atomname === 'C' ||\n      pdbFile.getAtomProxy(a).atomname === 'CA' ||\n      pdbFile.getAtomProxy(a).atomname === 'N'\n    ) {\n      backboneAtoms += 1;\n    }\n    if (pdbFile.getAtomProxy(a).element !== 'H') {\n      heavyAtoms += 1;\n    }\n  }\n  // Finally check which count matches the expected number of atoms\n  if (trajectoryAtoms === backboneAtoms) format = 'backbone';\n  else if (trajectoryAtoms === heavyAtoms) format = 'heavy';\n  else\n    console.error(\n      `Number of atoms does not match any defined atoms selection\n      Number of atoms: ${trajectoryAtoms}\n      Expected backbone atoms: ${backboneAtoms}\n      Expected heavy atoms: ${heavyAtoms}`,\n    );\n  try {\n    // Save all coordinates here\n    // This array is to be returned at the end\n    const overallCoordinates = [];\n    for (let i = 0; i < trajectoryFrames; i++) {\n      // Create a new array with the length of the number of atoms in the pdbFile * 3\n      const coordinates = new Float32Array(\n        pdbFile.atomCount * COORDINATES_PER_ATOM,\n      );\n      let k = 0;\n      // Create our own trajectory with coordinates only for the specified atoms\n      // The coordinates of the excluded atoms are set to 0\n      // This makes the trajectory compatible with the pdbFile\n      if (format === 'backbone') {\n        for (let j = 0; j < pdbFile.atomCount; j++) {\n          if (k >= trajectoryAtoms) break;\n          if (\n            pdbFile.getAtomProxy(j).atomname === 'C' ||\n            pdbFile.getAtomProxy(j).atomname === 'CA' ||\n            pdbFile.getAtomProxy(j).atomname === 'N'\n          ) {\n            coordinates[j * COORDINATES_PER_ATOM] =\n              trajectoryCoordinates[\n                i * trajectoryAtoms * COORDINATES_PER_ATOM +\n                  k * COORDINATES_PER_ATOM\n              ];\n            coordinates[j * COORDINATES_PER_ATOM + 1] =\n              trajectoryCoordinates[\n                i * trajectoryAtoms * COORDINATES_PER_ATOM +\n                  k * COORDINATES_PER_ATOM +\n                  1\n              ];\n            coordinates[j * COORDINATES_PER_ATOM + 2] =\n              trajectoryCoordinates[\n                i * trajectoryAtoms * COORDINATES_PER_ATOM +\n                  k * COORDINATES_PER_ATOM +\n                  2\n              ];\n            k++;\n          }\n        }\n      }\n      if (format === 'heavy') {\n        for (let j = 0; j < pdbFile.atomCount; j++) {\n          if (k >= trajectoryAtoms) break;\n          if (pdbFile.getAtomProxy(j).element !== 'H') {\n            coordinates[j * COORDINATES_PER_ATOM] =\n              trajectoryCoordinates[\n                i * trajectoryAtoms * COORDINATES_PER_ATOM +\n                  k * COORDINATES_PER_ATOM\n              ];\n            coordinates[j * COORDINATES_PER_ATOM + 1] =\n              trajectoryCoordinates[\n                i * trajectoryAtoms * COORDINATES_PER_ATOM +\n                  k * COORDINATES_PER_ATOM +\n                  1\n              ];\n            coordinates[j * COORDINATES_PER_ATOM + 2] =\n              trajectoryCoordinates[\n                i * trajectoryAtoms * COORDINATES_PER_ATOM +\n                  k * COORDINATES_PER_ATOM +\n                  2\n              ];\n            k++;\n          }\n        }\n      }\n      // Push the new coordinates each frame\n      overallCoordinates.push(coordinates);\n    }\n    return overallCoordinates;\n  } catch (e) {\n    // If this fails the topology may not match the trajectory in atom number\n    return null;\n  }\n};\n\n// This converts the trajectory payload (i.e. atom coordinates in raw binary data) into an NGL object\n// This object can be further added to a NGL stage component\nexport const setNGLFile = (\n  topology,\n  trajectoryData,\n  trajectoryAtoms,\n  trajectoryFrames,\n  atomIndices,\n) => {\n  if (!(topology && trajectoryData)) return;\n\n  let coordinates;\n  // In case topology and trajectory atoms match go for the canonical parsing\n  if (trajectoryAtoms === topology.atomCount)\n    coordinates = payloadToNGLCoordinates(\n      trajectoryData,\n      trajectoryAtoms,\n      trajectoryFrames,\n    );\n  else if (atomIndices)\n    coordinates = payloadToNGLCoordinatesFiltered(\n      topology.atomCount,\n      atomIndices,\n      trajectoryData,\n      trajectoryAtoms,\n      trajectoryFrames,\n    );\n  // Otherwise it may mean the trajectory has only heavy/backbone atoms\n  // Then parse it taking this in count\n  // DANI: Esto es más un arreglo que no algo permanente\n  // DANI: Lo suyo sería que en estos casos se pida la estructura solo con los átomos que hacen falta\n  else\n    coordinates = payloadToNGLCoordinatesAlternative(\n      topology,\n      trajectoryData,\n      trajectoryAtoms,\n      trajectoryFrames,\n    );\n\n  // If we do not have coordinates at this point it may mean the topology and trajectory are not matching in atom number\n  if (!coordinates)\n    throw new Error(`Topology and trajectory data may not match`);\n\n  // Finally build the NGL object and add the parsed coordinates\n  const file = new Frames('Dynamically generated trajectory', '');\n  file.coordinates = coordinates;\n  return file;\n};\n\n// This updates an already set NGL object by adding new trajectory data\nexport const updateNGLFile = (\n  file,\n  topology,\n  trajectoryData,\n  trajectoryAtoms,\n  trajectoryFrames,\n  atomIndices,\n) => {\n  if (!(file && topology && trajectoryData)) return;\n\n  // The NGL file may already have trajectory data\n  // There is no need to process those coordinates again, so they must discarded from the parsing\n\n  // Find out how many frames are already loaded\n  const currentFrames = file.frames.length;\n\n  // If there are as many frames already as the new trajectory frames then we have nothing to do\n  if (currentFrames >= trajectoryFrames) return;\n\n  // Calculate how many bytes we must discard and discard them from the begining of the array buffer\n  const discardBytes = currentFrames * trajectoryAtoms * BYTES_PER_ATOM;\n  const newTrajectoryData = trajectoryData.slice(discardBytes);\n  const newTrajectoryFrames = trajectoryFrames - currentFrames;\n\n  let coordinates;\n  // In case topology and trajectory atoms match go for the canonical parsing\n  if (trajectoryAtoms === topology.atomCount)\n    coordinates = payloadToNGLCoordinates(\n      newTrajectoryData,\n      trajectoryAtoms,\n      newTrajectoryFrames,\n    );\n  else if (atomIndices)\n    coordinates = payloadToNGLCoordinatesFiltered(\n      topology.atomCount,\n      atomIndices,\n      newTrajectoryData,\n      trajectoryAtoms,\n      newTrajectoryFrames,\n    );\n  // Otherwise it may mean the trajectory has only heavy/backbone atoms\n  // Then parse it taking this in count\n  // DANI: Esto es más un arreglo que no algo permanente\n  // DANI: Lo suyo sería que en estos casos se pida la estructura solo con los átomos que hacen falta\n  else\n    coordinates = payloadToNGLCoordinatesAlternative(\n      topology,\n      newTrajectoryData,\n      trajectoryAtoms,\n      newTrajectoryFrames,\n    );\n\n  // If we do not have coordinates at this point it may mean the topology and trajectory are not matching in atom number\n  if (!coordinates)\n    throw new Error(`Topology and trajectory data may not match`);\n\n  // Finally update the NGL file coordinates\n  file.frames = file.frames.concat(coordinates);\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__7Ceta\",\"light-theme\":\"style_light-theme__H4DPh\",\"loading-trajectory\":\"style_loading-trajectory__2DP4d\",\"loading-structure\":\"style_loading-structure__E1dyl\",\"tooltip\":\"style_tooltip__eJTpx\"};","import React, {\n  forwardRef,\n  memo,\n  useState,\n  useRef,\n  useImperativeHandle,\n  useCallback,\n  useMemo,\n  useEffect,\n  useContext,\n} from 'react';\n// Hook to download viewer data from the API according to the components configuration\nimport { useInView } from 'react-intersection-observer';\nimport { clamp } from 'lodash-es';\nimport cn from 'classnames';\nimport { autoLoad, Stage, Shape, ColormakerRegistry, Matrix4 } from 'ngl';\n\nimport { frame } from 'timing-functions';\n\nimport { setNGLFile, updateNGLFile } from './payload-to-ngl-file';\n\nimport { ProjectCtx } from '../../contexts';\n\nimport { setTooltipPosition } from '../../utils/tooltip-position-manager';\n\nimport { appendBuffer } from '../../utils/auxiliar-functions';\n\nimport style from './style.module.css';\n\n// Make a deep copy of an object even with cyclic references\nimport { cloneDeep } from 'lodash-es';\n\n// Used to just wait\nimport { sleep } from 'timing-functions';\n\nconst DEFAULT_ORIENTATION_TRANSITION_DURATION = 750; // 750 ms\n\nconst CHAIN_SELECTION = 'polymer and not hydrogen ';\n\nconst isValidColor = colorName => {\n  var s = new Option().style;\n  s.color = colorName;\n  return s.color === colorName;\n};\n\n// Set the number of bytes per element in trajectory data\nconst BYTES_PER_COORDINATE = 4; // float 32\nconst COORDINATES_PER_ATOM = 3; // x, y and z\nconst BYTES_PER_ATOM = BYTES_PER_COORDINATE * COORDINATES_PER_ATOM;\n\n// Set the NGL player speed limits\n// The actual 'currentSpeed' input limits are 0-100\n// The speed set as the time to wait before moving to the next frame in miliseconds\nconst minimumSpeed = 0;\nconst maximumSpeed = 100;\nconst slowestTimeout = 1000;\nconst fastestTimeout = 50;\nconst interpolateSpeed = currentSpeed => (\n  slowestTimeout + (currentSpeed - minimumSpeed) *\n  ((fastestTimeout - slowestTimeout) / (maximumSpeed - minimumSpeed))\n);\n\n// Set representation types for the different types of highlights\nconst defaultHighlightTypes = {\n  atoms: 'spacefill',\n  residues: 'ball+stick',\n  chains: 'ball+stick',\n  selections: 'ball+stick',\n};\n\nconst NGLViewer = memo(\n  forwardRef(\n    (\n      {\n        className,\n        playing,\n        spinning,\n        smooth,\n        onProgress,\n        bounce = false, // Set if the animation, when finished, starts again (false) or goes back (true)\n        selectedAtoms, // Atom index of the atom and residue to be represented\n        selectedResidueIndices, // Residue indices from residues to be highlighted\n        selectedChains, // Chain letters from chains to be represented\n        selectedCustom, // Free NGL selections to be directly represented\n        selectedDistances, // Groups of 2 atoms or residues to be represented as a distance\n        selectedAngles, // Groups of 3 atoms to be represented as an angle\n        selectedRepresentation, // String name of a representation to be painted in yellow color (only 1)\n        snapRepresentations,\n        noTrajectory, // True when only specific frames must be loaded\n        initialFocus, // The ngl selection to be focused by the camera initially\n        darkBackground,\n        perspective,\n        speed,\n        xSelection, // To display planes for density analysis\n        rotateX,   // To rotate the stage so the Z axis goes from bottom to top\n        xAxisStep,\n        // Final components and representations prepared for the viewer\n        components,\n        representations,\n        // Viewer data incluting both structure and coordinates\n        topologies,\n        trajectories,\n        anyLoadingTopology,\n        anyLoadingTrajectory,\n        // Set the highlight representations types\n        highlightTypes = defaultHighlightTypes,\n      },\n      ref,\n    ) => {\n\n      // Get project data\n      const {\n        metadata,\n        topology: topologyManager,\n      } = useContext(ProjectCtx);\n\n      // Set the curated orientation in NGL format\n      const curatedOrientation = useMemo(() => {\n        // If we do not have metadata yet then stop\n        if (!metadata) return;\n        const ori = metadata.ORIENTATION;\n        // If no curated orientation is set in metadata then stop\n        if (!ori) return;\n        // The matrix 4 resorts values in the input list\n        // In order to make it match the original focus display we must sort them before\n        const sortedOrientation = [\n          ori[0], ori[4], ori[8], ori[12],\n          ori[1], ori[5], ori[9], ori[13],\n          ori[2], ori[6], ori[10], ori[14],\n          ori[3], ori[7], ori[11], ori[15],\n        ];\n        return new Matrix4().set(...sortedOrientation);\n      }, [metadata])\n\n      // Save the main component once it is staged\n      // This components is used by several functions\n      const [mainComponent, setMainComponent] = useState(null);\n      const [mainNglFile, setMainNglFile] = useState(null);\n      // The last automatic camera focus\n      const [focus, setFocus] = useState(initialFocus);\n      // Set the initial focus\n      useEffect(() => {\n        //console.log(initialFocus);\n        setFocus(initialFocus);\n      }, [initialFocus]);\n\n      // references\n      const containerRef = useRef(null);\n      const stageRef = useRef(null);\n      const tooltipRef = useRef(null);\n      const firstTime = useRef(true);\n\n      // in-view hook\n      const [inViewRef, isInView] = useInView();\n\n      // Set the content of the tooltip in JSX format\n      const [tooltipContent, setTooltipContent] = useState(null);\n\n      // Set the NGL parsed topologies\n      const [ parsedTopologies, setParsedTopologies ] = useState([]);\n      // Store the URLs of those topologies already started to be parsed\n      // This is to avoid processing twice the same topology\n      // Note that the processing is async, so we can not rely in the parsedTopologies state\n      // A topology may be parsing and not be included in this state yet for a brief moment\n      const alreadyParsedTopologies = useRef(new Set());\n      // Update the parsed topologies every time the downloaded topologies change\n      useEffect(() => {\n        // Iterate downloaded topologies\n        topologies.forEach(topology => {\n          // If the topology still has not the data then skip it\n          if (!topology.file) return;\n          // If the topology is already among the parsed topologies then skip it\n          if (topology.url in alreadyParsedTopologies.current) return;\n          alreadyParsedTopologies.current.add(topology.url);\n          // Parse the structure to a NGL file\n          const stringBlob = new Blob( [ topology.file ], { type: 'text/plain'} );\n          autoLoad(stringBlob, { defaultRepresentation: false, ext: \"pdb\" })\n            // Once the parse has been completed update the parsed topologies state\n            .then(prasedFile => {\n              // Copy the content of the topology object\n              const newParsedTopology = { ...topology };\n              // Replace the original file by the parsed file\n              newParsedTopology.file = prasedFile;\n              // Now push it to the parsed topologies\n              setParsedTopologies(previous => [...previous, newParsedTopology]);\n            })\n            // If there is any problem then log it to the console\n            .catch(error => { console.error(error) });\n        });\n        setParsedTopologies(previousParsedTopologies => {\n          // Set a new array to trigger the render when setting the new state\n          const newParsedTopologies = [ ...previousParsedTopologies ];\n          return newParsedTopologies;\n        });\n      }, [topologies]);\n\n      // Set a state to keep track of the current working tasks in the viewer\n      // This is useful to update the upper left corner logs in the viewer\n      const [runningTasks, setRunningTasks] = useState(0);\n\n      // Update the running tasks count\n      const handleTasksChange = useCallback(\n        value => {\n          setRunningTasks(current => current + value);\n        },\n        [setRunningTasks],\n      );\n\n      // Stage creation and removal on mounting and unmounting\n      useEffect(() => {\n        // set-up\n        const stage = new Stage(containerRef.current);\n        // wait for a render to screen, then\n        frame().then(() => {\n          if (!stage) return;\n          // make sure NGL knows the size it has available\n          stage.handleResize();\n        });\n        // Set a signal function to handle the update of running tasks count\n        stage.tasks.signals.countChanged.add(handleTasksChange);\n        // Save the stage reference\n        stageRef.current = stage;\n        // clean-up\n        return () => {\n          // NOTE: following line causes to fail when loading a new viewer with\n          // NOTE: previous structure data\n          // stageRef.current.removeAllComponents();\n          stageRef.current.dispose();\n          stageRef.current = null;\n        };\n      }, []);\n\n      // Handle the upper left corner viewer logs\n      const viewerLogs = useMemo(() => {\n        if (!mainComponent) return `Loading structure`;\n        if (!trajectories.length && !noTrajectory)\n          return `No trajectory available`;\n        if (runningTasks > 0) return `Rendering...`;\n        return undefined; // Show nothing when everything was finished and fine\n      }, [\n        mainComponent,\n        trajectories,\n        noTrajectory,\n        runningTasks,\n      ]);\n\n      // background (with transition)\n      useEffect(() => {\n        const beginning = Date.now();\n        let duration = 1000;\n        if (firstTime.current) {\n          duration = 0;\n          firstTime.current = false;\n        }\n        (async () => {\n          while (true) {\n            await frame(); // async, should check if we still have the viewer\n            if (!stageRef.current) return;\n            let currentTick = Date.now() - beginning;\n            // exit condition from 'while (true)' loop\n            // if we've gone over the full time of the animation\n            if (currentTick > duration) break;\n            if (darkBackground) currentTick = duration - currentTick;\n            const color = `#${Math.round((currentTick * 0xff) / duration)\n              .toString('16')\n              .padStart(2, '0')\n              .repeat(3)}`;\n            stageRef.current.viewer.setBackground(color);\n          }\n          await frame(); // async, should check if we still have the viewer\n          if (!stageRef.current) return;\n          // make sure we're set to the final colour\n          // (in case the transition was stopped halfway through)\n          stageRef.current.viewer.setBackground(\n            darkBackground ? 'black' : 'white',\n          );\n        })();\n        // set duration to 0 to cancel possibly ongoing loop\n        return () => (duration = 0);\n      }, [darkBackground]);\n\n      // perspective\n      useEffect(() => {\n        stageRef.current &&\n          stageRef.current.viewer &&\n          stageRef.current.viewer.setCamera &&\n          stageRef.current.viewer.setCamera(\n            perspective ? 'perspective' : 'orthographic',\n          );\n      }, [perspective]);\n\n      // frames\n      // Update the controls progress\n      useEffect(() => {\n        // Check if we are prepared to add the frame change handler and if t is required\n        if (!onProgress || noTrajectory || !mainNglFile) return;\n        // Get the frame count of the final number of frames (once the whole trajectory is loaded)\n        const frameCount = mainNglFile.expectedFrames;\n        // Set the actual function to handle frame change internally in the component\n        const frameHandler = frame => {\n          //console.log('NGL frameCount: ' + frameCount);\n          const progress = clamp(frame / (frameCount - 1), 0, 1);\n          onProgress(progress);\n        };\n        // Add the frame handler to the component signals\n        mainNglFile.signals.frameChanged.add(frameHandler);\n        // Set a cleanup function to remove the frame handler when there is need\n        return () => {\n          mainNglFile.signals.frameChanged.remove(frameHandler);\n        };\n      }, [mainNglFile, noTrajectory, onProgress]);\n\n      // Resize logic\n      // declare handler\n      const handleResize = useCallback(async () => {\n        if (!stageRef.current) return;\n        const canvas = containerRef.current.querySelector('canvas');\n        if (canvas) {\n          canvas.style.height = '';\n          canvas.style.cursor = 'default';\n        }\n        // WARNING: This sleep here is to fix a bug\n        // When we open/close settings we trigger this function but it takes the size of the window before changing\n        // The sleep fixes this problem altought the delay is 0\n        await sleep(0);\n        stageRef.current.handleResize();\n      }, []);\n      // connect the handle to events\n      useEffect(() => {\n        window.addEventListener('resize', handleResize);\n        return () => {\n          window.removeEventListener('resize', handleResize);\n        };\n      }, [handleResize]);\n\n      // PDB file, base structure\n      // Set the representations in each component\n      useEffect(() => {\n        if (!components || !representations || !topologyManager) return;\n\n        components.forEach((comp, c) => {\n          // Set the NGL component\n          let stageComp = stageRef.current.compList.find(stc => stc.myName == comp.name);\n          if (!stageComp) {\n            // Find the topology which matches the component url\n            // If a component has no url it will match a topology with no url: the default topology\n            const url = comp.topologyURL || null;\n            const topology = parsedTopologies.find(topology => topology.url === url);\n            // If the topology has not been loaded yet then we have a problem\n            // DANI: Todas las topologías deben estar ya listas antes de cargarlas, lee los mensajes de arriba\n            if (!topology) return;\n            // Stop here if it is not downloaded yet\n            if (topology.error)\n              throw new Error(`Topology from '${url}' returned error ${topology.error}`);\n            if (!topology.file)\n              throw new Error(`Topology data from '${url}' is missing`);\n            // Atom occupancy is a field which is not used anywhere but in the electrostatic representation\n            // The electrostatic surface scheme color does not work if the occupancy is 0 (ngl code, not ours)\n            // We set all occupancies to 1, since some topologies may have all occupancies as 0 by default\n            topology.file.atomStore.occupancy = new Array(\n              topology.file.atomStore.occupancy.length,\n            ).fill(1);\n            // Set atom bonds according to our topology\n            const safeBonds = topologyManager.atomBonds;\n            if (safeBonds) {\n              const bondStore = topology.file.bondStore;\n              // Remove default bonds\n              bondStore.length = 0;\n              bondStore.count = 0;\n              bondStore.atomIndex1 = new Int32Array;\n              bondStore.atomIndex2 = new Int32Array;\n              bondStore.bondOrder = new Int32Array;\n              // Add every bond in the topology\n              safeBonds.forEach((bondedAtomsIndices, atomIndex) => {\n                const atom1 = topology.file.getAtomProxy(atomIndex);\n                bondedAtomsIndices.forEach(bondedAtomIndex => {\n                  const atom2 = topology.file.getAtomProxy(bondedAtomIndex);\n                  // The '1' stands for the bond order (idk what this is)\n                  bondStore.addBond(atom1, atom2, 1);\n                });\n              });\n            }\n            // Add the topology to the NGL\n            // Make a deep copy of the topology object to prevent NGL internal bugs\n            // This object will store data which is component exclusive\n            const componentObject = cloneDeep(topology.file);\n            //const componentObject = topology.file;\n            stageComp = stageRef.current.addComponentFromObject(componentObject);\n            stageComp.myName = comp.name;\n            if (!stageComp) return;\n            stageComp.onlyTopology = comp.onlyTopology;\n            setMainComponent(stageComp);\n          }\n\n          // Get current component representations\n          const componentRepresentations = representations.filter(rep => rep.component === comp.name);\n\n          // Set each representation\n          // Delete previous representations which are not requested anymore\n          const registredNames = [];\n          componentRepresentations.forEach((rep, r) => {\n            // The name here is used to indetify previous existing representations\n            const name = r + '-' + rep.name;\n            registredNames.push(name);\n\n            // Adapt a few representation values to the context\n            const show = rep.show\n            const sele = rep.selection;\n            const type = rep.type;\n            const color = rep.color;\n            const opacity = show ? rep.opacity : 0;\n\n            const customColorScheme = rep.customScheme;\n\n            // If the representation is selected then the color is yellow\n            const colorScheme = rep.name === selectedRepresentation\n              ? ColormakerRegistry.addSelectionScheme(\n                  [['yellow', 'all']],\n                  'custom label',\n                )\n              // If the colorScheme is in the passed custom schemes use it\n              : customColorScheme && color === 'custom'\n                ? customColorScheme\n                // If the colorScheme is a defined color, create a custom colorScheme for this color\n                : isValidColor(color)\n                  ? ColormakerRegistry.addSelectionScheme(\n                      [[color, 'all']],\n                      'custom label',\n                    )\n                  // Otherwise let the color scheme as it is\n                  : color;\n\n            // Set some additional parameters which are to be modified depending on the type\n            const colorDomain = type === 'surface' ? [-200, 200] : undefined;\n            const surfaceType = type === 'surface' ? 'av' : undefined;\n            //const background = type === 'surface' && opacity < 1 ? true : false;\n            const depthWrite = type === 'surface' && opacity < 1 ? false : true;\n\n            // Join all parameters into a single input object\n            const parameters = {\n              sele,\n              name,\n              opacity,\n              colorScheme,\n              colorDomain,\n              surfaceType,\n              side: 'front',\n              //background,\n              depthWrite,\n              //opaqueBack: true,\n              //forceTransparent: true,\n              ...rep.other,\n            };\n\n            // Find the previous representation\n            const previousRepresentation = stageComp.reprList.find(\n              previous => previous.name === name,\n            );\n\n            // Update the previous representation if exists\n            if (previousRepresentation) {\n              const previousType = previousRepresentation.repr.type;\n              const previousSelection =\n                previousRepresentation.repr.selection.string;\n              // If the 'drawingMethod' has been changed we have to remake the whole representation\n              // WARNING: Representations with 'trace' type must be remade always\n              // WARNING: Reseting their parameters returns a fatal error. It is an internal NGL bug.\n              if (\n                previousType !== type ||\n                previousSelection !== sele ||\n                previousType === 'trace'\n              ) {\n                stageComp.removeRepresentation(previousRepresentation);\n                stageComp.addRepresentation(type, parameters);\n              }\n              // Otherwise it is faster just to update the parameters\n              else {\n                previousRepresentation.setParameters(parameters);\n              }\n            }\n            // If there is no previous representation then set a new one\n            else {\n              stageComp.addRepresentation(type, parameters);\n            }\n\n            // Add a floating label over the representation when it is specified\n            const label = rep.label;\n            if (label) {\n              const labelName = rep.label + '-' + name;\n              // Find the equivalent previous label\n              const previous = stageComp.annotationList.find(\n                annotation => annotation.name === labelName,\n              );\n              //console.log(previous);\n              // If the representation is shown\n              if (show) {\n                // If there is a previous representation then just update the label\n                // The rest should be always the same\n                if (previous) {\n                  previous.element.label = rep.label;\n                }\n                // If there is not previous label then set it\n                else {\n                  var elm = document.createElement('div');\n                  elm.innerText = rep.label;\n                  elm.style.color = '#76FF03';\n                  elm.style.backgroundColor = '#607D8B';\n                  elm.style.padding = '8px';\n                  // get the geometrical center of the representation\n                  const center = stageComp.reprList[r].repr.structureView.center;\n                  const annotation = stageComp.addAnnotation(center, elm);\n                  annotation.name = labelName;\n                }\n              }\n              // If the representation is hidden\n              else {\n                // If there is a previous representation then remove it\n                if (previous) {\n                  stageComp.removeAnnotation(previous);\n                }\n              }\n            }\n\n            // Set this representation as the focus if it is selected\n            if (rep.name === selectedRepresentation) {\n              setFocus({ comp: c, sele: rep.selection });\n              //focused = true;\n            }\n          });\n\n          // Delete all representations which are not required anymore\n          // WARNING: It is very important to save apart the stageComp.reprList\n          // WARNING: Do not iterate over stageComp.reprList while removing representations\n          // WARNING: If so, representations would jump of index in the list\n          const previousRepresentations = [...stageComp.reprList];\n          previousRepresentations.forEach(rep => {\n            const name = rep.name;\n            // Representations with name starting with '*' are never removed by this way\n            // Those representations are automatic highlights\n            if (name.charAt(0) === '*') return;\n            for (const registredName of registredNames) {\n              if (name === registredName) return;\n            }\n            // If the name is not in the list the representation must be removed\n            stageComp.removeRepresentation(rep);\n          });\n\n          // If nothing has been focused at the end then focus the whole first component\n          setFocus(previous => {\n            if (previous) return previous; // This will not trigger any rerender\n            return { comp: 0, sele: 'all' };\n          });\n        });\n      }, [\n        components,\n        representations,\n        parsedTopologies,\n        selectedRepresentation,\n        setMainComponent,\n        topologyManager,\n      ]);\n\n      // Highlight specific atoms\n      useEffect(() => {\n        if (!topologyManager) return;\n        // DANI: He tenido que quitar la condicion de 'instanceof Set' porque sino no me entraba en el heatmap\n        //if (!(selectedAtoms instanceof Set) || !selectedAtoms) {\n        if (!mainComponent || !selectedAtoms) return;\n\n        // Set a representation name\n        // This is useful to find previous representations in further renders\n        const nameHighlight = '*highlightedAtoms';\n        const previousHighlightRepresentation = mainComponent.reprList.find(\n          representation => representation.name === nameHighlight,\n        );\n        if (previousHighlightRepresentation) {\n          mainComponent.removeRepresentation(\n            previousHighlightRepresentation,\n          );\n        }\n\n        // Name for residues representation\n        const nameContextHighlight = '*highlightedAtomResidues';\n        const previousContextRepresentation = mainComponent.reprList.find(\n          representation => representation.name === nameContextHighlight,\n        );\n        if (previousContextRepresentation) {\n          mainComponent.removeRepresentation(\n            previousContextRepresentation,\n          );\n        }\n\n        const atoms = Array.from(selectedAtoms);\n        if (!atoms.length) return;\n\n        // ngl starts counting at 0\n        const seleHighlight = `@${atoms.map(atomIndex => atomIndex).join(',')}`;\n\n        mainComponent.addRepresentation(highlightTypes.atoms, {\n          sele: seleHighlight,\n          opacity: 0.5,\n          scale: 1.5,\n          name: nameHighlight,\n        });\n\n        const otherResidueAtomsSelection = Array.from(\n          new Set(\n            // 'atoms' are in abolsute numeration\n            atoms.map(atomIndex => {\n              const atom = topologyManager.getAtomByIndex(atomIndex);\n              const atomIndices = atom.residue.atomIndices;\n              const nglAtomSelection = '@' + atomIndices.join(',');\n              return nglAtomSelection;\n            }),\n          ),\n        ).join(' or ');\n\n        mainComponent.addRepresentation(\n          highlightTypes.residues,\n          {\n            sele: otherResidueAtomsSelection,\n            name: nameContextHighlight,\n          },\n        );\n\n        // Focus the highlighted zone with the camera\n        setFocus({ comp: 0, sele: otherResidueAtomsSelection });\n      }, [\n        mainComponent,\n        topologyManager,\n        selectedAtoms,\n        darkBackground,\n        highlightTypes,\n      ]);\n\n      // Highlight specific residues\n      useEffect(() => {\n        if (!topologyManager || !mainComponent || !selectedResidueIndices) return;\n        // Set a representation name. This is useful to find this representation further\n        const nameHighlight = '*highlightedResidues';\n        const previousHighlightRepresentation = mainComponent.reprList.find(\n          representation => representation.name === nameHighlight,\n        );\n        if (previousHighlightRepresentation)\n        mainComponent.removeRepresentation(\n            previousHighlightRepresentation,\n          );\n        // If there are no selected residues at all we stop here\n        if (selectedResidueIndices.length === 0) return;\n        // Get the residues input\n        const residueNglSelections = selectedResidueIndices.map(\n          residueIndex =>\n            topologyManager.getResidueByIndex(residueIndex).nglSelection,\n        );\n        // Transform the residues list into an NGL selection\n        const overallNglSelection = Array.from(\n          new Set(residueNglSelections),\n        ).join(' or ');\n        // Represent the previous selection in ball+sticks drawing method\n        mainComponent.addRepresentation(\n          highlightTypes.residues,\n          {\n            sele: overallNglSelection,\n            name: nameHighlight,\n          },\n        );\n\n        // Focus the highlighted zone with the camera\n        setFocus({ comp: 0, sele: overallNglSelection });\n      }, [\n        mainComponent,\n        selectedResidueIndices,\n        topologyManager,\n        highlightTypes,\n      ]);\n\n      // Highlight specific chains\n      // DANI: NO Probado\n      useEffect(() => {\n        if (!mainComponent || !selectedChains) return;\n        // Set a representation name. This is useful to find this representation further\n        const nameHighlight = '*highlightedChains';\n        const previousHighlightRepresentation = mainComponent.reprList.find(\n          representation => representation.name === nameHighlight,\n        );\n        if (previousHighlightRepresentation)\n        mainComponent.removeRepresentation(\n            previousHighlightRepresentation,\n          );\n\n        // Get the residues input\n        const chains = selectedChains.map(c => ':' + c);\n        if (!chains.length) return;\n        // Transform the residues list into an NGL selection\n        const nglSelection = Array.from(new Set(chains)).join(' or ');\n\n        // Represent the previous selection in ball+sticks drawing method\n        mainComponent.addRepresentation(highlightTypes.chains, {\n          sele: nglSelection,\n          name: nameHighlight,\n        });\n        // Focus the highlighted zone with the camera\n        setFocus({ comp: 0, sele: nglSelection });\n      }, [mainComponent, selectedChains, highlightTypes]);\n\n      // Highlight specific free NGL selections\n      useEffect(() => {\n        if (!mainComponent || !snapRepresentations) return;\n        const currentRepresentations = mainComponent.reprList;\n        snapRepresentations.forEach(snapRepresentation => {\n          mainComponent.addRepresentation(snapRepresentation.type, {\n            sele: snapRepresentation.selection,\n            name: snapRepresentation.name,\n            color: snapRepresentation.color,\n            opacity: snapRepresentation.opacity,\n          });\n        });\n        return () => {\n          snapRepresentations.forEach(snapRepresentation => {\n            // Find if the current snap representation already exists by its name\n            const previousSnapRepresentation = currentRepresentations.find(\n              currentRepresentation =>\n                currentRepresentation.name === snapRepresentation.name,\n            );\n            // If so, remove it\n            if (previousSnapRepresentation)\n            mainComponent.removeRepresentation(previousSnapRepresentation);\n          });\n        };\n      }, [mainComponent, snapRepresentations]);\n\n      // Add specific NGL representations which are added or removed apart from the main component\n      // They are faster to update but they are not shown in the representations manager\n      useEffect(() => {\n        if (!mainComponent || !selectedCustom) return;\n        // Set a representation name. This is useful to find this representation further\n        const nameHighlight = '*highlightedCustom';\n        const previousHighlightRepresentation = mainComponent.reprList.find(\n          representation => representation.name === nameHighlight,\n        );\n        if (previousHighlightRepresentation)\n        mainComponent.removeRepresentation(\n            previousHighlightRepresentation,\n          );\n\n        if (!selectedCustom.length) return;\n        // Transform the residues list into an NGL selection\n        const nglSelection = Array.from(new Set(selectedCustom)).join(' or ');\n\n        // Represent the previous selection in ball+sticks drawing method\n        mainComponent.addRepresentation(\n          highlightTypes.selections,\n          {\n            sele: nglSelection,\n            name: nameHighlight,\n          },\n        );\n        // Focus the highlighted zone with the camera\n        setFocus({ comp: 0, sele: nglSelection });\n      }, [mainComponent, selectedCustom, highlightTypes]);\n\n      // Highlight specific distances\n      // When 'selectedDistances' is numeric it is taken as atoms\n      // When 'selectedDistances' is string it is taken as residues\n      // In both cases it works with residue indices\n      useEffect(() => {\n        if (!mainComponent || !selectedDistances) return;\n        // Set a representation name. This is useful to find this representation further\n        const name = '*distance';\n        const previousRepresentation = mainComponent.reprList.find(\n          representation => representation.name === name,\n        );\n        // Remove the previous representation\n        if (previousRepresentation)\n        mainComponent.removeRepresentation(\n            previousRepresentation,\n          );\n\n        // Display the new distance representation\n        mainComponent.addRepresentation('distance', {\n          atomPair: selectedDistances,\n          color: 'skyblue',\n          labelUnit: 'angstrom',\n          name: name,\n          // Label color is the opposite of the background color\n          labelColor: darkBackground ? 16777215 : 1, // 16777215 is white, 1 is black\n        });\n      }, [mainComponent, selectedDistances, darkBackground]);\n      \n      // Display a plane\n      useEffect(() => {\n        if (!mainComponent || !xSelection) return;\n        // Set a representation name. This is useful to find this representation further\n        const name = '*density';\n        const previousComponent= stageRef.current.compList.find(\n          component => component  .name === name,\n        );\n        // Remove the previous representation\n        if (previousComponent)\n          stageRef.current.removeComponent(\n            previousComponent,\n          );\n        else {\n          stageRef.current.viewer.rotationGroup.rotateY(-1.6);\n        };\n        var shape = new Shape(\"shape\", {radialSegments: 10 });\n        const boxCenter = mainComponent.object.center;\n        const bBox = mainComponent.object.boundingBox;\n        shape.addBox(\n          [boxCenter.x, boxCenter.y, xSelection*xAxisStep - xAxisStep/2], \n          [0, 0, 0], \n          bBox.max.x - bBox.min.x, \n          [0, bBox.max.y - bBox.min.y, 0], \n          [0, 0, 0.01]\n        );\n        shape.addBox(\n          [boxCenter.x, boxCenter.y, xSelection*xAxisStep + xAxisStep/2], \n          [0, 0, 0], \n          bBox.max.x - bBox.min.x, \n          [0, bBox.max.y - bBox.min.y, 0], \n          [0, 0, -0.01]\n        );\n        var shapeComp = stageRef.current.addComponentFromObject(shape, {name: name});\n        var rep = shapeComp.addRepresentation(\"buffer\", {opacity: 0.1 , roughness: 1});\n        // console.log(stageRef.current.viewer.rotationGroup.rotation);\n      }, [mainComponent, xSelection]);\n      \n      // Rotate the stage\n      useEffect(() => {\n        if (!mainComponent || !rotateX) return;\n        stageRef.current.viewer.rotationGroup.rotateX(-1.57);\n      }, [mainComponent, rotateX]);\n\n      // Highlight specific angles\n      useEffect(() => {\n        if (!mainComponent || !selectedAngles) return;\n        // Set a representation name. This is useful to find this representation further\n        const name = '*angles';\n        const previousRepresentation = mainComponent.reprList.find(\n          representation => representation.name === name,\n        );\n        if (previousRepresentation)\n        mainComponent.removeRepresentation(\n            previousRepresentation,\n          );\n\n        mainComponent.addRepresentation('angle', {\n          atomTriple: selectedAngles,\n          name: name,\n          labelColor: darkBackground ? 16777215 : 1, // 16777215 is white, 1 is black\n        });\n      }, [mainComponent, selectedAngles, darkBackground]);\n\n      // DCD file, trajectory\n      // Once the trajectories are downloaded, load them in corresponding NGL representations\n      // Every time the trajectory payloads change this useEffect must be rerun\n      useEffect(() => {\n        // Check if trajectories are\n        if (parsedTopologies.length === 0 || trajectories.length === 0 || !components) return;\n        components.forEach((comp, c) => {\n          // Find the topology which matches the component url\n          // If a component has no url it will match a topology with no url: the default topology\n          const topologyURL = comp.topologyURL || null;\n          const topology = parsedTopologies.find(topology => topology.url === topologyURL);\n          if (!topology) return;\n\n          // DANI: Aquí me he quedado\n          // DANI: Con la linea de arriba funciona (a veces) con la de abajo no funciona cuando yo pensaba que funcionaría\n          // DANI: Si sigues tirando del hilo se puede hacer que las topologías vayan cargando a medida que llegan\n          // DANI: y no todas de golpe al final\n          //const stageComp = stageRef.current.compList[c];\n          const stageComp = stageRef.current.compList.find(stc => stc.myName == comp.name);\n\n          // Wait if the topology has not been loaded yet\n          if (!stageComp) return;\n          // Abort if the component is marked as 'only topology'\n          if (comp.onlyTopology) return;\n          // Find the trajectory payload from the component urls and join them\n          const trajectoryPayloads = [];\n          // Save the combined urls of all trajectories and their lengths\n          // This is used in further renders to know if current trajectory is new or the same\n          let combinedURL = '';\n          let combinedProgress = '';\n          // Record also the atoms for each trajectory and check that they match\n          let trajectoryAtoms;\n          let trajectoryFinalExpectedFrames = 0;\n          // Record also the frames for each trajectory and add them\n          for (const framedURL of comp.framedURLs) {\n            const trajectory = trajectories.find(trajectory => trajectory.url === framedURL);\n            // If the trajectory is not downloaded yet then exit\n            if (!trajectory) return;\n            // Get atom counts from different trajectories and check they match\n            if (!trajectoryAtoms) trajectoryAtoms = trajectory.atoms;\n            if (trajectoryAtoms !== trajectory.atoms)\n              throw new Error( `Atoms number in the different trajectories do not match`);\n            // Add the final expected frames for all frames in the component\n            trajectoryFinalExpectedFrames += trajectory.frames;\n            // Add the main data to the array of payloads\n            // Substract data from not completed frames\n            const payload = trajectory.payload;\n            const bytesPerFrame = trajectoryAtoms * BYTES_PER_ATOM;\n            const fitLength = Math.floor(payload.byteLength / bytesPerFrame) * bytesPerFrame;\n            const fitPayload = payload.slice(0, fitLength);\n            trajectoryPayloads.push(fitPayload);\n            combinedURL += framedURL;\n            combinedProgress += '/' + trajectory.progress;\n          }\n\n          // Check if we are loading the same trajectory than before\n          const sameTrajectory = stageComp.combinedURL === combinedURL;\n\n          // If we are loading a different trajectory then remove all possibly already existing trajectories\n          // This return an error in console: \"updateStructure: traj disposed\"\n          // This may be a bug but it is actually working\n          // See https://github.com/arose/ngl/issues/680\n          if (!sameTrajectory)\n            stageComp.trajList.forEach(\n              stageComp.removeTrajectory.bind(stageComp),\n            );\n\n          // If both URL and progress are matching then exit here\n          if (sameTrajectory && stageComp.combinedProgress === combinedProgress)\n            return;\n\n          // Save current URL in the staged component\n          stageComp.combinedURL = combinedURL;\n          stageComp.combinedProgress = combinedProgress;\n\n          // Join all payloads into a single trajectory\n          let totalPayload;\n          if (trajectoryPayloads.length === 0) return;\n          else if (trajectoryPayloads.length === 1)\n            totalPayload = trajectoryPayloads[0];\n          // DANI: Esto no está bien ahora que hay streaming\n          // DANI: Si hubiese dos trayectorias combinadas sus frames quedarían entrelazadas\n          // DANI: Pero las trayectorias combinadas no se usan, así que no me merece la pena mantenerlo\n          else\n            totalPayload = trajectoryPayloads.reduce((cb, nb) =>\n              appendBuffer(cb, nb),\n            );\n          // If the total payload is empty then stop here\n          if (totalPayload.byteLength === 0) return;\n          // Calculate how many frames are there in total\n          const bytesPerFrame = trajectoryAtoms * BYTES_PER_ATOM;\n          const totalFrames = totalPayload.byteLength / bytesPerFrame;\n          const lastFrameIndex = totalFrames - 1;\n          // Check if all required data is already downloaded\n          const completedTrajectory =\n            totalFrames === trajectoryFinalExpectedFrames;\n\n          // Get the atom indices whom the trajectory coordinates belong to, in case it is passed\n          const trajectoryAtomIndices = comp.trajectoryAtomIndices;\n\n          // Get the current NGL loaded trajectories\n          const compTrajectories = stageComp.trajList;\n\n          // If there is a trajectory already update it with new data\n          if (compTrajectories.length > 0) {\n            // There must be only one trajectory\n            if (compTrajectories.length > 1)\n              throw new Error(`Multiple trajectories in one component`);\n            const nglFile = compTrajectories[0];\n            const nglTrajectory = nglFile.trajectory;\n            updateNGLFile(\n              nglTrajectory,\n              topology.file,\n              totalPayload,\n              trajectoryAtoms,\n              totalFrames,\n              trajectoryAtomIndices,\n            );\n            // Adjust some parameters after the trajectory data has been changed\n            nglTrajectory._frameCount = totalFrames;\n            if (c === 0) {\n              // Save the expected frames number here in the NGL file\n              // This is further use by the frame change handler\n              nglFile.expectedFrames = trajectoryFinalExpectedFrames;\n              const nglPlayer = nglTrajectory.player;\n              // Set animation player parameters\n              const timeout = interpolateSpeed(speed);\n              nglPlayer.setParameters({\n                end: lastFrameIndex,\n                interpolateStep: 100 / trajectoryFinalExpectedFrames, // This must be set every time\n                mode: completedTrajectory ? 'loop' : 'once',\n                timeout: timeout,\n              });\n              // If the trajectory was paused because it had no more frames to load then resume it\n              if (!noTrajectory && playing && !nglPlayer.isRunning) {\n                const currentFrame = nglTrajectory._currentFrame;\n                const endingFrame = lastFrameIndex;\n                if (currentFrame < endingFrame) nglPlayer.play();\n              }\n            }\n          }\n          // If there is not trajectory yet then create a new NGL trajectory\n          else {\n            // Transform the binary trajectory data to an NGL friendly format\n            const file = setNGLFile(\n              topology.file,\n              totalPayload,\n              trajectoryAtoms,\n              totalFrames,\n              trajectoryAtomIndices,\n            );\n            if (!file) return;\n            const nglFile = stageComp.addTrajectory(file);\n            const nglTrajectory = nglFile.trajectory;\n            // Add the frame change handler only if it is the main component\n            if (c === 0) {\n              // Save the expected frames number here in the NGL file\n              // This is further use by the frame change handler\n              nglFile.expectedFrames = trajectoryFinalExpectedFrames;\n              // Set animation player parameters\n              const timeout = interpolateSpeed(speed);\n              nglTrajectory.player.setParameters({\n                interpolateStep: 100 / trajectoryFinalExpectedFrames,\n                mode: completedTrajectory ? 'loop' : 'once',\n                timeout: timeout,\n              });\n              // Update the main NGL file\n              setMainNglFile(nglFile);\n            }\n            // Set trajectory frame\n            nglTrajectory.setFrame(0);\n          }\n        });\n      }, [\n        parsedTopologies,\n        trajectories,\n        components,\n        noTrajectory,\n        setMainNglFile,\n        // This playing here is just to avoid the warning\n        // I can't disable the warning with \"// eslint-disable-line react-hooks/exhaustive-deps\"\n        // This is because the automatic formatter puts the warning one line down because it is stupid\n        // Anyway the warning is also stupid, because using the playing as dependency is counterproductive\n        // To sum up: when eslint gets smarter and stops complaining you can remove playing from dependencies\n        playing,\n        // It is the same with the speed that with the playing\n        speed,\n      ]);\n\n      // Add a signaled handler to the main NGl file, which contains the mian trajectory\n      useEffect(() => {\n        // Set a function to make the trajectory never stop at any interpolation step\n        // If it is stopped in the middle of an interpolation then jump to the next frame\n        if (!mainNglFile) return;\n        const nglTrajectory = mainNglFile.trajectory;\n        const goToNextFrame = () => {\n          const currentFrame = nglTrajectory._currentFrame;\n          nglTrajectory.setFrame(currentFrame);\n        };\n        nglTrajectory.player.signals.haltedRunning.add(goToNextFrame);\n        // Removing NGL without removing signals from the trajectory player is fatal\n        // This raises the error \"Uncaught TypeError: this._bindings is undefined\"\n        // Set a cleanup function to prevent fatal errors\n        return () => {\n          nglTrajectory.player.signals.haltedRunning.remove(goToNextFrame);\n        }\n      }, [mainNglFile]);\n\n      // play/pause\n      useEffect(() => {\n        if (!mainNglFile) return;\n        const { player } = mainNglFile.trajectory;\n        player.setParameters({\n          // Set the interpolate step according to the total number of frames to show 1 by 1\n          interpolateStep: 100 / mainNglFile.trajectory.frameCount,\n          // Set the animation to go forward and then backward instead of restart if required\n          direction: bounce ? 'bounce' : 'forward',\n        });\n        // WARNING: Pausing the player when there is no trajectory may seem redundant\n        // However, if not paused, the surface representations never stop to be calculated\n        if (noTrajectory) player.pause();\n        else player[playing && isInView ? 'play' : 'pause']();\n        // Remvoing NGL while the animation is playing is fatal\n        // This raises the error \"Uncaught TypeError: this._bindings is undefined\"\n        // Set a cleanup function to prevent fatal errors\n        return () => player.pause();\n      }, [\n        mainNglFile,\n        playing,\n        isInView,\n        noTrajectory,\n        bounce,\n      ]);\n\n      // Handle the speed\n      // The speed is also self-regulated by NGL\n      // If the topology is too big to reach the required speed it will work as fast as possible\n      useEffect(() => {\n        // Get the current trajectory\n        if (!mainComponent) return;\n        const nglFile = mainComponent.trajList[0];\n        if (!nglFile) return;\n        // Set the player speed\n        // The 'speed' input ranges from 0 to 100\n        // The NGL 'timeout' parameter stands from the time to wait before moving to the next frame in miliseconds\n        //const timeout = 500 / (Math.log2(speed + 1) + 1);\n        const timeout = interpolateSpeed(speed);\n        nglFile.trajectory.player.setParameters({ timeout: timeout });\n      }, [mainComponent, speed]);\n\n      // spinning\n      useEffect(() => {\n        if (\n          stageRef.current &&\n          stageRef.current.spinAnimation &&\n          spinning === stageRef.current.spinAnimation.paused\n        ) {\n          stageRef.current.toggleSpin();\n        }\n      }, [spinning]);\n\n      // smoothing, player interpolation\n      useEffect(() => {\n        if (!mainNglFile) return;\n        mainNglFile.trajectory.player.parameters.interpolateType = smooth ? 'linear' : '';\n      }, [mainNglFile, smooth]);\n\n      // to avoid sometimes when it's not rendering after loading\n      useEffect(() => {\n        if (!(mainComponent && trajectories.length)) return;\n        handleResize();\n        return handleResize.cancel;\n      }, [mainComponent, trajectories, handleResize]);\n\n      // Highlight the selected chain region\n      // This useEffect seems to be special:\n      // It is run just once but some parts inside keep running on change events\n      // listen to change event from nightingale component\n      useEffect(() => {\n        if (!mainComponent || !topologyManager) return;\n        const handler = ({ detail }) => {\n          // escape case for event listener\n          if (!detail || !(detail.eventtype === 'click' || detail.eventtype === 'reset')) return;\n          let highlight = '';\n          for (const manager of document.querySelectorAll('protvista-manager')) {\n            // get highlight value for each manager\n            const thisHiglight = manager.attributeValues.get('highlight');\n            // Get the chain letter to know which chain has been selected\n            const chain = manager.attributes.chain.value;\n            // if none, escape\n            if (!thisHiglight) continue;\n            // Start and end values are in model numeration\n            // DANI: This is totally by chance. I didn't program this previous part\n            const [start, end] = thisHiglight.split(':');\n            const sourceStart = topologyManager.getResidueByParameters(chain, +start);\n            const sourceEnd = topologyManager.getResidueByParameters(chain, +end);\n            if (sourceStart.chainName !== sourceEnd.chainName)\n              throw new Error(`Range from multiple chains is not supported`);\n            highlight += ` or :${sourceStart.chainName} and ${sourceStart.number}-${sourceEnd.number}`;\n          }\n          highlight = highlight.substr(4); // remove initial ' or '\n\n          const previousStructureRepresentation = mainComponent &&\n          mainComponent.reprList.find(\n              representation => representation.name === 'structure',\n            );\n          if (previousStructureRepresentation)\n          mainComponent.removeRepresentation(previousStructureRepresentation);\n          // no highlight, then default coloring\n          if (!highlight) {\n            mainComponent.addRepresentation('cartoon', {\n              sele: CHAIN_SELECTION,\n              name: 'structure',\n              opacity: 1,\n            });\n            if (curatedOrientation) {\n              stageRef.current.animationControls.orient(\n                curatedOrientation,\n                DEFAULT_ORIENTATION_TRANSITION_DURATION,\n              );\n            }\n            return;\n          }\n\n          // otherwise, highlight accordingly\n          const colorSchemeID = ColormakerRegistry.addSelectionScheme(\n            [['yellow', highlight], ['white', '*']],\n            'custom label',\n          );\n          mainComponent.addRepresentation('cartoon', {\n            sele: CHAIN_SELECTION,\n            name: 'structure',\n            opacity: 1,\n            color: colorSchemeID,\n          });\n          mainComponent.autoView(\n            highlight,\n            DEFAULT_ORIENTATION_TRANSITION_DURATION,\n          );\n        };\n        window.addEventListener('change', handler);\n        return () => window.removeEventListener('change', handler);\n      }, [mainComponent, topologyManager, curatedOrientation]);\n\n      // Customize the NGL tooltip\n      useEffect(() => {\n        if (!topologyManager) return;\n        // Set a new tooltip\n        const tooltip = tooltipRef.current;\n        // WARNING: The following line is dangerous since you are manipulating the DOM outside of React\n        // If the tooltip component is not child of the viewer and you change to molstar then you have the following error:\n        // Node.removeChild: The node to be removed is not a child of this node\n        containerRef.current.appendChild(tooltip);\n\n        // Remove the original tooltip\n        stageRef.current.mouseControls.remove('hoverPick');\n\n        // Set a function which is used further to write a formatted output message to refer an atom\n        const formatOutput = atom => {\n          // a.residueIndex starts at 0\n          // WARNING: a.residueIndex is correct but we must convert it to source first\n          // In some cases 1 residue can have multiple residue indices\n          // (e.g. hydrogens at the end)\n          const residue = topologyManager.getResidueByIndex(atom.residueIndex);\n          const chainName = residue.chain.metadataChainName;\n          // Get the residue reference id\n          const referenceId = residue.referenceId;\n          return (\n            <>\n              {`Atom ${atom.index} (${atom.atomname})\n                Chain ${residue.chainName} ${chainName ? '(' + chainName + ')' : ''}\n                Residue ${residue.number} (${atom.resname})`}\n              {(() => {\n                // If there is not reference at all it means it is not even a protein\n                if (!referenceId) return;\n                // No referable flag is for proteins which are not to be referenced\n                // e.g. antibodies, synthetic constructs, etc.\n                if (referenceId === 'noref') return (\n                  <div style={{ color: 'orange' }}>{'No referable'}</div>\n                );\n                // The not found flag is for proteins which failed to be aligned in a blast\n                if (referenceId === 'notfound') return (\n                  <div style={{ color: 'salmon' }}>{'Reference not found'}</div>\n                );\n                // Show the reference and its residue references number\n                return (\n                  <div>\n                    <div style={{ color: 'lightGreen' }}>{residue.referenceName}</div>\n                    {residue.referenceType === 'protein' && <div>{`- Residue ${residue.referenceNumber}`}</div>}\n                  </div>\n                )\n              })()}\n            </>\n          );\n        };\n\n        // Save a timeout before displaying the tooltip\n        // This way we can kill the display in case the mouse is out before the timeout is over\n        let timeout;\n\n        // Set a function that both prevents the tooltip if it is about to appear and hides it is already displayed\n        const hideTooltip = () => {\n          clearTimeout(timeout);\n          tooltip.style.display = 'none';\n        };\n\n        // Show our tooltip with the corresponding values when the mouse hovers an atom/bond\n        stageRef.current.signals.hovered.add(function(pickingProxy) {\n          // When mouse is over something (i.e. bonds or atoms)\n          if (pickingProxy) {\n            // Set a timeout for the hover to do not be instantaneous\n            hideTooltip();\n            timeout = setTimeout(() => {\n              // handle tooltip text\n              let description;\n              const bond = pickingProxy.bond;\n              const atom = pickingProxy.atom;\n              // When we hover a bond\n              if (bond) {\n                const atom1 = bond.atom1;\n                const atom2 = bond.atom2;\n                description = (\n                  <>\n                    <div>{`Bond ${atom1.index} - ${atom2.index}`}</div>\n                    <hr style={{ color: 'lightGrey' }} />\n                    {formatOutput(atom1)}\n                    <hr style={{ color: 'lightGrey' }} />\n                    {formatOutput(atom2)}\n                  </>\n                );\n              }\n              // When we hover an atom\n              else if (atom) {\n                description = formatOutput(atom);\n              }\n              setTooltipContent(description);\n              // Handle tooltip position\n              // WARNING: It is important to make the display block before calculating the position\n              // This is because the position is calculated from the tooltip size, which would be 0 otherwise\n              tooltip.style.display = 'block';\n              const { x, y } = setTooltipPosition(\n                containerRef.current,\n                tooltip,\n                pickingProxy.mouse.position,\n                3,\n              );\n              tooltip.style.top = y + 'px';\n              tooltip.style.left = x + 'px';\n            }, 400); // Wait 0,4 secs before showing the tooltip\n          }\n          // When mouse is over nothing\n          else {\n            hideTooltip();\n          }\n        });\n\n        // Remove the tooltip when the mouse is out of the NGL viewer container\n        containerRef.current.addEventListener('mouseleave', hideTooltip, false);\n\n        // Cleaning function\n        return () => {\n          tooltip.remove();\n          containerRef.current.removeEventListener('mouseleave', hideTooltip);\n        };\n      }, [topologyManager, setTooltipContent]);\n\n      // Track when the first focus has been performed, since first focus is instantaneous\n      const firstFocus = useRef(true);\n      // Focus the specified ngl selection with the camera automatically\n      useEffect(() => {\n        if (!focus) return;\n        // The selected region may be in any component, not only the main component\n        // If a component name is passed then search for it\n        const comp = focus.comp\n          ? stageRef.current.compList.find(c => c.myName === focus.comp)\n          : mainComponent;\n        if (!comp) return;\n        let transition = DEFAULT_ORIENTATION_TRANSITION_DURATION;\n        // First transition is instantaneous\n        if (firstFocus.current) {\n          transition = 0;\n          // if an original orientation was aleady defined\n          // (manually created, and stored in the API)\n          if (curatedOrientation) {\n            // use it to set the initial orientation\n            stageRef.current.animationControls.orient(\n              curatedOrientation,\n              0,\n            );\n          }\n          firstFocus.current = false;\n        }\n        comp.autoView(focus.sele, transition);\n      }, [mainComponent, focus, curatedOrientation]);\n\n      // Expose public methods and getters/setters\n      useImperativeHandle(\n        ref,\n        () => ({\n          autoResize: handleResize,\n          // Output the current orientation/focus in console\n          // Note: this is for the developer, not for the regular user\n          displayFocus() {\n            const orientation = stageRef.current.viewerControls.getOrientation();\n            const stringifiedArray = `[${orientation.elements.toString()}]`;\n            console.log(stringifiedArray);\n          },\n          centerFocus() {\n            setFocus({ comp: 0, sele: 'all' });\n            // Use the provided orientation, if any\n            if (!curatedOrientation) return;\n            stageRef.current.animationControls.orient(\n              curatedOrientation,\n              DEFAULT_ORIENTATION_TRANSITION_DURATION,\n            );\n          },\n          get currentFrame() {\n            if (!(mainComponent && trajectories.length)) return -1;\n            try {\n              return mainComponent.trajList[0].trajectory.currentFrame;\n            } catch (_) {\n              return -1;\n            }\n          },\n          set currentFrame(value) {\n            if (!(mainComponent && trajectories.length)) return;\n            try {\n              const total = this.totalFrames;\n              let frame = value;\n              if (frame < 0) frame = 0;\n              if (frame >= total) frame = total - 1;\n              mainComponent.trajList[0].trajectory.setFrame(frame);\n            } catch (_) {\n              /* */\n            }\n          },\n          get totalFrames() {\n            if (!(mainComponent && trajectories.length)) return 1;\n            try {\n              return mainComponent.trajList[0].trajectory.frames\n                .length;\n            } catch (_) {\n              return 1;\n            }\n          },\n          get totalExpectedFrames() {\n            try {\n              return mainComponent.trajList[0].expectedFrames;\n            } catch (_) {\n              return 1;\n            }\n          },\n        }),\n        [mainComponent, trajectories, handleResize],\n      );\n\n      // workaround to have multiple ref logic on one element\n      // https://github.com/thebuilder/react-intersection-observer/issues/186#issuecomment-468641525\n      const handleRef = node => {\n        // If node does not exist then do not assign null to containerRef\n        // This way cleanup functions from some useEffects can properly clean the last reference\n        if (!node) return;\n        inViewRef(node);\n        containerRef.current = node;\n      };\n\n      // Finally, render the ngl window\n      return (\n        <>\n          <div\n            ref={handleRef}\n            className={cn(className, style.container, {\n              [style['loading-structure']]: !mainComponent,\n              [style['loading-trajectory']]:\n                !noTrajectory && anyLoadingTrajectory,\n              [style['light-theme']]: !darkBackground,\n            })}\n            // Display loading status data in the upper left corner of the NGL window\n            data-loading={viewerLogs}\n          >\n            <div ref={tooltipRef} className={style.tooltip}>\n              {tooltipContent}\n            </div>\n          </div>\n        </>\n      );\n    },\n  ),\n);\nNGLViewer.displayName = 'NGLViewer'\nexport default NGLViewer;\n","import React, {\n    useContext,\n    useState,\n    useRef,\n    useCallback,\n    useEffect,\n} from 'react';\n\nimport { ProjectCtx } from '../../contexts';\n\n// To make API requests\nimport { BASE_PATH_PROJECTS } from '../../utils/constants';\n\n// Auxiliar functions\nimport { appendBuffer } from '../../utils/auxiliar-functions';\n\n// HTTP utils\nimport https from 'https-browserify';\nimport http from 'stream-http';\nimport { parse as urlParse } from 'url';\n\nconst frameRangeFormat = /\\?frames=(?<start>\\d+):(?<end>\\d+)(:(?<step>\\d+))?/;\nconst parseFrameRange = frameRange => {\n  // Search in the function's parameter value \"string\" by using a specified regexp format: STEP_FORMAT\n  const parsed = frameRangeFormat.exec(frameRange);\n  if (!parsed) return null;\n  // The 'frameRangeFormat' has 3 defined groups: start, end and step\n  // Use the value from the 3 groups to define and save the desired frames\n  const start = +parsed.groups.start;\n  const end = Math.max(+parsed.groups.end, start); // If the end is less than the start then just use the start\n  const step = +(parsed.groups.step || 1);\n  const frames = Math.floor((end - start) / step) + 1;\n  return { start, end, step, frames };\n};\n\n// This function expects to receive a specific frame or the number of frames to load\n// This function returns a string which specifies the frames to be loaded\n// This string is standarized in a API friendly format\nconst getFrames = (trajectoryFrames, requestedFrames, requestedFrame) => {\n    // only one specific frame loaded, as a projection\n    if (requestedFrame) return { range: (requestedFrame + 1).toString(), frames: 1 };\n    // multiple frames loaded, as a trajectory\n    if (!trajectoryFrames) throw new Error('Missing number of frames in the trajectory');\n    if (!requestedFrames) throw new Error('Missing number of requested frames');\n    const frameStep = Math.floor(trajectoryFrames / requestedFrames);\n    // Predict how many frames will be returned, which may be different from the requested frames number\n    const returnedFrames = Math.ceil(trajectoryFrames / frameStep);\n    return {\n        range: `${1}:${trajectoryFrames}:${frameStep}`,\n        frames: returnedFrames,\n    };\n};\n\n// This is a custom hook\n// Download all data required for the molecular viewer: topologies and trajectories\n// The exact topologies and trajectories to be downloaded are configured in the components\n// The maximum number of frames to load is passed through the \"requestedFramesNumber\"\n// The \"onLoad\" hook is helpful to return feedback of the current load progress\nconst useViewerData = (components, requestedFramesNumber, onLoad) => {\n\n    // If no URL is provided then use the main trajectory // URL to find the trajectory data in the API\n    // True when we just want to display a static structure // Requeste number of frames to display\n    // data from context\n    const { accessionAndMdNumber, fileDescriptors, structureData } = useContext(ProjectCtx);\n\n    // Download topologies ----------------------------------------------------------------------\n\n    // Download all requested topologies: Each component may have a different structure URL\n\n    // Set a state to store the topology requests\n    const [requestedTopologies, setRequestedTopologies] = useState([]);\n    // Set also a state to track whenever there is still a downloading topology\n    // LORE: This was useful when we had to wait for all stages to be mounted at the same time\n    // LORE: It does nothing now but its value is still valid and it may be useful for logs\n    const [anyLoadingTopology, setAnyLoadingTopology] = useState(false);\n\n    // Find if there are new topology to be requested in the components:\n    // Collect the topology on each component\n    // If the component has no topology specified use the main topology\n    useEffect(() => {\n        // Make sure we already have components\n        if (!components) return;\n        setRequestedTopologies(previousRequestedTopologies => {\n            const newRequestedTopologies = [];\n            components.forEach(comp => {\n                const url = comp.topologyURL || null;\n                const selection = comp.atomSelection || null;\n                // Check if the url is new\n                // Else, skip this url since it has been requested already\n                const allRequestedTopologies = [\n                    ...previousRequestedTopologies,\n                    ...newRequestedTopologies,\n                ];\n                const current = allRequestedTopologies.find(topology => topology.url === url);\n                if (current) return;\n                // Some urls may be missing\n                // This happens when the component wants the default structure\n                if (url === null) {\n                    // Add a request with null url in order to get the main structure as topology\n                    // Do it only once for all components\n                    newRequestedTopologies.push({\n                        url: null,\n                        loading: false,\n                        error: null,\n                    });\n                } else {\n                    // Add the topology to the list, so it will be requested to the API\n                    newRequestedTopologies.push({\n                        url: url,\n                        selection: selection,\n                        loading: true,\n                        requested: false,\n                        error: null,\n                    });\n                    setAnyLoadingTopology(true);\n                }\n            });\n            return [...previousRequestedTopologies, ...newRequestedTopologies];\n        });\n    }, [components, setRequestedTopologies]);\n\n    // Set a state to store the downloaded topologies\n    const [topologies, setTopologies] = useState([]);\n    // Keep track of all requests in case we have to abort them further\n    const currentRequests = useRef([]);\n\n    // Download all requested topologies/structures from the API\n    useEffect(() => {\n        requestedTopologies.forEach(requestedTopology => {\n            // Check if the requested url has the data already downloaded\n            // If so, skip this request\n            if (requestedTopology.file) return;\n            // If the topology failed to load do not try it again\n            if (requestedTopology.error) return;\n            // If the topology has been already requested do not request it again\n            if (requestedTopology.requested) return;\n            // Get the topology URL\n            const url = requestedTopology.url;\n            // If there is no URL then load the main structure\n            // WARNING: The '[...previous]' is essential to make the array object change\n            // This is important, since the 'topologies' object is used as a dependency further\n            // And if we do not change the array then the change is not detected\n            if (url === null) setTopologies(previous => {\n                // The topology with the main structure data has not url\n                const topology = { url: null, file: structureData };\n                return [...previous, topology];\n            });\n            // If there is an URL\n            else {\n                requestedTopology.requested = true;\n                // Create the POST body\n                const postData = JSON.stringify({ selection : requestedTopology.selection });\n                // Request the API\n                // http exception is added for local testing in http://localhost\n                const protocol = url.substring(0, 5) === 'https' ? https : http;\n                const requestOptions = urlParse(url);\n                // We use the POST method instead of the regular GET method to allow long atom selections when requesting structure\n                // However, if we are requesting a file the POST method is not supported\n                const isStructureEndpoint = requestOptions.path.endsWith('/structure')\n                requestOptions.method = isStructureEndpoint ? 'POST' : 'GET';\n                requestOptions.headers = {\n                    'Content-Type': 'application/json',\n                    'Content-Length': postData.length\n                }\n                const request = protocol.request(requestOptions, response => {\n                    // Track the amout of bytes already downloaded\n                    let responseContent = '';\n                    response .on('data', chunk => {\n                        responseContent += chunk;\n                    }).on('end', () => {\n                        // Update the topologies state by adding the new topology with its content\n                        setTopologies(previous => {\n                            const topology = { url: url, file: responseContent };\n                            return [...previous, topology];\n                        });\n                        // Update the requested topology loading state\n                        requestedTopology.loading = false;\n                        // Check the loading state of all requested topologies\n                        // Then update the overall loading state\n                        const anyLoading = requestedTopologies.some(t => t.loading);\n                        setAnyLoadingTopology(anyLoading);\n                    });\n                });\n                // Send the request data (POST method feature)\n                if (requestOptions.method === 'POST'){\n                    request.write(postData);\n                }\n                // Close the request for it to actually start\n                // Note that this is required for the https.request altought it was not by https.get\n                request.end();\n                currentRequests.current.push(request);\n            }\n        });\n    }, [requestedTopologies, structureData]);\n\n    // Download trajectories ------------------------------------------------------------------------------------------------\n\n    // First we find all trajectory URLs (i.e. all requests to API)\n    // Then we ask the API skipping repeated URLs\n\n    // Set a function to modify an url by adding the frames range according to requestedFramesNumber\n    // The only exception are those trajectories whose frame number is lower than requestedFramesNumber\n\n    // Set a state to store requested trajectories and their loading status\n    const [requestedTrajectories, setRequestedTrajectories] = useState([]);\n    // Set also a state to track whenever there is still a downloading trajectory\n    const [anyLoadingTrajectory, setAnyLoadingTrajectory] = useState(false);\n\n    // Find if there are new trajectories to be requested in the components:\n    // Collect trajectories on each component\n    // If the component has no trajectory specified use the main trajectory\n    // If the component is not the main component and has no frame specified, use the first frame\n    // Only the main component (the first) is allowed to load multiple frames by the moment\n    useEffect(() => {\n        // Make sure we already have components\n        if (!components) return;\n        // Send a request to the API with the url of the rgyr analysis\n        const { loading, payload, error } = fileDescriptors;\n        // If we do not have file descritors yet then stop here\n        if (loading) return;\n        // Throw it in case something went wrong with the donwload\n        else if (error) throw error;\n        else if (!payload) throw new Error('Something bad happened with file descriptors');\n        // Finally update the trajectories state\n        setRequestedTrajectories(currentTrajectories => {\n            // Save the new requetsed trajectories\n            const newTrajectories = [];\n            // Set the url to ask the API\n            // Here, if you ask for the trajectory.bin instead of just trajectory, you get the whole file\n            // This is because the only route of the API accepting frames selection is the \"trajectory\" endpoint\n            // Other paths such as \"trajectory.bin\" will be processed as \"/:files\"\n            const baseUrl = `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/files/trajectory`;\n            components.forEach((comp, c) => {\n                if (comp.onlyTopology) return;\n                // Set the first component as the 'principal' component\n                const isPrincipal = c === 0;\n                const requestedFrame = comp.frame;\n                // Get the trajectory urls\n                // If the component has no trajectory url specified then use the main trajectory url alone\n                let urls = comp.trajectoryURLs || [baseUrl];\n                // Add the frames number of all the component requested trajectories\n                comp.frameCount = 0;\n                urls.forEach((url, u) => {\n                    // Check if the url is already framed\n                    const framed = parseFrameRange(url);\n                    // Get the name of the trajectory file inside the database\n                    // i.e. the end of the requested URL\n                    // The exception is the API endpoint 'trajectory', which uses the 'trajectory.bin' file\n                    let trajectoryFilename = url.split('/').slice(-1)[0];\n                    if (framed) trajectoryFilename = trajectoryFilename.split('?frames=')[0];\n                    if (trajectoryFilename === 'trajectory') trajectoryFilename = 'trajectory.bin';\n                    // Get the file descriptor of the required trajectory\n                    const trajectoryFileDescriptor = payload.find(file => \n                        file.filename === trajectoryFilename);\n                    if (!trajectoryFileDescriptor)\n                        throw new Error( `Trajectory \"${trajectoryFilename}\" is missing`);\n                    const trajectoryMetadata = trajectoryFileDescriptor.metadata;\n                    // Get the number of frames in the whole trajectory\n                    const trajectoryFrames = trajectoryMetadata.frames;                \n                    // Set the number of frames to be requested from the whole trajectory\n                    let requestedFrames = requestedFramesNumber;\n                    if (requestedFramesNumber > trajectoryFrames) requestedFrames = trajectoryFrames;\n                    if (Number.isFinite(requestedFrame)) requestedFrames = 1;\n                    else if (framed) requestedFrames = framed.frames;\n                    // Components which are not the principal must include a 'frame' value\n                    if (!isPrincipal && requestedFrames > 1) \n                        throw new Error(`Only the main component is allowed to load multiple frames`);\n                    // Frames are added to any url which is missing the frames range according to requestedFramesNumber\n                    // The only exception are those trajectories whose frame number is lower than requestedFramesNumber\n                    let finalUrl = url;\n                    // Get the expected number of frames returned, which may not be exactly the requested number\n                    let returnedFrames;\n                    // In case the url is already frammed\n                    if (framed) {\n                        // Find maximum number of frames to be returned (trajectory frames or requetsed frames)\n                        const maximumFrames = Math.min(trajectoryFrames, framed.end);\n                        returnedFrames = Math.ceil(maximumFrames / framed.step);\n                    }\n                    // Modify the url if it is not framed yet\n                    else {\n                        // Get the string frames range according to requestedFramesNumber\n                        const { range: framesRange, frames: framesCount } = getFrames(\n                            trajectoryFrames,\n                            requestedFrames,\n                            requestedFrame,\n                        );\n                        returnedFrames = framesCount;\n                        // Add the frames range to the original url\n                        if (framesRange) finalUrl = url + `?frames=${framesRange}`;\n                    }\n                    // Set the component framed url if it doesn't exists\n                    if (!comp.framedURLs) comp.framedURLs = [];\n                    // Save this final url in the framedURL in the component\n                    // Overwrite the previous framed url if exists\n                    comp.framedURLs[u] = finalUrl;\n                    // Add the requested frames number to the frame count\n                    comp.frameCount += requestedFrames;\n                    // Check if the requested url is already in the list\n                    // If so, skip this request\n                    // If not, save the request url and proceed\n                    const current = currentTrajectories.find(trajectory => trajectory.url === finalUrl);\n                    if (!current) {\n                        newTrajectories.push({\n                            url: finalUrl,\n                            frames: returnedFrames,\n                            // Add also the atoms number, which is used further\n                            atoms: trajectoryMetadata.atoms,\n                            loading: true,\n                            requested: false,\n                        });\n                        setAnyLoadingTrajectory(true);\n                    }\n                });\n            });\n            // In case there are new requested trajectories we return a new array to trigger dependencies\n            if (newTrajectories.length > 0)\n            return [...currentTrajectories, ...newTrajectories];\n            // Otherwise we return the previous array to do no trigger dependencies\n            return currentTrajectories;\n        });\n    }, [accessionAndMdNumber, components, fileDescriptors, requestedFramesNumber]);\n\n    // Set a state to store trajectories data\n    const [trajectories, setTrajectories] = useState([]);\n\n    // Download the requested trajectory data (frames)\n    useEffect(() => {\n        requestedTrajectories.forEach(trajectory => {\n            // Check if the trajectory has been requested already\n            // If so, skip this request\n            if (trajectory && trajectory.requested) return;\n            trajectory.requested = true;\n            // Set the loading status as true\n            trajectory.loading = true;\n            trajectory.progress = 0;\n            // DANI: Todavía no me ha hecho falta hacer una selección larga de atomos/frames\n            // DANI: Todo está listo a nivel de API\n            // DANI: Solo hará falta reformar un poco el viewer-with-controls y este script\n            const postData = JSON.stringify({});\n            // Request the API\n            // http exception is added for local testing in http://localhost\n            const protocol = trajectory.url.substring(0, 5) === 'https' ? https : http;\n            const requestOptions = urlParse(trajectory.url);\n            // Check if the request points to the /trajectory endpoint or it is pointing to a file\n            const requestPathsteps = requestOptions.pathname.split('/')\n            const isTrajectoryEndpoint = requestPathsteps[requestPathsteps.length -1] === 'trajectory'\n            // We use the POST method instead of the regular GET method to allow long atom selections\n            // However, if we are retrieving a specific file the the POST method is not implemented\n            requestOptions.method = isTrajectoryEndpoint ? 'POST' : 'GET';\n            requestOptions.headers = {\n                'Content-Type': 'application/json',\n                'Content-Length': postData.length\n            }\n            const request = protocol.request(requestOptions, response => {\n            const totalBytes = response.headers['content-length'];\n            // Set the new trajectory\n            setTrajectories(previousTrajectories => {\n                const newTrajectory = {\n                    url: trajectory.url,\n                    frames: trajectory.frames,\n                    atoms: trajectory.atoms,\n                    payload: new ArrayBuffer(0),\n                    progress: 0,\n                };\n                return [...previousTrajectories, newTrajectory];\n            });\n            // Track the amout of bytes already downloaded\n            let byteCount = 0;\n            response\n                .on('data', chunk => {\n                    byteCount += chunk.byteLength;\n                    trajectory.progress = byteCount / totalBytes;\n                    // Update trajectories with the current partial data we have\n                    setTrajectories(previousTrajectories => {\n                        const currentTrajectory = previousTrajectories.find(t => t.url === trajectory.url);\n                        currentTrajectory.payload = appendBuffer(currentTrajectory.payload, chunk);\n                        currentTrajectory.progress = trajectory.progress;\n                        return [...previousTrajectories];\n                    });\n                })\n                .on('end', () => {\n                    // Save the main data in the ref\n                    trajectory.loading = false;\n                    // Then check the loading state of all requested trajectories and update the overall loading state\n                    const anyLoading = requestedTrajectories.some(\n                        trajectory => trajectory.loading,\n                    );\n                    setAnyLoadingTrajectory(anyLoading);\n                });\n            });\n            // Send the request data (POST method feature)\n            if (requestOptions.method === 'POST') request.write(postData);\n            // Close the request for it to actually start\n            // Note that this is required for the https.request altought it was not by https.get\n            request.end();\n            currentRequests.current.push(request);\n        });\n    }, [requestedTrajectories]);\n\n    // If the whole component is removed then abort all requests in case they were not finished\n    // DANI: No he verificado que esto funcione bien a nivel de API\n    useEffect(() => {\n        // I save it in a constant to avoid a non-sense warning\n        const redundantList = currentRequests.current;\n        return () => {\n            redundantList.forEach(request => {\n                request.abort();\n            });\n        };\n    }, []);\n\n    // Update the load progress\n    useEffect(() => {\n        // Make sure we already have components\n        if (!components) return;\n        const mainComponentTrajectoryURLs = components[0] && components[0].framedURLs;\n        if (!mainComponentTrajectoryURLs) return;\n        // Get all trajectories to be used as the current main trajecotry\n        const mainTrajectories = [];\n        mainComponentTrajectoryURLs.forEach(url => {\n            const trajectory = trajectories.find(trajectory => trajectory.url === url);\n            if (trajectory) mainTrajectories.push(trajectory);\n        });\n        if (mainTrajectories.length === 0) return;\n        // Then calculate the average progress in all loading trajectories and update the progress state\n        const overallFrames = mainTrajectories\n            .map(trajectory => trajectory.frames)\n            .reduce((a, b) => a + b, 0);\n        const overallProgress = mainTrajectories\n            .map(trajectory => trajectory.progress * trajectory.frames)\n            .reduce((a, b) => a + b, 0) / overallFrames;\n        onLoad(overallProgress);\n    }, [components, trajectories, onLoad]);\n\n    // Return downloaded data\n    return { topologies, trajectories, anyLoadingTopology, anyLoadingTrajectory };\n}\n\nexport default useViewerData;","export const LOW = Symbol('low');\nexport const MEDIUM = Symbol('medium');\nexport const HIGH = Symbol('high');\n\n// Check how fast the connection is and send the corresponding symbol\n// WARNING: This is done for Chrome. i.e. Firefox will always return MEDIUM\nconst connectionLevel = () => {\n  if (!(navigator && navigator.connection)) return MEDIUM;\n  const { effectiveType, saveData } = navigator.connection;\n  if (saveData === true) return LOW;\n  if (!effectiveType) return MEDIUM;\n  switch (effectiveType) {\n    case 'slow-2g':\n    case '2g':\n      return LOW;\n    case '3g':\n      return MEDIUM;\n    case '4g':\n      return HIGH;\n    default:\n      return HIGH;\n  }\n};\n\nexport default connectionLevel;\n","// extracted by mini-css-extract-plugin\nexport default {\"background-toggle\":\"style_background-toggle__aAj32\",\"dark\":\"style_dark__e5mDQ\",\"adapter\":\"style_adapter__+rjEA\",\"ngl-with-settings\":\"style_ngl-with-settings__k93CW\",\"ngl-without-settings\":\"style_ngl-without-settings__qTooi\",\"settings-left\":\"style_settings-left__Wvi5a\",\"settings-controls\":\"style_settings-controls__kLLNo\",\"ngl-alone\":\"style_ngl-alone__5TmnB\",\"stacked-icons\":\"style_stacked-icons__OoF+a\",\"extra-top-margin\":\"style_extra-top-margin__vaEmm\",\"settings-right\":\"style_settings-right__NDIcU\",\"hidden\":\"style_hidden__D+3lX\",\"fullscreen-toggle\":\"style_fullscreen-toggle__f4Bk2\",\"expand\":\"style_expand__brMFA\",\"is-fullscreen\":\"style_is-fullscreen__RtQvN\",\"compress\":\"style_compress__xLnUE\",\"settings\":\"style_settings__87jIw\",\"fullscreen-target\":\"style_fullscreen-target__VO3Yh\",\"card-content\":\"style_card-content__Y2hw3\",\"progress\":\"style_progress__LNzos\",\"container\":\"style_container__ERsvh\",\"controls\":\"style_controls__0ugFi\",\"slider\":\"style_slider__FgVYz\",\"flip-container\":\"style_flip-container__dGHQ+\",\"flip-card-container\":\"style_flip-card-container__wgyMe\",\"flipped\":\"style_flipped__DhDpU\",\"flip-card\":\"style_flip-card__g+agx\",\"front\":\"style_front__g9FOf\",\"back\":\"style_back__UfiiZ\",\"progressContainer\":\"style_progressContainer__kQ85K\",\"timeInfo\":\"style_timeInfo__wEsXY\"};","// React logic\nimport React, {\n  useCallback,\n  useState,\n  useEffect,\n  useRef,\n  useMemo,\n  forwardRef,\n  useImperativeHandle,\n  useContext,\n} from 'react';\nimport cn from 'classnames';\nimport screenfull from 'screenfull';\n// Visual assets\nimport {\n  Card,\n  CardContent,\n  Grid,\n  LinearProgress,\n  Icon,\n  IconButton,\n  Slider,\n} from '@mui/material';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faDotCircle,\n  faImages,\n  faSquare,\n} from '@fortawesome/free-regular-svg-icons';\nimport {\n  faStepBackward,\n  faStepForward,\n  faPause,\n  faPlay,\n  faExpand,\n  faCompress,\n  faSyncAlt,\n  faVideo,\n  faAdjust,\n  faCog,\n  faCube,\n  faWalking,\n  faBiking,\n  faTimes,\n  faLock,\n  faUnlock,\n  faStarOfLife,\n  faShareAlt, // It looks like connected atoms\n} from '@fortawesome/free-solid-svg-icons';\n\nimport RepresentationsManager from './representations-manager';\n\nimport { get, setAsync } from '../../utils/storage';\n\n// To ask the API\nimport { BASE_PATH_PROJECTS } from '../../utils/constants';\n\n// The main component of the viewer itself\nimport MolstarViewer from '../molstar-viewer';\nimport NGLViewer from '../ngl-viewer';\nimport useDefaultRepresentations from '../ngl-viewer/use-default-representations';\n\n// Hooks\nimport useToggleState from '../../hooks/use-toggle-state';\nimport useViewerData from '../../hooks/use-viewer-data';\n\nimport connectionLevel, {\n  LOW,\n  MEDIUM,\n  HIGH,\n} from '../../utils/connection-level';\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nimport { ProjectCtx } from '../../contexts';\nimport { copyObject } from 'src/utils/auxiliar-functions';\n\n// Decide that the default should be to play the trajectory only on \"big enough\"\n// screens (as a proxy for performance and low-end device detection)\nconst DEFAULT_STARTS_PLAYING = !reducedMotion() && window.innerWidth > 750;\n\nconst DEFAULT_FRAME_NUMBER = (() => {\n  switch (connectionLevel()) {\n    case HIGH:\n      return 50;\n    case MEDIUM:\n      return 25;\n    case LOW:\n    default:\n      return 10;\n  }\n})();\n\n// Set the possible number of frames the user can request\nconst DEFAULT_FRAME_NUMBERS = [\n  { value: 1, label: '1' },\n  { value: 10, label: '10' },\n  { value: 25, label: '25' },\n  { value: 50, label: '50' },\n  { value: 100, label: '100' },\n];\n\n// Set the default component parameters\n// These values are used to fill missing fields in input components\nconst DEFAULT_COMPONENT_PARAMETERS = {\n  name: 'Unnamed component',\n  topologyURL: 'auto', // This is assigned further\n  trajectoryURLs: 'auto', // This is assigned further\n  atomSelection: null,\n  frame: null,\n  onlyTopology: false\n}\n\n// Set the default representation parameters\n// These values are used to fill missing fields in input representations\nconst DEFAULT_REPRESENTATION_PARAMETERS = {\n  name: 'Unnamed representation',\n  selection: 'all',\n  show: true,\n  type: 'cartoon',\n  color: 'chainid',\n  opacity: 1,\n  component: 'auto' // This is assigned further\n}\n\n// DANI: falta representation.index y custom\n\n// Set a function to fill the missing values within an object using default values\n// Return true if there was any change\nconst completeMissingFields = (targetObject, defaultValuesObject) => {\n  let anyChange = false;\n  for (const [fieldName, defaultValue] of Object.entries(defaultValuesObject)) {\n    if (targetObject[fieldName] === undefined) {\n      targetObject[fieldName] = defaultValue;\n      anyChange = true;\n    }\n  }\n  return anyChange;\n}\n\n// Set an NGL view window which is managed by some controls\n// There are different ways to call this script\n// 1 - With components: Used for situations where more than a topology or trajectory are required\n// 2 - With representations: Which internally means there will be only 1 component\n// 3 - With no parameters: In which case a default representation in set up\n// * In case of both components and representations passed, the valid argument will be the components\n// WARNING: There are many important hooks which have components/representations as a dependency\n// Avoid passing an object which is created every render. Use a somehow memoized array.\n// WARNING: The style of this component and its parent is very important. Use a reference to call it\nconst ViewerWithControls = forwardRef(\n  (\n    {\n      // The viewer starting components\n      // Components are objects which may include the following values:\n      // All values are optional since missing values will be set by default\n      //  {\n      //    name: name of the component used to link representations with it\n      //    topologyURL: string, (used in pockets analysis)\n      //    trajectoryURLs: [ string ], (used in pca)\n      //    atomSelection: string, (used in pca)\n      //    frame: int, (used in rmsd pairwise analysis)\n      //    onlyTopology: bool, (used in pockets analysis)\n      //  }\n      startingComponents,\n      // The viewer starting representations\n      // It is an array of objects with the following structure:\n      // All values are optional since missing values will be set by default\n      // {\n      //   name: ('representation' by default) The string label of this representation,\n      //   show: ('true' by default) Boolean to set if this representation is shown or not,\n      //   selection: ('all' by default) The NGL selection string to define the atom selection,\n      //   type: ('cartoon' by default) The initial representation 'type',\n      //   color: ('chainid' by default) The initial representation 'colorScheme',\n      //   opacity: ('1' by default) The initial representation opacity\n      //   other: object with any other ngl options to be passed for the representation (e.g. radius)\n      //   component: name of the component this representation belongs to (main component when missing)\n      // }\n      startingRepresentations,\n      // Alternatively you may pass bot components and representations as states\n      // Thus the parent component may also control them\n      // Note that these states will be still controled by the child components anyway\n      componentsState,\n      representationsState,\n      // Style\n      className,\n      // Set if the viewer must play the simulation as soon as it appears\n      startsPlaying = DEFAULT_STARTS_PLAYING,\n      // Closing callback\n      close,\n      // Nailing callback\n      nail,\n      // Set which frame must be loaded. It may be undefined, if the whole trajectory is desired.\n      requestedFrame,\n      // Set if the frame number selector is allowed for trajectories (false in PCA projections)\n      framesSelect = true,\n      // Set a special option to force the 'noTrajectory' condition\n      // This is used to avoid the trajectory playing in pockets since there are surfaced representations\n      // This is only to be passed when having a trajectory loaded in the main component\n      // If a single frame is forced then this is redundant\n      preventTrajectory = false,\n      // Set a state setter to handle the frame progress\n      onProgress,\n      // The rest of properties paased to the NGLViewer\n      ...props\n    },\n    ref,\n  ) => {\n    // Make sure we are not having incompatible inputs\n    if (startingComponents && componentsState)\n      throw new Error('startingComponents and componentsState are not compatilbe inputs. Choose one.');\n    if (startingRepresentations && representationsState)\n      throw new Error('startingRepresentations and representationsState are not compatilbe inputs. Choose one.');\n    // Set which viewer is used: NGL or MolStar (the default is NGL)\n    const [Viewer, setViewer] = useState(NGLViewer);\n    // Get project metadata\n    const { metadata, accessionAndMdNumber, topology } = useContext(ProjectCtx);\n    // Track the current frame and time\n    const [currentFrameInfo, setCurrentFrameInfo] = useState({ frame: 0, time: 0 });\n    // Use metadata to limit available frames number\n    const frameNumbers = useMemo(() => {\n      const maximumSnapshots = metadata.mdFrames;\n      const frameNumbers = [...DEFAULT_FRAME_NUMBERS];\n      // Remove values over the maximim number of frames\n      for (let i = frameNumbers.length - 1; i >= 0; i--) {\n        if (frameNumbers[i].value > maximumSnapshots) frameNumbers.pop();\n        else break;\n      }\n      // In case no value was removed we are done\n      if (frameNumbers.length === DEFAULT_FRAME_NUMBERS.length)\n        return frameNumbers;\n      // Otherwise, if the maximum number of frames is not one of the options already, then add it\n      if (frameNumbers[frameNumbers.length - 1].value !== maximumSnapshots)\n        frameNumbers.push({\n          value: maximumSnapshots,\n          label: maximumSnapshots.toString(),\n        });\n      return frameNumbers;\n    }, [metadata.mdFrames]);\n    // Do not use the start object but make a copy to avoid a lot of silent errors\n    const fixedStartingComponents = useMemo(() => {\n      // If there are no starting components then just leave it as null\n      // The defualt completer logic will take over\n      if (!startingComponents) return null;\n      return startingComponents.map(comp => copyObject(comp));\n    }, [startingComponents]);\n\n    // Set the final components to be passed to the viewer\n    const [finalComponents, setFinalComponents] =\n      componentsState || useState(fixedStartingComponents);\n\n    // Set the missing value completer for components including URLs\n    // Return true if there was any change\n    const completeComponentMissingFields = useCallback(targetObject => {\n      if (!accessionAndMdNumber) return false;\n      const defaults = {...DEFAULT_COMPONENT_PARAMETERS};\n      defaults.topologyURL = `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/files/structure`;\n      defaults.trajectoryURLs = [ `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/files/trajectory` ];\n      return completeMissingFields(targetObject, defaults);\n    }, [accessionAndMdNumber]);\n\n    // Anytime components change, check if there are any missing values and fill them with default values\n    useEffect(() => {\n      // Wait for the default completer to be ready\n      if (!completeComponentMissingFields) return;\n      // If there are no components then set a default configuration\n      if (!finalComponents) {\n        const defComponents = [{ name: 'Main' }];\n        defComponents.forEach(comp => { completeComponentMissingFields(comp) });\n        return setFinalComponents(defComponents);\n      }\n      // Make sure we have no components with the same name\n      const componentNames = finalComponents.map(comp => comp.name);\n      const uniqueComponentNames = new Set(componentNames);\n      if (componentNames.length !== uniqueComponentNames.size)\n        throw new Error(`We have multiple components with the same name: ${componentNames.join(', ')}`);\n      // Fill missing values among components with default values\n      const changes = finalComponents.map(comp => \n        completeComponentMissingFields(comp, DEFAULT_COMPONENT_PARAMETERS));\n      // If there was any value filled then update the state to trigger a rerender\n      if (changes.some(v => v === true)) setFinalComponents([...finalComponents]);\n    }, [finalComponents, completeComponentMissingFields]);\n\n    // Anytime the requested frame changes update the main component\n    useEffect(() => {\n      if (!finalComponents) return;\n      if (requestedFrame === undefined) return;\n      if (finalComponents[0].frame === requestedFrame) return;\n      finalComponents[0].frame = requestedFrame;\n      setFinalComponents([...finalComponents]);\n    }, [finalComponents, requestedFrame]);\n\n    // Do not use the start object but make a copy to avoid a lot of silent errors\n    const fixedStartingRepresentations = useMemo(() => {\n      // If there are no starting representations then just leave it as null\n      // The defualt completer logic will take over\n      if (!startingRepresentations) return null;\n      return startingRepresentations.map(rep => copyObject(rep));\n    }, [startingRepresentations]);\n\n    // Set the final representations to be passed to the viewer\n    const [finalRepresentations, setFinalRepresentations] =\n      representationsState || useState(fixedStartingRepresentations);\n\n    // Use this hook to get the memoized NGL default representations\n    const defaultRepresentations = useDefaultRepresentations();\n\n    // Set the missing value completer for representations including the main component name\n    // Return true if there was any change\n    const completeRepresentationMissingFields = useCallback(targetObject => {\n      if (!finalComponents) return false;\n      const defaults = {...DEFAULT_REPRESENTATION_PARAMETERS};\n      defaults.component = finalComponents[0].name;\n      return completeMissingFields(targetObject, defaults);\n    }, [finalComponents]);\n\n    // Anytime representations change, check if there are any missing values and fill them\n    // WARNING: Note that this must be a useEffect, not a useMemo, or you will get the following error:\n    //   Warning: Cannot update a component (`Pockets`) while rendering a different component (`ForwardRef`).\n    //   To locate the bad setState() call inside `ForwardRef`, follow the stack trace as described in \n    //   https://reactjs.org/link/setstate-in-render\n    useEffect(() => {\n      // If we still have no default refereferences then stop here\n      if (!defaultRepresentations || defaultRepresentations.length === 0) return;\n      // If there are no representations then set a default configuration\n      if (!finalRepresentations) {\n        // Unless the representations state has been passed from another component above\n        // If it has been passed then delegate the job to that component\n        // Otherwise, we could interfere as it happend with pockets (it was hard to track the problem)\n        if (representationsState) return;\n        const defRepresentations = [...defaultRepresentations];\n        defRepresentations.forEach(rep => \n          completeRepresentationMissingFields(rep));\n        return setFinalRepresentations(defRepresentations);\n      }\n      // Fill missing values among representations with default values\n      const changes = finalRepresentations.map(rep => \n        completeRepresentationMissingFields(rep));\n      // If there was any value filled then update the state to trigger a rerender\n      // DANI: Este es el responsable de esto:\n      //   Warning: Cannot update a component (`blablabla`) while rendering a different component (`ForwardRef`).\n      //   To locate the bad setState() call inside `ForwardRef`, follow the stack trace as described in \n      //   https://reactjs.org/link/setstate-in-render\n      if (changes.some(v => v === true)) setFinalRepresentations([...finalRepresentations]);\n    }, [finalRepresentations, defaultRepresentations, completeRepresentationMissingFields]);\n\n    // references\n    const containerRef = useRef(null);\n    const viewerRef = useRef(null);\n\n    // toggle states\n    const [nailed, toggleNailed] = useToggleState(false);\n    const [playing, togglePlaying] = useToggleState(startsPlaying);\n    const [spinning, toggleSpinning] = useToggleState(false);\n    const [smooth, setSmooth] = useState(true);\n    const [darkBackground, toggleDarkBackground] = useToggleState(\n      useMemo(() => get('dark-background', false), []),\n    );\n    const [perspective, togglePerspective] = useToggleState(\n      useMemo(() => get('perspective', false), []),\n    );\n\n    // states\n    const [progress, setProgress] = useState(0);\n    const [load, setLoad] = useState(0);\n    const [isFullscreen, setIsFullscreen] = useState(screenfull.isFullscreen);\n    const [requestedFramesNumber, setRequestedFramesNumber] = useState(\n      Math.min(DEFAULT_FRAME_NUMBER, metadata.mdFrames),\n    );\n    const [speed, setSpeed] = useState(useMemo(() => get('speed', 50), []));\n    const [settings, openSettings] = useState(false);\n\n    // handlers\n\n    // Handle the automatic progress\n    const handleProgress = useCallback(\n      prog => {\n        if (onProgress) onProgress(prog);\n        setProgress(prog);\n        \n        // Calculate the current frame and time\n        if (viewerRef.current) {\n          const currentFrame = viewerRef.current.currentFrame;\n          // Calculate time in nanoseconds using the frame step from metadata\n          const timeInNs = metadata.FRAMESTEP ? (metadata.timeLength * prog).toFixed(2) : 0;\n          setCurrentFrameInfo({ frame: currentFrame, time: timeInNs });\n        }\n      }, [setProgress, onProgress, metadata.FRAMESTEP],\n    );\n\n    // Handle the trajectory load\n    const handleLoad = useCallback(\n      load => {\n        setLoad(load);\n      }, [setLoad],\n    );\n\n    // handle click or click & drag progress bar\n    const handleManualProgress = useCallback(\n      ({ buttons, clientX, currentTarget, type }) => {\n        if (!viewerRef.current) return;\n        // if mousemove event, but the main button is not pressed, bail\n        if (type === 'mousemove' && buttons !== 1) return;\n        const { x, width } = currentTarget.getBoundingClientRect();\n        // Set pause\n        togglePlaying(false);\n        // Change the ngl viewer current ref from its exposed setter\n        // Then the ngl itself will update the 'progress' state\n        viewerRef.current.currentFrame = Math.floor(\n          ((clientX - x) / width) * viewerRef.current.totalExpectedFrames,\n        );\n      }, [togglePlaying],\n    );\n\n    // Frame change handler to interact with the child viewer\n    const handleFrameChange = useCallback(\n      value => {\n        if (!viewerRef.current) return;\n        togglePlaying(false);\n        viewerRef.current.currentFrame += value;\n      }, [togglePlaying],\n    );\n\n    // When the user requests the previous frame\n    const handlePreviousFrame = useCallback(() => handleFrameChange(-1), [handleFrameChange]);\n\n    // When the user requests the next frame\n    const handleNextFrame = useCallback(() => handleFrameChange(1), [handleFrameChange]);\n\n    // Enter/exit fullscreen\n    const handleFullscreenChange = useCallback(() => setIsFullscreen(screenfull.isFullscreen), []);\n    useEffect(() => {\n      screenfull.on('change', handleFullscreenChange);\n      return () => screenfull.off('change', handleFullscreenChange);\n    }, [handleFullscreenChange]);\n\n    // When the user clicks on the fullscreen button\n    const handlerFullscreenButton = useCallback(\n      () => { if (containerRef.current) screenfull.toggle(containerRef.current) }, []);\n\n    // Exit the options menu by pressing the escape key and handle spacebar for play/pause\n    useEffect(() => {\n      const handleKeyPress = event => {\n        if (event.key === 'Escape') {\n          openSettings(false);\n          viewerRef.current.autoResize();\n        }\n        // Only handle spacebar if not typing in an input field\n        if (event.key === ' ' && event.target.tagName !== 'INPUT' && event.target.tagName !== 'TEXTAREA') {\n          event.preventDefault(); // Prevent page scrolling\n          togglePlaying(prev => !prev);\n        }\n      };\n      document.addEventListener('keydown', handleKeyPress, false);\n      return () => document.removeEventListener('keydown', handleKeyPress, false);\n    }, []);\n\n    // Find out if there are residues under PBC (Periodic Boundary Conditions) in the topology\n    // If there are PBC residues then stop the smooth to prevent misleading artifacts\n    const hasPbcResidues = useMemo(() => {\n      if (!topology || !topology.pbcResidues) return;\n      const _hasPbcResidues = topology.pbcResidues.size > 0;\n      if (_hasPbcResidues) setSmooth(false);\n      return _hasPbcResidues;\n    }, [topology]);\n\n    // This allows parent components to interact with this component\n    useImperativeHandle(ref,\n      () => ({\n        autoResize: viewerRef.current.autoResize,\n        centerFocus: viewerRef.current.centerFocus,\n        get currentFrame() {\n          return viewerRef.current.currentFrame;\n        },\n        set currentFrame(value) {\n          viewerRef.current.currentFrame = value;\n        },\n        togglePlaying: togglePlaying,\n        setFinalComponents: setFinalComponents,\n        setFinalRepresentations: setFinalRepresentations\n      }),\n      [\n        togglePlaying,\n        setFinalComponents,\n        setFinalRepresentations,\n      ],\n    );\n\n    // Set the variable 'noTrajectory' as true when:\n    // The flag 'onlyTopology' is passed\n    // there is a selected unique frame to load from the main trajectory\n    // The main trajectory only has 1 frame (e.g. average.xtc)\n    const mainComponent = finalComponents && finalComponents[0];\n    const noTrajectory = preventTrajectory || (mainComponent && (mainComponent.onlyTopology ||\n      Number.isFinite(mainComponent.frame))); // May be 0\n\n    // Download viewer data from the API according to the components configuration\n    const {\n      topologies,\n      trajectories,\n      anyLoadingTopology,\n      anyLoadingTrajectory\n    } = useViewerData(finalComponents, requestedFramesNumber, handleLoad);\n\n    // DANI: Si no quieres buscarte problemas no cambies las \"Card\"s de aquí abajo por \"div\"s o similar\n    return (\n      <Card\n        className={cn(style['fullscreen-target'], {\n          [style['is-fullscreen']]: isFullscreen,\n        })}\n        ref={containerRef}\n      >\n        <div className={cn(style.adapter, className)}>\n          <Card\n            className={settings\n              ? style['ngl-with-settings']\n              : style['ngl-without-settings']\n            }\n            style={{ border: 'none', boxShadow: 'none' }}\n            // This id prevents the mouse to drag or resize the Rnd when it is over this element\n            id={'preventDragSize'}\n          >\n            <Card\n              className={settings\n                ? cn(style['settings-left'], className)\n                : cn(style['ngl-alone'], className)\n              }\n              style={{ border: 'none', boxShadow: 'none' }}\n            >\n              <Viewer\n                playing={playing}\n                spinning={spinning}\n                smooth={smooth}\n                onProgress={handleProgress}\n                ref={viewerRef}\n                noTrajectory={noTrajectory}\n                darkBackground={darkBackground}\n                perspective={perspective}\n                speed={speed}\n                components={finalComponents}\n                representations={finalRepresentations}\n                // Viewer data incluting both structure and coordinates\n                topologies={topologies}\n                trajectories={trajectories}\n                anyLoadingTopology={anyLoadingTopology}\n                anyLoadingTrajectory={anyLoadingTrajectory}\n                {...props}\n              />\n              {settings && (\n                <div className={style['settings-controls']}>\n                  <div className={style['stacked-icons']}>\n                    <IconButton\n                      title=\"Toggle spin\"\n                      onClick={toggleSpinning}\n                      size=\"large\"\n                    >\n                      <FontAwesomeIcon icon={faSyncAlt} />\n                    </IconButton>\n\n                    <IconButton\n                      title=\"Center focus\"\n                      onClick={event => {\n                        if (!viewerRef.current) return;\n                        // When the keys control, shift or command (ios) are hold while clicking\n                        const getFocus = event.shiftKey || event.ctrlKey || event.metaKey;\n                        if (getFocus) viewerRef.current.displayFocus();\n                        else viewerRef.current.centerFocus();\n                      }}\n                      size=\"large\"\n                    >\n                      <FontAwesomeIcon icon={faDotCircle} />\n                    </IconButton>\n\n                    {noTrajectory || (\n                      <div className={style['stacked-icons']} title={hasPbcResidues &&\n                        'Smooth interpolation is not allowed since there are residues under Periodic Boundary Conditions. ' +\n                        'The smoothing may result in misleading artifacts for those atoms jumping across boundaries.'}>\n                        <IconButton\n                          title={`Toggle smooth interpolation ${smooth ? 'off' : 'on'}`}\n                          onClick={() => setSmooth(previous => !previous)}\n                          // If there are PBC residues then forbid the smooth to prevent misleads\n                          // Note that the smoothing may result in artifacts for those atoms jumping across boundaries\n                          // This is very clear for solvent/counter ions (breathing effect) and also visible in membrane residues\n                          disabled={hasPbcResidues}\n                          size=\"large\"\n                        >\n                          <FontAwesomeIcon icon={smooth ? faImages : faVideo} />\n                        </IconButton>\n                      </div>\n                    )}\n\n                    <IconButton\n                      title=\"Invert background color\"\n                      onClick={() => {\n                        toggleDarkBackground();\n                        setAsync('dark-background', !darkBackground);\n                      }}\n                      size=\"large\"\n                    >\n                      <div\n                        className={cn(style['background-toggle'], {\n                          [style.dark]: darkBackground,\n                        })}\n                      >\n                        <FontAwesomeIcon icon={faAdjust} />\n                      </div>\n                    </IconButton>\n\n                    <IconButton\n                      title={`Switch to ${\n                        perspective ? 'ortographic' : 'perspective'\n                      } view`}\n                      onClick={() => {\n                        togglePerspective();\n                        setAsync('perspective', !perspective);\n                      }}\n                      size=\"large\"\n                    >\n                      <FontAwesomeIcon icon={perspective ? faSquare : faCube} />\n                    </IconButton>\n\n                    <IconButton\n                      title={`Switch viwer to ${\n                        Viewer === NGLViewer ? 'MolStar' : 'NGL'\n                      }`}\n                      onClick={() => {\n                        setViewer(currentViewer => {\n                          if (currentViewer === NGLViewer) return MolstarViewer;\n                          if (currentViewer === MolstarViewer) return NGLViewer;\n                          throw new Error('Unrecognized current viewer');\n                        });\n                      }}\n                      size=\"large\"\n                    >\n                      <FontAwesomeIcon\n                        icon={Viewer === NGLViewer ? faStarOfLife : faShareAlt}\n                      />\n                    </IconButton>\n                  </div>\n                  {noTrajectory || (\n                    <div>\n                      Speed:\n                      <Grid\n                        container\n                        spacing={2}\n                        className={style['extra-top-margin']}\n                      >\n                        <Grid item>\n                          <Icon>\n                            <FontAwesomeIcon icon={faWalking} />\n                          </Icon>\n                        </Grid>\n                        <Grid item xs>\n                          <Slider\n                            title=\"Change player speed\"\n                            value={speed}\n                            aria-labelledby=\"continuous-slider\"\n                            onChange={(_, value) => {\n                              setSpeed(value);\n                              setAsync('speed', value);\n                            }}\n                          />\n                        </Grid>\n                        <Grid item>\n                          <Icon>\n                            <FontAwesomeIcon icon={faBiking} />\n                          </Icon>\n                        </Grid>\n                      </Grid>\n                    </div>\n                  )}\n                  {noTrajectory || (\n                    <div>\n                      Frames:\n                      {framesSelect ? (\n                        <Slider\n                          title=\"Select frame number\"\n                          value={requestedFramesNumber}\n                          onChange={(_, value) =>\n                            setRequestedFramesNumber(value)\n                          }\n                          aria-labelledby=\"discrete-slider-restrict\"\n                          step={null}\n                          valueLabelDisplay=\"auto\"\n                          marks={frameNumbers}\n                          max={frameNumbers[frameNumbers.length - 1].value}\n                        />\n                      ) : (\n                        // DANI: Esto puede que no esté bien. Deberían ser 20 frames cuando es una PCA projection\n                        ' ' + viewerRef.current.totalExpectedFrames\n                      )}\n                    </div>\n                  )}\n                </div>\n              )}\n            </Card>\n            {settings && (\n              <div className={style['settings-right']}>\n                <RepresentationsManager\n                  components={finalComponents}\n                  representations={finalRepresentations}\n                  setRepresentations={setFinalRepresentations}\n                />\n              </div>\n            )}\n          </Card>\n          <CardContent style={{ padding: 0 }}>\n            {noTrajectory\n              // Render an empty div to avoid a Warning message since CardContent expect a ReactNode and an undefuned is not\n              ? (<div />)\n              // Render the loading/progress bar in case there is a trajectory to be loaded\n              : (<div className={style.progressContainer}>\n                  <div\n                    className={cn(style.progress, { [style.dark]: darkBackground })}\n                    onClick={handleManualProgress}\n                    onMouseMove={handleManualProgress}\n                  >\n                    <LinearProgress\n                      variant=\"buffer\"\n                      color=\"primary\"\n                      value={progress * 100}\n                      valueBuffer={load * 100}\n                      style={{ height: '1ch' }}\n                      className=\"prevent-drag\"\n                    />\n                  </div>\n                  {metadata.FRAMESTEP && (\n                    <div className={cn(style.timeInfo, { [style.dark]: darkBackground })}>\n                      Time: {currentFrameInfo.time} / {metadata.timeLength} ns \n                    </div>\n                  )}\n                </div>)\n            }\n            <div className={style.controls}>\n              <div>\n                <IconButton\n                  title=\"Close viewer\"\n                  className={cn({ [style.hidden]: !close })}\n                  disabled={!close}\n                  onClick={close}\n                  size=\"large\"\n                >\n                  <FontAwesomeIcon icon={faTimes} />\n                </IconButton>\n\n                <IconButton\n                  title={nailed ? 'Nailed viewer' : 'Nail viewer'}\n                  className={cn({ [style.hidden]: !nail })}\n                  disabled={!nail || nailed}\n                  onClick={() => {\n                    nail();\n                    toggleNailed();\n                  }}\n                  size=\"large\"\n                >\n                  <div className={style['flip-container']}>\n                    <div\n                      className={cn(style['flip-card-container'], {\n                        [style.flipped]: nailed,\n                      })}\n                    >\n                      <FontAwesomeIcon\n                        className={cn(style['flip-card'], style.front)}\n                        icon={faUnlock}\n                      />\n                      <FontAwesomeIcon\n                        className={cn(style['flip-card'], style.back)}\n                        icon={faLock}\n                      />\n                    </div>\n                  </div>\n                </IconButton>\n              </div>\n              <div>\n                {noTrajectory || (\n                  <>\n                    <IconButton\n                      title=\"Previous frame\"\n                      onClick={handlePreviousFrame}\n                      size=\"large\"\n                    >\n                      <FontAwesomeIcon icon={faStepBackward} />\n                    </IconButton>\n                    <IconButton\n                      title={playing ? 'Pause' : 'Play'}\n                      onClick={togglePlaying}\n                      size=\"large\"\n                    >\n                      <div className={style['flip-container']}>\n                        <div\n                          className={cn(style['flip-card-container'], {\n                            [style.flipped]: playing,\n                          })}\n                        >\n                          <FontAwesomeIcon\n                            className={cn(style['flip-card'], style.front)}\n                            icon={faPlay}\n                          />\n                          <FontAwesomeIcon\n                            className={cn(style['flip-card'], style.back)}\n                            icon={faPause}\n                          />\n                        </div>\n                      </div>\n                    </IconButton>\n                    <IconButton\n                      title=\"Next frame\"\n                      onClick={handleNextFrame}\n                      size=\"large\"\n                    >\n                      <FontAwesomeIcon icon={faStepForward} />\n                    </IconButton>\n                  </>\n                )}\n              </div>\n              <div>\n                <IconButton\n                  title={`${isFullscreen ? 'Exit' : 'Go'} fullscreen`}\n                  onClick={handlerFullscreenButton}\n                  className={cn(style['fullscreen-toggle'], {\n                    [style.hidden]: !screenfull.isEnabled,\n                    [style['is-fullscreen']]: isFullscreen,\n                    [style['settings']]: settings,\n                  })}\n                  disabled={!screenfull.isEnabled}\n                  size=\"large\"\n                >\n                  <FontAwesomeIcon\n                    icon={isFullscreen ? faCompress : faExpand}\n                  />\n                </IconButton>\n                <IconButton\n                  title={'Settings'}\n                  onClick={() => {\n                    openSettings(previous => !previous);\n                    viewerRef.current.autoResize();\n                  }}\n                  size=\"large\"\n                >\n                  <FontAwesomeIcon icon={faCog} />\n                </IconButton>\n              </div>\n            </div>\n          </CardContent>\n        </div>\n      </Card>\n    );\n  },\n);\n\nViewerWithControls.displayName = 'ViewerWithControls'\nexport default ViewerWithControls;\n"],"names":["useDefaultRepresentations","topology","useContext","ProjectCtx","useMemo","reps","iterchains","forEach","chain","metadataChainName","chainLabel","name","chainResidues","residues","respresentPolymer","polymer","filter","residue","classification","length","cgResidues","isCg","cgResiduesIndices","map","index","rangedSelection","nglSelection","residueIndices2Ngl","push","selection","type","color","aaResiduesIndices","ranges","generateRanges","shortRanges","range","shortResidueIndices","reduce","ac","curr","concat","longRanges","longResidueIndices","Set","has","ligandResidues","ligandIds","referenceId","ligandId","currentLigandResidueIndices","lipidClasses","lipidResidues","lipidResidueIndices","opacity","ionResidues","ionResidueIndices","otherClasses","otherResidues","otherResiduesIndices","setTooltipPosition","parent","tooltip","reference","offset","arguments","undefined","limits","getBoundingClientRect","size","x","Math","abs","left","right","y","top","bottom","availableDrawingMethods","label","value","DrawingMethodExists","opt","availableColoringMethods","availableColors","memo","_ref","components","representations","setRepresentations","_jsx","_Fragment","children","_jsxs","Table","padding","stickyHeader","TableHead","TableRow","TableCell","align","style","whiteSpace","Info","href","target","rel","className","TableBody","representation","component","scope","IconButton","title","onClick","previousRepresentations","show","FontAwesomeIcon","icon","faEye","faEyeSlash","TextField","defaultValue","variant","onKeyPress","event","key","disabled","custom","margin","Select","native","onChange","_ref2","cm","i","_ref3","customScheme","word","toUpperCase","slice","Slider","_","colSpan","Chip","faPlusCircle","KEY","get","storedValue","localStorage","getItem","JSON","parse","setAsync","async","schedule","set","setItem","stringify","TrajectoryFromCustomData","StateTransformer","builderFactory","CreateTransformer","display","from","PluginStateObject","Root","to","Molecule","Coordinates","params","data","PD","Value","Uint8Array","isHidden","natoms","apply","Task","create","Error","frameSize","coordSize","byteLength","nframes","coordinates","Float32Array","frameCoordinates","count","frame","x_coords","y_coords","z_coords","atom","z","elementCount","time","Time","xyzOrdering","isIdentity","molstarCoords","customParse","molstarSpec","DefaultPluginUISpec","layout","initial","isExpanded","controlsDisplay","showControls","controls","remoteState","defaultHighlightTypes","atoms","chains","selections","MolstarViewer","forwardRef","ref","playing","spinning","smooth","onProgress","bounce","selectedAtoms","selectedResidueIndices","selectedChains","selectedCustom","selectedDistances","selectedAngles","selectedRepresentation","snapRepresentations","noTrajectory","initialFocus","darkBackground","perspective","speed","drawingMethods","coloringMethods","opacities","showRepresentations","nglSelections","topologies","trajectories","anyLoadingTopology","anyLoadingTrajectory","highlightTypes","comps","metadata","topologyManager","focus","setFocus","useState","useEffect","parentRef","useRef","containerRef","stageRef","tooltipRef","inViewRef","isInView","useInView","tooltipContent","setTooltipContent","molstar","setMolstar","molstarInstance","createPluginUI","current","wrap","dispose","modelReference","setModelReference","builders","rawData","file","state","isGhost","trajectory","structure","parseTrajectory","model","createModel","trajectoryAtoms","trajectoryFinalExpectedFrames","frames","payload","bytesPerFrame","BYTES_PER_COORDINATE","fitLength","floor","totalPayload","totalFrames","coords","build","toRoot","commit","loadedTrajectories","managers","hierarchy","molstarTrajectory","TrajectoryFromModelAndCoordinates","modelRef","coordinatesRef","dependsOn","newModel","createStructure","lightRepresentation","createStructureRepresentationParams","typeParams","quality","ignoreHydrogens","ignoreHydrogensVariant","ignoreLight","StateTransforms","Representation","StructureRepresentation3D","animation","play","AnimateModelIndex","duration","maxFps","mode","direction","stop","handleResize","useCallback","canvas","querySelector","height","cursor","sleep","window","addEventListener","removeEventListener","useImperativeHandle","autoResize","displayFocus","stringifiedArray","viewerControls","getOrientation","elements","toString","console","log","centerFocus","comp","sele","currentFrame","compList","trajList","total","this","setFrame","totalExpectedFrames","expectedFrames","node","cn","payloadToNGLCoordinates","trajectoryData","trajectoryFrames","trajectoryCoordinates","overallCoordinates","subarray","error","payloadToNGLCoordinatesFiltered","atomCount","atomIndices","expectedAtomNumber","k","j","indexOf","e","payloadToNGLCoordinatesAlternative","pdbFile","format","backboneAtoms","heavyAtoms","a","getAtomProxy","atomname","element","DEFAULT_ORIENTATION_TRANSITION_DURATION","CHAIN_SELECTION","interpolateSpeed","currentSpeed","NGLViewer","xSelection","rotateX","xAxisStep","curatedOrientation","ori","ORIENTATION","sortedOrientation","Matrix4","mainComponent","setMainComponent","mainNglFile","setMainNglFile","firstTime","parsedTopologies","setParsedTopologies","alreadyParsedTopologies","url","add","stringBlob","Blob","autoLoad","defaultRepresentation","ext","then","prasedFile","newParsedTopology","previous","catch","previousParsedTopologies","runningTasks","setRunningTasks","handleTasksChange","stage","Stage","tasks","signals","countChanged","viewerLogs","beginning","Date","now","currentTick","round","padStart","repeat","viewer","setBackground","setCamera","frameCount","frameHandler","progress","clamp","frameChanged","remove","c","stageComp","find","stc","myName","topologyURL","atomStore","occupancy","Array","fill","safeBonds","atomBonds","bondStore","atomIndex1","Int32Array","atomIndex2","bondOrder","bondedAtomsIndices","atomIndex","atom1","bondedAtomIndex","atom2","addBond","componentObject","cloneDeep","addComponentFromObject","onlyTopology","componentRepresentations","rep","registredNames","r","customColorScheme","colorScheme","ColormakerRegistry","addSelectionScheme","colorName","s","Option","isValidColor","parameters","colorDomain","surfaceType","side","depthWrite","other","previousRepresentation","reprList","previousType","repr","previousSelection","string","removeRepresentation","addRepresentation","setParameters","labelName","annotationList","annotation","elm","document","createElement","innerText","backgroundColor","center","structureView","addAnnotation","removeAnnotation","charAt","registredName","nameHighlight","previousHighlightRepresentation","nameContextHighlight","previousContextRepresentation","seleHighlight","join","scale","otherResidueAtomsSelection","getAtomByIndex","residueNglSelections","residueIndex","getResidueByIndex","overallNglSelection","currentRepresentations","snapRepresentation","previousSnapRepresentation","currentRepresentation","atomPair","labelUnit","labelColor","previousComponent","removeComponent","rotationGroup","rotateY","shape","Shape","radialSegments","boxCenter","object","bBox","boundingBox","addBox","max","min","roughness","atomTriple","trajectoryPayloads","combinedURL","combinedProgress","framedURL","framedURLs","fitPayload","sameTrajectory","removeTrajectory","bind","cb","nb","appendBuffer","lastFrameIndex","completedTrajectory","trajectoryAtomIndices","compTrajectories","nglFile","nglTrajectory","updateNGLFile","currentFrames","discardBytes","newTrajectoryData","newTrajectoryFrames","_frameCount","nglPlayer","player","timeout","end","interpolateStep","isRunning","_currentFrame","setNGLFile","Frames","addTrajectory","goToNextFrame","haltedRunning","pause","spinAnimation","paused","toggleSpin","interpolateType","cancel","handler","detail","eventtype","highlight","manager","querySelectorAll","thisHiglight","attributeValues","attributes","start","split","sourceStart","getResidueByParameters","sourceEnd","chainName","number","substr","previousStructureRepresentation","animationControls","orient","colorSchemeID","autoView","appendChild","mouseControls","formatOutput","resname","referenceName","referenceType","referenceNumber","hideTooltip","clearTimeout","hovered","pickingProxy","setTimeout","description","bond","mouse","position","firstFocus","transition","displayName","frameRangeFormat","useViewerData","requestedFramesNumber","onLoad","accessionAndMdNumber","fileDescriptors","structureData","requestedTopologies","setRequestedTopologies","setAnyLoadingTopology","previousRequestedTopologies","newRequestedTopologies","atomSelection","loading","requested","setTopologies","currentRequests","requestedTopology","postData","protocol","substring","https","http","requestOptions","urlParse","isStructureEndpoint","path","endsWith","method","headers","request","response","responseContent","on","chunk","anyLoading","some","t","write","requestedTrajectories","setRequestedTrajectories","setAnyLoadingTrajectory","currentTrajectories","newTrajectories","baseUrl","BASE_PATH_PROJECTS","isPrincipal","requestedFrame","urls","trajectoryURLs","u","framed","frameRange","parsed","exec","groups","step","parseFrameRange","trajectoryFilename","trajectoryFileDescriptor","filename","trajectoryMetadata","requestedFrames","Number","isFinite","returnedFrames","finalUrl","maximumFrames","ceil","framesRange","framesCount","getFrames","frameStep","setTrajectories","requestPathsteps","pathname","isTrajectoryEndpoint","totalBytes","previousTrajectories","ArrayBuffer","byteCount","currentTrajectory","redundantList","abort","mainComponentTrajectoryURLs","mainTrajectories","overallFrames","b","overallProgress","LOW","Symbol","MEDIUM","HIGH","connectionLevel","navigator","connection","effectiveType","saveData","DEFAULT_STARTS_PLAYING","reducedMotion","innerWidth","DEFAULT_FRAME_NUMBER","DEFAULT_FRAME_NUMBERS","DEFAULT_COMPONENT_PARAMETERS","DEFAULT_REPRESENTATION_PARAMETERS","completeMissingFields","targetObject","defaultValuesObject","anyChange","fieldName","Object","entries","ViewerWithControls","startingComponents","startingRepresentations","componentsState","representationsState","startsPlaying","close","nail","framesSelect","preventTrajectory","props","Viewer","setViewer","currentFrameInfo","setCurrentFrameInfo","frameNumbers","maximumSnapshots","mdFrames","pop","fixedStartingComponents","copyObject","finalComponents","setFinalComponents","completeComponentMissingFields","defaults","defComponents","componentNames","uniqueComponentNames","v","fixedStartingRepresentations","finalRepresentations","setFinalRepresentations","defaultRepresentations","completeRepresentationMissingFields","defRepresentations","viewerRef","nailed","toggleNailed","useToggleState","togglePlaying","toggleSpinning","setSmooth","toggleDarkBackground","togglePerspective","setProgress","load","setLoad","isFullscreen","setIsFullscreen","screenfull","setRequestedFramesNumber","setSpeed","settings","openSettings","handleProgress","prog","timeInNs","FRAMESTEP","timeLength","toFixed","handleLoad","handleManualProgress","buttons","clientX","currentTarget","width","handleFrameChange","handlePreviousFrame","handleNextFrame","handleFullscreenChange","handlerFullscreenButton","handleKeyPress","tagName","preventDefault","prev","hasPbcResidues","pbcResidues","_hasPbcResidues","Card","border","boxShadow","id","faSyncAlt","shiftKey","ctrlKey","metaKey","faDotCircle","faImages","faVideo","faAdjust","faSquare","faCube","currentViewer","faStarOfLife","faShareAlt","Grid","container","spacing","item","Icon","faWalking","xs","faBiking","valueLabelDisplay","marks","RepresentationsManager","CardContent","onMouseMove","LinearProgress","valueBuffer","faTimes","faUnlock","faLock","faStepBackward","faPlay","faPause","faStepForward","faCompress","faExpand","faCog"],"sourceRoot":""}