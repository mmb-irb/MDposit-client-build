{"version":3,"file":"static/js/3715.002f98f3.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/animated-card/style.module.css?d4d9","components/animated-card/index.js","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js","pages/accession/populations/index.js","webpack://mdposit/./src/pages/accession/populations/style.module.css?57ea"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__M9GCG\"};","import React, { useLayoutEffect, useRef, forwardRef } from 'react';\nimport { Card } from '@mui/material';\n\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nconst KEYFRAMES = { opacity: [0, 1] };\n\nif (!reducedMotion()) {\n  KEYFRAMES.transform = ['translateY(50px)', 'translateY(0)'];\n}\n\nconst ANIMATION_OPTIONS = {\n  fill: 'both',\n  easing: 'cubic-bezier(0, .99, .56, 1.1)',\n  duration: 500,\n};\n\n// Make the card appear and slide softly from down to up when the page is loaded\nconst AnimatedCard = forwardRef(({ overrideComponent, ...props }, ref) => {\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const node = containerRef.current && containerRef.current.firstElementChild;\n    if (!(node && node.animate)) return;\n\n    const index = Array.from(\n      document.querySelectorAll('main section'),\n    ).findIndex(section => node === section);\n\n    const animation = node.animate(KEYFRAMES, {\n      ...ANIMATION_OPTIONS,\n      delay: index * 150,\n    });\n\n    return () => animation.cancel();\n  }, []);\n\n  const Component = overrideComponent ? 'section' : Card;\n\n  return (\n    <div ref={containerRef} className={style.container}>\n      <Component component=\"section\" {...props} ref={ref} />\n    </div>\n  );\n});\n\nexport default AnimatedCard;\n","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n  const {\n      className,\n      raised = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    raised\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;","import React, { useContext, useState, useRef, useMemo } from 'react';\n// A hook to track whenever some element is on screen\nimport { useInView } from 'react-intersection-observer';\n\nimport {\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n} from '@mui/material';\n\nimport Card from '../../../components/animated-card';\nimport ViewerWithControls from '../../../components/viewer-with-controls';\n\nimport style from './style.module.css';\n\nimport { ProjectCtx } from '../../../contexts';\n\nimport Loading from '../../../components/loading';\n\n// Define permanent options for the \"useInView\"\nconst useInViewOptions = { triggerOnce: true, rootMargin: '100px' };\n\n// Set the meaningless populations cutoff\nconst populationsCutoff = 0.001;\n\n// Set a function to calculate the average value from a values array\nconst roundedPercent = value => {\n  const percent = value * 100;\n  const rounded = Math.round(percent * 100) / 100;\n  const label = rounded.toString().padEnd(4, '0');\n  return label;\n};\n\nconst Populations = () => {\n  // Track if the NGL viewer\n  // The status isNglVisible is returned true/false when the element is in/out the screen respectively\n  const [nglRef, isNglVisible] = useInView(useInViewOptions);\n\n  // Get the current project metadata\n  const { metadata, populations } = useContext(ProjectCtx);\n\n  // Set a ref to the ngl which allows access to the ngl viewer exposed methods\n  const viewerRef = useRef(null);\n\n  // Set when one point in the graph is selected\n  const [selectedFrame, setSelectedFrame] = useState(0);\n\n  // Send a request to the API with the url of the rgyr analysis\n  const { loading, payload, error } = populations;\n\n  // Set an array of objects, where each object includes the population value and the frame it belongs to\n  // Populations are sorted so the biggest populations are first and there is a cutoff to exclude meaningless populations\n  const sortedPopulations = useMemo(() => {\n    if (!payload) return;\n    const formatedPopulations = [];\n    payload.forEach((population, i) => {\n      if (population < populationsCutoff) return;\n      formatedPopulations.push({\n        pop: population,\n        frame: i,\n      });\n    });\n    formatedPopulations.sort((a, b) => {\n      return a.pop < b.pop ? 1 : a.pop > b.pop ? -1 : 0;\n    });\n    return formatedPopulations;\n  }, [payload]);\n\n  // Render loading or error messages according with the API response\n  if (loading) return <Loading />;\n  else if (error) return error.toString();\n  else if (!payload) return 'Something bad happened';\n\n  if (!metadata) return <Loading />;\n\n  return (\n    <>\n      <Card className={style.tablecard}>\n        <div className={style.paper}>\n          <Table stickyHeader size=\"small\">\n            <TableHead>\n              <TableRow>\n                <TableCell key={0}>{'Population (%)'}</TableCell>\n                <TableCell key={1}>{'Frame'}</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {sortedPopulations.map((population, i) => {\n                const frame = population.frame;\n                return (\n                  <TableRow\n                    key={i}\n                    // Hover only when it is not already selected\n                    hover={frame !== selectedFrame}\n                    className={\n                      frame === selectedFrame ? style.selectedrow : style.row\n                    }\n                    onClick={() => setSelectedFrame(frame)}\n                  >\n                    <TableCell key={0}>\n                      {roundedPercent(population.pop)}\n                    </TableCell>\n                    <TableCell key={1}>{frame}</TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </div>\n      </Card>\n      <Card className={style.nglcard} ref={nglRef}>\n        {/* Render the NGL viewer when it is on screen*/}\n        {isNglVisible ? (\n          <ViewerWithControls\n            className={style.container}\n            requestedFrame={selectedFrame}\n            ref={viewerRef}\n          />\n        ) : (\n          <div style={{ height: '50vh' }} />\n        )}\n      </Card>\n    </>\n  );\n};\n\nexport default Populations;\n","// extracted by mini-css-extract-plugin\nexport default {\"paper\":\"style_paper__-IPRl\",\"tablecard\":\"style_tablecard__36QJ9\",\"nglcard\":\"style_nglcard__UaXJ8\",\"container\":\"style_container__4ECe+\",\"selectedrow\":\"style_selectedrow__yv8kY\",\"row\":\"style_row__fdlru\"};"],"names":["KEYFRAMES","opacity","reducedMotion","transform","ANIMATION_OPTIONS","fill","easing","duration","forwardRef","_ref","ref","overrideComponent","props","containerRef","useRef","useLayoutEffect","node","current","firstElementChild","animate","index","Array","from","document","querySelectorAll","findIndex","section","animation","delay","cancel","Component","Card","_jsx","className","style","children","component","getCardUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardRoot","styled","Paper","name","overridesResolver","styles","root","overflow","React","inProps","useDefaultProps","raised","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","clsx","elevation","undefined","useInViewOptions","triggerOnce","rootMargin","roundedPercent","value","percent","Math","round","toString","padEnd","Populations","nglRef","isNglVisible","useInView","metadata","populations","useContext","ProjectCtx","viewerRef","selectedFrame","setSelectedFrame","useState","loading","payload","error","sortedPopulations","useMemo","formatedPopulations","forEach","population","i","push","pop","frame","sort","a","b","Loading","_jsxs","_Fragment","tablecard","paper","Table","stickyHeader","size","TableHead","TableRow","TableCell","TableBody","map","hover","selectedrow","row","onClick","nglcard","ViewerWithControls","container","requestedFrame","height"],"sourceRoot":""}