{"version":3,"file":"static/js/3753.7838ace0.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/interaction-selector/style.module.css?5392","components/interaction-selector/index.js","pages/accession/rmsd-pairwise/index.js","webpack://mdposit/./src/components/viewer-spawner/style.module.css?df6e","components/viewer-spawner/index.js","webpack://mdposit/./src/pages/accession/rmsd-pairwise/style.module.css?bc81","hooks/use-remfo/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"horizontal\":\"style_horizontal__2DIWx\",\"horizontal-margined\":\"style_horizontal-margined__e9fQR\"};","import React, { Suspense } from 'react';\n\nimport {\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Select,\n  MenuItem,\n  TextField,\n  IconButton,\n} from '@mui/material';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport Loading from '../loading';\n\nimport style from './style.module.css';\n\nconst residueOptions = [\n  { label: 'All residues', value: 'residue_indices' },\n  { label: 'Interface residues', value: 'interface_indices' },\n];\n\n// Render a panel which allows to select the desired interaction\n// If the user selects a new interaction then the 'setSelectedInteraction' is set as its index\n// Interactions have the following structure:\n// { name: string, label: string, ... }\n// The 'label' field will replace the 'name' in the selector labels if exists\n// When 'selectedResidues' is passed, render also tools to select interaction residues\n// Residue options are 'all' or 'interface' residues\n// DANI: La guinda sería un 'custom' en las opciones de residuos\n// DANI: La idea sería desplegar dos residue selectors, uno para cada interaction agent\nconst InteractionSelector = ({\n  interactions,\n  selectedInteraction,\n  setSelectedInteraction,\n  selectedResidues,\n  setSelectedResidues,\n  selectedOrder,\n  handleToggleOrder,\n  firstOrderLabel, // The label to be represented over the first order rectangle\n  firstOrderTooltip, // The tooltip to be shown for the first order rectangle\n  secondOrderLabel, // The label to be represented over the second order rectangle\n  secondOrderTooltip, // The tooltip to be shown for the second order rectangle\n  toggleOrderTooltip, // The tooltip to be shown for the toggle order button\n  interfaceOnly = false, // Set if the 'All residues' button is enabled\n}) => {\n  const changeInteraction = event => {\n    setSelectedInteraction(event.target.value);\n  };\n\n  const changeResidues = event => {\n    setSelectedResidues(event.target.value);\n  };\n\n  const changeOrder = () => {\n    handleToggleOrder();\n  };\n\n  const currentInteraction = interactions[selectedInteraction];\n\n  // Render\n  return (\n    <Suspense fallback={<Loading />}>\n      <Select\n        value={selectedInteraction}\n        onChange={changeInteraction}\n        className={style['horizontal-margined']}\n      >\n        {interactions.map((interaction, i) => (\n          <MenuItem key={i} value={i} disabled={interaction.failed}>\n            {interaction.label || interaction.name}\n          </MenuItem>\n        ))}\n      </Select>\n      {selectedResidues && (\n        <RadioGroup\n          value={selectedResidues}\n          onChange={changeResidues}\n          className={style.horizontal}\n        >\n          {residueOptions.map((opt, i) => (\n            <FormControlLabel\n              key={i}\n              value={opt.value}\n              control={<Radio color=\"primary\" />}\n              label={opt.label}\n              disabled={opt.label === 'All residues' && interfaceOnly}\n            />\n          ))}\n        </RadioGroup>\n      )}\n      {selectedOrder !== undefined && (\n        <>\n          <TextField\n            //margin=\"dense\"\n            label={firstOrderLabel}\n            title={firstOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_1\n                : currentInteraction.agent_2\n            }\n          />\n          <IconButton\n            title={toggleOrderTooltip}\n            onClick={changeOrder}\n            size=\"large\"\n          >\n            <FontAwesomeIcon icon={faExchangeAlt} />\n          </IconButton>\n          <TextField\n            //margin=\"dense\"\n            label={secondOrderLabel}\n            title={secondOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_2\n                : currentInteraction.agent_1\n            }\n          />\n        </>\n      )}\n    </Suspense>\n  );\n};\n\nexport default InteractionSelector;\n","import React, { useContext, useState, useMemo, useRef } from 'react';\n\nimport { CardContent, Chip, Typography } from '@mui/material';\n\nimport useAPI from '../../../hooks/use-api';\nimport useRemfo from 'src/hooks/use-remfo';\n\nimport Card from '../../../components/animated-card';\nimport Loading from '../../../components/loading';\nimport ViewerSpawner from '../../../components/viewer-spawner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\n\nimport { ProjectCtx } from '../../../contexts';\n\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\n\nimport style from './style.module.css';\n\nimport InteractionSelector from '../../../components/interaction-selector';\nimport Heatmap from '../../../components/heatmap';\n\n// Keep constant representation references to keep them between renders\nconst REPRESENTATION_REFERENCES = {\n  base: ['First frame', 'Second frame'],\n  interface: ['First frame interface', 'Second frame interface']\n}\n\n// Set the representation colors\nconst REPRESENTATION_COLORS = {\n  base: ['red', 'blue'],\n  interface: [\n    ['orange', 'yellow'], // Agent 1\n    ['purple', 'green'], // Agent 2\n  ] \n}\n\nconst RmsdPairwise = () => {\n  // Get the current project data\n  const {\n    accessionAndMdNumber,\n    metadata,\n    interactions: defaultInteractions,\n    topology,\n  } = useContext(ProjectCtx);\n\n  // Set a ref to the ngl which allows access to the ngl viewer exposed methods\n  const viewerRef = useRef(null);\n\n  // Set the available interactions\n  // Add the 'overall' option at the beginning, as a 'no interaction' option\n  const interactions = useMemo(() => {\n    if (!defaultInteractions) return [{ name: 'Overall' }];\n    // Label all metadata interactions with the 'interface residues' ending\n    defaultInteractions.forEach(interaction => {\n      interaction.label = interaction.name + ' (interface residues)';\n    });\n    const interactions = [{ name: 'Overall' }, ...defaultInteractions];\n    return interactions;\n  }, [defaultInteractions]);\n\n  // Send a request to the API with the url of the analyses index\n  const analysesUrlBase = `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses`;\n  const indexUrl = `${analysesUrlBase}/rmsd-pairwise`;\n  const { loading: indexLoading, payload: indexPayload, error: indexError } = useAPI(indexUrl);\n\n  // The interaction to be displayed\n  const [selectedInteraction, setSelectedInteraction] = useState(0);\n\n  // The newest format has 4 fields: acceptors, donors, hydrogens and hbonds\n  // The hbonds includes arrays of true and false per frame\n  const interaction = interactions && interactions[selectedInteraction];\n\n  // Get analysis data from the API\n  // Set the target interaction name\n  const { interactionName, analysisName, analysisNote } = useMemo(() => {\n    // Wait for main data to be downloaded\n    if (!interaction || !indexPayload) return {};\n    // Check if the analysis is in the old or the new format\n    const isOld = indexPayload.data !== undefined;\n    // If so, there is no target analysis name, but the whole data is already in the payload\n    if (isOld) return { interactionName: interaction.name };\n    const targetEntry = indexPayload.find(entry => entry.name === interaction.name);\n    return {\n      interactionName: interaction.name,\n      analysisName: targetEntry.analysis,\n      // Notes are very exceptional, but some analyses may have\n      analysisNote: targetEntry.note\n    };\n  }, [interaction, indexPayload]);\n\n  // Send a request to the API with the url of some specific analysis\n  const interactionAnalysisUrl = analysisName ? `${analysesUrlBase}/${analysisName}` : null;\n  const { loading, payload, error } = useAPI(interactionAnalysisUrl);\n\n  // Now set the actual dataset to be used\n  // Note that this is a compatibility layer between the old and the new system\n  const dataset = useRemfo(previous => {\n    // Wait for the download to finish\n    if (!indexPayload) return previous;\n    // Check if the analysis is in the old or the new format\n    const isOld = indexPayload.data !== undefined;\n    // If this is the new system then the dataset is the payload itself\n    if (!isOld) {\n      if (!payload) return previous;\n      return payload;\n    }\n    // If this is the old system then the dataset is in the index payload\n    const interactionData = indexPayload.data.find(entry => entry.name === interactionName);\n    if (!interactionData) return { error: `Dataset for interaction \"${interactionName}\" not found` };\n    return interactionData;\n  }, [indexPayload, payload, interactionName]);\n\n  // Process analysis data for the heatmap\n  const { rmsds, AxesValues } = useMemo(() => {\n    // Return if the dataset is not ready\n    if (!dataset) return {};\n    // Get the rmsds values\n    const rmsds = dataset.rmsds;\n    // Calculate the step\n    // DANI: Esto no es del todo correcto pero hace que los números de frames siempre cuadren\n    const dataLength = rmsds.length;\n    const AxesStep = Math.floor(metadata.mdFrames / (dataLength - 1));\n    // DANI: Esto es lo correcto\n    // DANI: En algunos análisis antiguos las frames no cuadran y hay que rehacerlos\n    //const xAxesStep = dataset.step;\n    // Calculate the frames labels\n    // These values are used for BOTH axes\n    const AxesValues = Array(dataLength)\n      .fill(undefined)\n      .map((v, i) => i * AxesStep);\n    return { rmsds, AxesValues };\n  }, [dataset, metadata]);\n\n  // The selected frames\n  const [selectedFramePair, setSelectedFramePair] = useState(null);\n\n  // Set the component state\n  const [components, setComponents] = useState(null);\n\n  // Set the components value\n  useMemo(() => {\n    // If there is no selected pair then set the components as null\n    if (!selectedFramePair) return setComponents(null);\n    // If a frame pair is selected then set the components or update them accordingly\n    setComponents(previousComponents => {\n      // If there are no previous components then set them from scratch\n      if (previousComponents === null) {\n        return selectedFramePair.map((frame, index) => ({\n          name: `Frame ${index === 0 ? 'A' : 'B'}`,\n          frame: frame\n        }));\n      }\n      // If components already exists then just update them\n      selectedFramePair.forEach((frame, index) => {\n        const previousComponent = previousComponents[index];\n        previousComponent.name = `Frame ${index === 0 ? 'A' : 'B'}`;\n        previousComponent.frame = frame;\n      });\n      return [...previousComponents];\n    });\n  }, [selectedFramePair]);\n\n  // Get the default representations\n  const defaultRepresentations = topology && topology.defaultRepresentations;\n\n  // Set the component state\n  const [representations, setRepresentations] = useState(null);\n\n  // Set the viewer representations\n  useMemo(() => {\n    // If there are no components then clear the representations and stop here\n    if (!components) return setRepresentations(null);\n    // Get the selected interaction\n    const interaction = interactions[selectedInteraction];\n    // Get also the number of the interacting agents\n    const agents = [\n      { name: interaction.agent_1, interface: interaction.interface_indices_1 },\n      { name: interaction.agent_2, interface: interaction.interface_indices_2 }\n    ];\n    // Setup every representation or update the already existing ones\n    setRepresentations(previousRepresentations => {\n      // Set a list to keep updated representations\n      const newRepresentations = [];\n      // Find out if there is a selected interaction\n      const currentInteraction = selectedInteraction > 0;\n      // Find out if there was a selected interaction in the previous representations\n      const previousInteraction = !!(previousRepresentations && previousRepresentations.find(\n        rep => rep.reference && rep.reference.includes(REPRESENTATION_REFERENCES.interface[0])));\n      // Check if there was interactions in the previous\n      // If there were no previous representations then set the default values\n      if (previousRepresentations === null) {\n        components.forEach((component, index) => {\n          // Set the overall representations\n          // In case there is no interaction selected this would be opaque\n          // In case there is an interaction selected this would be transparent (just a reference)\n          defaultRepresentations.forEach(representation => {\n            const newRepresentation = { ...representation };\n            newRepresentation.name = `${component.name} - ${representation.name}`;\n            newRepresentation.color = REPRESENTATION_COLORS.base[index];\n            newRepresentation.component = component.name;\n            newRepresentation.reference = `${REPRESENTATION_REFERENCES.base[index]} - ${representation.name}`;\n            if (currentInteraction) {\n              newRepresentation.name += ' reference';\n              newRepresentation.opacity = 0.1;\n            }\n            newRepresentations.push(newRepresentation);\n          });\n        });\n      }\n      // If representations already exist then update them\n      else {\n        components.forEach((component, index) => {\n          // Iterate the default representations\n          defaultRepresentations.forEach(representation => {\n            // Find the previous corresponding representation\n            const reference = `${REPRESENTATION_REFERENCES.base[index]} - ${representation.name}`;\n            const previousRepresentation = previousRepresentations.find(rep => rep.reference === reference);\n            if (!previousRepresentation) throw new Error(`No previous representation with reference ${reference}`);\n            // Update the representation name and component\n            const previousComponentName = previousRepresentation.name.split(' - ')[0];\n            previousRepresentation.name = previousRepresentation.name.replace(previousComponentName, component.name);\n            previousRepresentation.component = component.name;\n            // Add or remove the 'reference' tail from the name and update the opacity\n            // If we passed from no selected interaction to selected interaction\n            if (currentInteraction && !previousInteraction) {\n              previousRepresentation.name += ' reference';\n              previousRepresentation.opacity = 0.1;\n            }\n            // If we passed from selected interaction to no selected interaction\n            if (!currentInteraction && previousInteraction) {\n              previousRepresentation.name = previousRepresentation.name.replace(' reference', '');\n              previousRepresentation.opacity = 1;\n            }\n            newRepresentations.push(previousRepresentation);\n          });\n        });\n      }\n      // Set interfaces representations, each with different colors\n      if (currentInteraction) {\n        // If we did not have a selected interaction then setup representations with default values\n        if (previousInteraction === false) {\n          components.forEach((component, index) => {\n            agents.forEach((agent, agentIndex) => {\n              // Get the interaction interface, if it exists, in NGL format\n              // The default interaction (Overall) has no interface\n              const selection = agent.interface && topology.residueIndices2Ngl(agent.interface);\n              // Set the new representation\n              newRepresentations.push({\n                name: `${component.name} - ${agent.name} interface`,\n                color: REPRESENTATION_COLORS.interface[index][agentIndex],\n                selection: selection.rangedSelection,\n                type: 'licorice',\n                component: component.name,\n                reference: `${REPRESENTATION_REFERENCES.interface[index]} - ${agent.name}`\n              });\n            });\n          });\n        }\n        // Otherwise update the already existing representations\n        else {\n          components.forEach((component, index) => {\n            agents.forEach(agent => {\n              // Get the interaction interface, if it exists, in NGL format\n              // The default interaction (Overall) has no interface\n              const selection = agent.interface && topology.residueIndices2Ngl(agent.interface);\n              // Find the previous representation for interface 1\n              const reference = `${REPRESENTATION_REFERENCES.interface[index]} - ${agent.name}`;\n              const previousRepresentation = previousRepresentations.find(\n                rep => rep.reference === reference\n              );\n              // Update its name, selection and component\n              previousRepresentation.name = `${component.name} - ${agent.name} interface`;\n              previousRepresentation.selection = selection.rangedSelection;\n              previousRepresentation.component = component.name;\n              newRepresentations.push(previousRepresentation);\n            });\n          });\n        }\n      }\n      // Add previous custom representations (added by the user)\n      previousRepresentations && previousRepresentations.filter(rep => rep.custom)\n        .forEach(representation => {\n          // Update the component to target the first component\n          representation.component = components[0].name;\n          newRepresentations.push(representation);\n        });\n      // Update the representations state\n      return newRepresentations;\n    });\n  }, [\n    components,\n    topology,\n    interactions,\n    selectedInteraction,\n    defaultRepresentations,\n  ]);\n\n  // Render loading or error messages according with the API response\n  // Render loading or error messages according with the API response\n  if (indexError) return indexError.toString();\n  if (error) return error.toString();\n  if (dataset && dataset.error) return dataset.error;\n  if (!dataset) {\n    if (indexLoading || loading) return <Loading />;\n    // If there are no interactions or topology\n    if (!topology) return 'There is no topology';\n    return 'Something bad happened with the analysis data';\n  }\n\n  // Render\n  return (\n    <>\n      <Card>\n        <CardContent className={style.horizontal}>\n          <Typography variant=\"h6\">Residues selection:</Typography>\n          <InteractionSelector\n            interactions={interactions}\n            selectedInteraction={selectedInteraction}\n            setSelectedInteraction={setSelectedInteraction}\n          />\n          {selectedFramePair && (\n            <div>\n              {components && components.map((component, c) => (\n                <Chip key={c} label={'Frame ' + component.frame}\n                  style={{\n                    margin: '0.2em',\n                    backgroundColor: c === 0 ? 'red' : 'blue',\n                  }}\n                />\n              ))}\n              {selectedInteraction > 0 && components && components.map((component, c) => {\n                  // Get the interacting agents\n                  const interaction = interactions[selectedInteraction];\n                  const agents = [ interaction.agent_1, interaction.agent_2 ];\n                  // Generate a chip for every agent\n                  return agents.map((agent, a) => (\n                    <Chip key={a} label={'Frame ' + component.frame + ' - ' + agent}\n                      style={{\n                        margin: '0.2em',\n                        backgroundColor: a === 0\n                          ? c === 0\n                            ? 'orange'\n                            : 'purple'\n                          : c === 0\n                            ? 'yellow'\n                            : 'green',\n                      }}\n                    />\n                  ));\n                }\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      {analysisNote && <Card className={style.margined}>\n        <CardContent>\n          <div style={{ fontWeight: 'bold' }}>\n            <FontAwesomeIcon icon={faExclamationTriangle} size={'lg'} />\n            {' ' + analysisNote}\n          </div>\n        </CardContent>\n      </Card>}\n      <div className={indexLoading || loading ? style.disabled : style.enabled}>\n        <Card className={style.margined} id=\"heatmap\">\n          <CardContent>\n            <Heatmap\n              inputData={{\n                data: rmsds,\n                xLabels: AxesValues,\n                yLabels: AxesValues,\n              }}\n              onTooltip={({ value, xAxisValue, yAxisValue }) =>\n                `${xAxisValue} - ${yAxisValue}\\n${Math.round(value * 100) / 100} Å`\n              }\n              onClick={({ xAxisValue, yAxisValue }) =>\n                setSelectedFramePair([xAxisValue, yAxisValue])\n              }\n              legendTitle={'RMSD (Å)'}\n              maxColor={'red'}\n              minColor={'blue'}\n              xTitle={'Frames'}\n              yTitle={'Frames'}\n            />\n          </CardContent>\n        </Card>\n      </div>\n      <ViewerSpawner\n        // Set a viewer if there is selected frames\n        newViewer={components\n          ? {\n              componentsState: [components, setComponents],\n              representationsState: [representations, setRepresentations],\n              selRef: selectedFramePair,\n              viewerRef: viewerRef\n            }\n          : null\n        }\n        // If the nailed/closed viewer is the current viewer then reset the 'selected'\n        onNail={viewer =>\n          setSelectedFramePair(previous => {\n            if (viewer.selRef === previous) return null;\n            else return previous;\n          })\n        }\n        onClose={viewer =>\n          setSelectedFramePair(previous => {\n            if (viewer.selRef === previous) return null;\n            else return previous;\n          })\n        }\n      />\n    </>\n  );\n};\n\nexport default RmsdPairwise;\n","// extracted by mini-css-extract-plugin\nexport default {\"rnd\":\"style_rnd__Txifm\",\"floating-card\":\"style_floating-card__HHpby\"};","import React, { lazy, Suspense, useRef, useState } from 'react';\n\n// Rnd is the resizable and draggable system where the ngl viewer is placed\nimport { Rnd } from 'react-rnd';\n\nimport Card from '../animated-card';\n\nimport style from './style.module.css';\n\nconst ViewerWithControls = lazy(() =>\n  import(\n    /* webpackChunkName: 'viewer-with-controls' */ '../viewer-with-controls'\n  ),\n);\n\n// Minimal ngl window height\nconst MIN_NGL_DIMENSION = 150;\n\n// Counter to get always the maximum zIndex\n// This is useful to set a new or currently dragged/resized ngl window over the others\nlet maxZ = 0;\nconst nextZ = () => {\n  maxZ += 1;\n  return maxZ;\n};\n\n// This function spawns all the NGL viewers needed\n// i.e. one viewer with the requested 'props' and all previous viewers which have been nailed\nconst ViewerSpawner = ({ newViewer, nailing = true, onNail, onClose }) => {\n  // Store here all nailed NGL viewers\n  const [nailedViewers, setNailedViewers] = useState([]);\n\n  // Set the viewers as the nailed viewers and the new viewer\n  const viewers = [...nailedViewers];\n\n  // Keep listed all arrays which have been used (i.e. ngl viewers which have been nailed or closed)\n  const usedIds = useRef([]);\n\n  if (newViewer) {\n    // Find a new suitable Id that meet 2 conditions:\n    // - There is never 2 viewers with the same id, so we avoid errors\n    // - If we pick diferent frames in the graph without nailing anything, the current viewer has always the same id\n    // (This way the current viewer does not appear in the origin position every time)\n    const getNewId = () => {\n      let id = 0;\n      while (id < 999) {\n        if (usedIds.current.indexOf(id) === -1) return id;\n        id += 1;\n      }\n      console.error('Maximum number of viewers reached');\n    };\n\n    // Set a unique id for this props based in the last nailed viewer\n    newViewer.id = getNewId();\n    newViewer.close = () => {\n      if (nailing) {\n        setNailedViewers(nailed => {\n          const newNailed = [...nailed];\n          const index = nailed.indexOf(newViewer);\n          if (index !== -1) newNailed.splice(index, 1);\n          return newNailed;\n        });\n      }\n      if (onClose) onClose(newViewer);\n      usedIds.current.push(newViewer.id);\n    };\n    // If the nailer function is passed, add the logic for the viewer to be nailed further\n    if (nailing)\n      newViewer.nail = () => {\n        setNailedViewers(nailed => [...nailed, newViewer]);\n        if (onNail) onNail(newViewer);\n        usedIds.current.push(newViewer.id);\n      };\n    // Add the current viewer to the viewers list\n    viewers.push(newViewer);\n  }\n\n  // Render a viewer for each prop. Use the 'selected' parameter as unique id\n  return viewers.map(viewer => <NGLViewerInDND key={viewer.id} {...viewer} />);\n};\n\n// This component render a small NGL viewer\n// It is called when user clicks in a point in the projections component\n// Also it is called by the generic analysis page\nconst NGLViewerInDND = props => {\n  // Set a reference for the viewer\n  // If a reference is passed among the viewer arguments then use it instead\n  const viewerRef = props.viewerRef || useRef(null);\n\n  // Set the default position and size\n  const [place, setPlace] = useState(() => {\n    // Set an extra margin\n    const MARGIN = 20;\n    // Get the screen pixel sizes and vertical scroll position\n    const { innerWidth, innerHeight, scrollY } = window;\n    // The spawned elements are parented to the 'main' element, not to the 'body'\n    // We have to take this in count, since the header adds an extra offset in vertical position\n    const offsetHeight = document.querySelector('main').offsetTop;\n    // Set a reasonable dimension for the ngl window\n    const dimension = Math.max(\n      Math.min(innerWidth / 4, innerHeight / 4),\n      MIN_NGL_DIMENSION,\n    );\n    const reasonableHeight = 1.5 * dimension;\n    const reasonableWidth = 2 * dimension;\n    return {\n      // WARNING: If you set the width as 'auto' the window stays very wide when exiting fullscreen\n      width: reasonableWidth, // Let the Rnd logic set the width automatically\n      height: reasonableHeight, // Reasonable height\n      x: 0, // Left border\n      y: innerHeight - offsetHeight - reasonableHeight - MARGIN + scrollY, // Bottom border\n    };\n  });\n\n  return (\n    // Rnd is the draggable and resizable system where the ngl viewer is placed\n    <Rnd\n      position={{ x: place.x, y: place.y }}\n      size={{ width: place.width, height: place.height }}\n      // Update the zIndex to make this window the first visible\n      style={{ zIndex: nextZ() }}\n      className={style.rnd}\n      data-rnd\n      // Limits where the window can be dragged/resized to\n      // WARNING: bounds=\"main\" is problematic since the window may appear out of bounds\n      // WARNING: Then when it is moved for the first time it jumps inside the bonds, not elegant\n      bounds=\"window\"\n      // Prevent the mouse to drag/resize the window when it is over specific elements\n      cancel=\"canvas, [data-popover], #preventDragSize, .prevent-drag\"\n      // On drag/resize starts we do not change anything, but use the hook to re-render this component\n      // The Z Index is updated and the selected window becomes the first in the z axis automatically\n      // WARNING: Drag functions are also called when you just click (e.g. clicking buttons)\n      onDragStart={() => {\n        setPlace({ ...place });\n      }}\n      onResizeStart={() => {\n        setPlace({ ...place });\n      }}\n      onDragStop={(e, d) => {\n        // Use this to reject some bugged event calls: e.g. the frames number selector\n        if (e.layerX === 0 && e.layerY === 0) return;\n        // We re-render only if the new position does not equal the old position\n        if (place.x !== d.x || place.y !== d.y)\n          setPlace({\n            ...place,\n            x: d.x,\n            y: d.y,\n          });\n      }}\n      // Re-adapt the viewer and update the position/size when the window is resized\n      onResize={() => viewerRef.current && viewerRef.current.autoResize()}\n      onResizeStop={(e, direction, ref, delta, position) => {\n        setPlace({\n          width: ref.style.width,\n          height: ref.style.height,\n          ...position,\n        });\n        // if (!viewerRef.current) return;\n        // viewerRef.current.autoResize();\n        // viewerRef.current.autoResize.flush();\n      }}\n    >\n      <Card className={style['floating-card']} elevation={4}>\n        <Suspense fallback={null}>\n          <ViewerWithControls\n            className={style['floating-card']}\n            ref={viewerRef}\n            startsPlaying={false}\n            {...props}\n          />\n        </Suspense>\n      </Card>\n    </Rnd>\n  );\n};\n\nexport default ViewerSpawner;\n","// extracted by mini-css-extract-plugin\nexport default {\"widest\":\"style_widest__hZ7sO\",\"margined\":\"style_margined__GphyO\",\"margined-bottom\":\"style_margined-bottom__KpiYO\",\"horizontal\":\"style_horizontal__1xLer\",\"enabled\":\"style_enabled__Lh27c\",\"disabled\":\"style_disabled__qDRCr\"};","import { useMemo, useRef } from 'react';\n\n// Get a memoized value just like a useMemo would\n// However you can access the previous memoized value as the first (and only) function argument\nconst useRemfo = (func, deps) => {\n    const previousValue = useRef();\n    const newValue = useMemo(() => func(previousValue.current), deps);\n    previousValue.current = newValue;\n    return newValue;\n};\n\nexport default useRemfo;\n"],"names":["residueOptions","label","value","_ref","interactions","selectedInteraction","setSelectedInteraction","selectedResidues","setSelectedResidues","selectedOrder","handleToggleOrder","firstOrderLabel","firstOrderTooltip","secondOrderLabel","secondOrderTooltip","toggleOrderTooltip","interfaceOnly","currentInteraction","_jsxs","Suspense","fallback","_jsx","Loading","children","Select","onChange","event","target","className","style","map","interaction","i","MenuItem","disabled","failed","name","RadioGroup","opt","FormControlLabel","control","Radio","color","undefined","_Fragment","TextField","title","agent_1","agent_2","IconButton","onClick","changeOrder","size","FontAwesomeIcon","icon","faExchangeAlt","REPRESENTATION_REFERENCES","REPRESENTATION_COLORS","base","interface","RmsdPairwise","accessionAndMdNumber","metadata","defaultInteractions","topology","useContext","ProjectCtx","viewerRef","useRef","useMemo","forEach","analysesUrlBase","BASE_PATH_PROJECTS","indexUrl","loading","indexLoading","payload","indexPayload","error","indexError","useAPI","useState","interactionName","analysisName","analysisNote","data","targetEntry","find","entry","analysis","note","interactionAnalysisUrl","dataset","useRemfo","previous","interactionData","rmsds","AxesValues","dataLength","length","AxesStep","Math","floor","mdFrames","Array","fill","v","selectedFramePair","setSelectedFramePair","components","setComponents","previousComponents","frame","index","previousComponent","defaultRepresentations","representations","setRepresentations","agents","interface_indices_1","interface_indices_2","previousRepresentations","newRepresentations","previousInteraction","rep","reference","includes","component","representation","newRepresentation","opacity","push","previousRepresentation","Error","previousComponentName","split","replace","agent","agentIndex","selection","residueIndices2Ngl","rangedSelection","type","filter","custom","toString","Card","CardContent","horizontal","Typography","variant","InteractionSelector","c","Chip","margin","backgroundColor","a","margined","fontWeight","faExclamationTriangle","enabled","id","Heatmap","inputData","xLabels","yLabels","onTooltip","xAxisValue","yAxisValue","round","_ref2","legendTitle","maxColor","minColor","xTitle","yTitle","ViewerSpawner","newViewer","componentsState","representationsState","selRef","onNail","viewer","onClose","ViewerWithControls","lazy","maxZ","NGLViewerInDND","props","place","setPlace","innerWidth","innerHeight","scrollY","window","offsetHeight","document","querySelector","offsetTop","dimension","max","min","reasonableHeight","width","height","x","y","Rnd","position","zIndex","bounds","cancel","onDragStart","onResizeStart","onDragStop","e","d","layerX","layerY","onResize","current","autoResize","onResizeStop","direction","ref","delta","elevation","startsPlaying","nailing","nailedViewers","setNailedViewers","viewers","usedIds","getNewId","indexOf","console","close","nailed","newNailed","splice","nail","func","deps","previousValue","newValue"],"sourceRoot":""}