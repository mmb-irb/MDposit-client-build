{"version":3,"file":"static/js/3753.f851916f.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/interaction-selector/style.module.css?5392","components/interaction-selector/index.js","components/ngl-viewer/use-default-representations/index.js","pages/accession/rmsd-pairwise/index.js","webpack://mdposit/./src/components/viewer-spawner/style.module.css?df6e","components/viewer-spawner/index.js","webpack://mdposit/./src/pages/accession/rmsd-pairwise/style.module.css?bc81"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"horizontal\":\"style_horizontal__2DIWx\",\"horizontal-margined\":\"style_horizontal-margined__e9fQR\"};","import React, { Suspense } from 'react';\n\nimport {\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Select,\n  MenuItem,\n  TextField,\n  IconButton,\n} from '@mui/material';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport Loading from '../loading';\n\nimport style from './style.module.css';\n\nconst residueOptions = [\n  { label: 'All residues', value: 'residue_indices' },\n  { label: 'Interface residues', value: 'interface_indices' },\n];\n\n// Render a panel which allows to select the desired interaction\n// If the user selects a new interaction then the 'setSelectedInteraction' is set as its index\n// Interactions have the following structure:\n// { name: string, label: string, ... }\n// The 'label' field will replace the 'name' in the selector labels if exists\n// When 'selectedResidues' is passed, render also tools to select interaction residues\n// Residue options are 'all' or 'interface' residues\n// DANI: La guinda sería un 'custom' en las opciones de residuos\n// DANI: La idea sería desplegar dos residue selectors, uno para cada interaction agent\nconst InteractionSelector = ({\n  interactions,\n  selectedInteraction,\n  setSelectedInteraction,\n  selectedResidues,\n  setSelectedResidues,\n  selectedOrder,\n  handleToggleOrder,\n  firstOrderLabel, // The label to be represented over the first order rectangle\n  firstOrderTooltip, // The tooltip to be shown for the first order rectangle\n  secondOrderLabel, // The label to be represented over the second order rectangle\n  secondOrderTooltip, // The tooltip to be shown for the second order rectangle\n  toggleOrderTooltip, // The tooltip to be shown for the toggle order button\n  interfaceOnly = false, // Set if the 'All residues' button is enabled\n}) => {\n  const changeInteraction = event => {\n    setSelectedInteraction(event.target.value);\n  };\n\n  const changeResidues = event => {\n    setSelectedResidues(event.target.value);\n  };\n\n  const changeOrder = () => {\n    handleToggleOrder();\n  };\n\n  const currentInteraction = interactions[selectedInteraction];\n\n  // Render\n  return (\n    <Suspense fallback={<Loading />}>\n      <Select\n        value={selectedInteraction}\n        onChange={changeInteraction}\n        className={style['horizontal-margined']}\n      >\n        {interactions.map((interaction, i) => (\n          <MenuItem key={i} value={i} disabled={interaction.failed}>\n            {interaction.label || interaction.name}\n          </MenuItem>\n        ))}\n      </Select>\n      {selectedResidues && (\n        <RadioGroup\n          value={selectedResidues}\n          onChange={changeResidues}\n          className={style.horizontal}\n        >\n          {residueOptions.map((opt, i) => (\n            <FormControlLabel\n              key={i}\n              value={opt.value}\n              control={<Radio color=\"primary\" />}\n              label={opt.label}\n              disabled={opt.label === 'All residues' && interfaceOnly}\n            />\n          ))}\n        </RadioGroup>\n      )}\n      {selectedOrder !== undefined && (\n        <>\n          <TextField\n            //margin=\"dense\"\n            label={firstOrderLabel}\n            title={firstOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_1\n                : currentInteraction.agent_2\n            }\n          />\n          <IconButton\n            title={toggleOrderTooltip}\n            onClick={changeOrder}\n            size=\"large\"\n          >\n            <FontAwesomeIcon icon={faExchangeAlt} />\n          </IconButton>\n          <TextField\n            //margin=\"dense\"\n            label={secondOrderLabel}\n            title={secondOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_2\n                : currentInteraction.agent_1\n            }\n          />\n        </>\n      )}\n    </Suspense>\n  );\n};\n\nexport default InteractionSelector;\n","// React logic\nimport { useMemo, useContext } from 'react';\n\nimport { ProjectCtx } from '../../../contexts';\n\nimport { generateRanges } from 'src/utils/auxiliar-functions';\n\n// Use this hook to get the memoized NGL default representations\nconst useDefaultRepresentations = () => {\n  // Get current project data\n  const { topology } = useContext(ProjectCtx);\n  // Set the chains to be represented in the NGL viewer by default\n  const defaultRepresentations = useMemo(() => {\n    // If there is no topology yet then return here and wait for data to be downloaded\n    if (!topology) return [];\n    // Set a list to store all final representations\n    const reps = [];\n    // Iterate the different chains\n    // Every representation, no matter the type, will be organized as one per chain\n    topology.iterchains().forEach(chain => {\n      // Set the chain label\n      const metadataChainName = chain.metadataChainName\n      const chainLabel = metadataChainName\n        ? `${metadataChainName} (Chain ${chain.name})`\n        : `Chain ${chain.name}`;\n      // Get residues in the current chain\n      const chainResidues = chain.residues;\n      // 1. Polymers such as proteins and nucleic acids\n      // Represent polymers in cartoon and colored by chain\n      // Note that coarse grain (CG) residues will not be propery represented in cartoon\n      // For this reason we must create a separated representation for them in spacefill (vdw)\n      const respresentPolymer = polymer => {\n        // Start by classify residues (note that this logic is actually run only once and then stored)\n        const residues = chainResidues.filter(residue => residue.classification === polymer);\n        if (residues.length === 0) return;\n        // First of all handle coarse grain residues\n        const cgResidues = residues.filter(residue => residue.isCg);\n        if (cgResidues.length > 0) {\n          const cgResiduesIndices = cgResidues.map(residue => residue.index);\n          const { rangedSelection: nglSelection } = topology.residueIndices2Ngl(cgResiduesIndices);\n          // Set the new representation\n          reps.push({\n            name: `${chainLabel} - ${polymer} polymer (coarse grain)`,\n            selection: nglSelection,\n            type: 'spacefill',\n            color: 'chainid',\n          });\n        }\n        // Now keep going with the all atom residues\n        const aaResidues = residues.filter(residue => !residue.isCg);\n        // Get ranges of residue indices in a row\n        const aaResiduesIndices = aaResidues.map(residue => residue.index);\n        const ranges =  [ ...generateRanges(aaResiduesIndices) ];\n        // Those regions with 3 residues or less are not representable by cartoon (NGL limitation)\n        // Therefore, we will set an additional licorice representation for them\n        const shortRanges = ranges.filter(range => range.length <= 3);\n        if (shortRanges.length > 0) {\n          // Transform the residue indices to a NGL selection\n          const shortResidueIndices = shortRanges.reduce((ac, curr) => ac.concat(curr), []);\n          const { rangedSelection: nglSelection } = topology.residueIndices2Ngl(shortResidueIndices);\n          // Set the new representation\n          reps.push({\n            name: `${chainLabel} - ${polymer} polymer (short)`,\n            selection: nglSelection,\n            type: 'licorice',\n            color: 'chainid',\n          });\n        }\n        // The long ranges are to be displayed in cartoon\n        const longRanges = ranges.filter(range => range.length > 3);\n        if (longRanges.length > 0) {\n          // Transform the residue indices to a NGL selection\n          const longResidueIndices = longRanges.reduce((ac, curr) => ac.concat(curr), []);\n          const { rangedSelection: nglSelection } = topology.residueIndices2Ngl(longResidueIndices);\n          // Set the new representation\n          reps.push({\n            name: `${chainLabel} - ${polymer} polymer`,\n            selection: nglSelection,\n            type: 'cartoon',\n            color: 'chainid',\n          });\n          // If this is a nucleic polymer then set also a representation for its bases\n          const nucleicPolymers = new Set([ 'dna', 'rna', 'nucleic' ]);\n          if (nucleicPolymers.has(polymer)) {\n            reps.push({\n              name: `${chainLabel} - ${polymer} bases`,\n              selection: nglSelection,\n              type: 'base',\n              color: 'resname',\n            });\n          }\n        }\n      }\n      // Represent protein polymers\n      respresentPolymer('protein');\n      // Represent DNA polymers\n      respresentPolymer('dna');\n      // Represent RNA polymers\n      respresentPolymer('rna');\n      // Represent other nucleic polymers\n      respresentPolymer('nucleic');\n      // 2. Ligands, small molecules which are referenced\n      // Represent ligands in ball+stick (cpk) colored by element\n      // Start by classify residues (note that this logic is actually run only once and then stored)\n      const ligandResidues = chainResidues.filter(residue => residue.classification === 'ligand');\n      if (ligandResidues.length > 0) {\n        // In case we have more than a different ligand in this chain, set a representation for each one\n        const ligandIds = new Set(ligandResidues.map(residue => residue.referenceId));\n        for (const ligandId of ligandIds) {\n          // Get the NGL selection of traget residues\n          const currentLigandResidueIndices = ligandResidues\n            .filter(residue => residue.referenceId === ligandId)\n            .map(residue => residue.index);\n          const { rangedSelection: nglSelection } = topology.residueIndices2Ngl(currentLigandResidueIndices);\n          // Add the representation\n          reps.push({\n            name: `${chainLabel} - ligand ${ligandId}`,\n            selection: nglSelection,\n            type: 'ball+stick',\n            color: 'element'\n          });\n        }\n      }\n      // 3. Lipids, usually membranes\n      // Represent membranes in grey licorice, with a reduced oppacity\n      // Thus we ease observing what is there inside of the membrane\n      // Start by finding lipid residues\n      const lipidClasses = new Set([ 'fatty', 'steroid' ]);\n      const lipidResidues = chainResidues.filter(residue => lipidClasses.has(residue.classification));\n      if (lipidResidues.length > 0) {\n        // Now parse them to a NGL selection\n        const lipidResidueIndices = lipidResidues.map(residue => residue.index);\n        const { rangedSelection: nglSelection } = topology.residueIndices2Ngl(lipidResidueIndices);\n        // Add the representation\n        reps.push({\n          name: `${chainLabel} - lipids`,\n          selection: nglSelection,\n          type: 'licorice',\n          color: 'grey',\n          opacity: 0.5,\n        });\n      }\n      // 4. Ions, single atoms\n      // Represent ions using spacefill (vdw) and colored by element\n      // Start by finding ion residues\n      const ionResidues = chainResidues.filter(residue => residue.classification === 'ion');\n      if (ionResidues.length > 0) {\n        // Now parse them to a NGL selection\n        const ionResidueIndices = ionResidues.map(residue => residue.index);\n        const { rangedSelection: nglSelection } = topology.residueIndices2Ngl(ionResidueIndices);\n        // Add the representation\n        reps.push({\n          name: `${chainLabel} - ions`,\n          selection: nglSelection,\n          type: 'spacefill',\n          color: 'element',\n        });\n      }\n      // 5. Other, anything else\n      // Residues not falling in any previous section will be represented in low opacity purple licorice\n      // This includes solvent and unknown residues (e.g. carbohydrates)\n      const otherClasses = new Set([ 'solvent', 'unknown' ]);\n      const otherResidues = chainResidues.filter(residue => otherClasses.has(residue.classification));\n      if (otherResidues.length > 0) {\n        // Now parse them to a NGL selection\n        const otherResiduesIndices = otherResidues.map(residue => residue.index);\n        const { rangedSelection: nglSelection } = topology.residueIndices2Ngl(otherResiduesIndices);\n        // Add the representation\n        reps.push({\n          name: `${chainLabel} - other`,\n          selection: nglSelection,\n          type: 'licorice',\n          color: 'purple',\n          opacity: 0.3,\n        });\n      }\n    });\n\n    return reps;\n  }, [topology]);\n\n  return defaultRepresentations;\n};\n\nexport default useDefaultRepresentations;\n","import React, { useContext, useState, useMemo, useRef } from 'react';\n\nimport { CardContent, Chip, Typography } from '@mui/material';\n\nimport useAPI from '../../../hooks/use-api';\n\nimport Card from '../../../components/animated-card';\nimport Loading from '../../../components/loading';\nimport ViewerSpawner from '../../../components/viewer-spawner';\nimport useDefaultRepresentations from '../../../components/ngl-viewer/use-default-representations';\n\nimport { ProjectCtx } from '../../../contexts';\n\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\n\nimport style from './style.module.css';\n\nimport InteractionSelector from '../../../components/interaction-selector';\nimport Heatmap from '../../../components/heatmap';\n\n// Keep constant representation references to keep them between renders\nconst REPRESENTATION_REFERENCES = {\n  base: ['First frame', 'Second frame'],\n  interface: ['First frame interface', 'Second frame interface']\n}\n\n// Set the representation colors\nconst REPRESENTATION_COLORS = {\n  base: ['red', 'blue'],\n  interface: [\n    ['orange', 'yellow'], // Agent 1\n    ['purple', 'green'], // Agent 2\n  ] \n}\n\nconst RmsdPairwise = () => {\n  // Get the current project data\n  const {\n    accessionAndMdNumber,\n    metadata,\n    interactions: defaultInteractions,\n    topology: topologyManager,\n  } = useContext(ProjectCtx);\n\n  // Set a ref to the ngl which allows access to the ngl viewer exposed methods\n  const viewerRef = useRef(null);\n  // Get the default representations\n  const defaultRepresentations = useDefaultRepresentations();\n  // The selected frames\n  const [selectedFramePair, setSelectedFramePair] = useState(null);\n  // The interaction to be displayed\n  const [selectedInteraction, setSelectedInteraction] = useState(0);\n  // Get analysis data from the API\n  const url = `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/rmsd-pairwise/`;\n  const { loading, payload, error } = useAPI(url);\n  // Set the available interactions\n  const interactions = useMemo(() => {\n    if (!defaultInteractions) return [{ name: 'Overall' }];\n    // Label all metadata interactions with the 'interface residues' ending\n    defaultInteractions.forEach(interaction => {\n      interaction.label = interaction.name + ' (interface residues)';\n    });\n    const interactions = [{ name: 'Overall' }, ...defaultInteractions];\n    return interactions;\n  }, [defaultInteractions]);\n  // Process analysis data for the heatmap\n  const { rmsds, AxesValues } = useMemo(() => {\n    // Return if the payload is not ready\n    if (!payload) return {};\n    // Get the selected interaction\n    const interaction = interactions[selectedInteraction];\n    // Get the data whose name matches the interaction name\n    const data = payload.data.find(dataset => dataset.name === interaction.name);\n    if (!data) throw new Error(`Dataset for interaction \"${interaction.name}\" not found`);\n    // Get the rmsds values\n    const rmsds = data.rmsds;\n    // Calculate the step\n    // DANI: Esto no es del todo correcto pero hace que los números de frames siempre cuadren\n    const dataLength = rmsds.length;\n    const AxesStep = Math.floor(metadata.mdFrames / (dataLength - 1));\n    // DANI: Esto es lo correcto\n    // DANI: En algunos análisis antiguos las frames no cuadran y hay que rehacerlos\n    //const xAxesStep = payload.step;\n    // Calculate the frames labels\n    // These values are used for BOTH axes\n    const AxesValues = Array(dataLength)\n      .fill(undefined)\n      .map((v, i) => i * AxesStep);\n    return { rmsds, AxesValues };\n  }, [payload, metadata, interactions, selectedInteraction]);\n\n  // Set the component state\n  const [components, setComponents] = useState(null);\n\n  // Set the components value\n  useMemo(() => {\n    // If there is no selected pair then set the components as null\n    if (!selectedFramePair) return setComponents(null);\n    // If a frame pair is selected then set the components or update them accordingly\n    setComponents(previousComponents => {\n      // If there are no previous components then set them from scratch\n      if (previousComponents === null) {\n        return selectedFramePair.map((frame, index) => ({\n          name: `Frame ${index === 0 ? 'A' : 'B'}`,\n          frame: frame\n        }));\n      }\n      // If components already exists then just update them\n      selectedFramePair.forEach((frame, index) => {\n        const previousComponent = previousComponents[index];\n        previousComponent.name = `Frame ${index === 0 ? 'A' : 'B'}`;\n        previousComponent.frame = frame;\n      });\n      return [...previousComponents];\n    });\n  }, [selectedFramePair]);\n\n  // Set the component state\n  const [representations, setRepresentations] = useState(null);\n\n  // Set the viewer representations\n  useMemo(() => {\n    // If there are no components then clear the representations and stop here\n    if (!components) return setRepresentations(null);\n    // Get the selected interaction\n    const interaction = interactions[selectedInteraction];\n    // Get also the number of the interacting agents\n    const agents = [\n      { name: interaction.agent_1, interface: interaction.interface_indices_1 },\n      { name: interaction.agent_2, interface: interaction.interface_indices_2 }\n    ];\n    // Setup every representation or update the already existing ones\n    setRepresentations(previousRepresentations => {\n      // Set a list to keep updated representations\n      const newRepresentations = [];\n      // Find out if there is a selected interaction\n      const currentInteraction = selectedInteraction > 0;\n      // Find out if there was a selected interaction in the previous representations\n      const previousInteraction = !!(previousRepresentations && previousRepresentations.find(\n        rep => rep.reference && rep.reference.includes(REPRESENTATION_REFERENCES.interface[0])));\n      // Check if there was interactions in the previous\n      // If there were no previous representations then set the default values\n      if (previousRepresentations === null) {\n        components.forEach((component, index) => {\n          // Set the overall representations\n          // In case there is no interaction selected this would be opaque\n          // In case there is an interaction selected this would be transparent (just a reference)\n          defaultRepresentations.forEach(representation => {\n            const newRepresentation = { ...representation };\n            newRepresentation.name = `${component.name} - ${representation.name}`;\n            newRepresentation.color = REPRESENTATION_COLORS.base[index];\n            newRepresentation.component = component.name;\n            newRepresentation.reference = `${REPRESENTATION_REFERENCES.base[index]} - ${representation.name}`;\n            if (currentInteraction) {\n              newRepresentation.name += ' reference';\n              newRepresentation.opacity = 0.1;\n            }\n            newRepresentations.push(newRepresentation);\n          });\n        });\n      }\n      // If representations already exist then update them\n      else {\n        components.forEach((component, index) => {\n          // Iterate the default representations\n          defaultRepresentations.forEach(representation => {\n            // Find the previous corresponding representation\n            const reference = `${REPRESENTATION_REFERENCES.base[index]} - ${representation.name}`;\n            const previousRepresentation = previousRepresentations.find(rep => rep.reference === reference);\n            if (!previousRepresentation) throw new Error(`No previous representation with reference ${reference}`);\n            // Update the representation name and component\n            const previousComponentName = previousRepresentation.name.split(' - ')[0];\n            previousRepresentation.name = previousRepresentation.name.replace(previousComponentName, component.name);\n            previousRepresentation.component = component.name;\n            // Add or remove the 'reference' tail from the name and update the opacity\n            // If we passed from no selected interaction to selected interaction\n            if (currentInteraction && !previousInteraction) {\n              previousRepresentation.name += ' reference';\n              previousRepresentation.opacity = 0.1;\n            }\n            // If we passed from selected interaction to no selected interaction\n            if (!currentInteraction && previousInteraction) {\n              previousRepresentation.name = previousRepresentation.name.replace(' reference', '');\n              previousRepresentation.opacity = 1;\n            }\n            newRepresentations.push(previousRepresentation);\n          });\n        });\n      }\n      // Set interfaces representations, each with different colors\n      if (currentInteraction) {\n        // If we did not have a selected interaction then setup representations with default values\n        if (previousInteraction === false) {\n          components.forEach((component, index) => {\n            agents.forEach((agent, agentIndex) => {\n              // Get the interaction interface, if it exists, in NGL format\n              // The default interaction (Overall) has no interface\n              const selection = agent.interface && topologyManager.residueIndices2Ngl(agent.interface);\n              // Set the new representation\n              newRepresentations.push({\n                name: `${component.name} - ${agent.name} interface`,\n                color: REPRESENTATION_COLORS.interface[index][agentIndex],\n                selection: selection.rangedSelection,\n                type: 'licorice',\n                component: component.name,\n                reference: `${REPRESENTATION_REFERENCES.interface[index]} - ${agent.name}`\n              });\n            });\n          });\n        }\n        // Otherwise update the already existing representations\n        else {\n          components.forEach((component, index) => {\n            agents.forEach(agent => {\n              // Get the interaction interface, if it exists, in NGL format\n              // The default interaction (Overall) has no interface\n              const selection = agent.interface && topologyManager.residueIndices2Ngl(agent.interface);\n              // Find the previous representation for interface 1\n              const reference = `${REPRESENTATION_REFERENCES.interface[index]} - ${agent.name}`;\n              const previousRepresentation = previousRepresentations.find(\n                rep => rep.reference === reference\n              );\n              // Update its name, selection and component\n              previousRepresentation.name = `${component.name} - ${agent.name} interface`;\n              previousRepresentation.selection = selection.rangedSelection;\n              previousRepresentation.component = component.name;\n              newRepresentations.push(previousRepresentation);\n            });\n          });\n        }\n      }\n      // Add previous custom representations (added by the user)\n      previousRepresentations && previousRepresentations.filter(rep => rep.custom)\n        .forEach(representation => {\n          // Update the component to target the first component\n          representation.component = components[0].name;\n          newRepresentations.push(representation);\n        });\n      // Update the representations state\n      return newRepresentations;\n    });\n  }, [\n    components,\n    topologyManager,\n    interactions,\n    selectedInteraction,\n    defaultRepresentations,\n  ]);\n\n  // Render loading or error messages according with the API response\n  if (loading) return <Loading />;\n  else if (error) return error.toString();\n  else if (!payload) return 'Something bad happened';\n\n  // Render\n  return (\n    <>\n      <Card>\n        <CardContent className={style.horizontal}>\n          <Typography variant=\"h6\">Residues selection:</Typography>\n          <InteractionSelector\n            interactions={interactions}\n            selectedInteraction={selectedInteraction}\n            setSelectedInteraction={setSelectedInteraction}\n          />\n          {selectedFramePair && (\n            <div>\n              {components && components.map((component, c) => (\n                <Chip key={c} label={'Frame ' + component.frame}\n                  style={{\n                    margin: '0.2em',\n                    backgroundColor: c === 0 ? 'red' : 'blue',\n                  }}\n                />\n              ))}\n              {selectedInteraction > 0 && components && components.map((component, c) => {\n                  // Get the interacting agents\n                  const interaction = interactions[selectedInteraction];\n                  const agents = [ interaction.agent_1, interaction.agent_2 ];\n                  // Generate a chip for every agent\n                  return agents.map((agent, a) => (\n                    <Chip key={a} label={'Frame ' + component.frame + ' - ' + agent}\n                      style={{\n                        margin: '0.2em',\n                        backgroundColor: a === 0\n                          ? c === 0\n                            ? 'orange'\n                            : 'purple'\n                          : c === 0\n                            ? 'yellow'\n                            : 'green',\n                      }}\n                    />\n                  ));\n                }\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      <Card className={style.margined} id=\"heatmap\">\n        <CardContent>\n          <Heatmap\n            inputData={{\n              data: rmsds,\n              xLabels: AxesValues,\n              yLabels: AxesValues,\n            }}\n            onTooltip={({ value, xAxisValue, yAxisValue }) =>\n              `${xAxisValue} - ${yAxisValue}\\n${Math.round(value * 100) / 100} Å`\n            }\n            onClick={({ xAxisValue, yAxisValue }) =>\n              setSelectedFramePair([xAxisValue, yAxisValue])\n            }\n            legendTitle={'RMSD (Å)'}\n            maxColor={'red'}\n            minColor={'blue'}\n            xTitle={'Frames'}\n            yTitle={'Frames'}\n          />\n        </CardContent>\n      </Card>\n      <ViewerSpawner\n        // Set a viewer if there is selected frames\n        newViewer={components\n          ? {\n              componentsState: [components, setComponents],\n              representationsState: [representations, setRepresentations],\n              selRef: selectedFramePair,\n              viewerRef: viewerRef\n            }\n          : null\n        }\n        // If the nailed/closed viewer is the current viewer then reset the 'selected'\n        onNail={viewer =>\n          setSelectedFramePair(previous => {\n            if (viewer.selRef === previous) return null;\n            else return previous;\n          })\n        }\n        onClose={viewer =>\n          setSelectedFramePair(previous => {\n            if (viewer.selRef === previous) return null;\n            else return previous;\n          })\n        }\n      />\n    </>\n  );\n};\n\nexport default RmsdPairwise;\n","// extracted by mini-css-extract-plugin\nexport default {\"rnd\":\"style_rnd__Txifm\",\"floating-card\":\"style_floating-card__HHpby\"};","import React, { lazy, Suspense, useRef, useState } from 'react';\n\n// Rnd is the resizable and draggable system where the ngl viewer is placed\nimport { Rnd } from 'react-rnd';\n\nimport Card from '../animated-card';\n\nimport style from './style.module.css';\n\nconst ViewerWithControls = lazy(() =>\n  import(\n    /* webpackChunkName: 'viewer-with-controls' */ '../viewer-with-controls'\n  ),\n);\n\n// Minimal ngl window height\nconst MIN_NGL_DIMENSION = 150;\n\n// Counter to get always the maximum zIndex\n// This is useful to set a new or currently dragged/resized ngl window over the others\nlet maxZ = 0;\nconst nextZ = () => {\n  maxZ += 1;\n  return maxZ;\n};\n\n// This function spawns all the NGL viewers needed\n// i.e. one viewer with the requested 'props' and all previous viewers which have been nailed\nconst ViewerSpawner = ({ newViewer, nailing = true, onNail, onClose }) => {\n  // Store here all nailed NGL viewers\n  const [nailedViewers, setNailedViewers] = useState([]);\n\n  // Set the viewers as the nailed viewers and the new viewer\n  const viewers = [...nailedViewers];\n\n  // Keep listed all arrays which have been used (i.e. ngl viewers which have been nailed or closed)\n  const usedIds = useRef([]);\n\n  if (newViewer) {\n    // Find a new suitable Id that meet 2 conditions:\n    // - There is never 2 viewers with the same id, so we avoid errors\n    // - If we pick diferent frames in the graph without nailing anything, the current viewer has always the same id\n    // (This way the current viewer does not appear in the origin position every time)\n    const getNewId = () => {\n      let id = 0;\n      while (id < 999) {\n        if (usedIds.current.indexOf(id) === -1) return id;\n        id += 1;\n      }\n      console.error('Maximum number of viewers reached');\n    };\n\n    // Set a unique id for this props based in the last nailed viewer\n    newViewer.id = getNewId();\n    newViewer.close = () => {\n      if (nailing) {\n        setNailedViewers(nailed => {\n          const newNailed = [...nailed];\n          const index = nailed.indexOf(newViewer);\n          if (index !== -1) newNailed.splice(index, 1);\n          return newNailed;\n        });\n      }\n      if (onClose) onClose(newViewer);\n      usedIds.current.push(newViewer.id);\n    };\n    // If the nailer function is passed, add the logic for the viewer to be nailed further\n    if (nailing)\n      newViewer.nail = () => {\n        setNailedViewers(nailed => [...nailed, newViewer]);\n        if (onNail) onNail(newViewer);\n        usedIds.current.push(newViewer.id);\n      };\n    // Add the current viewer to the viewers list\n    viewers.push(newViewer);\n  }\n\n  // Render a viewer for each prop. Use the 'selected' parameter as unique id\n  return viewers.map(viewer => <NGLViewerInDND key={viewer.id} {...viewer} />);\n};\n\n// This component render a small NGL viewer\n// It is called when user clicks in a point in the projections component\n// Also it is called by the generic analysis page\nconst NGLViewerInDND = props => {\n  // Set a reference for the viewer\n  // If a reference is passed among the viewer arguments then use it instead\n  const viewerRef = props.viewerRef || useRef(null);\n\n  // Set the default position and size\n  const [place, setPlace] = useState(() => {\n    // Set an extra margin\n    const MARGIN = 20;\n    // Get the screen pixel sizes and vertical scroll position\n    const { innerWidth, innerHeight, scrollY } = window;\n    // The spawned elements are parented to the 'main' element, not to the 'body'\n    // We have to take this in count, since the header adds an extra offset in vertical position\n    const offsetHeight = document.querySelector('main').offsetTop;\n    // Set a reasonable dimension for the ngl window\n    const dimension = Math.max(\n      Math.min(innerWidth / 4, innerHeight / 4),\n      MIN_NGL_DIMENSION,\n    );\n    const reasonableHeight = 1.5 * dimension;\n    const reasonableWidth = 2 * dimension;\n    return {\n      // WARNING: If you set the width as 'auto' the window stays very wide when exiting fullscreen\n      width: reasonableWidth, // Let the Rnd logic set the width automatically\n      height: reasonableHeight, // Reasonable height\n      x: 0, // Left border\n      y: innerHeight - offsetHeight - reasonableHeight - MARGIN + scrollY, // Bottom border\n    };\n  });\n\n  return (\n    // Rnd is the draggable and resizable system where the ngl viewer is placed\n    <Rnd\n      position={{ x: place.x, y: place.y }}\n      size={{ width: place.width, height: place.height }}\n      // Update the zIndex to make this window the first visible\n      style={{ zIndex: nextZ() }}\n      className={style.rnd}\n      data-rnd\n      // Limits where the window can be dragged/resized to\n      // WARNING: bounds=\"main\" is problematic since the window may appear out of bounds\n      // WARNING: Then when it is moved for the first time it jumps inside the bonds, not elegant\n      bounds=\"window\"\n      // Prevent the mouse to drag/resize the window when it is over specific elements\n      cancel=\"canvas, [data-popover], #preventDragSize, .prevent-drag\"\n      // On drag/resize starts we do not change anything, but use the hook to re-render this component\n      // The Z Index is updated and the selected window becomes the first in the z axis automatically\n      // WARNING: Drag functions are also called when you just click (e.g. clicking buttons)\n      onDragStart={() => {\n        setPlace({ ...place });\n      }}\n      onResizeStart={() => {\n        setPlace({ ...place });\n      }}\n      onDragStop={(e, d) => {\n        // Use this to reject some bugged event calls: e.g. the frames number selector\n        if (e.layerX === 0 && e.layerY === 0) return;\n        // We re-render only if the new position does not equal the old position\n        if (place.x !== d.x || place.y !== d.y)\n          setPlace({\n            ...place,\n            x: d.x,\n            y: d.y,\n          });\n      }}\n      // Re-adapt the viewer and update the position/size when the window is resized\n      onResize={() => viewerRef.current && viewerRef.current.autoResize()}\n      onResizeStop={(e, direction, ref, delta, position) => {\n        setPlace({\n          width: ref.style.width,\n          height: ref.style.height,\n          ...position,\n        });\n        // if (!viewerRef.current) return;\n        // viewerRef.current.autoResize();\n        // viewerRef.current.autoResize.flush();\n      }}\n    >\n      <Card className={style['floating-card']} elevation={4}>\n        <Suspense fallback={null}>\n          <ViewerWithControls\n            className={style['floating-card']}\n            ref={viewerRef}\n            startsPlaying={false}\n            {...props}\n          />\n        </Suspense>\n      </Card>\n    </Rnd>\n  );\n};\n\nexport default ViewerSpawner;\n","// extracted by mini-css-extract-plugin\nexport default {\"widest\":\"style_widest__hZ7sO\",\"margined\":\"style_margined__GphyO\",\"margined-bottom\":\"style_margined-bottom__KpiYO\",\"horizontal\":\"style_horizontal__1xLer\"};"],"names":["residueOptions","label","value","_ref","interactions","selectedInteraction","setSelectedInteraction","selectedResidues","setSelectedResidues","selectedOrder","handleToggleOrder","firstOrderLabel","firstOrderTooltip","secondOrderLabel","secondOrderTooltip","toggleOrderTooltip","interfaceOnly","currentInteraction","_jsxs","Suspense","fallback","_jsx","Loading","children","Select","onChange","event","target","className","style","map","interaction","i","MenuItem","disabled","failed","name","RadioGroup","opt","FormControlLabel","control","Radio","color","undefined","_Fragment","TextField","title","agent_1","agent_2","IconButton","onClick","changeOrder","size","FontAwesomeIcon","icon","faExchangeAlt","useDefaultRepresentations","topology","useContext","ProjectCtx","useMemo","reps","iterchains","forEach","chain","metadataChainName","chainLabel","chainResidues","residues","respresentPolymer","polymer","filter","residue","classification","length","cgResidues","isCg","cgResiduesIndices","index","rangedSelection","nglSelection","residueIndices2Ngl","push","selection","type","aaResiduesIndices","ranges","generateRanges","shortRanges","range","shortResidueIndices","reduce","ac","curr","concat","longRanges","longResidueIndices","Set","has","ligandResidues","ligandIds","referenceId","ligandId","currentLigandResidueIndices","lipidClasses","lipidResidues","lipidResidueIndices","opacity","ionResidues","ionResidueIndices","otherClasses","otherResidues","otherResiduesIndices","REPRESENTATION_REFERENCES","REPRESENTATION_COLORS","base","interface","RmsdPairwise","accessionAndMdNumber","metadata","defaultInteractions","topologyManager","viewerRef","useRef","defaultRepresentations","selectedFramePair","setSelectedFramePair","useState","url","BASE_PATH_PROJECTS","loading","payload","error","useAPI","rmsds","AxesValues","data","find","dataset","Error","dataLength","AxesStep","Math","floor","mdFrames","Array","fill","v","components","setComponents","previousComponents","frame","previousComponent","representations","setRepresentations","agents","interface_indices_1","interface_indices_2","previousRepresentations","newRepresentations","previousInteraction","rep","reference","includes","component","representation","newRepresentation","previousRepresentation","previousComponentName","split","replace","agent","agentIndex","custom","toString","Card","CardContent","horizontal","Typography","variant","InteractionSelector","c","Chip","margin","backgroundColor","a","margined","id","Heatmap","inputData","xLabels","yLabels","onTooltip","xAxisValue","yAxisValue","round","_ref2","legendTitle","maxColor","minColor","xTitle","yTitle","ViewerSpawner","newViewer","componentsState","representationsState","selRef","onNail","viewer","previous","onClose","ViewerWithControls","lazy","maxZ","NGLViewerInDND","props","place","setPlace","innerWidth","innerHeight","scrollY","window","offsetHeight","document","querySelector","offsetTop","dimension","max","min","reasonableHeight","width","height","x","y","Rnd","position","zIndex","bounds","cancel","onDragStart","onResizeStart","onDragStop","e","d","layerX","layerY","onResize","current","autoResize","onResizeStop","direction","ref","delta","elevation","startsPlaying","nailing","nailedViewers","setNailedViewers","viewers","usedIds","getNewId","indexOf","console","close","nailed","newNailed","splice","nail"],"sourceRoot":""}