{"version":3,"file":"static/js/4313.57387576.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/animated-card/style.module.css?d4d9","components/animated-card/index.js","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js","webpack://mdposit/./src/pages/accession/thickness/style.module.css?198c","utils/statistics/index.js","../node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@mui/material/internal/svg-icons/CheckBox.js","../node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@mui/material/Checkbox/checkboxClasses.js","../node_modules/@mui/material/Checkbox/Checkbox.js","webpack://mdposit/./src/components/color-legend/style.module.css?0c39","components/color-legend/index.js","utils/document-measurer/index.js","components/d3-heatmap-grid/index.js","pages/accession/thickness/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__M9GCG\"};","import React, { useLayoutEffect, useRef, forwardRef } from 'react';\nimport { Card } from '@mui/material';\n\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nconst KEYFRAMES = { opacity: [0, 1] };\n\nif (!reducedMotion()) {\n  KEYFRAMES.transform = ['translateY(50px)', 'translateY(0)'];\n}\n\nconst ANIMATION_OPTIONS = {\n  fill: 'both',\n  easing: 'cubic-bezier(0, .99, .56, 1.1)',\n  duration: 500,\n};\n\n// Make the card appear and slide softly from down to up when the page is loaded\nconst AnimatedCard = forwardRef(({ overrideComponent, ...props }, ref) => {\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const node = containerRef.current && containerRef.current.firstElementChild;\n    if (!(node && node.animate)) return;\n\n    const index = Array.from(\n      document.querySelectorAll('main section'),\n    ).findIndex(section => node === section);\n\n    const animation = node.animate(KEYFRAMES, {\n      ...ANIMATION_OPTIONS,\n      delay: index * 150,\n    });\n\n    return () => animation.cancel();\n  }, []);\n\n  const Component = overrideComponent ? 'section' : Card;\n\n  return (\n    <div ref={containerRef} className={style.container}>\n      <Component component=\"section\" {...props} ref={ref} />\n    </div>\n  );\n});\n\nexport default AnimatedCard;\n","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n  const {\n      className,\n      raised = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    raised\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;","// extracted by mini-css-extract-plugin\nexport default {\"paper\":\"style_paper__O1iVe\",\"tablecard\":\"style_tablecard__QrT9j\",\"legend_container\":\"style_legend_container__p+ZJk\",\"legend\":\"style_legend__YWoMk\",\"nglcard\":\"style_nglcard__1Ns8a\",\"margined\":\"style_margined__hC4Uz\",\"container\":\"style_container__yFiwR\",\"selectedrow\":\"style_selectedrow__hSkEf\",\"graph\":\"style_graph__f4I+1\",\"graph-placeholder\":\"style_graph-placeholder__vZj+5\"};","// Statistics\n// Provide some usual statistics functions\n\n// Set a function which returns just the average\nexport const getMean = data => {\n  if (!data) return;\n  const sum = data.reduce((pv, cv) => pv + cv, 0);\n  const n = data.length;\n  return sum / n;\n};\n\n// Set a function which returns the average and standard deviation from a numeric array\nexport const getMeanAndStdv = data => {\n  if (!data) return;\n  const sum = data.reduce((pv, cv) => pv + cv, 0);\n  const n = data.length;\n  const mean = sum / n;\n  const stdv = Math.sqrt(\n    data.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n,\n  );\n  return { mean, stdv };\n};\n","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCheckboxUtilityClass(slot) {\n  return generateUtilityClass('MuiCheckbox', slot);\n}\nconst checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium']);\nexport default checkboxClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checkedIcon\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport checkboxClasses, { getCheckboxUtilityClass } from './checkboxClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    indeterminate,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`, `size${capitalize(size)}`]\n  };\n  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\nconst CheckboxRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiCheckbox',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.indeterminate && styles.indeterminate, styles[`size${capitalize(ownerState.size)}`], ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  color: (theme.vars || theme).palette.text.secondary\n}, !ownerState.disableRipple && {\n  '&:hover': {\n    backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  }\n}, ownerState.color !== 'default' && {\n  [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {\n    color: (theme.vars || theme).palette[ownerState.color].main\n  },\n  [`&.${checkboxClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  }\n}));\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(CheckBoxIcon, {});\nconst defaultIcon = /*#__PURE__*/_jsx(CheckBoxOutlineBlankIcon, {});\nconst defaultIndeterminateIcon = /*#__PURE__*/_jsx(IndeterminateCheckBoxIcon, {});\nconst Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(inProps, ref) {\n  var _icon$props$fontSize, _indeterminateIcon$pr;\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCheckbox'\n  });\n  const {\n      checkedIcon = defaultCheckedIcon,\n      color = 'primary',\n      icon: iconProp = defaultIcon,\n      indeterminate = false,\n      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,\n      inputProps,\n      size = 'medium',\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const icon = indeterminate ? indeterminateIconProp : iconProp;\n  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n  const ownerState = _extends({}, props, {\n    color,\n    indeterminate,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CheckboxRoot, _extends({\n    type: \"checkbox\",\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size\n    }),\n    ownerState: ownerState,\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other, {\n    classes: classes\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckBoxIcon />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <CheckBoxOutlineBlankIcon />\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate: PropTypes.bool,\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateCheckBoxIcon />\n   */\n  indeterminateIcon: PropTypes.node,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense checkbox styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Checkbox;","// extracted by mini-css-extract-plugin\nexport default {\"horizontal\":\"style_horizontal__KW-k9\",\"vertical\":\"style_vertical__YKrT2\",\"heatmap-horizontal\":\"style_heatmap-horizontal__HjdIF\",\"heatmap-vertical\":\"style_heatmap-vertical__utgJY\"};","import React, { useMemo } from 'react';\n\nimport { CardContent } from '@mui/material';\n\nimport style from './style.module.css';\n\nimport D3HeatmapGrid from '../d3-heatmap-grid';\n\n// Display a color legend using the d3 heatmap\nconst ColorLegend = ({\n  // Title to be rendered over the legend\n  title = '',\n  // Maximum and minimum possible values\n  maxValue = 1,\n  minValue = 0,\n  // Colors to represent the values range from lower to higher (e.g. ['red', 'white', 'blue'])\n  colorPlan,\n  // Number of cells in the legend heatmap (i.e. how many times we split the color bar)\n  splits = 19,\n  // Set if the color bar must be veritcal\n  vertical = false,\n  flip = false,\n  // Allow to force a custom className from the parent component\n  className,\n}) => {\n  // Create a fake 'data' object for the heatmap\n  const { legendData, legendLabels } = useMemo(() => {\n    // Set the legend, which is another heatmap\n    // Make labels for different value regions\n    const values = [];\n    // If the minimum and maximum are the same then there is only one label to show\n    if (minValue === maxValue) values.push(minValue);\n    // Otherwise make the different regions\n    // WARNING: If we have same minimum and maximum values then the logic below will enter in an infinite loop\n    else for (let i = minValue; i <= maxValue; i += (maxValue - minValue) / splits)\n      values.push(i);\n\n    // Round all values\n    let legendLabels = values.map(val => Math.round(val));\n    // If there is more than 1 label then the make sure all of them are unique\n    // WARNING: If we have a single label  the logic below will enter in an infinite loop\n    if (legendLabels.length > 1)\n      // If there are repeated labels then we round to the next 10 fold lower scale until there are no more duplicates\n      for (let decimal = 1; new Set(legendLabels).size < legendLabels.length; decimal++) {\n        legendLabels = values.map(val => Math.round(val * 10 ** decimal) / 10 ** decimal);\n      }\n\n    // Data must be an array inside an array\n    const legendData = vertical ? values.map(v => [v]) : [values];\n    if (flip) {\n      // Flip the legend data array\n      legendData.reverse();\n      legendLabels.reverse();\n    }\n\n    return { legendData, legendLabels };\n  }, [maxValue, minValue, splits, vertical]);\n\n  // Render\n  return (\n    <CardContent\n      className={\n        className ? className : vertical ? style.vertical : style.horizontal\n      }\n    >\n      {title}\n      <D3HeatmapGrid\n        data={legendData}\n        xAxisValues={vertical ? [''] : legendLabels}\n        yAxisValues={vertical ? legendLabels : ['']}\n        colorPlan={colorPlan}\n        flippedXAxisValues={false}\n        className={\n          vertical ? style['heatmap-vertical'] : style['heatmap-horizontal']\n        }\n      />\n    </CardContent>\n  );\n};\n\nexport default ColorLegend;\n","// Function involved in getting text pixels width\n// WARNING: These functions do not work properly in Chrome (not an easy problem)\n\n// This function allows to calculate the width of a given string text\n// The font for the calculation in the d3 default font\nexport const getTextWidth = (text, font = 'bold 10px sans-serif') => {\n  const canvas =\n    getTextWidth.canvas ||\n    (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width;\n};\n\n// Alternative way to obtain text width\n// Probably the only way to obtain text height\nexport const getTextSizeDOM = (text, font = 'bold 10px sans-serif') => {\n  const element = document.createElement('div');\n  const content = document.createTextNode(text);\n  element.appendChild(content);\n  Object.assign(element.style, {\n    font: font,\n    position: 'absolute',\n    visibility: 'hidden',\n    height: 'auto',\n    width: 'auto',\n    'white-space': 'nowrap',\n  });\n  document.body.appendChild(element);\n  return { width: element.clientWidth, height: element.clientHeight };\n};\n\n// Get the whole body width\nexport const getBodyWidth = () => {\n  return Math.max(\n    document.body.scrollWidth,\n    document.documentElement.scrollWidth,\n    document.body.offsetWidth,\n    document.documentElement.offsetWidth,\n    document.documentElement.clientWidth,\n  );\n};\n\n// Get the whole body height\nexport const getBodyHeight = () => {\n  return Math.max(\n    document.body.scrollHeight,\n    document.documentElement.scrollHeight,\n    document.body.offsetHeight,\n    document.documentElement.offsetHeight,\n    document.documentElement.clientHeight,\n  );\n};\n","import React, { useRef, useEffect, useState, memo } from 'react';\n\nimport { getTextWidth, getTextSizeDOM } from '../../utils/document-measurer';\n\nimport { axisBottom, select, scaleLinear, scaleBand, axisLeft } from 'd3';\n\nimport { setTooltipPosition } from '../../utils/tooltip-position-manager';\n\n// According to d3 documentation\nconst defaultD3font = 'normal 10px sans-serif';\n// Experimentally verfied\nconst titlesD3font = 'normal 14px sans-serif';\n\n// DANI: Ni este 'memo' ni el 'useMemo' de dentro funcionan. Siempre se vuelve a calcular\n// Lo óptimo sería que funcionase, ya que cada vez que el ususario hace click todo se vuelve a cargar\n// Hay que construir una 'comparision function': https://reactjs.org/docs/react-api.html#reactmemo\n\n// Input 'data' is expected to be an array of arrays (i.e. a matrix)\nconst D3HeatmapGrid = memo(\n  ({\n    data, // The main values\n    xAxisValues = [], // String labels for the horizontal axis\n    yAxisValues = [], // String labels for the vertical axis\n    xAxisLabel, // String title for the horizontal axis\n    yAxisLabel, // String title for the vertical axis\n    verticalPadding = 0,\n    colorPlan = ['red', 'white', 'blue'],\n    colorScale, // In case a color scale is passed it overrides the max, mid and min colors\n    onTooltip, // Text to be rendered on the tooltip\n    onClick, // Function to be called when clicking on the heatmap\n    flippedXAxisValues = true, // Set if values in x axis is horizontal (false) or vertical (true)\n    margin = { top: 10, right: 10, bottom: 10, left: 10 },\n    className,\n    NaNColor = '#ffffff', // Default black color for NaN\n    minValue,\n    maxValue,\n    addBorder = true, // Add a border to each cell\n  }) => {\n    if (!data)\n      throw new Error(\n        `Data is missing. Data is mandatory for the heatmap representation`,\n      );\n    // Check that there are no duplicates in both x and y axes values\n    // WARNING: Duplicates would not make the heatmap fail, but they will result in overlaps\n    if (xAxisValues.length !== new Set(xAxisValues).size) {\n      console.log(xAxisValues);\n      throw new Error(`Duplicated values in the X axis. See console logs`);\n    }\n    if (yAxisValues.length !== new Set(yAxisValues).size) {\n      console.log(yAxisValues);\n      throw new Error(`Duplicated values in the Y axis. See console logs`);\n    }\n\n    // If any label is empty, fill it with 1-n numbers\n    if (xAxisValues.length === 0)\n      xAxisValues = Array.from(Array(data[0].length).keys());\n    if (yAxisValues.length === 0)\n      yAxisValues = Array.from(Array(data[0].length).keys());\n\n    // Convert data to heatmap friendly format\n\n    // Join all rows into a single array with all values\n    const values = [].concat(...data);\n    // Save the maximum and minimum values - excluding NaN values\n    const validValues = values.filter(value => !isNaN(value));\n    const maxv = maxValue ?? Math.max(...validValues);\n    const minv = minValue ?? Math.min(...validValues);\n    // Repeat the x labels as many times as rows are there\n    const xlabs = [].concat(...Array(data.length).fill(xAxisValues));\n    // Repeat each y label as many times as rows are there\n    const ylabs = [];\n    for (const lab of yAxisValues)\n      ylabs.push(...Array(xAxisValues.length).fill(lab));\n    // Fill an array with an object fo each d, x and y\n    const fdata = [];\n    for (const i in values) {\n      fdata.push({ v: values[i], x: xlabs[i], y: ylabs[i] });\n    }\n\n    // Set the reference to the element where the heatmap will be allocated\n    const containerRef = useRef(null);\n    // Save the previous chart reference so we can remove it before a new render\n    const previousCharts = useRef(null);\n\n    // Use a state as a workaround to force rerenders on window resize\n    const [, setCurrentWindow] = useState(null);\n\n    // ----------------------------------------------------------------------------------------\n\n    // OFFSETS: Estimate the space needed for all the labels and titles to not overlap\n\n    // Set a small offset to be added between normal labels and 90 degrees rotated labels\n    // This offset is added between the y labels (normal) and the y title (rotated)\n    // This offset is added between the x labels (rotated) and the x title (normal)\n    const roatatedTextOffset = 9; // In px\n\n    // Set a small offset to keep away the axis labels and the axis values\n    // They are very close to the axis values by default\n    const axisLabelsOffset = 9; // In px\n\n    // Measure the height of normal and text and labels\n    const textHeight = getTextSizeDOM('|', defaultD3font).height;\n    const labelsHeight =\n      getTextSizeDOM('|', titlesD3font).height + axisLabelsOffset;\n\n    // Get the calculated widths of all y labels and select the maximum\n    // In addition, add a small offset between labels and the axis which is added further\n    // This offset is only in x axes, which are rotated 90 degrees and end too much close to the axis\n    const maxXAxisWidth =\n      Math.max(\n        ...xAxisValues.map(label => getTextWidth(label, defaultD3font)),\n      ) + roatatedTextOffset;\n    // Get the calculated widths of all y labels and select the maximum\n    const maxYAxisWidth = Math.max(\n      ...yAxisValues.map(label => getTextWidth(label, defaultD3font)),\n    );\n\n    // In addition, add a small offset between labels and the axis which is added further\n    // This offset is only in x axes, which are rotated 90 degrees and end too much close to the axis\n    const xAxisLabelHegiht = xAxisLabel ? labelsHeight : 0;\n    const yAxisLabelHeight = yAxisLabel ? labelsHeight + roatatedTextOffset : 0;\n\n    // Finally, estimate the space needed by axes, titles, etc.\n    const requiredXOffset = flippedXAxisValues\n      ? maxXAxisWidth + xAxisLabelHegiht\n      : textHeight + xAxisLabelHegiht;\n    const requiredYOffset =\n      yAxisValues.length === 1\n        ? Math.max(maxYAxisWidth, getTextWidth(yAxisLabel, titlesD3font))\n        : maxYAxisWidth + yAxisLabelHeight;\n\n    // Set the dimensions and offsets of the graph\n    const offset = {\n      top: margin.top,\n      right: margin.right,\n      bottom: requiredXOffset + margin.bottom,\n      left: requiredYOffset + margin.left,\n    };\n\n    // ----------------------------------------------------------------------------------------\n\n    // The chart is assigned to a referenced 'div' which must be rendered first\n    // All this process is runned after the render\n    useEffect(() => {\n      // Reset the chart\n      // WARNING: For some reason, if this part is re-render the original render is not gone\n      // WARNING: We must reset the element manually or infinite elements are rendered and stacked\n      if (previousCharts.current)\n        previousCharts.current.forEach(chart => chart.remove());\n\n      // Get the current element where all this heatmap is placed\n      const container = containerRef.current;\n      // The first render, when there is no reference to the current element yet, we skip the process\n      const {\n        clientWidth: width,\n        clientHeight: height,\n      } = container.parentElement;\n\n      // Calculate the body width and height\n      const bodyWidth = width - offset.left - offset.right;\n      const bodyHeight = height - offset.top - offset.bottom;\n\n      // Calculate how many labels we can show in any axis while avoiding overlapping\n      // Take in count that bottom labels are rotated 90º, so it is their height that counts\n      // The '* 1.05' is to grant a small padding\n      const xSlots =\n        bodyWidth / ((flippedXAxisValues ? textHeight : maxXAxisWidth) * 1.05);\n      const ySlots = bodyHeight / (textHeight * 1.05);\n\n      // Estimate how many labels we must skip to reach the desired number\n      const xstep = Math.ceil(xAxisValues.length / xSlots);\n      const ystep = Math.ceil(yAxisValues.length / ySlots);\n\n      // Use canvas to display the heatmap blocks since d3 is not as efficient\n      // Canvas is set this way so we can access this specific element later\n      // WARNING: Using the 'document.getElementById' is risky since there may be more\n      // WARNING: e.g. the color legend\n      const canvasElement = document.createElement('CANVAS');\n      select(container)\n        .node()\n        .appendChild(canvasElement);\n      const canvas = select(canvasElement)\n        .attr('id', 'canvas')\n        .attr('width', bodyWidth)\n        .attr('height', bodyHeight)\n        .style('position', 'absolute')\n        .style('top', offset.top + 'px')\n        .style('left', offset.left + 'px')\n        .style('cursor', onClick ? 'pointer' : undefined);\n      const canvasContext = canvas\n        .node()\n        .getContext('2d' /*, {desynchronized: true}*/);\n\n      // append the svg object to the body of the page\n      const svg = select(container)\n        .append('svg')\n        .attr('id', 'svg')\n        .attr('viewBox', [0, 0, width, height]);\n\n      // Build X scales and axis:\n      const x = scaleBand()\n        .range([offset.left, bodyWidth + offset.left])\n        .domain(xAxisValues)\n        .paddingInner(0);\n\n      const xAxis = svg\n        .append('g')\n        .attr('transform', 'translate(0,' + (bodyHeight + offset.top) + ')')\n        .call(\n          axisBottom(x).tickFormat((d, i) => {\n            if (i % xstep === 0) return d;\n            else return '';\n          }),\n        )\n        .selectAll('text');\n\n      if (flippedXAxisValues) {\n        xAxis\n          .style('text-anchor', 'end')\n          .attr('dx', -roatatedTextOffset + 'px')\n          .attr('dy', -roatatedTextOffset + 'px')\n          .attr('transform', 'rotate(-90)');\n      }\n\n      // Build the X axis label\n      svg\n        .append('text')\n        .attr('class', 'x label')\n        .attr('text-anchor', 'middle')\n        .attr('x', offset.left + bodyWidth / 2)\n        .attr('y', offset.top + bodyHeight + requiredXOffset)\n        .text(xAxisLabel);\n\n      // Build Y scales and axis:\n      const y = scaleBand()\n        .domain(yAxisValues)\n        .range([offset.top, bodyHeight + offset.top])\n        .padding(verticalPadding);\n\n      svg\n        .append('g')\n        .attr('transform', 'translate(' + offset.left + ', 0)')\n        .call(\n          axisLeft(y).tickFormat((d, i) => {\n            if (i % ystep === 0) return d;\n            else return '';\n          }),\n        );\n\n      // Build the Y axis label\n      if (yAxisValues.length === 1) {\n        svg\n          .append('text')\n          .attr('class', 'y label')\n          .attr('text-anchor', 'start')\n          .attr('x', 0)\n          .attr('y', margin.top + bodyHeight)\n          .text(yAxisLabel);\n      } else {\n        svg\n          .append('text')\n          .attr('class', 'y label')\n          .attr('text-anchor', 'middle')\n          .attr('x', -(offset.top + bodyHeight / 2))\n          .attr(\n            'y',\n            margin.left +\n              yAxisLabelHeight -\n              roatatedTextOffset -\n              axisLabelsOffset,\n          )\n          .attr('transform', 'rotate(-90)')\n          .text(yAxisLabel);\n      }\n\n      // Build color scale\n      const myColor = value => {\n        if (isNaN(value)) {\n          return NaNColor;\n        }\n        \n        const colorMapper = colorScale \n          ? colorScale \n          : scaleLinear()\n              .range(colorPlan)\n              .domain([minv, (minv + maxv) / 2, maxv]);\n              \n        return colorMapper(value);\n      };\n\n      // Get cell size according to d3 scale band\n      const cellWidth = x.bandwidth();\n      const cellHeight = y.bandwidth();\n\n      // Display heatmap cells using canvas\n      data.forEach((row, cy) => {\n        const yPosition = y(yAxisValues[cy]) - offset.top;\n        row.forEach((value, cx) => {\n          const xPosition = x(xAxisValues[cx]) - offset.left;\n          canvasContext.fillStyle = myColor(value);\n          canvasContext.fillRect(xPosition, yPosition, cellWidth, cellHeight);\n        \n        if (addBorder){  \n          // Add border\n          canvasContext.strokeStyle = myColor(value); // Use same color as fill\n          canvasContext.lineWidth = 1;\n          canvasContext.strokeRect(xPosition, yPosition, cellWidth, cellHeight);}\n        });\n      });\n\n      // Get the current mouse position in a standard format\n      const getMousePosition = e => {\n        // Get canvas current position\n        // WARNING: This line must be inside the function since canvas position may change when scrolling\n        const canvasRect = canvasElement.getBoundingClientRect();\n        // Get the exact mouse positions\n        const xPosition = e.clientX - canvasRect.left;\n        const yPosition = e.clientY - canvasRect.top;\n        // Calculate the equivalent x and y indexes\n        let xIndex = Math.floor(xPosition / x.step());\n        let yIndex = Math.floor(yPosition / y.step());\n        // Sometimes it may happend in the borders of the heatmap that ihe index is out of range\n        const xLimit = data[0].length - 1;\n        if (xIndex < 0) xIndex = 0;\n        if (xIndex > xLimit) xIndex = xLimit;\n        const yLimit = data.length - 1;\n        if (yIndex < 0) yIndex = 0;\n        if (yIndex > yLimit) yIndex = yLimit;\n        // Get also the equivalent axis values and the cell value\n        const xAxisValue = xAxisValues[xIndex];\n        const yAxisValue = yAxisValues[yIndex];\n        const value = data[yIndex][xIndex];\n        return { xIndex, yIndex, value, xAxisValue, yAxisValue };\n      };\n\n      // In case there is a tooltip, handle how to show it\n      let tooltip;\n      if (onTooltip) {\n        // Set up the tooltip, which is hidden by default\n        tooltip = document.createElement('div');\n        Object.assign(tooltip.style, {\n          display: 'none',\n          position: 'absolute',\n          pointerEvents: 'none',\n          backgroundColor: 'rgba( 0, 0, 0, 0.6 )',\n          color: 'lightgrey',\n          padding: '8px',\n          fontFamily: 'sans-serif',\n        });\n        container.appendChild(tooltip);\n\n        canvasElement.onmousemove = e => {\n          // Get current mouse position\n          const mousePosition = getMousePosition(e);\n          // Set the tooltip text\n          tooltip.innerText = onTooltip(mousePosition);\n          //console.log(xIndex + ',' + yIndex);\n          // Set the tooltip position inside the heatmap\n          tooltip.style.display = 'inline-block';\n          const {\n            x: xTooltipPosition,\n            y: yTooltipPosition,\n          } = setTooltipPosition(\n            container,\n            tooltip,\n            { x: e.clientX, y: e.clientY },\n            3,\n          );\n          tooltip.style.left = xTooltipPosition + 'px';\n          tooltip.style.top = yTooltipPosition + 'px';\n        };\n        canvasElement.onmouseleave = () => {\n          tooltip.style.display = 'none';\n        };\n      }\n\n      // Handle when a cell is clicked\n      if (onClick) {\n        canvasElement.onmousedown = e => {\n          // Get current mouse position\n          const mousePosition = getMousePosition(e);\n          // Call the on click function\n          onClick(mousePosition);\n        };\n      }\n\n      // Record all elements which must be removed manually when re-rendering\n      previousCharts.current = tooltip ? [svg, canvas, tooltip] : [svg, canvas];\n\n      const handleResize = () => {\n        setCurrentWindow({\n          innerWidth: window.innerWidth,\n          innerHeight: window.innerHeight,\n        });\n      };\n      window.addEventListener('resize', handleResize);\n\n      // Cleaning function\n      return () => {\n        window.removeEventListener('resize', handleResize);\n      };\n    }); // This useEffect has no dependencies\n\n    // Finally, render the heatmap\n    return (\n      // It is important to specify a height value\n      // Otherwise canvas and svg may be not coordinated\n      <div\n        className={className}\n        style={className ? undefined : { height: '600px', width: '600px' }}\n      >\n        <div\n          ref={containerRef}\n          id={'container'}\n          // WARNING: This width 100% may seem redundant, but chrome needs it\n          style={{ position: 'relative', width: '100%', height: '100%' }}\n        />\n      </div>\n    );\n  },\n);\n\nexport default D3HeatmapGrid;\n","import React, { lazy, Suspense, useState, useContext, useMemo, useRef, useEffect, useCallback } from 'react';\nimport { useInView } from 'react-intersection-observer';\n\nimport {\n    CardContent,\n    Table,\n    TableHead,\n    TableBody,\n    TableRow,\n    TableCell,\n    FormControlLabel,\n    Checkbox,\n} from '@mui/material';\n\nimport Card from '../../../components/animated-card';\nimport ViewerWithControls from '../../../components/viewer-with-controls';\nimport Loading from '../../../components/loading';\nimport useAPI from '../../../hooks/use-api';\nimport { ProjectCtx } from '../../../contexts';\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\nimport { getMean } from '../../../utils/statistics';\nimport style from './style.module.css';\nimport useDefaultRepresentations from '../../../components/ngl-viewer/use-default-representations';\nimport ColorLegend from '../../../components/color-legend';\nimport { ColormakerRegistry } from 'ngl';\n\n\nconst Graph = lazy(() =>\n    import(/* webpackChunkName: 'graph' */ '../../../components/graph'),\n);\nconst colors = ['green', 'blue', 'red'];\n// To see the available schemes log ColormakerRegistry.userSchemes or ColormakerRegistry.schemes\nconst generateScheme = (frame, data, std1) => {\n    return ColormakerRegistry.addScheme(function (params) {\n        this.atomColor = function (atom) {\n            let midplane_z = data.midplane_z[frame];\n            let std = 3 * std1;\n            let zPos = atom.z - midplane_z;\n            let ratio, r, g, b, layerZ;\n            if (zPos > 0) { // top leaflet\n                layerZ = data.mean_positive[frame];\n            } else { // bottom leaflet\n                layerZ = -1 * data.mean_negative[frame];\n                zPos = -zPos;\n            }\n\n            if (zPos >= layerZ) { // thickening\n                ratio = (zPos - layerZ) / std;\n                ratio = Math.min(1, ratio);\n                r = Math.floor(255 * (1 - ratio));\n                g = Math.floor(255 * (1 - ratio));\n                b = 255;\n            } else { // thinning\n                ratio = -(zPos - layerZ) / std;\n                ratio = Math.min(1, ratio);\n                r = 255;\n                g = Math.floor(255 * (1 - ratio));\n                b = Math.floor(255 * (1 - ratio));\n            }\n            return (r << 16) + (g << 8) + b;\n        };\n    }, 'distorsion');\n};\n\nconst useInViewOptions = { triggerOnce: true, rootMargin: '100px' };\n\nconst Thickness = () => {\n    // Get the metadata\n    const { accessionAndMdNumber, metadata, chains } = useContext(ProjectCtx);\n\n    // Send a request to the API with the url of the specific analysis\n    const {\n        loading: thicknessLoading,\n        payload: thicknessPayload,\n        error: thicknessError,\n    } = useAPI(`${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/thickness/`);\n    // Get the membrane map\n    const {\n        loading: memMapLoading,\n        payload: memMapPayload,\n        error: memMapError,\n    } = useAPI(`${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/mem-map/`);\n\n    // Set which thickness components to display\n    const [display, setDisplay] = useState({});\n    // Track if the NGL viewer is visible\n    const [nglRef, isNglVisible] = useInView(useInViewOptions);\n    const viewerRef = useRef(null);\n    // Use default representations hook\n    const defaultRepresentations = useDefaultRepresentations();\n    // Define the representations to be displayed in the viewer\n    const [representations, setRepresentations] = useState(null);\n    // Initialize an empty dictionary for the schemes\n    const schemes = useRef({});\n    // Function to get or generate a scheme for a specific frame\n    const getSchemeForFrame = (frame, data, std1) => {\n        if (!schemes.current[frame]) {\n            schemes.current[frame] = generateScheme(frame, data, std1);\n        }\n        return schemes.current[frame];\n    };\n\n    // Format the data\n    const {\n        thicknessData,\n        frameStep,\n        xAxisStep,\n        xAxisLabel,\n        isEnsemble,\n        xTooltip,\n        xValues,\n        defaultDisplay\n    } = useMemo(() => {\n        if (!thicknessPayload || !thicknessPayload.data) return {};\n\n        const thicknessData = {\n            'Membrane': {\n                data: thicknessPayload.data.thickness,\n                color: colors[0],\n                average: getMean(thicknessPayload.data.thickness),\n                mean_stddev: getMean(thicknessPayload.data.std_thickness),\n                areaStdDev: thicknessPayload.data.std_thickness\n            },\n            'Upper leaflet': {\n                data: thicknessPayload.data.mean_positive,\n                color: colors[1],\n                average: getMean(thicknessPayload.data.mean_positive),\n                mean_stddev: getMean(thicknessPayload.data.std_positive),\n                areaStdDev: thicknessPayload.data.std_positive\n            },\n            'Lower leaflet': {\n                data: thicknessPayload.data.mean_negative,\n                color: colors[2],\n                average: getMean(thicknessPayload.data.mean_negative),\n                mean_stddev: getMean(thicknessPayload.data.std_negative),\n                areaStdDev: thicknessPayload.data.std_negative\n            }\n        };\n\n        const frameStep = thicknessPayload.data.step;\n        const defaultDisplay = {\n            'Membrane': true,\n            'Upper leaflet': true,\n            'Lower leaflet': true\n        };\n\n        const isEnsemble = metadata.TYPE === 'ensemble';\n        const framesTimeStep = metadata.FRAMESTEP;\n        let xAxisStep, xAxisLabel, xTooltip;\n        if (isEnsemble || !framesTimeStep) {\n            xAxisStep = frameStep;\n            xAxisLabel = 'Frames';\n            xTooltip = xValue => 'frame ' + xValue;\n        }\n        else {\n            const analysisTimeStep = frameStep * framesTimeStep\n            xAxisStep = analysisTimeStep;\n            xAxisLabel = 'Time (ns)';\n            xTooltip = xValue => +xValue.toFixed(2) + ' ns';\n        }\n        return {\n            thicknessData,\n            frameStep: frameStep,\n            xAxisStep: xAxisStep,\n            xAxisLabel: xAxisLabel,\n            isEnsemble,\n            xTooltip: xTooltip,\n            xValues: thicknessPayload.data.frame,\n            defaultDisplay\n        };\n    }, [metadata, thicknessPayload]);\n\n    // Add useEffect to set initial display state\n    useMemo(() => {\n        if (defaultDisplay) {\n            setDisplay(defaultDisplay);\n        }\n    }, [defaultDisplay]);\n\n    // Set when one point in the graph is selected\n    const [selected, setSelected] = useState(-100);\n    // When the user clicks on the graph\n      const handleFrameSelection = useCallback(frame => {\n        viewerRef.current.togglePlaying(false);\n        viewerRef.current.currentFrame = frame;\n        setSelected(frame);\n      }, []);\n\n    // Set the mark for selected\n    const marks = useMemo(() => {\n        const selectedMark = {\n            x: selected,\n            attr: { fill: '#c8c8c8' },\n        };\n        return [selectedMark];\n    }, [selected]);\n\n    // Handle the change of frame\n    useEffect(() => {\n        if (!viewerRef.current) return;\n        viewerRef.current.currentFrame = selected;\n    }, [selected]);\n\n    // Set the main component to be passed to NGL\n    const components = useMemo(() => {\n        // Wait for payload to be downloaded\n        if (!thicknessData) return;\n        // Load the required frames from the main trajectory\n        const trajectoryUrl = `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/trajectory`;\n        const mainURL = `${trajectoryUrl}?frames=1:${metadata.mdFrames}:${frameStep}`;\n        // Set the main component, which includes everything but the pockets\n        const mainComponent = { trajectoryURLs: [mainURL] };\n        return [mainComponent];\n    }, [accessionAndMdNumber, metadata, frameStep]);\n\n    // Set or update the representations state\n    useMemo(() => {\n        if (!components || !thicknessPayload.data || !memMapPayload) return;\n        if (!defaultRepresentations || defaultRepresentations.length === 0) return;\n        const keepRepresentations = defaultRepresentations.filter(rep => (rep.name !== 'M' && rep.name !== 'Membrane'));\n        setRepresentations(previous => {\n            if (previous !== null) return previous;\n            keepRepresentations.forEach(rep => {\n                if (rep.name == 'Protein' || chains.indexOf(rep.selection.slice(1,2)) !== -1) {\n                    rep.color = 'grey';\n                }\n            });\n\n            let distRepr = [{\n                name: 'Upper leaflet',\n                type: 'ball+stick',\n                opacity: 1,\n                selection: '@' + memMapPayload.mems[0].polar_atoms.top.join(','),\n                other: { radius: 0.75 },\n                color: getSchemeForFrame(0, thicknessPayload.data, thicknessData.Membrane.mean_stddev),\n                customScheme: 'distorsion',\n            },\n            {\n                name: 'Lower leaflet',\n                type: 'ball+stick',\n                opacity: 1,\n                selection: '@' + memMapPayload.mems[0].polar_atoms.bot.join(','),\n                other: { radius: 0.75 },\n                color: getSchemeForFrame(0, thicknessPayload.data, thicknessData.Membrane.mean_stddev),\n                customScheme: 'distorsion',\n            }]\n            return [...keepRepresentations, ...distRepr];\n        });\n    }, [components, defaultRepresentations, thicknessPayload, memMapPayload, thicknessData]);\n\n    // Update the the representations according to selected or hovered pockets\n    useEffect(() => {\n        if (!representations || representations.length === 0) return;\n        setRepresentations(previousRepresentations => { \n        // Update chain representations\n        previousRepresentations.forEach( previousRepresentation => {\n            if (previousRepresentation.name.endsWith('leaflet'))\n                previousRepresentation.show = display[previousRepresentation.name] ? true : false;\n        });\n        // Update the state\n        return [...previousRepresentations];\n        })\n    }, [display]);\n\n    const updateColor = useCallback(progress => {\n        if (!thicknessPayload || !thicknessPayload.data) return {};\n        const frame = viewerRef.current.currentFrame;\n        setRepresentations(previousRepresentations => {\n            previousRepresentations.forEach(rep => {\n                if (rep.name.endsWith('leaflet'))\n                    rep.color = getSchemeForFrame(frame, thicknessPayload.data, thicknessData.Membrane.mean_stddev);\n            });\n            return [...previousRepresentations];\n        });\n        setSelected(frame);\n    }, [thicknessPayload]);\n\n    // Render loading or error states\n    if (thicknessLoading) return <Loading />;\n    else if (thicknessError) return thicknessError.toString();\n    else if (!thicknessPayload) return 'Something bad happened loading thickness data';\n    const cents = num => Math.round(num * 100) / 100;\n    //console.log('Render')\n\n    // Render\n    return (\n        <Suspense fallback={<Loading />}>\n            <Card className={style.tablecard}>\n                <div className={style.paper} >\n                    <Table padding=\"checkbox\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>selected chains</TableCell>\n                                <TableCell>{`mean`}</TableCell>\n                                <TableCell>{`mean of standard deviations`}</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {Object.entries(thicknessData).map(([key, thickness], i) => (\n                                <TableRow key={key}>\n                                    <TableCell>\n                                        {\n                                            <FormControlLabel\n                                                onChange={() =>\n                                                    setDisplay(previous => {\n                                                        previous[key] = !previous[key];\n                                                        return { ...previous };\n                                                    })\n                                                }\n                                                control={\n                                                    <Checkbox\n                                                        checked={display[key]}\n                                                        style={{ color: colors[i] }}\n                                                    />\n                                                }\n                                                label={key}\n                                            />\n                                        }\n                                    </TableCell>\n                                    <TableCell>{cents(thickness.average)}</TableCell>\n                                    <TableCell>{cents(thickness.mean_stddev)}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </div>\n            </Card>\n            <Card className={style.legend_container}>\n                <ColorLegend\n                    title={'Distortion (Å)'}\n                    minValue={-thicknessData.Membrane.mean_stddev}\n                    maxValue={thicknessData.Membrane.mean_stddev}\n                    colorPlan={['red', 'white', 'blue']}\n                    vertical={true}\n                    className={style.legend}\n                    flip={true}\n                />\n            </Card>\n            <Card className={style.nglcard} ref={nglRef}>\n                {isNglVisible ? (\n                    <ViewerWithControls\n                        className={style.container}\n                        startingComponents={components}\n                        representationsState={[representations, setRepresentations]}\n                        onProgress={updateColor}\n                        ref={viewerRef}\n                        rotateX={true}\n                    />\n                ) : (\n                    <div style={{ height: '50vh' }} />\n                )}\n            </Card>\n            <Card className={style.graph}>\n                <CardContent>\n                    <Graph\n                        yData={thicknessData}\n                        step={xAxisStep}\n                        xAxisLabel={xAxisLabel}\n                        xAxisValues={xValues}\n                        xTooltip={xTooltip}\n                        yAxisLabel={'Thickness'}\n                        onSelect={handleFrameSelection}\n                        selfLegend={false}\n                        dataDisplay={display}\n                        marks={marks}\n                        areaStdDev={true}\n                        className={style.graph}\n                        zeroLine={true}\n                        margin={{ top: 10, right: 10, bottom: 30, left: 10 }}\n                        yPadding={thicknessData.Membrane.mean_stddev}\n                    />\n                </CardContent>\n            </Card>\n        </Suspense>\n    );\n};\n\nThickness.displayName = 'Thickness'\nexport default Thickness;\n"],"names":["KEYFRAMES","opacity","reducedMotion","transform","ANIMATION_OPTIONS","fill","easing","duration","forwardRef","_ref","ref","overrideComponent","props","_objectWithoutProperties","_excluded","containerRef","useRef","useLayoutEffect","node","current","firstElementChild","animate","index","Array","from","document","querySelectorAll","findIndex","section","animation","_objectSpread","delay","cancel","Component","Card","_jsx","className","style","children","component","getCardUtilityClass","slot","generateUtilityClass","generateUtilityClasses","CardRoot","styled","Paper","name","overridesResolver","styles","root","overflow","React","inProps","useDefaultProps","raised","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","clsx","elevation","undefined","getMean","data","reduce","pv","cv","length","getMeanAndStdv","sum","n","mean","stdv","Math","sqrt","map","x","pow","a","b","createSvgIcon","d","getCheckboxUtilityClass","CheckboxRoot","SwitchBase","shouldForwardProp","prop","rootShouldForwardProp","indeterminate","concat","capitalize","size","color","theme","vars","palette","text","secondary","disableRipple","backgroundColor","action","activeChannel","mainChannel","hoverOpacity","alpha","active","main","checkboxClasses","checked","disabled","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","_icon$props$fontSize","_indeterminateIcon$pr","checkedIcon","icon","iconProp","indeterminateIcon","indeterminateIconProp","inputProps","slots","composedClasses","type","fontSize","title","maxValue","minValue","colorPlan","splits","vertical","flip","legendData","legendLabels","useMemo","values","push","i","val","round","decimal","Set","v","reverse","_jsxs","CardContent","D3HeatmapGrid","xAxisValues","yAxisValues","flippedXAxisValues","getTextWidth","font","arguments","context","canvas","createElement","getContext","measureText","width","getTextSizeDOM","element","content","createTextNode","appendChild","Object","assign","position","visibility","height","body","clientWidth","clientHeight","defaultD3font","titlesD3font","memo","xAxisLabel","yAxisLabel","verticalPadding","colorScale","onTooltip","onClick","margin","top","right","bottom","left","NaNColor","addBorder","Error","console","log","keys","validValues","filter","value","isNaN","maxv","max","minv","min","xlabs","ylabs","lab","fdata","y","previousCharts","setCurrentWindow","useState","textHeight","labelsHeight","maxXAxisWidth","label","maxYAxisWidth","xAxisLabelHegiht","yAxisLabelHeight","requiredXOffset","requiredYOffset","offset","useEffect","forEach","chart","remove","container","parentElement","bodyWidth","bodyHeight","xSlots","ySlots","xstep","ceil","ystep","canvasElement","select","attr","canvasContext","svg","append","scaleBand","range","domain","paddingInner","xAxis","call","axisBottom","tickFormat","selectAll","padding","axisLeft","myColor","scaleLinear","cellWidth","bandwidth","cellHeight","row","cy","yPosition","cx","xPosition","fillStyle","fillRect","strokeStyle","lineWidth","strokeRect","getMousePosition","e","canvasRect","getBoundingClientRect","clientX","clientY","xIndex","floor","step","yIndex","xLimit","yLimit","xAxisValue","yAxisValue","tooltip","display","pointerEvents","fontFamily","onmousemove","mousePosition","innerText","xTooltipPosition","yTooltipPosition","setTooltipPosition","onmouseleave","onmousedown","handleResize","innerWidth","window","innerHeight","addEventListener","removeEventListener","id","Graph","lazy","colors","generateScheme","frame","std1","ColormakerRegistry","addScheme","params","this","atomColor","atom","ratio","r","g","layerZ","midplane_z","std","zPos","z","mean_positive","mean_negative","useInViewOptions","triggerOnce","rootMargin","Thickness","accessionAndMdNumber","metadata","chains","useContext","ProjectCtx","loading","thicknessLoading","payload","thicknessPayload","error","thicknessError","useAPI","BASE_PATH_PROJECTS","memMapLoading","memMapPayload","memMapError","setDisplay","nglRef","isNglVisible","useInView","viewerRef","defaultRepresentations","useDefaultRepresentations","representations","setRepresentations","schemes","getSchemeForFrame","thicknessData","frameStep","xAxisStep","isEnsemble","xTooltip","xValues","defaultDisplay","thickness","average","mean_stddev","std_thickness","areaStdDev","std_positive","std_negative","TYPE","framesTimeStep","FRAMESTEP","xValue","toFixed","selected","setSelected","handleFrameSelection","useCallback","togglePlaying","currentFrame","marks","components","trajectoryUrl","trajectoryURLs","mdFrames","keepRepresentations","rep","previous","indexOf","selection","slice","distRepr","mems","polar_atoms","join","radius","Membrane","customScheme","bot","previousRepresentations","previousRepresentation","endsWith","show","updateColor","progress","Loading","toString","cents","num","Suspense","fallback","tablecard","paper","Table","TableHead","TableRow","TableCell","TableBody","entries","key","FormControlLabel","onChange","control","Checkbox","legend_container","ColorLegend","legend","nglcard","ViewerWithControls","startingComponents","representationsState","onProgress","rotateX","graph","yData","onSelect","selfLegend","dataDisplay","zeroLine","yPadding","displayName"],"sourceRoot":""}