{"version":3,"file":"static/js/5750.9342881e.chunk.js","mappings":"sKAKA,MAAMA,EAAkB,OAClBC,EAAkB,UAqJxB,GAjJmBC,EAAAA,EAAAA,OAAKC,IAA8C,IAA7C,OAAEC,EAAM,QAAEC,EAAO,QAAEC,EAAO,UAAEC,GAAWJ,EAE9D,MAAMK,GAAeC,EAAAA,EAAAA,QAAO,MAEtBC,GAAiBD,EAAAA,EAAAA,QAAO,OAEvB,CAAEE,IAAoBC,EAAAA,EAAAA,UAAS,MA0HtC,OAvHAC,EAAAA,EAAAA,YAAU,KAIJH,EAAeI,SACjBJ,EAAeI,QAAQC,SAAQC,GAASA,EAAMC,WAGhD,MAAMC,EAAYV,EAAaM,SAG7BK,YAAaC,EACbC,aAAcC,GACZJ,EAAUK,cAMRC,EAAgBC,SAASC,cAAc,WAC7CC,EAAAA,EAAAA,KAAOT,GACJU,OACAC,YAAYL,GACf,MAAMM,GAASH,EAAAA,EAAAA,KAAOH,GACnBO,KAAK,KAAM,UACXA,KAAK,QAASX,GACdW,KAAK,SAAUT,GACfU,MAAM,WAAY,YAGlBA,MAAM,SAAU1B,EAAU,eAAY2B,GACnCC,EAAgBJ,EACnBF,OACAO,WAAW,MAGRC,GAAMT,EAAAA,EAAAA,KAAOT,GAChBmB,OAAO,OACPN,KAAK,KAAM,OACXA,KAAK,UAAW,CAAC,EAAG,EAAGX,EAAOE,IAGjC,GAAIjB,EAAS,CAKX,MAAMiC,GAAIC,EAAAA,EAAAA,MACPC,MAAM,CAAC,EAAGpB,IACVqB,OAAO,CAAC,EAAG,IACXC,aAAa,GAGVC,EAAOL,EAAE,GAMTM,GALON,EAAE,GACOK,GAGHtC,EAAQwC,QAAO,CAACC,EAAGC,IAAMD,EAAIC,GAAG,GAInD,IAAIC,EAAU,EACd5C,EAAOW,SAAQ,CAACkC,EAAMC,KACpB,MAGMC,EAHS9C,EAAQ6C,GAGIN,EAAa,EAClCQ,EAAYJ,EACZK,EAAQJ,EAAOjD,EAAkBC,EACvCiC,EAAcoB,UAAYD,EAC1BnB,EAAcqB,SAASH,EAAW,EAAGD,EAAW7B,GAChD0B,GAAWG,CAAS,GAExB,KAAO,CACL,MAAMb,GAAIC,EAAAA,EAAAA,MACPC,MAAM,CAAC,EAAGpB,IACVqB,OAAOrC,EAAOoD,KAAI,CAACC,EAAGP,IAAMA,KAC5BR,aAAa,GAGVS,EAAYb,EAAEoB,YAGpBtD,EAAOW,SAAQ,CAACkC,EAAMC,KACpB,MAAME,EAAYd,EAAEY,GACdG,EAAQJ,EAAOjD,EAAkBC,EACvCiC,EAAcoB,UAAYD,EAC1BnB,EAAcqB,SAASH,EAAW,EAAGD,EAAW7B,EAAO,GAE3D,CAIIhB,IACFkB,EAAcmC,YAAc,KAE1BrD,GAAS,GAKbI,EAAeI,QAAU,CAACsB,EAAKN,GAE/B,MAAM8B,EAAeA,KACnBjD,EAAiB,CACfkD,WAAYC,OAAOD,WACnBE,YAAaD,OAAOC,aACpB,EAKJ,OAHAD,OAAOE,iBAAiB,SAAUJ,GAG3B,KACLE,OAAOG,oBAAoB,SAAUL,EAAa,CACnD,KAODM,EAAAA,EAAAA,KAAA,OACE3D,UAAWA,EACXyB,MAAOzB,OAAY0B,EAAY,CAAEX,OAAQ,QAASF,MAAO,SAAU+C,UAEnED,EAAAA,EAAAA,KAAA,OACEE,IAAK5D,EACL6D,GAAI,YAEJrC,MAAO,CAAEsC,SAAU,WAAYlD,MAAO,OAAQE,OAAQ,WAEpD,G","sources":["pages/accession/hbonds/bond-status/index.js"],"sourcesContent":["import React, { useRef, useEffect, useState, memo } from 'react';\n\nimport { select, scaleBand, scaleOrdinal } from 'd3';\n\n// Set status colors\nconst activeBondColor = 'blue';\nconst brokenBondColor = '#f0f0f0';\n\n// Represent a single row of rects according to the status\n// The status is an array of true/false values\nconst BondStatus = memo(({ status, weights, onClick, className }) => {\n  // Set the reference to the element where the heatmap will be allocated\n  const containerRef = useRef(null);\n  // Save the previous chart reference so we can remove it before a new render\n  const previousCharts = useRef(null);\n  // Use a state as a workaround to force rerenders on window resize\n  const [, setCurrentWindow] = useState(null);\n  // The chart is assigned to a referenced 'div' which must be rendered first\n  // All this process is runned after the render\n  useEffect(() => {\n    // Reset the chart\n    // WARNING: For some reason, if this part is re-render the original render is not gone\n    // WARNING: We must reset the element manually or infinite elements are rendered and stacked\n    if (previousCharts.current)\n      previousCharts.current.forEach(chart => chart.remove());\n\n    // Get the current element where all this heatmap is placed\n    const container = containerRef.current;\n    // The first render, when there is no reference to the current element yet, we skip the process\n    const {\n      clientWidth: width,\n      clientHeight: height,\n    } = container.parentElement;\n\n    // Use canvas to display the heatmap blocks since d3 is not as efficient\n    // Canvas is set this way so we can access this specific element later\n    // WARNING: Using the 'document.getElementById' is risky since there may be more\n    // WARNING: e.g. the color legend\n    const canvasElement = document.createElement('CANVAS');\n    select(container)\n      .node()\n      .appendChild(canvasElement);\n    const canvas = select(canvasElement)\n      .attr('id', 'canvas')\n      .attr('width', width)\n      .attr('height', height)\n      .style('position', 'absolute')\n      //.style('top', offset.top + 'px')\n      //.style('left', offset.left + 'px')\n      .style('cursor', onClick ? 'pointer' : undefined);\n    const canvasContext = canvas\n      .node()\n      .getContext('2d' /*, {desynchronized: true}*/);\n\n    // append the svg object to the body of the page\n    const svg = select(container)\n      .append('svg')\n      .attr('id', 'svg')\n      .attr('viewBox', [0, 0, width, height]);\n\n    // Build X scales and axis:\n    if (weights) {\n      // const x = scaleOrdinal(weights)\n      //     .domain(status.map((s,i) => i))\n      //     .range([0, width]);\n\n      const x = scaleBand()\n        .range([0, width])\n        .domain([0, 1])\n        .paddingInner(0);\n\n      // Get the x Range in the d3/canvas available space\n      const minX = x(0);\n      const maxX = x(1);\n      const xRange = maxX - minX;\n\n      // Consider all the previous space to be splitted in the different weigths\n      const weigthsSum = weights.reduce((a, b) => a + b, 0);\n      const proportion = xRange / weigthsSum;\n\n      // Now place cells oneafter the other thus keeping the x offset position\n      let xOffset = 0;\n      status.forEach((stat, i) => {\n        const weigth = weights[i];\n        // DANI: El dibujo se quedaba a exactamente la mitad del espacio total, no entiendo por que\n        // DANI: El * 2 en el cellWidth arregla el problema\n        const cellWidth = weigth * proportion * 2;\n        const xPosition = xOffset;\n        const color = stat ? activeBondColor : brokenBondColor;\n        canvasContext.fillStyle = color;\n        canvasContext.fillRect(xPosition, 0, cellWidth, height);\n        xOffset += cellWidth;\n      });\n    } else {\n      const x = scaleBand()\n        .range([0, width])\n        .domain(status.map((s, i) => i))\n        .paddingInner(0);\n\n      // Get the width of each cell\n      const cellWidth = x.bandwidth();\n\n      // Display heatmap cells using canvas\n      status.forEach((stat, i) => {\n        const xPosition = x(i);\n        const color = stat ? activeBondColor : brokenBondColor;\n        canvasContext.fillStyle = color;\n        canvasContext.fillRect(xPosition, 0, cellWidth, height);\n      });\n    }\n    //console.log(x);\n\n    // Handle when a cell is clicked\n    if (onClick) {\n      canvasElement.onmousedown = () => {\n        // Call the on click function\n        onClick();\n      };\n    }\n\n    // Record all elements which must be removed manually when re-rendering\n    previousCharts.current = [svg, canvas];\n\n    const handleResize = () => {\n      setCurrentWindow({\n        innerWidth: window.innerWidth,\n        innerHeight: window.innerHeight,\n      });\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleaning function\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }); // This useEffect has no dependencies\n\n  // Finally, render the horizontal bar\n  return (\n    // It is important to specify a height value\n    // Otherwise canvas and svg may be not coordinated\n    <div\n      className={className}\n      style={className ? undefined : { height: '100px', width: '600px' }}\n    >\n      <div\n        ref={containerRef}\n        id={'container'}\n        // WARNING: This width 100% may seem redundant, but chrome needs it\n        style={{ position: 'relative', width: '100%', height: '100%' }}\n      />\n    </div>\n  );\n});\n\nexport default BondStatus;\n"],"names":["activeBondColor","brokenBondColor","memo","_ref","status","weights","onClick","className","containerRef","useRef","previousCharts","setCurrentWindow","useState","useEffect","current","forEach","chart","remove","container","clientWidth","width","clientHeight","height","parentElement","canvasElement","document","createElement","select","node","appendChild","canvas","attr","style","undefined","canvasContext","getContext","svg","append","x","scaleBand","range","domain","paddingInner","minX","proportion","reduce","a","b","xOffset","stat","i","cellWidth","xPosition","color","fillStyle","fillRect","map","s","bandwidth","onmousedown","handleResize","innerWidth","window","innerHeight","addEventListener","removeEventListener","_jsx","children","ref","id","position"],"sourceRoot":""}