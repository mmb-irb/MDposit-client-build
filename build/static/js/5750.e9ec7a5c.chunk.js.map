{"version":3,"file":"static/js/5750.e9ec7a5c.chunk.js","mappings":"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","sources":["pages/accession/hbonds/bond-status/index.js"],"sourcesContent":["import React, { useRef, useEffect, useState, memo } from 'react';\n\nimport { select, scaleBand, scaleLinear, color as d3color } from 'd3';\n\n// Set status colors\nconst ACTIVE_BOND_COLOR = 'blue';\nconst BROKEN_BOND_COLOR = '#f0f0f0';\n\n// Set the color scale according to the maximum and minimum means\nconst COLOR_PLAN = [BROKEN_BOND_COLOR, ACTIVE_BOND_COLOR];\nconst COLOR_SCALE = scaleLinear()\n  .range(COLOR_PLAN)\n  .domain([0, 1]);\n\n// Represent a single row of rects according to the status\n// The status is an array of true/false values\nconst BondStatus = memo(({ status, weights, keyLabel, onClick, className }) => {\n  // Set the reference to the element where the heatmap will be allocated\n  const containerRef = useRef(null);\n  // Save the previous chart reference so we can remove it before a new render\n  const previousCharts = useRef(null);\n  // Use a state as a workaround to force rerenders on window resize\n  const [, setCurrentWindow] = useState(null);\n  // The chart is assigned to a referenced 'div' which must be rendered first\n  // All this process is runned after the render\n  useEffect(() => {\n    // Reset the chart\n    // WARNING: For some reason, if this part is re-render the original render is not gone\n    // WARNING: We must reset the element manually or infinite elements are rendered and stacked\n    if (previousCharts.current)\n      previousCharts.current.forEach(chart => chart.remove());\n\n    // Get the current element where all this heatmap is placed\n    const container = containerRef.current;\n    // The first render, when there is no reference to the current element yet, we skip the process\n    const {\n      clientWidth: width,\n      clientHeight: height,\n    } = container.parentElement;\n\n    // Use canvas to display the heatmap blocks since d3 is not as efficient\n    // Canvas is set this way so we can access this specific element later\n    // WARNING: Using the 'document.getElementById' is risky since there may be more\n    // WARNING: e.g. the color legend\n    const canvasElement = document.createElement('CANVAS');\n    select(container)\n      .node()\n      .appendChild(canvasElement);\n    const canvas = select(canvasElement)\n      .attr('id', 'canvas')\n      .attr('width', width)\n      .attr('height', height)\n      .style('position', 'absolute')\n      //.style('top', offset.top + 'px')\n      //.style('left', offset.left + 'px')\n      .style('cursor', onClick ? 'pointer' : undefined);\n    const canvasContext = canvas\n      .node()\n      .getContext('2d');\n\n    // append the svg object to the body of the page\n    const svg = select(container)\n      .append('svg')\n      .attr('id', 'svg')\n      .attr('viewBox', [0, 0, width, height]);\n\n    // Build X scales and axis:\n    if (weights) {\n\n      const x = scaleBand()\n        .range([0, width])\n        .domain([0, 1])\n        .paddingInner(0);\n\n      // Get the x Range in the d3/canvas available space\n      const minX = x(0);\n      const maxX = x(1);\n      const xRange = maxX - minX;\n\n      // Consider all the previous space to be splitted in the different weigths\n      const weigthsSum = weights.reduce((a, b) => a + b, 0);\n      const proportion = xRange / weigthsSum;\n\n      // Now place cells oneafter the other thus keeping the x offset position\n      let xOffset = 0;\n      status.forEach((stat, i) => {\n        const weigth = weights[i];\n        // DANI: El dibujo se quedaba a exactamente la mitad del espacio total, no entiendo por que\n        // DANI: El * 2 en el cellWidth arregla el problema\n        const cellWidth = weigth * proportion * 2;\n        const xPosition = xOffset;\n        const color = stat ? ACTIVE_BOND_COLOR : BROKEN_BOND_COLOR;\n        canvasContext.fillStyle = color;\n        canvasContext.fillRect(xPosition, 0, cellWidth, height);\n        xOffset += cellWidth;\n      });\n    } else {\n      const x = scaleBand()\n        .range([0, width])\n        .domain(status.map((s, i) => i))\n        .paddingInner(0);\n\n      // Get the width of each cell\n      const cellWidth = x.bandwidth();\n\n      // Display heatmap cells using canvas\n      status.forEach((stat, i) => {\n        const xPosition = x(i);\n        // Calculate the interpolated rgb for this value\n        // The interpolated color comes in rbg format\n        const color = d3color(COLOR_SCALE(stat)).formatHex();\n        canvasContext.fillStyle = color;\n        canvasContext.fillRect(xPosition, 0, cellWidth, height);\n      });\n\n      // If there is only one status then add also the number\n      if (status.length === 1) {\n        const value = Math.round(status[0] * 1000) / 10;\n        const label = value + '%';\n        canvasContext.font = \"14px arial\";\n        canvasContext.fillStyle = 'black';\n        canvasContext.textAlign = \"center\";\n        canvasContext.textBaseline = \"middle\";\n        canvasContext.fillText(label, cellWidth / 2, height / 2);\n      }\n    }\n\n    // Handle when a cell is clicked\n    if (onClick) {\n      canvasElement.onmousedown = () => {\n        // Call the on click function\n        onClick(keyLabel);\n      };\n    }\n\n    // Record all elements which must be removed manually when re-rendering\n    previousCharts.current = [svg, canvas];\n\n    const handleResize = () => {\n      setCurrentWindow({\n        innerWidth: window.innerWidth,\n        innerHeight: window.innerHeight,\n      });\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleaning function\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }); // This useEffect has no dependencies\n\n  // Finally, render the horizontal bar\n  return (\n    // It is important to specify a height value\n    // Otherwise canvas and svg may be not coordinated\n    <div\n      className={className}\n      style={className ? undefined : { height: '100px', width: '600px' }}\n    >\n      <div\n        ref={containerRef}\n        id={'container'}\n        // WARNING: This width 100% may seem redundant, but chrome needs it\n        style={{ position: 'relative', width: '100%', height: '100%' }}\n      />\n    </div>\n  );\n});\n\nexport default BondStatus;\n"],"names":["ACTIVE_BOND_COLOR","BROKEN_BOND_COLOR","COLOR_PLAN","COLOR_SCALE","scaleLinear","range","domain","memo","_ref","status","weights","keyLabel","onClick","className","containerRef","useRef","previousCharts","setCurrentWindow","useState","useEffect","current","forEach","chart","remove","container","clientWidth","width","clientHeight","height","parentElement","canvasElement","document","createElement","select","node","appendChild","canvas","attr","style","undefined","canvasContext","getContext","svg","append","x","scaleBand","paddingInner","minX","proportion","reduce","a","b","xOffset","stat","i","cellWidth","xPosition","color","fillStyle","fillRect","map","s","bandwidth","d3color","formatHex","length","label","Math","round","font","textAlign","textBaseline","fillText","onmousedown","handleResize","innerWidth","window","innerHeight","addEventListener","removeEventListener","_jsx","children","ref","id","position"],"sourceRoot":""}