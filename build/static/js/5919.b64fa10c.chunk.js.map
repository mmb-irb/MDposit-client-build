{"version":3,"file":"static/js/5919.b64fa10c.chunk.js","mappings":"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","sources":["pages/accession/rmsd-perres/index.js","webpack://mdposit/./src/pages/accession/rmsd-perres/style.module.css?5d27"],"sourcesContent":["import React, {\n  Suspense,\n  useState,\n  useContext,\n  useMemo,\n  useCallback,\n  useRef,\n} from 'react';\nimport { useInView } from 'react-intersection-observer';\n\nimport { Typography } from '@mui/material';\n\nimport { color as d3color, scaleLinear } from 'd3';\n\nimport Card from '../../../components/animated-card';\nimport ViewerWithControls from '../../../components/viewer-with-controls';\nimport useDefaultRepresentations from '../../../components/ngl-viewer/use-default-representations';\nimport Loading from '../../../components/loading';\n\nimport useAPI from '../../../hooks/use-api';\n\nimport { ProjectCtx } from '../../../contexts';\n\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\n\nimport style from './style.module.css';\n\nimport { ColormakerRegistry } from 'ngl';\n\nimport ResidueSelector from '../../../components/residue-selector';\n\nimport Graph from '../../../components/graph';\n\n// Define permanent options for the \"useInView\"\nconst useInViewOptions = { triggerOnce: true, rootMargin: '100px' };\n\n// Set the color of each residue in the NGL representation\n// WARNING: Grey looks better than white because the background may be white and resdiues are hard to see\nconst nglColorPlan = ['grey', 'yellow', 'red'];\n\n// Round to cents\nconst nice = number => Math.round(number * 100) / 100;\n// Get the average and standard deviation\nconst getStaistics = values => {\n  const n = values.length;\n  const mean = values.reduce((a, b) => a + b) / n;\n  const stdv = Math.sqrt(\n    values.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n,\n  );\n  return [nice(mean), nice(stdv)];\n};\n\nconst RmsdPerres = () => {\n  // Track if the NGL viewer\n  // The status isNglVisible is returned true/false when the element is in/out the screen respectively\n  const [nglRef, isNglVisible] = useInView(useInViewOptions);\n\n  // Get the current project data\n  const {\n    accessionAndMdNumber,\n    metadata,\n    topology: topologyManager,\n    populations,\n  } = useContext(ProjectCtx);\n\n  // Get the default representations\n  const defaultRepresentations = useDefaultRepresentations();\n\n  // Set a ref to the ngl which allows access to its exposed methods\n  const viewerRef = useRef(null);\n  // Set a ref to the graph which allows access to its exposed methods\n  const graphRef = useRef(null);\n\n  // Send a request to the API with the url of the specific analysis\n  const { loading, payload, error } = useAPI(\n    `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/rmsd-perres/`,\n  );\n\n  // Set when one point in the graph is selected\n  const [selectedResidues, setSelectedResidues] = useState([]);\n\n  // Get the residues list in model notation\n  const {\n    components,\n    representations,\n    analysisFrameCount,\n    xAxisStep,\n    xAxisLabel,\n    isEnsemble,\n    xTooltip,\n    data,\n    xWeights,\n  } = useMemo(() => {\n    if (\n      !topologyManager ||\n      !metadata ||\n      !payload ||\n      (populations && populations.loading)\n    )\n      return {};\n\n    // Data is stored as RMSD per residue and per frame respectively\n    const rmsdpr = payload.rmsdpr;\n    // Calculate the mean and standard deviation of each residue rmsds\n    // DANI: Esto he comprovado que cuesta 10 milisegundos aprox en una estructura grande\n    const means = [];\n    const stdvs = [];\n    rmsdpr.forEach(rmsdpf => {\n      if (rmsdpf === null) {\n        means.push(null);\n        stdvs.push(null);\n      } else {\n        const [mean, stdv] = getStaistics(rmsdpf);\n        means.push(mean);\n        stdvs.push(stdv);\n      }\n    });\n\n    // Put all data together to be used further in this component\n    const data = { rmsdpr, means, stdvs };\n\n    // Also get the maximum and minimum means\n    const max = Math.max(...means);\n    const min = Math.min(...means);\n\n    // Set the color scale according to the maximum and minimum means\n    const nglColorScale = scaleLinear()\n      .range(nglColorPlan)\n      .domain([min, (min + max) / 2, max]);\n\n    // Set each residue color in the ngl representation according to the color cale\n    // WARNING: Grey looks better than white because the background is white and the structure is easier to see\n    const colorScheme = ColormakerRegistry.addScheme(function(params) {\n      this.atomColor = atom => {\n        // Find the residue index and then the mean rmsd for this residue\n        const residueIndex = atom.residueIndex;\n        const mean = means[residueIndex];\n        // If there is no data for this residue then paint it white\n        if (mean === null) return 16777215;\n        // Calculate the interpolated rgb for this value\n        // The interpolated color comes in rbg format\n        const hexColor = d3color(nglColorScale(mean)).formatHex();\n        // The color interpolation returns a string like '#000000'\n        // We remove the first character ('#') and parse it to integer from hexadecimal\n        const color = parseInt(hexColor.substring(1), 16);\n        return color;\n      };\n    });\n\n    // Set the viewer configuration: components and representations\n\n    // Get the number of frames in the trajectory\n    const trajectoryFrameCount = metadata.mdFrames;\n\n    // Get the frames step from the analysis itself\n    const frameStep = payload['step'];\n\n    // Load the required frames from the main trajectory\n    const trajectoryUrl = `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/trajectory`;\n    const mainURL = `${trajectoryUrl}?frames=1:${trajectoryFrameCount}:${frameStep}`;\n\n    // Set the components by setting a custom component with an extended trajectory\n    const components = [ { trajectoryURLs: [mainURL] } ];\n\n    // Set the representations by showing all default representations repainted\n    const representations = [];\n    defaultRepresentations.forEach(representation => {\n      const newRepresentation = { ...representation };\n      newRepresentation.color = 'custom';\n      newRepresentation.customScheme = colorScheme;\n      representations.push(newRepresentation);\n    });\n\n    // Get the number of frames in the analysis from the first residue data\n    const firstResidueData = rmsdpr[0];\n    const analysisFrameCount = firstResidueData.length;\n\n    // Get the total time length\n    const timeLength = metadata.timeLength;\n\n    // If this is an ensemble or we are missing the time length then we use frames as the x axis\n    // If this is a trajectory and we have the time length then we use time as the x axis\n    const isEnsemble = metadata.TYPE === 'ensemble';\n    let xAxisStep;\n    let xAxisLabel;\n    let xTooltip;\n    if (isEnsemble || !timeLength) {\n      xAxisStep = frameStep;\n      xAxisLabel = 'Frames';\n      xTooltip = xValue => 'frame ' + xValue;\n    }\n    else {\n      xAxisStep = timeLength / (analysisFrameCount - 1);\n      xAxisLabel = 'Time (ns)';\n      xTooltip = xValue => +xValue.toFixed(2) + ' ns';\n    }\n\n    // Get the weigths for each data value corresponding frame\n    let xWeights;\n    if (populations && populations.payload) {\n      xWeights = [];\n      for (let i = 0; i < populations.payload.length; i += xAxisStep) {\n        xWeights.push(populations.payload[i]);\n      }\n    }\n\n    // Return values to be memoized\n    return {\n      components,\n      representations,\n      analysisFrameCount,\n      xAxisStep,\n      xAxisLabel,\n      isEnsemble,\n      xTooltip,\n      data,\n      xWeights,\n    };\n  }, [\n    payload,\n    topologyManager,\n    metadata,\n    accessionAndMdNumber,\n    defaultRepresentations,\n    populations,\n  ]);\n\n  // Get the residues list in model notation\n  const { selectedData, selectedResidueIndices } = useMemo(() => {\n    // Now get only the selected keys from the payload\n    const selectedData = {};\n    const selectedResidueIndices = [];\n    // Color the first selected residues in the graph\n    selectedResidues.forEach((residue, i) => {\n      const currentResidueData = data.rmsdpr[residue.index];\n      const newData = { data: currentResidueData };\n      newData.color = residue.color;\n      selectedData[i] = newData;\n      selectedResidueIndices.push(residue.index);\n    });\n    return { selectedData, selectedResidueIndices };\n  }, [data, selectedResidues]);\n\n  // When the user clicks on the graph\n  const handleFrameSelection = useCallback(frame => {\n    viewerRef.current.togglePlaying(false);\n    viewerRef.current.currentFrame = frame;\n  }, []);\n\n  // When the ngl is playing\n  const handleFrameProgress = useCallback(\n    progress => {\n      if (!graphRef.current) return;\n      // Process is a float number which ranges from 0 to 1\n      // Guess the frame number which belongs to the process\n      // WARNING: The follwoing multiplication must return always a whole number\n      // WARNING: This 'round' is only for the float problem (e.g. 57 = 56.9999...)\n      const frame = Math.round(progress * (analysisFrameCount - 1));\n      graphRef.current.marks = [\n        {\n          x: frame,\n          attr: { fill: '#c8c8c8' },\n        },\n      ];\n    },\n    [analysisFrameCount],\n  );\n\n  // When a residue is selected\n  const handleSelect = useCallback(\n    (residue, residueIndex, color) => {\n      const selectedResidue = { color, index: residueIndex };\n      setSelectedResidues(previous => [...previous, selectedResidue]);\n    },\n    [setSelectedResidues],\n  );\n  // When a residue is deselected\n  const handleDeselect = useCallback(\n    (residue, residueIndex) => {\n      setSelectedResidues(previous =>\n        previous.filter(residue => residue.index !== residueIndex),\n      );\n    },\n    [setSelectedResidues],\n  );\n  // When the clean all residues button is clicked\n  const handleClean = useCallback(() => {\n    setSelectedResidues([]);\n  }, [setSelectedResidues]);\n\n  // Handle what to write on the tooltip when the user hovers a specific residue letter\n  const handleTooltip = useCallback(\n    (residue, residueIndex) => {\n      const currentResidueMean = data.means[residueIndex];\n      const currentResidueStdv = data.stdvs[residueIndex];\n      const meanRMSD = Math.round(currentResidueMean * 100) / 100;\n      const stdvRMSD = Math.round(currentResidueStdv * 100) / 100;\n      return `Mean RMSD: ${meanRMSD}\\nStandard deviation: ${stdvRMSD}`;\n    },\n    [data],\n  );\n\n  // Render loading or error messages according with the API response\n  if (loading || (populations && populations.loading)) return <Loading />;\n  else if (error) return error.toString();\n  else if (populations && populations.error)\n    return populations.error.toString();\n  else if (!payload) return 'Something bad happened with the analysis data';\n  else if (populations && !populations.payload)\n    return 'Something bad happened with populations';\n\n  if (!topologyManager) return <Loading />;\n\n  // Render\n  return (\n    <Suspense fallback={<Loading />}>\n      <Card>\n        <ResidueSelector\n          residueValues={data.means}\n          legendTitle={'Average RMSD (Å)'}\n          onSelect={handleSelect}\n          onDeselect={handleDeselect}\n          onClean={handleClean}\n          onTooltip={handleTooltip}\n        />\n      </Card>\n      <Card className={style.graphcard}>\n        {selectedResidues.length > 0 ? (\n          <Graph\n            yData={selectedData}\n            step={xAxisStep}\n            xAxisLabel={xAxisLabel}\n            type={isEnsemble ? 'dots' : 'line'}\n            xWeights={xWeights}\n            xTooltip={xTooltip}\n            yAxisLabel={'RMSd (Å)'}\n            onSelect={handleFrameSelection}\n            className={style.graph}\n            ref={graphRef}\n          />\n        ) : (\n          <div className={style['graph-placeholder']}>\n            <Typography variant=\"h6\">No residue selected</Typography>\n          </div>\n        )}\n      </Card>\n      <Card className={style.nglcard} ref={nglRef}>\n        {/* Render the NGL viewer when it is on screen*/}\n        {isNglVisible ? (\n          <ViewerWithControls\n            className={style.container}\n            startingComponents={components}\n            startingRepresentations={representations}\n            selectedResidueIndices={selectedResidueIndices}\n            onProgress={handleFrameProgress}\n            ref={viewerRef}\n            framesSelect={false}\n          />\n        ) : (\n          <div style={{ height: '50vh' }} />\n        )}\n      </Card>\n    </Suspense>\n  );\n};\n\nexport default RmsdPerres;\n","// extracted by mini-css-extract-plugin\nexport default {\"graphcard\":\"style_graphcard__VoJ6R\",\"graph\":\"style_graph__GoAAc\",\"graph-placeholder\":\"style_graph-placeholder__bh3Kw\",\"nglcard\":\"style_nglcard__Zr+kp\",\"container\":\"style_container__lBCpG\"};"],"names":["useInViewOptions","triggerOnce","rootMargin","nglColorPlan","nice","number","Math","round","RmsdPerres","nglRef","isNglVisible","useInView","accessionAndMdNumber","metadata","topology","topologyManager","populations","useContext","ProjectCtx","defaultRepresentations","useDefaultRepresentations","viewerRef","useRef","graphRef","loading","payload","error","useAPI","BASE_PATH_PROJECTS","selectedResidues","setSelectedResidues","useState","components","representations","analysisFrameCount","xAxisStep","xAxisLabel","isEnsemble","xTooltip","data","xWeights","useMemo","rmsdpr","means","stdvs","forEach","rmsdpf","push","mean","stdv","values","n","length","reduce","a","b","sqrt","map","x","pow","getStaistics","max","min","nglColorScale","scaleLinear","range","domain","colorScheme","ColormakerRegistry","addScheme","params","this","atomColor","atom","residueIndex","hexColor","d3color","formatHex","parseInt","substring","trajectoryFrameCount","mdFrames","frameStep","trajectoryURLs","representation","newRepresentation","color","customScheme","timeLength","TYPE","xValue","toFixed","i","selectedData","selectedResidueIndices","residue","newData","index","handleFrameSelection","useCallback","frame","current","togglePlaying","currentFrame","handleFrameProgress","progress","marks","attr","fill","handleSelect","selectedResidue","previous","handleDeselect","filter","handleClean","handleTooltip","currentResidueMean","currentResidueStdv","_jsx","Loading","toString","_jsxs","Suspense","fallback","children","Card","ResidueSelector","residueValues","legendTitle","onSelect","onDeselect","onClean","onTooltip","className","style","graphcard","Graph","yData","step","type","yAxisLabel","graph","ref","Typography","variant","nglcard","ViewerWithControls","container","startingComponents","startingRepresentations","onProgress","framesSelect","height"],"sourceRoot":""}