{"version":3,"file":"static/js/5952.462f8e9d.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/pages/accession/apl/style.module.css?7a23","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js","pages/accession/apl/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__3C1Q4\",\"plot\":\"style_plot__EHJho\",\"legend\":\"style_legend__AYaN4\",\"slider\":\"style_slider__hr58H\"};","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n  const {\n      className,\n      raised = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    raised\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;","import React, { useContext, useState, useMemo } from 'react';\nimport { CardContent, Slider } from '@mui/material';\nimport useAPI from '../../../hooks/use-api';\nimport Card from '../../../components/animated-card';\nimport Loading from '../../../components/loading';\nimport { ProjectCtx } from '../../../contexts';\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\nimport Heatmap from '../../../components/heatmap';\nimport ColorLegend from '../../../components/color-legend';\nimport style from './style.module.css';\n\n\nconst AreaPerLipid = () => {\n  const { accessionAndMdNumber } = useContext(ProjectCtx);\n  const [stdDevs, setStdDevs] = useState(1.0);\n  const url = `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/apl/`;\n  const { loading, payload, error } = useAPI(url);\n\n  // Process the data for both heatmaps\n  const heatmapData = useMemo(() => {\n    if (loading || error || !payload) return null;\n\n    const processLeaflet = (leaflet) => {\n      const grid = payload.data[leaflet];\n      for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n          if (grid[i][j] < 0) {\n            grid[i][j] = NaN;\n          }\n        }\n      }\n      const xLabels = payload.data.grid_x.map(x => Math.round(x * 10) / 10);\n      const yLabels = payload.data.grid_y.map(y => Math.round(y * 10) / 10);\n      yLabels.reverse();\n      grid.reverse();\n      return { data: grid, xLabels, yLabels };\n    };\n    return {\n      upper: processLeaflet('upper leaflet'),\n      lower: processLeaflet('lower leaflet'),\n      median: payload.data.median,\n      std: payload.data.std,\n    };\n  }, [loading, error, payload]);\n\n\n  const { minValue, maxValue } = useMemo(() => {\n    if (!heatmapData || !heatmapData.median) return { minValue: 0, maxValue: 0 };\n    return {\n      minValue: Math.round((heatmapData.median - (stdDevs * heatmapData.std))*100)/100,\n      maxValue: Math.round((heatmapData.median + (stdDevs * heatmapData.std))*100)/100,\n    };\n  }, [heatmapData, stdDevs]);\n\n  const handleStdChange = (event, newValue) => {\n    setStdDevs(newValue);\n  };\n\n  const handleHeatmapTooltip = ({ value, xAxisValue, yAxisValue }) =>\n    `Position (${xAxisValue}, ${yAxisValue})\\nArea per lipid: ${Math.round(value * 100) / 100} Å²`;\n\n  if (loading) return <Loading />;\n  if (error) return error.toString();\n  if (!payload) return 'Something bad happened';\n\n  return (\n    <div>\n      <Card className={style.container}>\n        <div className={style.plot}>\n          <CardContent>\n            <h3 style={{'padding-left': '30px'}}>Upper Leaflet</h3>\n            <Heatmap\n              inputData={heatmapData.upper}\n              onTooltip={handleHeatmapTooltip}\n              legendTitle=\"\"\n              xTitle=\"X coordinate (Å)\"\n              yTitle=\"Y coordinate (Å)\"\n              minValue={minValue}\n              maxValue={maxValue}\n            />\n          </CardContent>\n        </div>\n        <div  className={style.plot}>\n          <CardContent>\n            <h3 style={{'padding-left': '30px'}}>Lower Leaflet</h3>\n            <Heatmap\n              inputData={heatmapData.lower}\n              onTooltip={handleHeatmapTooltip}\n              legendTitle = \"\"\n              xTitle=\"X coordinate (Å)\"\n              yTitle=\"Y coordinate (Å)\"\n              minValue={minValue}\n              maxValue={maxValue}\n            />\n          </CardContent>\n        </div>\n        <div className={style.legend}>\n          <CardContent style={{'padding-top': '0px'}}>\n            <ColorLegend\n              title=\"Area per lipid (Å²)\"\n              minValue={minValue}\n              maxValue={maxValue}\n              colorPlan={['red', 'white', 'blue']}\n              className={style.legend}\n            />\n            <div className={style.slider}>  \n              <Slider\n                \n                size=\"small\"\n                value={stdDevs}\n                onChange={handleStdChange}\n                aria-label=\"Standard deviations\"\n                valueLabelDisplay=\"auto\"\n                min={0.1}\n                max={3}\n                step={0.1}\n                marks={[\n                  { value: 0.1, label: '0.1σ' },\n                  { value: 0.5, label: '0.5σ' },\n                  { value: 1, label: '1σ' },\n                  { value: 2, label: '2σ' },\n                  { value: 3, label: '3σ' },\n                ]}\n              />\n            </div>\n          </CardContent>\n      </div>\n      </Card>\n      \n      \n    </div>\n  );\n};\n\nexport default AreaPerLipid;"],"names":["getCardUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardRoot","styled","Paper","name","overridesResolver","props","styles","root","overflow","React","inProps","ref","useDefaultProps","className","raised","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","_jsx","clsx","elevation","undefined","AreaPerLipid","accessionAndMdNumber","useContext","ProjectCtx","stdDevs","setStdDevs","useState","url","BASE_PATH_PROJECTS","loading","payload","error","useAPI","heatmapData","useMemo","processLeaflet","leaflet","grid","data","i","length","j","NaN","xLabels","grid_x","map","x","Math","round","yLabels","grid_y","y","reverse","upper","lower","median","std","minValue","maxValue","handleHeatmapTooltip","_ref","value","xAxisValue","yAxisValue","Loading","toString","children","_jsxs","Card","style","container","plot","CardContent","Heatmap","inputData","onTooltip","legendTitle","xTitle","yTitle","legend","ColorLegend","title","colorPlan","slider","Slider","size","onChange","handleStdChange","event","newValue","valueLabelDisplay","min","max","step","marks","label"],"sourceRoot":""}