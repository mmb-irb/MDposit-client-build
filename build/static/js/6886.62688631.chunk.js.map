{"version":3,"file":"static/js/6886.62688631.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/loading/style.module.css?350d","components/loading/index.js","hooks/use-toggle-state/index.js","utils/project-manager/index.js","utils/topology-manager/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loading\":\"style_loading__Vdgbc\",\"show\":\"style_show__wIdQ5\"};","import React, { useLayoutEffect } from 'react';\nimport cn from 'classnames';\n//import { sleep, frame } from 'timing-functions';\n\nimport { CircularProgress } from '@mui/material';\n\nimport useToggleState from '../../hooks/use-toggle-state';\n\nimport style from './style.module.css';\n\nconst WAIT_DELAY = 750; // 750ms\n\n// This component is used to hide the loading indicator for a bit (just in case\n// the next content is quick enough, because we don't want a flash with the\n// indicator), then slowly display it.\n// In the best of cases this component will *never* even have to be displayed\nconst Loading = ({ wait = WAIT_DELAY }) => {\n  const [flag, toggleFlag] = useToggleState(false);\n  // This is a hook\n  useLayoutEffect(() => {\n    const timer = setTimeout(() => {\n      toggleFlag();\n    }, wait);\n    return () => clearTimeout(timer);\n\n    /*\n    let mounted = true;\n    sleep(wait) // wait for a bit\n      // this might be useful if the page is not even visible\n      .then(() => frame()) // Wait for the next animation frame\n      // After waiting, check if mounted is still true\n      .then(() => {\n        // If mounted is false it means that the loading was over before the wait ended\n        if (mounted) toggleFlag(); // This toggleFlag changes the flag from false to true\n      });\n    // In a useEffect or similar hooks, \"return\" stands for an ending function\n    // The ending function is called when the components is no longer rendered\n    return () => (mounted = false); // When useLayoutEffect is over or cancelled, set mounted to false\n    */\n  }, [toggleFlag, wait]); // useLayoutEffect is only called when the toggleFlag is called (only once)\n  // Return an animated circle\n  return (\n    <div\n      title=\"loading...\" // This tag appears when the mouse remains over the circle\n      className={cn(style.loading, { [style.show]: flag })}\n    >\n      {flag && (\n        <CircularProgress\n          variant=\"indeterminate\"\n          color=\"primary\"\n          size={50}\n          thickness={5}\n        /> // Renders the circle\n      )}\n    </div>\n  );\n};\n\nexport default Loading;\n","import { useState, useCallback } from 'react';\n\n// useToggleState is a custom hook which returns a state and a custom function to calculate the new state\nconst useToggleState = initialState => {\n  // useState is a React hook which returns a state and a function to change this state respectively\n  // The state is the initialState at the moment it is called\n  const [state, setState] = useState(!!initialState);\n  // useCallback is a React hook which returns a memoize callback\n  const toggleState = useCallback(valueOrSetter => {\n    // Set the state according to the input type\n    switch (typeof valueOrSetter) {\n      // Funtions are accepted and set as state\n      case 'function':\n        setState(valueOrSetter);\n        break;\n      // In case of booleans, numers and strings, a function that returns the opposite in boolean format is returned\n      case 'boolean':\n      case 'number':\n      case 'string':\n        setState(Boolean(valueOrSetter));\n        break;\n      // In other cases, returns a function which just change the state to the opposite of the previours state in boolean format\n      default:\n        setState(state => !state);\n    }\n  }, []);\n\n  return [state, toggleState];\n};\n\nexport default useToggleState;\n","// Get the use memo hook\nimport React, { useMemo } from 'react';\n// Function to request data through the API\nimport useAPI from '../../hooks/use-api';\n// Constants\nimport {\n    BASE_PATH_PROJECTS,\n    HOST_CONFIG,\n    REFERENCES_WITH_ENTROPIES,\n    REFERENCES_WITH_EPITOPES\n} from '../constants';\n// Load the topology manager class\nimport { Topology } from '../../utils/topology-manager';\n\n// Set the project class\nexport class Project {\n    constructor(projectPayload) {\n        // Replicate all payload values in the project object\n        // This includes values such as metadata, files index, accession, etc.\n        Object.entries(projectPayload).forEach(([key, value]) => {\n            this[key] = value;\n        });\n        // Calculate any additional metadata\n        if (!this.metadata.mdFrames) this.metadata.mdFrames = this.metadata.SNAPSHOTS;\n        this.metadata.timeLength = (this.metadata.FRAMESTEP && this.metadata.mdFrames &&\n            this.metadata.FRAMESTEP * this.metadata.mdFrames) || null;\n        // Set the count of MDs by excluding those MDs flagged as 'removed'\n        this.mdCount = this.mds ? this.mds.filter(md => md.slice(-9) !== '(removed)').length : 0;\n        // Calculate a few internal things\n        // Get the accession and the MD number in a single string which is useful to make API requests\n        // If project is in the old format then do not add the point and the MD number\n        const accessionOrId = this.accession || this.identifier;\n        this.accessionAndMdNumber = this.mds ? `${accessionOrId}.${this.mdNumber}` : accessionOrId;\n        // Check if there are interactions\n        this.hasInteractions = this.analyses.includes('interactions');\n        // Check if the populations file is found in the files index\n        this.isPopulated = Boolean(\n            this.files && this.files.find(filename => filename === 'populations.json'),\n        );\n        // Set the available directions in the client according to project data and host configuration\n        // Start with the directions which are to be always available\n        this.directions = {\n            overview: true,\n            trajectory: true,\n            files: true\n        }\n        // Set available analyses\n        // Start with the generic analyses\n        // These analyses are always visible but not clickable when data is missing\n        const genericAnalyses = [ 'rmsds', 'rgyr', 'fluctuation', 'pca', 'rmsd-perres',\n            'rmsd-pairwise', 'dist-perres', 'hbonds', 'energies', 'pockets', 'sasa' ];\n        for (const analysis of genericAnalyses) {\n            this.directions[analysis] = this.analyses.includes(analysis);\n        }\n        // Add the electrostatic direction whenever there are interactions\n        this.directions['electrostatic'] = this.analyses.includes('interactions');\n        // Now set some specialized analyses\n        // These analyses are hidden when the project is out of context\n        // Their availability may be also more complicated than the generic ones\n        // Set covid-19 specific analyses\n        if (HOST_CONFIG.options.includes('covid')) {\n            const anyReferenceWithEntropies = this.metadata && this.metadata.REFERENCES &&\n                this.metadata.REFERENCES.find(ref => REFERENCES_WITH_ENTROPIES.includes(ref));\n            this.directions['mutations'] = Boolean(anyReferenceWithEntropies);\n            const anyReferenceWithEpitopes = this.metadata && this.metadata.REFERENCES &&\n                this.metadata.REFERENCES.find(ref => REFERENCES_WITH_EPITOPES.includes(ref));\n            this.directions['epitopes'] = Boolean(anyReferenceWithEpitopes);\n        }\n        // Set MSM specific analyses\n        if (this.metadata && this.metadata.METHOD === 'Markov state model (MSM)') {\n            this.directions['populations'] = this.files && this.files.find(file => file === 'populations.json');\n            this.directions['markov'] = this.analyses.includes('markov');\n        }\n        // Set an internal object to save data requested through the API\n        this._apiResponses = {\n            topology: null,\n            interactions: null,\n            references: null,\n            fileDescriptors: null,\n            populations: null\n        };\n        // Save the topology manager apart so we do not have to re-instantiate the class every time\n        this._topologyManager = null;\n        // Set the project base URL to request the API\n        this._apiBaseUrl = `${BASE_PATH_PROJECTS}/${this.accessionAndMdNumber}`;\n    }\n    // Declare the different field endpoints to request the API\n    _apiEndpoints = {\n        topology: `/topology`,\n        interactions: `/analyses/interactions`,\n        references: `/references`,\n        fileDescriptors: `/filenotes`,\n        populations: `/files/populations.json`,\n    }\n    // Set a function to query the API and store the response for internal variables\n    _apiQuery = (fieldname, available = true) => {\n        // Set the request URL\n        let url = this._apiBaseUrl + this._apiEndpoints[fieldname];\n        // Request the value if it is available only\n        if (!available) url = null;\n        // If data for the requested fieldname is already saved then set the url as null\n        // This makes the useAPI hook not to repeat the query\n        if (this._apiResponses[fieldname] && this._apiResponses[fieldname].payload) url = null;\n        // Do the API query but save the result only if the url is not null\n        // Note that if url is null from the first render (i.e. there is not value at all) then its value will be null\n        const query = useAPI(url);\n        if (url !== null) this._apiResponses[fieldname] = query;\n        // If we are still loading then\n        return this._apiResponses[fieldname];\n    };\n\n    // Interactions getter\n    get interactions () {\n        const response = this._apiQuery('interactions', this.hasInteractions);\n        if (!response) return null;\n        if (response.loading) return null;\n        if (response.error) throw new Error('Error when downloading project interactions: ' + response.error.message);\n        if (!response.payload) throw new Error('Something went wrong with project interactions');\n        return response.payload;\n    }\n\n    // References getter\n    get references () {\n        const response = this._apiQuery('references');\n        if (response.loading) return null;\n        if (response.error) throw new Error('Error when downloading project references: ' + response.error.message);\n        if (!response.payload) throw new Error('Something went wrong with project references');\n        return response.payload;\n    }\n    // Specific references getters\n    get proteinReferences () {\n        const references = this.references;\n        return useMemo(() => references && references.filter(ref => ref.uniprot), [references]);\n    }\n    get ligandReferences () {\n        const references = this.references;\n        return useMemo(() => references && references.filter(ref => ref.pubchem), [references]);\n    }\n\n    // Topology getter\n    get topology () {\n        // Get references to further load them to the topology manager\n        // Note that this must be done here to respect hooks\n        const references = this.references;\n        // Request topology data\n        const response = this._apiQuery('topology');\n        if (response.loading) return null;\n        if (response.error) throw new Error('Error when downloading project topology: ' + response.error.message);\n        if (!response.payload) throw new Error('Something went wrong with project topology');\n        if (this._topologyManager) return this._topologyManager;\n        this._topologyManager = new Topology(response.payload, this.metadata, references);\n        return this._topologyManager;\n    }\n\n    // File descriptors getter\n    get fileDescriptors () {\n        return this._apiQuery('fileDescriptors');\n    }\n    // Populations getter (populated ensembles only)\n    // Populations are requested only when this variable is read for the first time\n    // Then populations are stored so there is no need to repeat the query again\n    get populations () {\n        return this._apiQuery('populations', this.isPopulated);\n    }\n}\n  ","import { range } from 'lodash-es';\nconst ngl = require('ngl');\n\n// Topology manager\n// Many functions to handle atom/residue/chain numeration conversions and more\n// All these functions which need the topology are able to read the context topology\n// However, it may be better to pass them the topology as an argument since the context may be null\n\n// There are 4 different residue numeration types in the client:\n// - Residue indices: From 0 to 'n'\n//   Used in some internal managments\n// - Residue numbers: Source numbers in the original topology file\n//   Residue numbers may be repeated, have gaps or do not start at 0 or 1. May include icodes.\n// - Residue reference numbers (protein residues only): The number according to uniprot reference sequence\n//   Reference numbers are displayed in the viewer or analysis results when available\n\n// This function transforms a range selection string into a numeric array\n// It handles abbreviated selection syntax to literal selection syntax\n// e.g. \"1, 3, 5-8\" => [1, 3, 5, 6, 7, 8]\nconst rangedSyntax = /^([0-9]*)-([0-9]*)$/;\nexport const rangedSelectionParser = selection => {\n  // Filter data\n  const units = selection.split(', ');\n  const parsedSelection = [];\n  for (const u of units) {\n    // If the ranged syntax is found, get all numbers in between\n    if (u.match(rangedSyntax)) {\n      const matches = rangedSyntax.exec(u);\n      const rangedUnits = range(+matches[1], +matches[2] + 1);\n      parsedSelection.push(...rangedUnits);\n    } else parsedSelection.push(+u);\n  }\n  return parsedSelection;\n};\n\n// Do the opposite that the previous function\n// e.g. [1, 3, 5, 6, 7, 8] => \"1, 3, 5-8\"\n// In addition track the minimum serie length\n// Return 'small' = true when there are series of 3 residues or less\n// These small residue selections will be not represented in cartoon due to an NGL bug\n// https://github.com/nglviewer/ngl/issues/223\nexport const parsedSelectionRanger = (selection, addWhiteSpaces = true) => {\n  const separator = addWhiteSpaces ? ', ' : ',';\n  let rangedSelection = '';\n  let minimumSerieLength = Number.POSITIVE_INFINITY;\n  selection.sort((a, b) => a - b); // Sort numbers numerically\n  const selectionLength = selection.length;\n  // When the selection is a single value\n  if (selectionLength === 1) {\n    return { rangedSelection: selection[0].toString(), small: true };\n  }\n  for (let i = 0; i < selectionLength; i++) {\n    const num = selection[i];\n    rangedSelection += separator + num;\n    for (let j = i + 1; j < selectionLength; j++) {\n      const nextNum = selection[j];\n      let length = j - i; // The serie length\n      if (nextNum - num !== length) {\n        // End of the serie\n        // The length here is the length which broke the serie\n        // i.e. if the length here is 2 the actual serie length is 1\n        length -= 1;\n        minimumSerieLength = Math.min(length, minimumSerieLength);\n        // If the length of the serie is <= 1 then no worth making a range here\n        if (length > 1) {\n          const prevNum = selection[j - 1];\n          rangedSelection += '-' + prevNum;\n          i = j - 1;\n        }\n        break;\n      }\n      if (j === selectionLength - 1) {\n        // End of the selection\n        minimumSerieLength = Math.min(length, minimumSerieLength);\n        if (length > 1) {\n          rangedSelection += '-' + nextNum;\n          i = j;\n        }\n      }\n    }\n  }\n  const small = minimumSerieLength <= 3;\n  rangedSelection = rangedSelection.substring(separator.length); // Remove the first separator\n  return { rangedSelection, small };\n};\n\n// Harvest from a '[residue_type]residue:chain' string the chain letter and the residue number values\nconst nglFormat = /^\\[[0-9a-zA-Z_]*\\]([0-9]*)([A-Z]?):([A-Z])$/;\nexport const nglNumerationParser = numeration => {\n  const result = nglFormat.exec(numeration);\n  if (!result)\n    throw new Error('No matched NGL numeration value: ' + numeration);\n  const chain = result[3];\n  const residue = result[1];\n  const icode = result[2] || ''; // DANI: El icode es de mi huerto. Falta chequear\n  // Formated selection to select this specific residue in NGL\n  const nglSelection = ':' + chain + ' and ' + residue;\n  // Complex numeration\n  const complex = chain + ':' + residue + icode;\n  return { chain, residue: +residue, icode, nglSelection, complex };\n};\n\n// Define the residue type letters\nconst residueLetters = {\n  ALA: 'A',\n  ALAN: 'A',\n  ALAC: 'A',\n  ARG: 'R',\n  ARGN: 'R',\n  ARGC: 'R',\n  ASN: 'N',\n  ASNN: 'N',\n  ASNC: 'N',\n  ASP: 'D',\n  ASPN: 'D',\n  ASPC: 'D',\n  CYS: 'C',\n  CYSN: 'C',\n  CYSC: 'C',\n  CYH: 'C',\n  CSH: 'C',\n  CSS: 'C',\n  CYX: 'C',\n  CYP: 'C',\n  GLN: 'Q',\n  GLNN: 'Q',\n  GLNC: 'Q',\n  GLU: 'E',\n  GLUN: 'E',\n  GLUC: 'E',\n  GLY: 'G',\n  GLYN: 'G',\n  GLYC: 'G',\n  HIS: 'H',\n  HISN: 'H',\n  HISC: 'H',\n  HID: 'H',\n  HIE: 'H',\n  HIP: 'H',\n  HSD: 'H',\n  HSE: 'H',\n  ILE: 'I',\n  ILEN: 'I',\n  ILEC: 'I',\n  ILU: 'I',\n  LEU: 'L',\n  LEUN: 'L',\n  LEUC: 'L',\n  LYS: 'K',\n  LYSN: 'K',\n  LYSC: 'K',\n  MET: 'M',\n  METN: 'M',\n  METC: 'M',\n  PHE: 'F',\n  PHEN: 'F',\n  PHEC: 'F',\n  PRO: 'P',\n  PRON: 'P',\n  PROC: 'P',\n  PRØ: 'P',\n  PR0: 'P',\n  PRZ: 'P',\n  SER: 'S',\n  SERN: 'S',\n  SERC: 'S',\n  THR: 'T',\n  THRN: 'T',\n  THRC: 'R',\n  TRP: 'W',\n  TRPN: 'W',\n  TRPC: 'W',\n  TRY: 'W',\n  TYR: 'Y',\n  TYRN: 'Y',\n  TYRC: 'Y',\n  VAL: 'V',\n  VALN: 'V',\n  VALC: 'V',\n  // Nucleotides\n  A: 'A',\n  A3: 'A',\n  A5: 'A',\n  C: 'C',\n  C3: 'C',\n  C5: 'C',\n  T: 'T',\n  T3: 'T',\n  T5: 'T',\n  G: 'G',\n  G3: 'G',\n  G5: 'G',\n  U: 'U',\n  U3: 'U',\n  U5: 'U',\n  DA: 'A',\n  DT: 'T',\n  DC: 'C',\n  DG: 'G',\n};\n\nexport const getResidueTypeLetter = residueType => {\n  if (!residueType) return;\n  const letter = residueLetters[residueType];\n  if (letter) return letter;\n  return 'X';\n};\n\n// Check if an NGL residues is cartoon supported or not\n// e.g. check if it is recognized by NGL as a protein, RNA or DNA residue\nexport const isCartoonSupported = nglResidue => {\n  return nglResidue.isProtein() || nglResidue.isRna() || nglResidue.isDna();\n};\n\n// Convert a ngl selection string into an array of residue indices\n// If the 'onlyCartoonSupported' parameter is passed then it will return only cartoon supported residues\nexport const nglSelection2residueIndices = (\n  nglSelection,\n  onlyCartoonSupported = false,\n  viewerTopology,\n) => {\n  const residueIndices = [];\n  // Save the selection in ngl format (structureComponent)\n  const selection = new ngl.Selection(nglSelection);\n  // Save the data from structure which corresponds to the selection atoms\n  const view = viewerTopology.getView(selection);\n  if (onlyCartoonSupported) {\n    view.eachResidue(residue => {\n      if (isCartoonSupported(residue)) residueIndices.push(residue.index);\n    });\n  } else {\n    view.eachResidue(residue => {\n      residueIndices.push(residue.index);\n    });\n  }\n  return residueIndices;\n};\n\n// Check if a NGL selection contains any atom\nexport const nglSelectionExists = (\n  nglSelection,\n  viewerTopology,\n) => {\n  // Save the selection in ngl format (structureComponent)\n  const selection = new ngl.Selection(nglSelection);\n  // Save the data from structure which corresponds to the selection atoms\n  const view = viewerTopology.getView(selection);\n  if (view.atomCount === 0) return false;\n  return true;\n};\n\n// Set the element colors for displaying\nconst elementColors = {\n  H: 'white',\n  C: 'grey',\n  N: 'blue',\n  O: 'red',\n  S: 'yellow',\n  P: 'orange',\n};\n\n// Set a residue handler\nclass Residue {\n  // Constructor expects the residue index\n  constructor(topology, residueIndex) {\n    this.topology = topology;\n    this.index = residueIndex;\n  }\n  // Original residue number (source numeration)\n  get number () {\n    return this.topology.residueNumbers[this.index];\n  }\n  // Chain index\n  get chainIndex () {\n    return this.topology.residueChainIndices[this.index];\n  }\n  // Chain name\n  get chainName () {\n    return this.topology.chainNames[this.chainIndex];\n  }\n  // Chain handler\n  get chain () {\n    return this.topology.getChainByIndex(this.chainIndex);\n  }\n  // Insertion code\n  get icode () {\n    if (!this.topology.residueIcodes) return null;\n    return this.topology.residueIcodes[this.index];\n  }\n  // NGL selection of this specific residue\n  get nglSelection () {\n    let selection = `:${this.chainName} and ${this.number}`\n    if (this.icode) selection += ` ^${this.icode}`\n    return selection;\n  }\n  // Residue name\n  get type () {\n    return this.topology.residueNames[this.index];\n  }\n  get name () {\n    return this.type;\n  }\n  // Residue standard letter (e.g. ARG -> R)\n  get letter () {\n    return getResidueTypeLetter(this.type);\n  }\n  // Reference index in the topology\n  get referenceIndex () {\n    if (!this.topology.residueReferenceIndices) return null;\n    return this.topology.residueReferenceIndices[this.index];\n  }\n  // Reference id\n  get referenceId () {\n    const referenceIndex = this.referenceIndex;\n    if (referenceIndex === null) return null;\n    return this.topology.references[referenceIndex];\n  }\n  // Reference type\n  get referenceType () {\n    const referenceIndex = this.referenceIndex;\n    if (referenceIndex === null) return null;\n    return this.topology.referenceTypes[referenceIndex];\n  }\n  // Reference residue number (reference numeration)\n  get referenceNumber () {\n    if (!this.topology.residueReferenceNumbers) return null;\n    return this.topology.residueReferenceNumbers[this.index];\n  }\n  // Check if this residue is a protein according to its reference type\n  get isProtein () {\n    return this.referenceType === 'protein';\n  }\n  // Check if this residue is a ligand according to its reference type\n  get isLigand () {\n    return this.referenceType === 'ligand';\n  }\n  // Reference data\n  get referenceData () {\n    // If this residue has reference id then it belongs to no reference at all\n    if (this.referenceId === null) return null;\n    // Otherwise get the corresponding reference data\n    if (this.isProtein) {\n      const reference = this.topology.proteinReferences.find(ref => ref.uniprot === this.referenceId);\n      if (!reference) throw new Error(`Reference id ${this.referenceId} is not found among protein references`);\n      return reference;\n    }\n    if (this.isLigand) {\n      const reference = this.topology.ligandReferences.find(ref => ref.pubchem === this.referenceId);\n      if (!reference) throw new Error(`Reference id ${this.referenceId} is not found among ligand references`);\n      return reference;\n    }\n    throw new Error(`Not supported reference type ${this.referenceType}`);\n  }\n  // Reference name\n  get referenceName () {\n    // If this is a ligand we may have a forced name in metadata\n    const forcedLigandName = this.topology.metadataLigandNames && this.topology.metadataLigandNames[this.referenceId];\n    if (forcedLigandName) return forcedLigandName;\n    // Get reference data\n    const referenceData = this.referenceData;\n    if (!referenceData) return null;\n    // Now return its name\n    return referenceData.name;\n  }\n  // Check if the resiude is in periodic boundary conditions\n  get isPbc () {\n    return this.topology.pbcResidues.has(this.index);\n  }\n  // Standard label for display\n  get standardLabel () {\n    // Add the chain to the label only if there is more than ona chain\n    let labelChain = '';\n    if (this.topology.chainNames.length > 1 ) labelChain = `${this.chainName}:`;\n    // Use the reference numeration if possible\n    // Use the source numeration otherwise\n    const referenceNumber = this.referenceNumber;\n    let labelNumber;\n    if (referenceNumber !== null) labelNumber = `${referenceNumber}`;\n    else labelNumber = `${this.number}*`;\n    // Get the insertion code\n    let labelIcode = this.icode;\n    if (!labelIcode) labelIcode = '';\n    // Get the residue name\n    const labelType = `(${this.type})`;\n    // Finally return the label\n    return labelChain + labelNumber + labelIcode + labelType;\n  }\n  // Atom indices for atoms which belong to this residue\n  get atomIndices () {\n    return this.topology.residueAtomIndices[this.index];\n  }\n  // Number of atoms which belong to this residue\n  get atomCount () {\n    return this.atomIndices.length;\n  }\n  // Check if the residue has an alpha carbon\n  get hasCAlpha () {\n    for (const atomIndex of this.atomIndices) {\n      const atomName = this.topology.getAtomName(atomIndex);\n      if (atomName === 'CA') return true;\n    }\n    return false;\n  }\n\n};\n\n// Set a chain handler\nclass Chain {\n  // Constructor expects the chain index\n  constructor(topology, chainIndex) {\n    this.topology = topology;\n    this.index = chainIndex;\n  }\n  // Get the chain name\n  get name () {\n    return this.topology.chainNames[this.index];\n  }\n  get letter () {\n    return this.name;\n  }\n  // Get the metadata chain name\n  get metadataChainName () {\n    const metadataChainNames = this.topology.metadataChainNames;\n    if (!metadataChainNames) return '';\n    // OBSOLETE: Chains were stored as an array of names long time ago\n    if (Array.isArray(metadataChainNames)) return metadataChainNames[this.index] || '';\n    // Chains are stored as and object (e.g. { 'A': 'ACE2', 'B': 'RBD' })\n    else return metadataChainNames[this.name] || '';\n  }\n  // Get residue indcies\n  get residueIndices () {\n    return this.topology.chainResidueIndices[this.index];\n  }\n  // Get residue numbers\n  get residueNumbers () {\n    return this.topology.chainResidueNumbers[this.index];\n  }\n  // Get residue handlers\n  get residues () {\n    return this.residueIndices.map(residueIndex => new Residue(residueIndex));\n  }\n\n}\n\nexport class Topology {\n  constructor(topology, metadata, references) {\n    // Save the topology data as it comes\n    this.atomNames = topology.atom_names;\n    this.atomElements = topology.atom_elements;\n    this.atomCharges = topology.atom_charges;\n    this.atomResidueIndices = topology.atom_residue_indices;\n    this.residueNames = topology.residue_names;\n    this.residueNumbers = topology.residue_numbers;\n    // Residue icodes have a different structure, since usually there are only a few icodes and not 1 per residue\n    // It is an object where keys are residue indices\n    // It is null when there are not icodes at all in the topology\n    // In order to convert it to the other values format we transform the object into an array\n    // Non assigned indices will become empty strings\n    const icodes = topology.residue_icodes;\n    // In case we have no icodes at all we set the icodes list as an empty string\n    // This is usefull for icode getters that do 'icodes && ...'\n    if (!icodes) this.residueIcodes = '';\n    else {\n      this.residueIcodes = Array(this.residueNames.length).fill('');\n      Object.entries(icodes).forEach(([residueIndex, icode]) => {\n        this.residueIcodes[+residueIndex] = icode;\n      });\n    }\n    this.residueChainIndices = topology.residue_chain_indices;\n    this.chainNames = topology.chain_names;\n    this.references = topology.references;\n    this.referenceTypes = topology.reference_types;\n    // DANI: Esta linea es para mantener las topologías viejas que solo tienen referencias de proteínas\n    if (!this.referenceTypes && this.references) this.referenceTypes = this.references.map(r => 'protein');\n    this.residueReferenceIndices = topology.residue_reference_indices;\n    this.residueReferenceNumbers = topology.residue_reference_numbers;\n    // Save the PBC (Priodic Boundary Conditions) residues\n    this.pbcResidues = topology.pbc_residues && new Set(topology.pbc_residues);\n    // Data is stored in a down-top structure according to atom-residue-chain indices\n    // i.e. atoms know which residue they belong to and residues know which chain they belong to\n    // Now set the top-down structure values\n    // i.e. set which atoms are contained on every residue and which residues are contained on every chain\n    // WARNING: Note that arrays of empty arrays can not be filled as when filled with nulls or empty strings\n    // WARNING: We must fill them with this complicated method or all empty arrays would be the same array\n    this.residueAtomIndices = Array.from(Array(this.residueNames.length), () => []);\n    for (const [atomIndex, residueIndex] of this.atomResidueIndices.entries()) {\n      this.residueAtomIndices[residueIndex].push(atomIndex);\n    }\n    this.chainResidueIndices = Array.from(Array(this.chainNames.length), () => []);\n    for (const [ residueIndex, chainIndex ] of this.residueChainIndices.entries()) {\n      this.chainResidueIndices[chainIndex].push(residueIndex);\n    }\n    this.chainResidueNumbers = this.chainResidueIndices.map(\n      residueIndices => residueIndices.map(residueIndex => this.residueNumbers[residueIndex])\n    );\n    // Save metadata chain names\n    // They are not letters ('A', 'B', etc.) but actual names ('Spike', 'Glycans', etc.)\n    this.metadataChainNames = metadata.CHAINNAMES;\n    // Save metadata forced ligand names\n    this.metadataLigandNames = metadata.LIGANDNAMES;\n    // Save the references so we can further return reference data from here\n    this.proteinReferences = references && references.filter(ref => ref.uniprot);\n    this.ligandReferences = references && references.filter(ref => ref.pubchem);\n  }\n\n  // --------------------------------------------------------------------\n  // BASICS\n  // --------------------------------------------------------------------\n\n  get residueCount () {\n    return this.residueNumbers.length;\n  }\n\n  // Get atom data from atom index\n  getAtomName = atomIndex => {\n    return this.atomNames[atomIndex];\n  };\n\n  // Given an atom, return its residue index\n  getAtomResidueIndex = atomIndex => {\n    return this.atomResidueIndices[atomIndex];\n  };\n\n  // --------------------------------------------------------------------\n  // Residue getters\n  // --------------------------------------------------------------------\n\n  // Given a residue index, return its handler\n  getResidueByIndex = residueIndex => {\n    const count = this.residueNumbers.length;\n    if (residueIndex >= count) throw new Error(\n      `The residue index ${residueIndex} is out of range. There are ${count} residues in the topology`,\n    );\n    return new Residue(this, residueIndex);\n  };\n\n  // Given a residue parameters, find the residue and then return its handler\n  getResidueByParameters = (chainName, number, icode = null) => {\n    // Get the residue chain\n    const chain = this.getChainByName(chainName);\n    // Now iterate residues starting at this index\n    for (const residueIndex of chain.residueIndices) {\n      const residue = new Residue(this, residueIndex);\n      // Check if the residue number matches\n      if (residue.number !== number) continue;\n      // Check if the insertion code matches\n      if (residue.icode !== icode) continue;\n      // If everything matches then return this residue\n      return residue;\n    }\n    // There should always be a match\n    throw new Error(\n      `Residue with chain ${chainName}, number ${number} and icode ${icode} does not exist`,\n    );\n  };\n\n  // --------------------------------------------------------------------\n  // Chain getters\n  // --------------------------------------------------------------------\n\n  // Given a chain index, return its handler\n  getChainByIndex = chainIndex => {\n    const count = this.chainNames.length;\n    if (chainIndex >= count) throw new Error(\n      `The chain index ${chainIndex} is out of range. There are ${count} chains in the topology`,\n    );\n    return new Chain(this, chainIndex);\n  }\n\n  // Given a chain name, find the chain and return its handler\n  getChainByName = chainName => {\n    const chainIndex = this.chainNames.indexOf(chainName);\n    if (chainIndex === -1)\n      throw new Error(`Chain ${chainName} is not found in the topology`);\n    return new Chain(this, chainIndex);\n  }\n\n  // --------------------------------------------------------------------\n  // OTHER\n  // --------------------------------------------------------------------\n\n  // This function returns residue indices for every residue which belongs to a reference\n  // The reference must be specified with the topology reference id (i.e. uniprot id)\n  // Optionally, you may request only specific residue numbers according to reference numeration\n  // Note that one residue in the reference may be more than once or not be at all in the topology\n  getReferenceResidueIndices = (reference, residueNumbers = null) => {\n    if (!this.references) return;\n    // Get the requested reference index\n    const referenceIndex = this.references.indexOf(reference);\n    if (referenceIndex === -1) return;\n    const residueIndices = [];\n    this.residueReferenceIndices.forEach((refIndex, residueIndex) => {\n      if (refIndex !== referenceIndex) return;\n      // If no residue number were specified then simply return all residue indcies\n      if (residueNumbers === null) return residueIndices.push(residueIndex);\n      // Otherwise we must check\n      const residueNumber = this.residueReferenceNumbers[residueIndex];\n      if (residueNumbers.includes(residueNumber)) residueIndices.push(residueIndex);\n    });\n    return residueIndices;\n  };\n\n  // Set an NGL selection from a list of residue indices\n  // e.g. [0, 1, 2, 3, ...] => nglSelection = \"(A: and 1, 3-5) or (B: and 1)\"\n  // In addition track if there is any small serie (i.e. 3 residues or less)\n  // DANI: Esta función no sería necesaria si se pudiesen hacer selecciones en NGL con índices de residuos\n  // DANI: De hecho no haría falta eliminar residuos duplicados si se pudiesen hacer selecciones en NGL con índices de residuos\n  residueIndices2Ngl = residueIndices => {\n    const rangedSelections = [];\n    let small = false;\n    // Parse each residue in complex notation\n    const parsedResidues = residueIndices.map(residueIndex => this.getResidueByIndex(residueIndex));\n    // Get unique chains\n    const chains = parsedResidues.map(r => r.chainName).filter((v, i, a) => a.indexOf(v) === i);\n    // For each chain, get all residues and \"range\" them\n    chains.forEach(chain => {\n      const chainResidues = parsedResidues.filter(v => v.chainName === chain).map(r => r.number);\n      const { rangedSelection: ranged, small: smallChain } = parsedSelectionRanger(chainResidues);\n      rangedSelections.push(`(:${chain} and (${ranged}))`); // Al parenthesis are mandatory\n      if (smallChain) small = true; // If any chain small is true then the overall small is true\n    });\n    // Join all ranged selections\n    const rangedSelection = rangedSelections.join(' or ');\n    return { rangedSelection, small };\n  };\n\n  // Given a list of residues indices, separate them by chain and return an object where keys are chain names\n  // e.g. [ 1, 2, 3, 17 ] -> { 'A': [1,2,3], 'B': [17] }\n  byChains = residuesIndices => {\n    const chained = {};\n    residuesIndices.forEach(residueIndex => {\n      const chainName = this.getResidueByIndex(residueIndex).chainName;\n      const current = chained[chainName];\n      if (current) current.push(residueIndex);\n      else chained[chainName] = [residueIndex];\n    });\n    return chained;\n  };\n\n  // \n\n  // Get an atom color according to its element\n  // If the element color is not defined return black color\n  getAtomElementColor = atomIndex => {\n    const element = this.atomElements[atomIndex];\n    const color = elementColors[element];\n    if (!color) return 'black';\n    return color;\n  };\n\n  // Get all atom colors according to their elements\n  getAtomElementColors = () => {\n    return this.atomElements.map(element => {\n      const color = elementColors[element];\n      if (!color) return 'black';\n      return color;\n    });\n  };\n}\n"],"names":["WAIT_DELAY","_ref","wait","flag","toggleFlag","useToggleState","useLayoutEffect","timer","setTimeout","clearTimeout","_jsx","title","className","cn","style","children","CircularProgress","variant","color","size","thickness","initialState","state","setState","useState","toggleState","useCallback","valueOrSetter","Boolean","Project","constructor","projectPayload","_this","_apiEndpoints","topology","interactions","references","fileDescriptors","populations","_apiQuery","fieldname","available","arguments","length","undefined","url","_apiBaseUrl","_apiResponses","payload","query","useAPI","Object","entries","forEach","key","value","this","metadata","mdFrames","SNAPSHOTS","timeLength","FRAMESTEP","mdCount","mds","filter","md","slice","accessionOrId","accession","identifier","accessionAndMdNumber","concat","mdNumber","hasInteractions","analyses","includes","isPopulated","files","find","filename","directions","overview","trajectory","genericAnalyses","analysis","HOST_CONFIG","options","anyReferenceWithEntropies","REFERENCES","ref","REFERENCES_WITH_ENTROPIES","anyReferenceWithEpitopes","REFERENCES_WITH_EPITOPES","METHOD","file","_topologyManager","BASE_PATH_PROJECTS","response","loading","error","Error","message","proteinReferences","useMemo","uniprot","ligandReferences","pubchem","Topology","ngl","require","rangedSyntax","rangedSelectionParser","selection","units","split","parsedSelection","u","match","matches","exec","rangedUnits","range","push","residueLetters","ALA","ALAN","ALAC","ARG","ARGN","ARGC","ASN","ASNN","ASNC","ASP","ASPN","ASPC","CYS","CYSN","CYSC","CYH","CSH","CSS","CYX","CYP","GLN","GLNN","GLNC","GLU","GLUN","GLUC","GLY","GLYN","GLYC","HIS","HISN","HISC","HID","HIE","HIP","HSD","HSE","ILE","ILEN","ILEC","ILU","LEU","LEUN","LEUC","LYS","LYSN","LYSC","MET","METN","METC","PHE","PHEN","PHEC","PRO","PRON","PROC","PRØ","PR0","PRZ","SER","SERN","SERC","THR","THRN","THRC","TRP","TRPN","TRPC","TRY","TYR","TYRN","TYRC","VAL","VALN","VALC","A","A3","A5","C","C3","C5","T","T3","T5","G","G3","G5","U","U3","U5","DA","DT","DC","DG","nglSelection2residueIndices","nglSelection","onlyCartoonSupported","viewerTopology","residueIndices","Selection","view","getView","eachResidue","residue","nglResidue","isProtein","isRna","isDna","index","nglSelectionExists","atomCount","elementColors","H","N","O","S","P","Residue","residueIndex","number","residueNumbers","chainIndex","residueChainIndices","chainName","chainNames","chain","getChainByIndex","icode","residueIcodes","type","residueNames","name","letter","residueType","getResidueTypeLetter","referenceIndex","residueReferenceIndices","referenceId","referenceType","referenceTypes","referenceNumber","residueReferenceNumbers","isLigand","referenceData","reference","referenceName","forcedLigandName","metadataLigandNames","isPbc","pbcResidues","has","standardLabel","labelChain","labelNumber","labelIcode","atomIndices","residueAtomIndices","hasCAlpha","atomIndex","getAtomName","Chain","metadataChainName","metadataChainNames","Array","isArray","chainResidueIndices","chainResidueNumbers","residues","map","atomNames","getAtomResidueIndex","atomResidueIndices","getResidueByIndex","count","getResidueByParameters","getChainByName","indexOf","getReferenceResidueIndices","refIndex","residueNumber","residueIndices2Ngl","rangedSelections","small","parsedResidues","r","v","i","a","chainResidues","rangedSelection","ranged","smallChain","separator","minimumSerieLength","Number","POSITIVE_INFINITY","sort","b","selectionLength","toString","num","j","nextNum","Math","min","substring","parsedSelectionRanger","join","byChains","residuesIndices","chained","current","getAtomElementColor","element","atomElements","getAtomElementColors","atom_names","atom_elements","atomCharges","atom_charges","atom_residue_indices","residue_names","residue_numbers","icodes","residue_icodes","fill","residue_chain_indices","chain_names","reference_types","residue_reference_indices","residue_reference_numbers","pbc_residues","Set","from","CHAINNAMES","LIGANDNAMES","residueCount"],"sourceRoot":""}