"use strict";(self.webpackChunkmdposit=self.webpackChunkmdposit||[]).push([[6899],{17545:(e,t,i)=>{i.d(t,{A:()=>u});var n=i(65043),s=i(64600),r=i.n(s),o=i(81637),a=i(92954);const c="style_loading__Vdgbc",h="style_show__wIdQ5";var d=i(70579);const l=750,u=e=>{let{wait:t=l}=e;const[i,s]=(0,a.A)(!1);return(0,n.useLayoutEffect)(()=>{const e=setTimeout(()=>{s()},t);return()=>clearTimeout(e)},[s,t]),(0,d.jsx)("div",{title:"loading...",className:r()(c,{[h]:i}),children:i&&(0,d.jsx)(o.A,{variant:"indeterminate",color:"primary",size:50,thickness:5})})}},58338:(e,t,i)=>{i.d(t,{A:()=>d});var n=i(65043),s=i(40854),r=i.n(s);const o={loading:!1,payload:null,error:null},a={loading:!0},c=36e5;let h=(()=>{const e=localStorage.getItem("apiCache");return e?JSON.parse(e):{}})();const d=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const{name:i="",cacheOn:s=!1,cacheExpiration:d=c}=t,l=(()=>{if(s&&h[i]){const e=h[i];if(Date.now()-new Date(e.received).getTime()<d)return e}return o})(),[u,f]=(0,n.useState)(l);return(0,n.useEffect)(()=>{if(!e)return void f(o);const t=r().CancelToken.source();let n=!1;return r()(e,{cancelToken:t.token,startTime:new Date}).then(t=>{if(n)return;const r=new Date,o=r-t.config.startTime,a={url:e,loading:!1,payload:t.data,error:null,time:o,received:r};s&&(h[i]=a,(e=>{localStorage.setItem("apiCache",JSON.stringify(e))})(h)),f(a)}).catch(t=>{if(n)return;f({url:e,loading:!1,payload:null,error:t})}),()=>{t.cancel(),n=!0}},[e]),e?u.url===e||l.url===e?u:a:o}},75576:(e,t,i)=>{i.d(t,{M:()=>b});var n=i(65043),s=i(58338),r=i(95747),o=i(89379);const a={ALA:"A",ALAN:"A",ALAC:"A",ARG:"R",ARGN:"R",ARGC:"R",ASN:"N",ASNN:"N",ASNC:"N",ASP:"D",ASPN:"D",ASPC:"D",CYS:"C",CYSN:"C",CYSC:"C",CYH:"C",CSH:"C",CSS:"C",CYX:"C",CYP:"C",GLN:"Q",GLNN:"Q",GLNC:"Q",GLU:"E",GLUN:"E",GLUC:"E",GLUP:"E",GLY:"G",GLYN:"G",GLYC:"G",HIS:"H",HISN:"H",HISC:"H",HID:"H",HIE:"H",HIP:"H",HSD:"H",HSE:"H",ILE:"I",ILEN:"I",ILEC:"I",ILU:"I",LEU:"L",LEUN:"L",LEUC:"L",LYS:"K",LYSN:"K",LYSC:"K",MET:"M",METN:"M",METC:"M",PHE:"F",PHEN:"F",PHEC:"F",PRO:"P",PRON:"P",PROC:"P","PR\xd8":"P",PR0:"P",PRZ:"P",SER:"S",SERN:"S",SERC:"S",THR:"T",THRN:"T",THRC:"R",TRP:"W",TRPN:"W",TRPC:"W",TRY:"W",TYR:"Y",TYRN:"Y",TYRC:"Y",VAL:"V",VALN:"V",VALC:"V"},c={DA:"A",T:"T",T3:"T",T5:"T",DT:"T",DC:"C",DG:"G",DA3:"A",DA5:"A",DT3:"T",DT5:"T",DC3:"C",DC5:"C",DG3:"G",DG5:"G"},h={RA:"A",U:"U",U3:"U",U5:"U",RU:"U",RC:"C",RG:"G",RA3:"A",RA5:"A",RU3:"U",RU5:"U",RC3:"C",RC5:"C",RG3:"G",RG5:"G"},d=(0,o.A)((0,o.A)((0,o.A)({},c),h),{},{A:"A",A3:"A",A5:"A",C:"C",C3:"C",C5:"C",G:"G",G3:"G",G5:"G"}),l=(0,o.A)((0,o.A)({},a),d),u=new Set(["POPC","POPG","POPS","POPE","PYPC","PAzePCprot","PAzePCdeprot","DMPC","DPPC","DPPE","DPPG","DEPC","DRPC","DYPC","DLPC","DLIPC","DOG","DOPC","DOPE","DDOPC","DOPS","DSPC","DAPC","DMTAP","SDG","SDPE","SOPC","POPI","SAPI","SAPI24","SAPI25","SLPI","CER","CER180","DHMDMAB","SLiPC","SM16","SM18","TOCL","TLCL_0H","TMCL","GM1","DPPGK","GB3","BOG"]),f=new Set(["CHL","CHL1","CHOL","DCHOL"]),m=new Set(["SOL","WAT","HOH","TIP","TP3","SWM4"]),p=new Set(["K","NA","SOD","POT"]),g=new Set(["CL","CLA"]),y=p.union(g);new Set(["MW"]);var C=i(71261);const R=e=>{if(!e)return[];const t=[];return e.iterchains().forEach(i=>{const n=i.metadataChainName,s=n?"".concat(n," (Chain ").concat(i.name,")"):"Chain ".concat(i.name),r=i.residues,o=i=>{const n=r.filter(e=>e.classification===i);if(0===n.length)return;const o=n.filter(e=>e.isCg);if(o.length>0){const n=o.map(e=>e.index),{rangedSelection:r}=e.residueIndices2Ngl(n);t.push({name:"".concat(s," - ").concat(i," polymer (coarse grain)"),selection:r,type:"spacefill",color:"chainid"})}const a=n.filter(e=>!e.isCg).map(e=>e.index),c=[...(0,C.Y$)(a)],h=c.filter(e=>e.length<=3);if(h.length>0){const n=h.reduce((e,t)=>e.concat(t),[]),{rangedSelection:r}=e.residueIndices2Ngl(n);t.push({name:"".concat(s," - ").concat(i," polymer (short)"),selection:r,type:"licorice",color:"chainid"})}const d=c.filter(e=>e.length>3);if(d.length>0){const n=d.reduce((e,t)=>e.concat(t),[]),{rangedSelection:r}=e.residueIndices2Ngl(n);t.push({name:"".concat(s," - ").concat(i," polymer"),selection:r,type:"cartoon",color:"chainid"});new Set(["dna","rna","nucleic"]).has(i)&&t.push({name:"".concat(s," - ").concat(i," bases"),selection:r,type:"base",color:"resname"})}};o("protein"),o("dna"),o("rna"),o("nucleic");const a=r.filter(e=>"ligand"===e.classification);if(a.length>0){const i=new Set(a.map(e=>e.referenceId));for(const n of i){const i=a.filter(e=>e.referenceId===n).map(e=>e.index),{rangedSelection:r}=e.residueIndices2Ngl(i);t.push({name:"".concat(s," - ligand ").concat(n),selection:r,type:"ball+stick",color:"element"})}}const c=new Set(["fatty","steroid"]),h=r.filter(e=>c.has(e.classification));if(h.length>0){const i=h.map(e=>e.index),{rangedSelection:n}=e.residueIndices2Ngl(i);t.push({name:"".concat(s," - lipids"),selection:n,type:"licorice",color:"grey",opacity:.5})}const d=r.filter(e=>"ion"===e.classification);if(d.length>0){const i=d.map(e=>e.index),{rangedSelection:n}=e.residueIndices2Ngl(i);t.push({name:"".concat(s," - ions"),selection:n,type:"ball+stick",color:"element"})}const l=new Set(["solvent","unknown"]),u=r.filter(e=>l.has(e.classification));if(u.length>0){const i=u.map(e=>e.index),{rangedSelection:n}=e.residueIndices2Ngl(i);t.push({name:"".concat(s," - other"),selection:n,type:"licorice",color:"purple",opacity:.3})}}),t},_=e=>{if(!e)return;if(!e.proteinReferences.some(e=>!!e.epitopes))return;const t=e.proteinReferences.map(t=>{const i=t.uniprot,n=t.epitopes;if(!n)return[];const s=Object.values(n).map(e=>e.residues),r=[].concat.apply([],s),o=Array.from(new Set(r)),a=e.getReferenceResidueIndices(i,o);return a||[]}),i=[].concat.apply([],Object.values(t)),{rangedSelection:n,small:s}=e.residueIndices2Ngl(i);return[{name:"Epitopes",selection:n||"none",type:s?"licorice":"cartoon",color:"purple"}]};var I=i(82746),N=i(57631);const S=["grey","yellow","red"],w=e=>{if(!e)return;if(!e.proteinReferences.some(e=>!!e.entropies))return;const t=e.proteinReferences.map(e=>{if(!e.entropies)return[];const t=e.entropies.map(e=>Math.log(e+1e-4));return e.logarithmicEntropies=t,t}),i=[].concat.apply([],t),n=Math.max(...i),s=Math.min(...i),r=(0,N.m4Y)().range(S).domain([s,(s+n)/2,n]);return[{name:"Mutations",color:"custom",customScheme:I.hD.addScheme(function(t){this.atomColor=t=>{const i=t.residueIndex,n=e.getResidueByIndex(i);if(!n.referenceId)return parseInt("ffffff",16);const s=n.referenceData.logarithmicEntropies;if(!s||0===s.length)return parseInt("ffffff",16);const o=s[n.referenceNumber-1];if(!o)return parseInt("ffffff",16);const a=(0,N.yWT)(r(o)).formatHex();return parseInt(a.substring(1),16)}})}]},A={H:"white",C:"grey",N:"blue",O:"red",S:"yellow",P:"orange"};class E{constructor(e,t){this.topology=e,this.index=t}get name(){return this.topology.atomNames[this.index]}get label(){return"".concat(this.residue.standardLabel,".").concat(this.name)}get residueIndex(){return this.topology.atomResidueIndices[this.index]}get residue(){return this.topology.getResidueByIndex(this.residueIndex)}get element(){return this.topology.atomElements[this.index]}get elementColor(){const e=A[this.element];return e||"black"}get isCg(){return"Cg"===this.element}}class P{constructor(e,t){this.topology=e,this.index=t,this._classification=void 0}get number(){return this.topology.residueNumbers[this.index]}get chainIndex(){return this.topology.residueChainIndices[this.index]}get chainName(){return this.topology.chainNames[this.chainIndex]}get chain(){return this.topology.getChainByIndex(this.chainIndex)}get icode(){return this.topology.residueIcodes?this.topology.residueIcodes[this.index]:null}get nglSelection(){let e=":".concat(this.chainName," and ").concat(this.number);return this.icode&&(e+=" ^".concat(this.icode)),e}get name(){return this.topology.residueNames[this.index]}get letter(){if(!this.name)return;const e=l[this.name];return e||"X"}get classification(){if(void 0!==this._classification)return this._classification;if(this.isCg)return this._classification=this.classificationByName,this._classification;if(1===this.atomCount)return this._classification="ion",this._classification;if(this.name in m)return this._classification="solvent",this._classification;if(3===this.atomCount){const e=this.atoms.map(e=>e.element),t=(0,C.Gg)(e,"H"),i=(0,C.Gg)(e,"O");if(2===t&&1===i)return this._classification="solvent",this._classification}const e=new Set(this.atoms.map(e=>e.name));return["C","N","CA"].every(t=>e.has(t))&&(e.has("O")||["OC1","OC2"].every(t=>e.has(t))||["OT1","OT2"].every(t=>e.has(t)))?(this._classification="protein",this._classification):["O3'","C3'","C4'","C5'","O5'"].every(t=>e.has(t))||["O3*","C3*","C4*","C5*","O5*"].every(t=>e.has(t))?(e.has("O2'")||e.has("O2*")?this._classification="rna":this._classification="dna",this._classification):"ligand"===this.referenceType?(this._classification="ligand",this._classification):(this._classification=this.classificationByName,this._classification)}get classificationByName(){return this.name in a?"protein":this.name in c?"dna":this.name in h?"rna":this.name in d?"nucleic":u.has(this.name)?"fatty":f.has(this.name)?"steroid":y.has(this.name)?"ion":m.has(this.name)?"solvent":"unknown"}get referenceIndex(){return this.topology.residueReferenceIndices?this.topology.residueReferenceIndices[this.index]:null}get referenceId(){const e=this.referenceIndex;return null===e?null:this.topology.references[e]}get referenceType(){const e=this.referenceIndex;return null===e?null:this.topology.referenceTypes[e]}get referenceNumber(){return this.topology.residueReferenceNumbers?this.topology.residueReferenceNumbers[this.index]:null}get referenceData(){if(null===this.referenceId)return null;if("protein"===this.referenceType){const e=this.topology.proteinReferences.find(e=>e.uniprot===this.referenceId);return e||(console.error("Reference id ".concat(this.referenceId," is not found among protein references")),null)}if("ligand"===this.referenceType){const e=this.topology.ligandReferences.find(e=>e.pubchem===this.referenceId);return e||(console.error("Reference id ".concat(this.referenceId," is not found among ligand references")),null)}if("inchikey"===this.referenceType){const e=this.topology.inchikeyReferences.find(e=>e.inchikey===this.referenceId);return e||(console.error("Reference id ".concat(this.referenceId," is not found among inchikey references")),null)}throw new Error("Not supported reference type ".concat(this.referenceType))}get referenceName(){const e=this.topology.metadataLigandNames&&this.topology.metadataLigandNames[this.referenceId];if(e)return e;const t=this.referenceData;return t?t.name:null}get isPbc(){return this.topology.pbcResidues.has(this.index)}get isCg(){for(const e of this.iteratoms())if(e.isCg)return!0;return!1}get standardLabel(){let e="";this.topology.chainNames.length>1&&(e="".concat(this.chainName,":"));const t=this.referenceNumber;let i;i=null!==t?"".concat(t):"".concat(this.number,"*");let n=this.icode;n||(n="");return e+i+n+"(".concat(this.name,")")}get atomIndices(){return this.topology.residueAtomIndices[this.index]}get atomCount(){return this.atomIndices.length}get hasCAlpha(){for(const e of this.iteratoms())if("CA"===e.name)return!0;return!1}*iteratoms(){for(const e of this.atomIndices)yield new E(this.topology,e)}get atoms(){return[...this.iteratoms()]}}class D{constructor(e,t){this.topology=e,this.index=t}get name(){return this.topology.chainNames[this.index]}get letter(){return this.name}get metadataChainName(){const e=this.topology.metadataChainNames;return e?Array.isArray(e)?e[this.index]||"":e[this.name]||"":""}get residueIndices(){return this.topology.chainResidueIndices[this.index]}get residueNumbers(){return this.topology.chainResidueNumbers[this.index]}get sequence(){return this.sequences[this.index]}*iterresidues(){for(const e of this.residueIndices)yield new P(this.topology,e)}get residues(){return[...this.iterresidues()]}}class T{constructor(e,t,i){var n=this;this.getAtomByIndex=e=>{const t=this.atomCount;if(e>=t)throw new Error("The atom index ".concat(e," is out of range. There are ").concat(t," atoms in the topology"));return new E(this,e)},this.getResidueByIndex=e=>{const t=this.residueCount;if(e>=t)throw new Error("The residue index ".concat(e," is out of range. There are ").concat(t," residues in the topology"));return new P(this,e)},this.getResidueByParameters=function(e,t){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;const s=n.getChainByName(e);for(const o of s.residueIndices){const e=new P(n,o);if(e.number===t&&e.icode===i)return e}const r=i?"icode ".concat(i):"no icode";throw new Error("Residue with chain ".concat(e,", number ").concat(t," and ").concat(r," does not exist"))},this.getChainByIndex=e=>{const t=this.chainNames.length;if(e>=t)throw new Error("The chain index ".concat(e," is out of range. There are ").concat(t," chains in the topology"));return new D(this,e)},this.getChainByName=e=>{const t=this.chainNames.indexOf(e);if(-1===t)throw new Error("Chain ".concat(e," is not found in the topology"));return new D(this,t)},this.residue2atomIndices=e=>{let t=[];for(const i of e){const e=this.getResidueByIndex(i);t=t.concat(e.atomIndices)}return t},this.atom2residueIndices=e=>{const t=(0,C.Am)(e.map(e=>this.atomResidueIndices[e]));return t.sort((e,t)=>e-t),t},this.getReferenceResidueIndices=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(!n.references)return;const i=n.references.indexOf(e);if(-1===i)return;const s=[];return n.residueReferenceIndices.forEach((e,r)=>{if(e!==i)return;if(null===t)return s.push(r);const o=n.residueReferenceNumbers[r];t.includes(o)&&s.push(r)}),s},this.residueIndices2Ngl=e=>{const t=[];let i=!1;const n=e.map(e=>this.getResidueByIndex(e));n.map(e=>e.chainName).filter((e,t,i)=>i.indexOf(e)===t).forEach(e=>{const s=n.filter(t=>t.chainName===e).map(e=>e.number),{rangedSelection:r,small:o}=(0,C.ZH)(s);t.push("(:".concat(e," and (").concat(r,"))")),o&&(i=!0)});return{rangedSelection:t.join(" or "),small:i}},this.atomIndices2Ngl=e=>"@"+e.join(","),this.byChains=e=>{const t={};return e.forEach(e=>{const i=this.getResidueByIndex(e).chainName,n=t[i];n?n.push(e):t[i]=[e]}),t},this.getAtomElementColors=()=>this.atomElements.map(e=>{const t=A[e];return t||"black"}),this.atomNames=e.atom_names,this.atomElements=e.atom_elements,this.atomCharges=e.atom_charges,this.atomResidueIndices=e.atom_residue_indices,this.residueNames=e.residue_names,this.residueNumbers=e.residue_numbers;const s=e.residue_icodes;s?(this.residueIcodes=Array(this.residueNames.length).fill(""),Object.entries(s).forEach(e=>{let[t,i]=e;this.residueIcodes[+t]=i})):this.residueIcodes="",this.residueChainIndices=e.residue_chain_indices,this.chainNames=e.chain_names,this.references=e.references,this.referenceTypes=e.reference_types,!this.referenceTypes&&this.references&&(this.referenceTypes=this.references.map(e=>"protein")),this.residueReferenceIndices=e.residue_reference_indices,this.residueReferenceNumbers=e.residue_reference_numbers,this.atomBonds=e.atom_bonds&&e.atom_bonds.map(e=>"MB"===e?[]:e),this.pbcResidues=e.pbc_residues&&new Set(e.pbc_residues),this.residueAtomIndices=Array.from(Array(this.residueNames.length),()=>[]);for(const[r,o]of this.atomResidueIndices.entries())this.residueAtomIndices[o].push(r);this.chainResidueIndices=Array.from(Array(this.chainNames.length),()=>[]);for(const[r,o]of this.residueChainIndices.entries())this.chainResidueIndices[o].push(r);this.chainResidueNumbers=this.chainResidueIndices.map(e=>e.map(e=>this.residueNumbers[e])),this.sequences=this.chainResidueIndices.map(e=>e.map(e=>this.getResidueByIndex(e).letter).join("")),this.metadataChainNames=t.CHAINNAMES,this.metadataLigandNames=t.LIGANDNAMES,this.proteinReferences=i.proteins,this.ligandReferences=i.ligands,this.chainReferences=i.chains,this.inchikeyReferences=i.inchikeys;for(const r of this.chainReferences){r.chains=[],r.chain_indices=[];for(const[e,t]of Object.entries(this.chainNames)){this.sequences[e]===r.sequence&&(r.chains.push(t),r.chain_indices.push(+e))}0===r.chain_indices.length&&console.error("Unmatched chain reference "+r.sequence)}this._defaultRepresentations=void 0,this._epitopeRepresentations=void 0,this._mutationRepresentations=void 0}get atomCount(){return this.atomNames.length}get residueCount(){return this.residueNumbers.length}get chainCount(){return this.chainNames.length}*iteratoms(){for(let e=0;e<this.atomCount;e++)yield new E(this,e)}*iterresidues(){for(let e=0;e<this.residueCount;e++)yield new P(this,e)}*iterchains(){for(let e=0;e<this.chainCount;e++)yield new D(this,e)}get defaultRepresentations(){return void 0!==this._defaultRepresentations||(this._defaultRepresentations=R(this)),this._defaultRepresentations}get epitopesRepresentations(){return void 0!==this._epitopeRepresentations||(this._epitopeRepresentations=_(this)),this._epitopeRepresentations}get mutationsRepresentations(){return void 0!==this._mutationRepresentations||(this._mutationRepresentations=w(this)),this._mutationRepresentations}}class b{constructor(e){var t=this;if(this._apiEndpoints={topology:"/topology",structure:"/structure",interactions:"/analyses/interactions",references:"/references",fileDescriptors:"/filenotes",populations:"/files/populations.json"},this._apiQuery=function(e){let i=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=t._apiBaseUrl+t._apiEndpoints[e];i||(n=null),t._apiResponses[e]&&t._apiResponses[e].payload&&(n=null);const r=(0,s.A)(n);return null!==n&&(t._apiResponses[e]=r),t._apiResponses[e]},Object.entries(e).forEach(e=>{let[t,i]=e;this[t]=i}),!this.metadata)return;this.metadata.mdFrames||(this.metadata.mdFrames=this.metadata.SNAPSHOTS),this.metadata.timeLength=this.metadata.FRAMESTEP&&this.metadata.mdFrames&&this.metadata.FRAMESTEP*this.metadata.mdFrames||null,this.mdCount=this.mds?this.mds.filter(e=>"(removed)"!==e.slice(-9)).length:0;const i=this.accession||this.identifier;this.accessionAndMdNumber=this.mds?"".concat(i,".").concat(this.mdNumber):i,this.hasInteractions=this.analyses.includes("interactions"),this.isPopulated=Boolean(this.files&&this.files.find(e=>"populations.json"===e)),this.directions={overview:!0,trajectory:!0,files:!0};const n=["rmsds","rgyr","fluctuation","pca","rmsd-perres","rmsd-pairwise","dist-perres","hbonds","energies","pockets","sasa","clusters","density","thickness","apl","lipid-order","lipid-inter","dihenergies"];for(const s of n)this.directions[s]=this.analyses.includes(s);if(this.directions.electrostatic=this.analyses.includes("interactions"),this.directions["ligand-descriptors"]=Boolean(this.metadata&&this.metadata.LIGANDS&&this.metadata.LIGANDS.length>0),r._r.flags&&r._r.flags.includes("covid")){const e=this.metadata&&this.metadata.REFERENCES&&this.metadata.REFERENCES.find(e=>r.kO.includes(e));this.directions.mutations=Boolean(e);const t=this.metadata&&this.metadata.REFERENCES&&this.metadata.REFERENCES.find(e=>r.QO.includes(e));this.directions.epitopes=Boolean(t)}this.metadata&&"Markov state model (MSM)"===this.metadata.METHOD&&(this.directions.populations=this.files&&this.files.find(e=>"populations.json"===e),this.directions.markov=this.analyses.includes("markov")),this._apiResponses={topology:void 0,interactions:void 0,references:void 0,fileDescriptors:void 0,populations:void 0},this._topologyManager=null,this._apiBaseUrl="".concat(r.nP,"/").concat(this.accessionAndMdNumber),this.creationDate=new Date(this.creationDate).toLocaleDateString("en-GB"),this.updateDate=this.updateDate?new Date(this.updateDate).toLocaleDateString("en-GB"):void 0}get interactions(){const e=this._apiQuery("interactions",this.hasInteractions),t=e&&e.payload,i=this.topology,s=(0,n.useMemo)(()=>{if(t&&i){for(const t of e.payload)t.atom_indices_1||(t.atom_indices_1=i.residue2atomIndices(t.residue_indices_1),t.atom_indices_2=i.residue2atomIndices(t.residue_indices_2),t.interface_atom_indices_1=i.residue2atomIndices(t.interface_indices_1),t.interface_atom_indices_2=i.residue2atomIndices(t.interface_indices_1));for(const t of e.payload)t.residue_indices_1||(t.residue_indices_1=i.atom2residueIndices(t.atom_indices_1),t.residue_indices_2=i.atom2residueIndices(t.atom_indices_2),t.interface_indices_1=i.atom2residueIndices(t.interface_atom_indices_1),t.interface_indices_2=i.atom2residueIndices(t.interface_atom_indices_2));return e.payload}},[t,i]);if(void 0!==e&&!e.loading){if(e.error)throw new Error("Error when downloading project interactions: "+e.error.message);if(!e.payload)throw new Error("Something went wrong with project interactions");return s}}get references(){const e=this._apiQuery("references");if(!e.loading){if(e.error)throw new Error("Error when downloading project references: "+e.error.message);if(!e.payload)throw new Error("Something went wrong with project references");return e.payload}}get proteinReferences(){const e=this.references;return(0,n.useMemo)(()=>e&&e.filter(e=>"proteins"===e.ref_type),[e])}get ligandReferences(){const e=this.references;return(0,n.useMemo)(()=>e&&e.filter(e=>"ligands"===e.ref_type),[e])}get pdbReferences(){const e=this.references;return(0,n.useMemo)(()=>e&&e.filter(e=>"pdbs"===e.ref_type),[e])}get chainReferences(){const e=this.references;return(0,n.useMemo)(()=>e&&e.filter(e=>"chains"===e.ref_type),[e])}get inchikeyReferences(){const e=this.references;return(0,n.useMemo)(()=>e&&e.filter(e=>"inchikeys"===e.ref_type),[e])}get topology(){const e=this.references,t={proteins:this.proteinReferences,ligands:this.ligandReferences,chains:this.chainReferences,inchikeys:this.inchikeyReferences},i=this._apiQuery("topology");if(!i.loading){if(i.error)throw new Error("Error when downloading project topology: "+i.error.message);if(!i.payload)throw new Error("Something went wrong with project topology");if(this._topologyManager)return this._topologyManager;if(void 0!==e)return this._topologyManager=new T(i.payload,this.metadata,t),this._topologyManager}}get fileDescriptors(){return this._apiQuery("fileDescriptors")}get populations(){return this._apiQuery("populations",this.isPopulated)}get referenceFrame(){return void 0===this.refframe?0:this.refframe}get structureData(){const e=this._apiQuery("structure"),t=(0,n.useMemo)(()=>{if(e.payload)return new Blob([e.payload],{type:"text/plain"})},[e.payload]);if(!e.loading){if(e.error)throw new Error("Error when downloading project structure: "+e.error.message);if(!e.payload)throw new Error("Something went wrong with project structure");return t}}get nglStructure(){const[e,t]=(0,n.useState)(void 0),i=this.structureData;return(0,n.useEffect)(()=>{i&&(0,I.un)(i,{defaultRepresentation:!1,ext:"pdb"}).then(e=>{t({file:e})}).catch(e=>{console.error(e),t({error:e})})},[i]),e}}},92954:(e,t,i)=>{i.d(t,{A:()=>s});var n=i(65043);const s=e=>{const[t,i]=(0,n.useState)(!!e),s=(0,n.useCallback)(e=>{switch(typeof e){case"function":i(e);break;case"boolean":case"number":case"string":i(Boolean(e));break;default:i(e=>!e)}},[]);return[t,s]}}}]);
//# sourceMappingURL=6899.c5d44d5c.chunk.js.map