{"version":3,"file":"static/js/7385.34fde907.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/interaction-selector/style.module.css?5392","components/interaction-selector/index.js","webpack://mdposit/./src/components/animated-card/style.module.css?d4d9","components/animated-card/index.js","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js","webpack://mdposit/./src/pages/accession/electrostatic/style.module.css?8eaf","pages/accession/electrostatic/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"horizontal\":\"style_horizontal__2DIWx\",\"horizontal-margined\":\"style_horizontal-margined__e9fQR\"};","import React, { Suspense } from 'react';\n\nimport {\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Select,\n  MenuItem,\n  TextField,\n  IconButton,\n} from '@mui/material';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport Loading from '../loading';\n\nimport style from './style.module.css';\n\nconst residueOptions = [\n  { label: 'All residues', value: 'residue_indices' },\n  { label: 'Interface residues', value: 'interface_indices' },\n];\n\n// Render a panel which allows to select the desired interaction\n// If the user selects a new interaction then the 'setSelectedInteraction' is set as its index\n// Interactions have the following structure:\n// { name: string, label: string, ... }\n// The 'label' field will replace the 'name' in the selector labels if exists\n// When 'selectedResidues' is passed, render also tools to select interaction residues\n// Residue options are 'all' or 'interface' residues\n// DANI: La guinda sería un 'custom' en las opciones de residuos\n// DANI: La idea sería desplegar dos residue selectors, uno para cada interaction agent\nconst InteractionSelector = ({\n  interactions,\n  selectedInteraction,\n  setSelectedInteraction,\n  selectedResidues,\n  setSelectedResidues,\n  selectedOrder,\n  handleToggleOrder,\n  firstOrderLabel, // The label to be represented over the first order rectangle\n  firstOrderTooltip, // The tooltip to be shown for the first order rectangle\n  secondOrderLabel, // The label to be represented over the second order rectangle\n  secondOrderTooltip, // The tooltip to be shown for the second order rectangle\n  toggleOrderTooltip, // The tooltip to be shown for the toggle order button\n  interfaceOnly = false, // Set if the 'All residues' button is enabled\n}) => {\n  const changeInteraction = event => {\n    setSelectedInteraction(event.target.value);\n  };\n\n  const changeResidues = event => {\n    setSelectedResidues(event.target.value);\n  };\n\n  const changeOrder = () => {\n    handleToggleOrder();\n  };\n\n  const currentInteraction = interactions[selectedInteraction];\n\n  // Render\n  return (\n    <Suspense fallback={<Loading />}>\n      <Select\n        value={selectedInteraction}\n        onChange={changeInteraction}\n        className={style['horizontal-margined']}\n      >\n        {interactions.map((interaction, i) => (\n          <MenuItem key={i} value={i} disabled={interaction.failed}>\n            {interaction.label || interaction.name}\n          </MenuItem>\n        ))}\n      </Select>\n      {selectedResidues && (\n        <RadioGroup\n          value={selectedResidues}\n          onChange={changeResidues}\n          className={style.horizontal}\n        >\n          {residueOptions.map((opt, i) => (\n            <FormControlLabel\n              key={i}\n              value={opt.value}\n              control={<Radio color=\"primary\" />}\n              label={opt.label}\n              disabled={opt.label === 'All residues' && interfaceOnly}\n            />\n          ))}\n        </RadioGroup>\n      )}\n      {selectedOrder !== undefined && (\n        <>\n          <TextField\n            //margin=\"dense\"\n            label={firstOrderLabel}\n            title={firstOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_1\n                : currentInteraction.agent_2\n            }\n          />\n          <IconButton\n            title={toggleOrderTooltip}\n            onClick={changeOrder}\n            size=\"large\"\n          >\n            <FontAwesomeIcon icon={faExchangeAlt} />\n          </IconButton>\n          <TextField\n            //margin=\"dense\"\n            label={secondOrderLabel}\n            title={secondOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_2\n                : currentInteraction.agent_1\n            }\n          />\n        </>\n      )}\n    </Suspense>\n  );\n};\n\nexport default InteractionSelector;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__M9GCG\"};","import React, { useLayoutEffect, useRef, forwardRef } from 'react';\nimport { Card } from '@mui/material';\n\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nconst KEYFRAMES = { opacity: [0, 1] };\n\nif (!reducedMotion()) {\n  KEYFRAMES.transform = ['translateY(50px)', 'translateY(0)'];\n}\n\nconst ANIMATION_OPTIONS = {\n  fill: 'both',\n  easing: 'cubic-bezier(0, .99, .56, 1.1)',\n  duration: 500,\n};\n\n// Make the card appear and slide softly from down to up when the page is loaded\nconst AnimatedCard = forwardRef(({ overrideComponent, ...props }, ref) => {\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const node = containerRef.current && containerRef.current.firstElementChild;\n    if (!(node && node.animate)) return;\n\n    const index = Array.from(\n      document.querySelectorAll('main section'),\n    ).findIndex(section => node === section);\n\n    const animation = node.animate(KEYFRAMES, {\n      ...ANIMATION_OPTIONS,\n      delay: index * 150,\n    });\n\n    return () => animation.cancel();\n  }, []);\n\n  const Component = overrideComponent ? 'section' : Card;\n\n  return (\n    <div ref={containerRef} className={style.container}>\n      <Component component=\"section\" {...props} ref={ref} />\n    </div>\n  );\n});\n\nexport default AnimatedCard;\n","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n  const {\n      className,\n      raised = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    raised\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"style_card__FSWd1\",\"container\":\"style_container__QAI3Z\",\"horizontal\":\"style_horizontal__jRVhh\"};","import React, { useContext, useMemo, useState } from 'react';\n// A hook to track whenever some element is on screen\nimport { useInView } from 'react-intersection-observer';\n\nimport Card from '../../../components/animated-card';\nimport { CardContent, Typography } from '@mui/material';\n\nimport ViewerWithControls from '../../../components/viewer-with-controls';\n\nimport style from './style.module.css';\n\nimport { ProjectCtx } from '../../../contexts';\n\nimport Loading from '../../../components/loading';\n\nimport InteractionSelector from '../../../components/interaction-selector';\n\nimport { ColormakerRegistry } from 'ngl';\nimport { color as d3color, scaleLinear } from 'd3';\n\n// Define permanent options for the \"useInView\"\nconst useInViewOptions = { triggerOnce: true, rootMargin: '100px' };\n\n// Set the color of each residue in the NGL representation\n// WARNING: Grey looks better than white because the background may be white and resdiues are hard to see\n// Red goes for negative charges and blue goes for positive charges\nconst CHARGES_COLOR_PLAN = ['red', 'white', 'blue'];\n\n// Set references to find representations between different renders\nconst FIRST_AGENT_REF = 'first agent';\nconst SECOND_AGENT_REF = 'second agent';\n\nconst Electrostatic = () => {\n  // Track if the NGL viewer\n  // The status isNglVisible is returned true/false when the element is in/out the screen respectively\n  const [nglRef, isNglVisible] = useInView(useInViewOptions);\n\n  // Get the current project data\n  const { topology, interactions, referenceFrame } = useContext(ProjectCtx);\n\n  // The interaction to be displayed\n  const [selectedInteraction, setSelectedInteraction] = useState(0);\n\n  // This is a toggle state for which interface is the 'surfaced' and which is the 'sticked'\n  const [selectedOrder, setSelectedOrder] = useState(true);\n\n  // Define the representations to be displayed in the viewer\n  const [ representations, setRepresentations ] = useState(null);\n\n  // Get the default representations\n  const defaultRepresentations = topology && topology.defaultRepresentations;;\n\n  // In case there are charges, use them to create a color scale to pain the surface area\n  const chargesColorScheme = useMemo(() => {\n    if (!topology) return;\n    // Get charges from topology\n    const charges = topology.atomCharges;\n    if (!charges) return;\n    // Set the color scale according to the maximum and minimum values\n    const colorScale = scaleLinear()\n      .range(CHARGES_COLOR_PLAN)\n      .domain([-1, 0, +1]);\n    // Set the colorScheme to get each value corresponding color\n    return ColormakerRegistry.addScheme(function(params) {\n      this.atomColor = atom => {\n        // Get the atom charge\n        const charge = charges[atom.index];\n        // Calculate the interpolated rgb for this value\n        // The interpolated color comes in rbg format\n        const hexColor = d3color(colorScale(charge)).formatHex();\n        // The color interpolation returns a string like '#000000'\n        // We remove the first character ('#') and parse it to integer from hexadecimal\n        const color = parseInt(hexColor.substring(1), 16);\n        return color;\n      };\n    });\n  }, [topology]);\n\n  // Set the representations according to the selected interaction\n  // Set also the viewer focus\n  const initialFocus = useMemo(() => {\n    if (!topology || !interactions) return;\n    // Proceed to make representations for the current interaction\n    const interaction = interactions && interactions[selectedInteraction];\n    if (!interaction) return;\n\n    // Parse the interface selections to the NGL format\n    const [nglInterface1, nglInterface2] = [\n      interaction.interface_indices_1,\n      interaction.interface_indices_2,\n    ].map(interf => topology.residueIndices2Ngl(interf).rangedSelection);\n\n    // Set representation parameters for both the surfaced and the sticked interfaces\n    const surfacedParameters = {\n      type: 'surface',\n      color: chargesColorScheme ? 'custom' : 'electrostatic',\n      customScheme: chargesColorScheme\n    };\n    const stickedParameters = {\n      type: 'ball+stick',\n      color: 'element',\n    };\n\n    // Update the representations state\n    setRepresentations(previousRepresentations => {\n      // If this is the first render then set the representation with some default values\n      if (previousRepresentations === null) {\n        // Make the default representations transparent\n        defaultRepresentations.forEach(rep => {\n          rep.customScheme = chargesColorScheme;\n          rep.opacity = 0.1;\n        });\n        // Create a new representation for each interface\n        // Set the surfaced representation\n        const firstAgentInterface = {\n          name: interaction.agent_1 + ' interface',\n          selection: nglInterface1,\n          reference: FIRST_AGENT_REF,\n          ...(selectedOrder ? surfacedParameters : stickedParameters),\n        };\n        // Set the sticked representation\n        const secondAgentInterface = {\n          name: interaction.agent_2 + ' interface',\n          selection: nglInterface2,\n          reference: SECOND_AGENT_REF,\n          ...(selectedOrder ? stickedParameters : surfacedParameters),\n        };\n        // Join all representations and update the state\n        return [\n          ...defaultRepresentations,\n          firstAgentInterface,\n          secondAgentInterface,\n        ];\n      }\n      // If this is not the first render then update old representations\n      // Make no change to default or custom (added by the user) representations\n      // Only update the sticked and surface representations\n      const firstAgentInterface = previousRepresentations.find(rep => rep.reference === FIRST_AGENT_REF);\n      firstAgentInterface.name = interaction.agent_1 + ' interface';\n      firstAgentInterface.selection = nglInterface1;\n      Object.assign(firstAgentInterface, selectedOrder ? surfacedParameters : stickedParameters);\n      const secondAgentInterface = previousRepresentations.find(rep => rep.reference === SECOND_AGENT_REF);\n      secondAgentInterface.name = interaction.agent_2 + ' interface';\n      secondAgentInterface.selection = nglInterface2;\n      Object.assign(secondAgentInterface, selectedOrder ? stickedParameters : surfacedParameters);\n      // Update the state\n      return [...previousRepresentations];\n    });\n\n    // Set the focus to the whole interface\n    const wholeInterface = `(${nglInterface1} or ${nglInterface2})`;\n    const initialFocus = { sele: wholeInterface };\n    return initialFocus;\n  }, [\n    topology,\n    chargesColorScheme,\n    interactions,\n    defaultRepresentations,\n    selectedInteraction,\n    selectedOrder\n  ]);\n\n  // If there are no interactions or topology\n  if (!interactions) return 'There are no interactions';\n  if (!topology) return 'There is no topology';\n\n  const handleToggleOrder = () => {\n    setSelectedOrder(previous => !previous);\n  };\n\n  return (\n    <>\n      <Card>\n        <CardContent className={style.horizontal}>\n          <Typography variant=\"h6\">Interaction:</Typography>\n          <InteractionSelector\n            interactions={interactions}\n            selectedInteraction={selectedInteraction}\n            setSelectedInteraction={setSelectedInteraction}\n            selectedOrder={selectedOrder}\n            handleToggleOrder={handleToggleOrder}\n            firstOrderLabel={'Surfaced interface'}\n            firstOrderTooltip={\n              'Interface residues to be represented in electorstatic surface mode'\n            }\n            secondOrderLabel={'Sticked interface'}\n            secondOrderTooltip={\n              'Interface residues to be represented in balls and sticks mode'\n            }\n            toggleOrderTooltip={'Toggle interface representations'}\n          />\n        </CardContent>\n      </Card>\n      <Card className={style.card} ref={nglRef}>\n        {/* Render the NGL viewer when it is on screen*/}\n        {isNglVisible ? (\n          <ViewerWithControls\n            className={style.container}\n            representationsState={[ representations, setRepresentations ]}\n            requestedFrame={referenceFrame}\n            initialFocus={initialFocus}\n          />\n        ) : (\n          <div style={{ height: '50vh' }} />\n        )}\n      </Card>\n    </>\n  );\n};\n\nexport default Electrostatic;\n"],"names":["residueOptions","label","value","_ref","interactions","selectedInteraction","setSelectedInteraction","selectedResidues","setSelectedResidues","selectedOrder","handleToggleOrder","firstOrderLabel","firstOrderTooltip","secondOrderLabel","secondOrderTooltip","toggleOrderTooltip","interfaceOnly","currentInteraction","_jsxs","Suspense","fallback","_jsx","Loading","children","Select","onChange","event","target","className","style","map","interaction","i","MenuItem","disabled","failed","name","RadioGroup","opt","FormControlLabel","control","Radio","color","undefined","_Fragment","TextField","title","agent_1","agent_2","IconButton","onClick","changeOrder","size","FontAwesomeIcon","icon","faExchangeAlt","KEYFRAMES","opacity","reducedMotion","transform","ANIMATION_OPTIONS","fill","easing","duration","forwardRef","ref","overrideComponent","props","containerRef","useRef","useLayoutEffect","node","current","firstElementChild","animate","index","Array","from","document","querySelectorAll","findIndex","section","animation","delay","cancel","Component","Card","component","getCardUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardRoot","styled","Paper","overridesResolver","styles","root","overflow","React","inProps","useDefaultProps","raised","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","clsx","elevation","useInViewOptions","triggerOnce","rootMargin","CHARGES_COLOR_PLAN","FIRST_AGENT_REF","SECOND_AGENT_REF","Electrostatic","nglRef","isNglVisible","useInView","topology","referenceFrame","useContext","ProjectCtx","useState","setSelectedOrder","representations","setRepresentations","defaultRepresentations","chargesColorScheme","useMemo","charges","atomCharges","colorScale","scaleLinear","range","domain","ColormakerRegistry","addScheme","params","this","atomColor","atom","charge","hexColor","d3color","formatHex","parseInt","substring","initialFocus","nglInterface1","nglInterface2","interface_indices_1","interface_indices_2","interf","residueIndices2Ngl","rangedSelection","surfacedParameters","type","customScheme","stickedParameters","previousRepresentations","forEach","rep","firstAgentInterface","selection","reference","secondAgentInterface","find","Object","assign","sele","CardContent","horizontal","Typography","variant","InteractionSelector","previous","card","ViewerWithControls","container","representationsState","requestedFrame","height"],"sourceRoot":""}