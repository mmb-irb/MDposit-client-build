{"version":3,"file":"static/js/8217.5e71942e.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/animated-card/style.module.css?d4d9","components/animated-card/index.js","pages/accession/fluctuation/index.js","webpack://mdposit/./src/components/viewer-spawner/style.module.css?df6e","components/viewer-spawner/index.js","webpack://mdposit/./src/pages/accession/fluctuation/style.module.css?e827","utils/version/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__M9GCG\"};","import React, { useLayoutEffect, useRef, forwardRef } from 'react';\nimport { Card } from '@mui/material';\n\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nconst KEYFRAMES = { opacity: [0, 1] };\n\nif (!reducedMotion()) {\n  KEYFRAMES.transform = ['translateY(50px)', 'translateY(0)'];\n}\n\nconst ANIMATION_OPTIONS = {\n  fill: 'both',\n  easing: 'cubic-bezier(0, .99, .56, 1.1)',\n  duration: 500,\n};\n\n// Make the card appear and slide softly from down to up when the page is loaded\nconst AnimatedCard = forwardRef(({ overrideComponent, ...props }, ref) => {\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const node = containerRef.current && containerRef.current.firstElementChild;\n    if (!(node && node.animate)) return;\n\n    const index = Array.from(\n      document.querySelectorAll('main section'),\n    ).findIndex(section => node === section);\n\n    const animation = node.animate(KEYFRAMES, {\n      ...ANIMATION_OPTIONS,\n      delay: index * 150,\n    });\n\n    return () => animation.cancel();\n  }, []);\n\n  const Component = overrideComponent ? 'section' : Card;\n\n  return (\n    <div ref={containerRef} className={style.container}>\n      <Component component=\"section\" {...props} ref={ref} />\n    </div>\n  );\n});\n\nexport default AnimatedCard;\n","import React, { lazy, Suspense, useState, useContext, useMemo } from 'react';\n\nimport {\n  CardContent,\n  Typography,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n} from '@mui/material';\n\nimport Card from '../../../components/animated-card';\nimport ViewerSpawner from '../../../components/viewer-spawner';\nimport Loading from '../../../components/loading';\n\nimport { Button } from '@mui/material';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt } from '@fortawesome/free-regular-svg-icons';\n\nimport useAPI from '../../../hooks/use-api';\n\nimport { ProjectCtx } from '../../../contexts';\n\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\nimport Version from 'src/utils/version';\n\nimport style from './style.module.css';\n\nconst Graph = lazy(() =>\n  import(/* webpackChunkName: 'graph' */ '../../../components/graph'),\n);\n\nconst FluctuationAnalysis = () => {\n  // Get project data\n  const { accessionAndMdNumber, topology } = useContext(ProjectCtx);\n\n  // Send a request to the API with the url of the specific analysis\n  const { loading, payload, error } = useAPI(\n    `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/fluctuation/`,\n  );\n\n  // In the original version these values were is nanometers (nm)\n  // Thus they had to be multiplied by 10 since we want values in Ångstroms (Å)\n  // However in the version 0.1 and beyond values are in Ångstroms already\n  useMemo(() => {\n    if (!payload) return;\n    // If we have a version 0.1 or grater then do nothing\n    const version = new Version(payload.version);\n    if (version >= '0.1') return;\n    // If this is an old version then multiply all values by 10\n    const rmsf = payload.y['rmsf'];\n    rmsf.data = rmsf.data.map(v => v * 10);\n    rmsf.average = rmsf.average * 10;\n    rmsf.stddev = rmsf.stddev * 10;\n  }, [payload]);\n\n  // React hooks\n  // Set when the mouse is over the graph\n  const [hoveredAtom, setHoveredAtom] = useState(null);\n  // Set when one point in the graph (which stands for an atom) is selected\n  const [selectedAtoms, setSelectedAtoms] = useState(new Set());\n\n  // Set the mark for selected\n  const marks = useMemo(() => {\n    return Array.from(selectedAtoms).map(atom => ({\n      x: atom,\n      attr: { fill: '#c8c8c8' },\n    }));\n  }, [selectedAtoms]);\n\n  // Set some memoized elements which depend on the topology\n  const { xColors, xTooltip } = useMemo(() => {\n    if (!topology) return {};\n    // Color graph rectangle according to the equivalent atom element\n    const xColors = topology.getAtomElementColors();\n    // Set the tooltip generator for when the mouse hovers the graph\n    // Display an atom label based on the x index\n    const xTooltip = (_, xIndex) => {\n      const atomNumber = xIndex + 1;\n      const tag = 'atom ' + atomNumber;\n      const atom = topology.getAtomByIndex(xIndex);\n      const atomName = atom.name;\n      if (!atomName) return tag;\n      const residue = atom.residue;\n      const residueName = residue.name;\n      if (!residueName) return tag + ` (${atomName})`;\n      return tag + ` (${residueName} - ${atomName})`;\n    };\n    return { xColors, xTooltip };\n  }, [topology]);\n\n  // We require the topology for this analysis\n  if (!topology) return <Loading />;\n\n  // Render loading or error messages according with the API response\n  if (loading) return <Loading />;\n  else if (error) return error.toString();\n  else if (!payload) return 'Something bad happened';\n\n  const cents = num => Math.round(num * 100) / 100;\n\n  // Handle when we get the atom index after clicking in the graph\n  const handleAtomsSelection = atomIndex => {\n    setSelectedAtoms(previous => {\n      // In case the atom is no an atom index but an empty set it means the selection has been cleaned\n      if (atomIndex instanceof Set) return atomIndex;\n      const newSet = new Set(previous);\n      newSet[newSet.has(atomIndex) ? 'delete' : 'add'](atomIndex);\n      return newSet;\n    });\n  };\n\n  const handleButtonClick = () => setSelectedAtoms(new Set());\n\n  // Render\n  return (\n    <Suspense fallback={<Loading />}>\n      <Card className={style.card}>\n        <CardContent>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>name</TableCell>\n                <TableCell>mean (Å)</TableCell>\n                <TableCell>standard deviation (Å)</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              <TableRow>\n                <TableCell>{'Fluctuation'}</TableCell>\n                <TableCell>{cents(payload.y.rmsf.average)}</TableCell>\n                <TableCell>{cents(payload.y.rmsf.stddev)}</TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n      <Card className={style.card}>\n        <CardContent>\n          <Typography variant=\"h6\" />\n          <Graph\n            yData={payload.y}\n            step={1} // Step is always 1 since x values are atomic indices and we always have all atoms\n            xAxisLabel={'Atom'}\n            xColors={xColors}\n            xTooltip={xTooltip}\n            yAxisLabel={'Fluctuation (Å)'}\n            type={'dash'}\n            onHover={setHoveredAtom}\n            onSelect={handleAtomsSelection}\n            mean={true}\n            standardDeviation={true}\n            marks={marks}\n            fullPrecision={true}\n          />\n          <div className={style.right}>\n            <Button\n              variant=\"contained\"\n              disabled={!selectedAtoms.size}\n              onClick={handleButtonClick}\n            >\n              <FontAwesomeIcon icon={faTrashAlt} />\n              &nbsp;\n              <span>Clear selection</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n      <ViewerSpawner\n        // Set the new viewer or null if there is not a proper \"selected\" value\n        newViewer={selectedAtoms && selectedAtoms.size\n          ? {\n              selectedAtoms: hoveredAtom\n                ? new Set([...selectedAtoms, hoveredAtom])\n                : selectedAtoms,\n            }\n          : null\n        }\n        nailing={false}\n        // If the closed viewer is the current viewer then reset the 'selected'\n        onClose={viewer =>\n          setSelectedAtoms(previous => {\n            if (viewer.selectedAtoms === previous) return new Set();\n            else return previous;\n          })\n        }\n      />\n    </Suspense>\n  );\n};\n\nexport default FluctuationAnalysis;\n","// extracted by mini-css-extract-plugin\nexport default {\"rnd\":\"style_rnd__Txifm\",\"floating-card\":\"style_floating-card__HHpby\"};","import React, { lazy, Suspense, useRef, useState } from 'react';\n\n// Rnd is the resizable and draggable system where the ngl viewer is placed\nimport { Rnd } from 'react-rnd';\n\nimport Card from '../animated-card';\n\nimport style from './style.module.css';\n\nconst ViewerWithControls = lazy(() =>\n  import(\n    /* webpackChunkName: 'viewer-with-controls' */ '../viewer-with-controls'\n  ),\n);\n\n// Minimal ngl window height\nconst MIN_NGL_DIMENSION = 150;\n\n// Counter to get always the maximum zIndex\n// This is useful to set a new or currently dragged/resized ngl window over the others\nlet maxZ = 0;\nconst nextZ = () => {\n  maxZ += 1;\n  return maxZ;\n};\n\n// This function spawns all the NGL viewers needed\n// i.e. one viewer with the requested 'props' and all previous viewers which have been nailed\nconst ViewerSpawner = ({ newViewer, nailing = true, onNail, onClose }) => {\n  // Store here all nailed NGL viewers\n  const [nailedViewers, setNailedViewers] = useState([]);\n\n  // Set the viewers as the nailed viewers and the new viewer\n  const viewers = [...nailedViewers];\n\n  // Keep listed all arrays which have been used (i.e. ngl viewers which have been nailed or closed)\n  const usedIds = useRef([]);\n\n  if (newViewer) {\n    // Find a new suitable Id that meet 2 conditions:\n    // - There is never 2 viewers with the same id, so we avoid errors\n    // - If we pick diferent frames in the graph without nailing anything, the current viewer has always the same id\n    // (This way the current viewer does not appear in the origin position every time)\n    const getNewId = () => {\n      let id = 0;\n      while (id < 999) {\n        if (usedIds.current.indexOf(id) === -1) return id;\n        id += 1;\n      }\n      console.error('Maximum number of viewers reached');\n    };\n\n    // Set a unique id for this props based in the last nailed viewer\n    newViewer.id = getNewId();\n    newViewer.close = () => {\n      if (nailing) {\n        setNailedViewers(nailed => {\n          const newNailed = [...nailed];\n          const index = nailed.indexOf(newViewer);\n          if (index !== -1) newNailed.splice(index, 1);\n          return newNailed;\n        });\n      }\n      if (onClose) onClose(newViewer);\n      usedIds.current.push(newViewer.id);\n    };\n    // If the nailer function is passed, add the logic for the viewer to be nailed further\n    if (nailing)\n      newViewer.nail = () => {\n        setNailedViewers(nailed => [...nailed, newViewer]);\n        if (onNail) onNail(newViewer);\n        usedIds.current.push(newViewer.id);\n      };\n    // Add the current viewer to the viewers list\n    viewers.push(newViewer);\n  }\n\n  // Render a viewer for each prop. Use the 'selected' parameter as unique id\n  return viewers.map(viewer => <NGLViewerInDND key={viewer.id} {...viewer} />);\n};\n\n// This component render a small NGL viewer\n// It is called when user clicks in a point in the projections component\n// Also it is called by the generic analysis page\nconst NGLViewerInDND = props => {\n  // Set a reference for the viewer\n  // If a reference is passed among the viewer arguments then use it instead\n  const viewerRef = props.viewerRef || useRef(null);\n\n  // Set the default position and size\n  const [place, setPlace] = useState(() => {\n    // Set an extra margin\n    const MARGIN = 20;\n    // Get the screen pixel sizes and vertical scroll position\n    const { innerWidth, innerHeight, scrollY } = window;\n    // The spawned elements are parented to the 'main' element, not to the 'body'\n    // We have to take this in count, since the header adds an extra offset in vertical position\n    const offsetHeight = document.querySelector('main').offsetTop;\n    // Set a reasonable dimension for the ngl window\n    const dimension = Math.max(\n      Math.min(innerWidth / 4, innerHeight / 4),\n      MIN_NGL_DIMENSION,\n    );\n    const reasonableHeight = 1.5 * dimension;\n    const reasonableWidth = 2 * dimension;\n    return {\n      // WARNING: If you set the width as 'auto' the window stays very wide when exiting fullscreen\n      width: reasonableWidth, // Let the Rnd logic set the width automatically\n      height: reasonableHeight, // Reasonable height\n      x: 0, // Left border\n      y: innerHeight - offsetHeight - reasonableHeight - MARGIN + scrollY, // Bottom border\n    };\n  });\n\n  return (\n    // Rnd is the draggable and resizable system where the ngl viewer is placed\n    <Rnd\n      position={{ x: place.x, y: place.y }}\n      size={{ width: place.width, height: place.height }}\n      // Update the zIndex to make this window the first visible\n      style={{ zIndex: nextZ() }}\n      className={style.rnd}\n      data-rnd\n      // Limits where the window can be dragged/resized to\n      // WARNING: bounds=\"main\" is problematic since the window may appear out of bounds\n      // WARNING: Then when it is moved for the first time it jumps inside the bonds, not elegant\n      bounds=\"window\"\n      // Prevent the mouse to drag/resize the window when it is over specific elements\n      cancel=\"canvas, [data-popover], #preventDragSize, .prevent-drag\"\n      // On drag/resize starts we do not change anything, but use the hook to re-render this component\n      // The Z Index is updated and the selected window becomes the first in the z axis automatically\n      // WARNING: Drag functions are also called when you just click (e.g. clicking buttons)\n      onDragStart={() => {\n        setPlace({ ...place });\n      }}\n      onResizeStart={() => {\n        setPlace({ ...place });\n      }}\n      onDragStop={(e, d) => {\n        // Use this to reject some bugged event calls: e.g. the frames number selector\n        if (e.layerX === 0 && e.layerY === 0) return;\n        // We re-render only if the new position does not equal the old position\n        if (place.x !== d.x || place.y !== d.y)\n          setPlace({\n            ...place,\n            x: d.x,\n            y: d.y,\n          });\n      }}\n      // Re-adapt the viewer and update the position/size when the window is resized\n      onResize={() => viewerRef.current && viewerRef.current.autoResize()}\n      onResizeStop={(e, direction, ref, delta, position) => {\n        setPlace({\n          width: ref.style.width,\n          height: ref.style.height,\n          ...position,\n        });\n        // if (!viewerRef.current) return;\n        // viewerRef.current.autoResize();\n        // viewerRef.current.autoResize.flush();\n      }}\n    >\n      <Card className={style['floating-card']} elevation={4}>\n        <Suspense fallback={null}>\n          <ViewerWithControls\n            className={style['floating-card']}\n            ref={viewerRef}\n            startsPlaying={false}\n            {...props}\n          />\n        </Suspense>\n      </Card>\n    </Rnd>\n  );\n};\n\nexport default ViewerSpawner;\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"style_card__9qUkb\",\"right\":\"style_right__Y0Fdo\"};","// Set a class to handle version comparisions\nclass Version {\n    constructor (versionString) {\n        // If there is no version then consider it the 0.0.0\n        if (versionString === undefined) versionString = '0.0.0';\n        // Get the major, minor and patch versions\n        const splits = versionString.split('.');\n        this.major = splits[0] && +splits[0];\n        if (this.major > 999)\n            throw new Error('Major version is greater than 999 and this is not allowed');\n        this.minor = splits[1] && +splits[1];\n        if (this.minor > 999)\n            throw new Error('Minor version is greater than 999 and this is not allowed');\n        this.patch = splits[2] && +splits[2];\n        if (this.patch > 999)\n            throw new Error('Patch version is greater than 999 and this is not allowed');\n    }\n\n    // Get the version back in string format\n    // This has also an effect in the console-log display\n    toString () {\n        let string = this.major.toString();\n        if (this.minor === undefined) return string;\n        string += '.' + this.minor.toString();\n        if (this.patch === undefined) return string;\n        string += '.' + this.patch.toString();\n        return string;\n    }\n\n    // Check if two versions are equal\n    equals (other) {\n        // If this is a string instead of a version the parse it\n        if (typeof other === 'string') return this.equals(new Version(other));\n        // Check if versions are equal for all major, minor and patch versions\n        // If other version has not explicit patch or minor version then they are not compared\n        if (other.major !== this.major) return false;\n        if (other.minor !== undefined && other.minor !== this.minor) return false;\n        if (other.patch !== undefined && other.patch !== this.patch) return false;\n        return true;\n    }\n}\n\n// This allows version comparision in the classic JS notation\n// e.g. version1 >= version2\nVersion.prototype.valueOf = function() {\n    // Make sure the value will make version values coherent\n    // Note that the every version value is limited to 999 to make this function safe\n    return this.major * 1000000 + (this.minor || 0) * 1000 + (this.patch || 0);\n};\n\nexport default Version;"],"names":["KEYFRAMES","opacity","reducedMotion","transform","ANIMATION_OPTIONS","fill","easing","duration","forwardRef","_ref","ref","overrideComponent","props","containerRef","useRef","useLayoutEffect","node","current","firstElementChild","animate","index","Array","from","document","querySelectorAll","findIndex","section","animation","delay","cancel","Component","Card","_jsx","className","style","children","component","Graph","lazy","FluctuationAnalysis","accessionAndMdNumber","topology","useContext","ProjectCtx","loading","payload","error","useAPI","BASE_PATH_PROJECTS","useMemo","Version","version","rmsf","y","data","map","v","average","stddev","hoveredAtom","setHoveredAtom","useState","selectedAtoms","setSelectedAtoms","Set","marks","atom","x","attr","xColors","xTooltip","getAtomElementColors","_","xIndex","tag","getAtomByIndex","atomName","name","residueName","residue","Loading","toString","cents","num","Math","round","_jsxs","Suspense","fallback","card","CardContent","Table","TableHead","TableRow","TableCell","TableBody","Typography","variant","yData","step","xAxisLabel","yAxisLabel","type","onHover","onSelect","atomIndex","previous","newSet","has","mean","standardDeviation","fullPrecision","right","Button","disabled","size","onClick","handleButtonClick","FontAwesomeIcon","icon","faTrashAlt","ViewerSpawner","newViewer","nailing","onClose","viewer","ViewerWithControls","maxZ","NGLViewerInDND","viewerRef","place","setPlace","innerWidth","innerHeight","scrollY","window","offsetHeight","querySelector","offsetTop","dimension","max","min","reasonableHeight","width","height","Rnd","position","zIndex","bounds","onDragStart","onResizeStart","onDragStop","e","d","layerX","layerY","onResize","autoResize","onResizeStop","direction","delta","elevation","startsPlaying","onNail","nailedViewers","setNailedViewers","viewers","usedIds","getNewId","id","indexOf","console","close","nailed","newNailed","splice","push","nail","constructor","versionString","undefined","splits","split","this","major","Error","minor","patch","string","equals","other","prototype","valueOf"],"sourceRoot":""}