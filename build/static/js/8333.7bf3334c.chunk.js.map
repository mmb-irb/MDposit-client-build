{"version":3,"file":"static/js/8333.7bf3334c.chunk.js","mappings":"8JACA,QAA4B,yB,eCM5B,MAAMA,EAAY,CAAEC,QAAS,CAAC,EAAG,KAE5BC,EAAAA,EAAAA,OACHF,EAAUG,UAAY,CAAC,mBAAoB,kBAG7C,MAAMC,EAAoB,CACxBC,KAAM,OACNC,OAAQ,iCACRC,SAAU,KAgCZ,GA5BqBC,EAAAA,EAAAA,YAAW,CAAAC,EAAkCC,KAAS,IAA1C,kBAAEC,KAAsBC,GAAOH,EAC9D,MAAMI,GAAeC,EAAAA,EAAAA,QAAO,OAE5BC,EAAAA,EAAAA,iBAAgB,KACd,MAAMC,EAAOH,EAAaI,SAAWJ,EAAaI,QAAQC,kBAC1D,IAAMF,IAAQA,EAAKG,QAAU,OAE7B,MAAMC,EAAQC,MAAMC,KAClBC,SAASC,iBAAiB,iBAC1BC,UAAUC,GAAWV,IAASU,GAE1BC,EAAYX,EAAKG,QAAQnB,EAAW,IACrCI,EACHwB,MAAe,IAARR,IAGT,MAAO,IAAMO,EAAUE,UACtB,IAEH,MAAMC,EAAYnB,EAAoB,UAAYoB,EAAAA,EAElD,OACEC,EAAAA,EAAAA,KAAA,OAAKtB,IAAKG,EAAcoB,UAAWC,EAAgBC,UACjDH,EAAAA,EAAAA,KAACF,EAAS,CAACM,UAAU,aAAcxB,EAAOF,IAAKA,O,wEC1CrD,QAAsB,mBAAtB,EAAyD,6B,eCQzD,MAAM2B,GAAqBC,EAAAA,EAAAA,MAAK,IAC9B,wIAUF,IAAIC,EAAO,EACX,MA+DMC,EAAiB5B,IAGrB,MAAM6B,EAAY7B,EAAM6B,YAAa3B,EAAAA,EAAAA,QAAO,OAGrC4B,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAEjC,MAEM,WAAEC,EAAU,YAAEC,EAAW,QAAEC,GAAYC,OAGvCC,EAAe1B,SAAS2B,cAAc,QAAQC,UAE9CC,EAAYC,KAAKC,IACrBD,KAAKE,IAAIV,EAAa,EAAGC,EAAc,GApFnB,KAuFhBU,EAAmB,IAAMJ,EAE/B,MAAO,CAELK,MAHsB,EAAIL,EAI1BM,OAAQF,EACRG,EAAG,EACHC,EAAGd,EAAcG,EAAeO,EAlBnB,GAkB+CT,KAIhE,OAEEf,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CACFC,SAAU,CAAEH,EAAGjB,EAAMiB,EAAGC,EAAGlB,EAAMkB,GACjCG,KAAM,CAAEN,MAAOf,EAAMe,MAAOC,OAAQhB,EAAMgB,QAE1CxB,MAAO,CAAE8B,QAlGbzB,GAAQ,EACDA,IAkGHN,UAAWC,EACX,cAIA+B,OAAO,SAEPpC,OAAO,0DAIPqC,YAAaA,KACXvB,EAAS,IAAKD,KAEhByB,cAAeA,KACbxB,EAAS,IAAKD,KAEhB0B,WAAYA,CAACC,EAAGC,KAEG,IAAbD,EAAEE,QAA6B,IAAbF,EAAEG,QAEpB9B,EAAMiB,IAAMW,EAAEX,GAAKjB,EAAMkB,IAAMU,EAAEV,GACnCjB,EAAS,IACJD,EACHiB,EAAGW,EAAEX,EACLC,EAAGU,EAAEV,KAIXa,SAAUA,IAAMhC,EAAUxB,SAAWwB,EAAUxB,QAAQyD,aACvDC,aAAcA,CAACN,EAAGO,EAAWlE,EAAKmE,EAAOf,KACvCnB,EAAS,CACPc,MAAO/C,EAAIwB,MAAMuB,MACjBC,OAAQhD,EAAIwB,MAAMwB,UACfI,KAKL3B,UAEFH,EAAAA,EAAAA,KAACD,EAAAA,EAAI,CAACE,UAAWC,EAAwB4C,UAAW,EAAE3C,UACpDH,EAAAA,EAAAA,KAAC+C,EAAAA,SAAQ,CAACC,SAAU,KAAK7C,UACvBH,EAAAA,EAAAA,KAACK,EAAkB,CACjBJ,UAAWC,EACXxB,IAAK+B,EACLwC,eAAe,KACXrE,WAQhB,EApJsBH,IAAqD,IAApD,UAAEyE,EAAS,QAAEC,GAAU,EAAI,OAAEC,EAAM,QAAEC,GAAS5E,EAEnE,MAAO6E,EAAeC,IAAoB3C,EAAAA,EAAAA,UAAS,IAG7C4C,EAAU,IAAIF,GAGdG,GAAU3E,EAAAA,EAAAA,QAAO,IAEvB,GAAIoE,EAAW,CAKb,MAAMQ,EAAWA,KACf,IAAIC,EAAK,EACT,KAAOA,EAAK,KAAK,CACf,IAAqC,IAAjCF,EAAQxE,QAAQ2E,QAAQD,GAAY,OAAOA,EAC/CA,GAAM,CACR,CACAE,QAAQC,MAAM,sCAIhBZ,EAAUS,GAAKD,IACfR,EAAUa,MAAQ,KACZZ,GACFI,EAAiBS,IACf,MAAMC,EAAY,IAAID,GAChB5E,EAAQ4E,EAAOJ,QAAQV,GAE7B,OADe,IAAX9D,GAAc6E,EAAUC,OAAO9E,EAAO,GACnC6E,IAGPZ,GAASA,EAAQH,GACrBO,EAAQxE,QAAQkF,KAAKjB,EAAUS,KAG7BR,IACFD,EAAUkB,KAAO,KACfb,EAAiBS,GAAU,IAAIA,EAAQd,IACnCE,GAAQA,EAAOF,GACnBO,EAAQxE,QAAQkF,KAAKjB,EAAUS,MAGnCH,EAAQW,KAAKjB,EACf,CAGA,OAAOM,EAAQa,IAAIC,IAAUtE,EAAAA,EAAAA,KAACQ,EAAc,IAAqB8D,GAAfA,EAAOX,K,gDC7E3D,SAAgB,KAAO,oB,oOCuBvB,MAAMY,GAAQjE,EAAAA,EAAAA,MAAK,IACjB,oEAGIkE,EAAQC,GAAOpD,KAAKqD,MAAY,IAAND,GAAa,IAmM7C,EAjMaE,KAEX,MAAM,qBAAEC,EAAoB,SAAEC,EAAQ,YAAEC,IAAgBC,EAAAA,EAAAA,YAAWC,EAAAA,IAG7D,QAAEC,EAAO,QAAEC,EAAO,MAAEpB,IAAUqB,EAAAA,EAAAA,GAClC,GAAGC,EAAAA,MAAsBR,qBAI3BS,EAAAA,EAAAA,SAAQ,KACN,IAAKH,EAAS,OACd,MAAMI,EAAOJ,EAAQtD,EAAQ,KAC7B0D,EAAKC,KAAOD,EAAKC,KAAKlB,IAAImB,GAAS,GAAJA,GAC/B,MAAMC,EAAQP,EAAQtD,EAAS,MAC/B6D,EAAMF,KAAOE,EAAMF,KAAKlB,IAAImB,GAAS,GAAJA,GACjCC,EAAMC,MAAQ,MACd,MAAMC,EAAQT,EAAQtD,EAAS,MAC/B+D,EAAMJ,KAAOI,EAAMJ,KAAKlB,IAAImB,GAAS,GAAJA,GACjCG,EAAMD,MAAQ,QACd,MAAME,EAAQV,EAAQtD,EAAS,MAC/BgE,EAAML,KAAOK,EAAML,KAAKlB,IAAImB,GAAS,GAAJA,GACjCI,EAAMF,MAAQ,QACb,CAACR,IAEJ,MAAM,UACJW,EAAS,UACTC,EAAS,WACTC,EAAU,WACVC,EAAU,SACVC,EAAQ,SACRC,IACEb,EAAAA,EAAAA,SAAQ,KACV,IAAKH,GAAYJ,GAAeA,EAAYG,UAAaJ,EAAU,MAAO,CAAC,EAE3E,MAAMsB,EAAoBjB,EAAQkB,KAE5BC,EAAiBxB,EAASyB,UAG1BN,EAA+B,aAAlBnB,EAAS0B,KAC5B,IAAIT,EACAC,EACAE,EAkBAC,EAjBJ,GAAIF,IAAeK,EACjBP,EAAYK,EACZJ,EAAa,SACbE,EAAWO,GAAU,SAAWA,MAE7B,CAOHV,EAFmBjB,EAASyB,UAAYzB,EAAS4B,SAC3BvB,EAAQtD,EAAE0D,KAAKC,KAAKmB,OAE1CX,EAAa,YACbE,EAAWO,IAAWA,EAAOG,QAAQ,GAAK,KAC5C,CAGA,GAAI7B,GAAeA,EAAYI,QAAS,CACtCgB,EAAW,GACX,IAAK,IAAIU,EAAI,EAAGA,EAAI9B,EAAYI,QAAQwB,OAAQE,GAAKd,EACnDI,EAAS/B,KAAKW,EAAYI,QAAQ0B,GAEtC,CAEA,MAAO,CAAEf,UAAWM,EAAmBL,YAAWC,aAAYC,aAAYC,WAAUC,aACnF,CAAChB,EAASL,EAAUC,KAIhB+B,EAAoBC,IAAyBlG,EAAAA,EAAAA,UAAS,MAGvDmG,GAAgB1B,EAAAA,EAAAA,SAAQ,SACV2B,IAAdnB,GACuB,OAAvBgB,EADgC,KAE7BhB,EAAYgB,EAClB,CAAChB,EAAWgB,IAGTI,GAAQ5B,EAAAA,EAAAA,SAAQ,IAKb,CAJc,CACnB1D,EAAGkF,EACHK,KAAM,CAAE7I,KAAM,aAGf,CAACwI,IAIEM,GAAoBC,EAAAA,EAAAA,aAAY9C,IACpCwC,EAAsBO,GAEhB/C,EAAOgD,aAAeD,EAAkC,KAEhDA,IAEb,CAACP,IAGJ,OAAI7B,GAAYH,GAAeA,EAAYG,SAAiBjF,EAAAA,EAAAA,KAACuH,EAAAA,EAAO,IAC3DzD,EAAcA,EAAM0D,WACpB1C,GAAeA,EAAYhB,MAC3BgB,EAAYhB,MAAM0D,WACjBtC,EACDJ,IAAgBA,EAAYI,QAC5B,2CAIPuC,EAAAA,EAAAA,MAAC1E,EAAAA,SAAQ,CAACC,UAAUhD,EAAAA,EAAAA,KAACuH,EAAAA,EAAO,IAAIpH,SAAA,EAC9BH,EAAAA,EAAAA,KAACD,EAAAA,EAAI,CAACE,UAAWC,EAAAA,QAAMwH,KAAKvH,UAC1BH,EAAAA,EAAAA,KAAC2H,EAAAA,EAAW,CAAAxH,UACVsH,EAAAA,EAAAA,MAACG,EAAAA,EAAK,CAAAzH,SAAA,EACJH,EAAAA,EAAAA,KAAC6H,EAAAA,EAAS,CAAA1H,UACRsH,EAAAA,EAAAA,MAACK,EAAAA,EAAQ,CAAA3H,SAAA,EACPH,EAAAA,EAAAA,KAAC+H,EAAAA,EAAS,CAAA5H,SAAC,UACXH,EAAAA,EAAAA,KAAC+H,EAAAA,EAAS,CAAA5H,SAAC,iBACXH,EAAAA,EAAAA,KAAC+H,EAAAA,EAAS,CAAA5H,SAAC,oCAGfH,EAAAA,EAAAA,KAACgI,EAAAA,EAAS,CAAA7H,UACRsH,EAAAA,EAAAA,MAACK,EAAAA,EAAQ,CAAA3H,SAAA,EACPH,EAAAA,EAAAA,KAAC+H,EAAAA,EAAS,CAAA5H,SAAE,kBACZH,EAAAA,EAAAA,KAAC+H,EAAAA,EAAS,CAAA5H,SACPqE,EAAMU,EAAQtD,EAAE0D,KAAK2C,SACpB,KACAzD,EAAMU,EAAQtD,EAAE6D,MAAMwC,SACtB,KACAzD,EAAMU,EAAQtD,EAAE+D,MAAMsC,SACtB,KACAzD,EAAMU,EAAQtD,EAAEgE,MAAMqC,SACtB,OAEJjI,EAAAA,EAAAA,KAAC+H,EAAAA,EAAS,CAAA5H,SACPqE,EAAMU,EAAQtD,EAAE0D,KAAK4C,QACpB,KACA1D,EAAMU,EAAQtD,EAAE6D,MAAMyC,QACtB,KACA1D,EAAMU,EAAQtD,EAAE+D,MAAMuC,QACtB,KACA1D,EAAMU,EAAQtD,EAAEgE,MAAMsC,QACtB,mBAOdlI,EAAAA,EAAAA,KAACD,EAAAA,EAAI,CAACE,UAAWC,EAAAA,QAAMwH,KAAKvH,UAC1BsH,EAAAA,EAAAA,MAACE,EAAAA,EAAW,CAAAxH,SAAA,EACVH,EAAAA,EAAAA,KAACmI,EAAAA,EAAU,CAACC,QAAQ,QACpBpI,EAAAA,EAAAA,KAACuE,EAAK,CACJ8D,MAAOnD,EAAQtD,EACfwE,KAAMN,EACNC,WAAYA,EACZuC,KAAMtC,EAAa,OAAS,OAC5BE,SAAUA,EACVD,SAAUA,EACVsC,aAAc,EACdC,WAAY,cACZC,SAAU3B,EACV4B,YAAY,EACZC,MAAM,EACNC,mBAAmB,EACnB3B,MAAOA,UAIbjH,EAAAA,EAAAA,KAAC6I,EAAAA,EACC,CACA3F,UACoB,OAAlB6D,EACI,CACE+B,eAAgB/B,EAGhBO,WAAYT,GAEd,KAGNzD,OAAQ+D,EACR9D,QAAS8D,OA/EW,gD","sources":["webpack://mdposit/./src/components/animated-card/style.module.css?d4d9","components/animated-card/index.js","webpack://mdposit/./src/components/viewer-spawner/style.module.css?df6e","components/viewer-spawner/index.js","webpack://mdposit/./src/pages/accession/rgyr/style.module.css?d16a","pages/accession/rgyr/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__M9GCG\"};","import React, { useLayoutEffect, useRef, forwardRef } from 'react';\nimport { Card } from '@mui/material';\n\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nconst KEYFRAMES = { opacity: [0, 1] };\n\nif (!reducedMotion()) {\n  KEYFRAMES.transform = ['translateY(50px)', 'translateY(0)'];\n}\n\nconst ANIMATION_OPTIONS = {\n  fill: 'both',\n  easing: 'cubic-bezier(0, .99, .56, 1.1)',\n  duration: 500,\n};\n\n// Make the card appear and slide softly from down to up when the page is loaded\nconst AnimatedCard = forwardRef(({ overrideComponent, ...props }, ref) => {\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const node = containerRef.current && containerRef.current.firstElementChild;\n    if (!(node && node.animate)) return;\n\n    const index = Array.from(\n      document.querySelectorAll('main section'),\n    ).findIndex(section => node === section);\n\n    const animation = node.animate(KEYFRAMES, {\n      ...ANIMATION_OPTIONS,\n      delay: index * 150,\n    });\n\n    return () => animation.cancel();\n  }, []);\n\n  const Component = overrideComponent ? 'section' : Card;\n\n  return (\n    <div ref={containerRef} className={style.container}>\n      <Component component=\"section\" {...props} ref={ref} />\n    </div>\n  );\n});\n\nexport default AnimatedCard;\n","// extracted by mini-css-extract-plugin\nexport default {\"rnd\":\"style_rnd__Txifm\",\"floating-card\":\"style_floating-card__HHpby\"};","import React, { lazy, Suspense, useRef, useState } from 'react';\n\n// Rnd is the resizable and draggable system where the ngl viewer is placed\nimport { Rnd } from 'react-rnd';\n\nimport Card from '../animated-card';\n\nimport style from './style.module.css';\n\nconst ViewerWithControls = lazy(() =>\n  import(\n    /* webpackChunkName: 'viewer-with-controls' */ '../viewer-with-controls'\n  ),\n);\n\n// Minimal ngl window height\nconst MIN_NGL_DIMENSION = 150;\n\n// Counter to get always the maximum zIndex\n// This is useful to set a new or currently dragged/resized ngl window over the others\nlet maxZ = 0;\nconst nextZ = () => {\n  maxZ += 1;\n  return maxZ;\n};\n\n// This function spawns all the NGL viewers needed\n// i.e. one viewer with the requested 'props' and all previous viewers which have been nailed\nconst ViewerSpawner = ({ newViewer, nailing = true, onNail, onClose }) => {\n  // Store here all nailed NGL viewers\n  const [nailedViewers, setNailedViewers] = useState([]);\n\n  // Set the viewers as the nailed viewers and the new viewer\n  const viewers = [...nailedViewers];\n\n  // Keep listed all arrays which have been used (i.e. ngl viewers which have been nailed or closed)\n  const usedIds = useRef([]);\n\n  if (newViewer) {\n    // Find a new suitable Id that meet 2 conditions:\n    // - There is never 2 viewers with the same id, so we avoid errors\n    // - If we pick diferent frames in the graph without nailing anything, the current viewer has always the same id\n    // (This way the current viewer does not appear in the origin position every time)\n    const getNewId = () => {\n      let id = 0;\n      while (id < 999) {\n        if (usedIds.current.indexOf(id) === -1) return id;\n        id += 1;\n      }\n      console.error('Maximum number of viewers reached');\n    };\n\n    // Set a unique id for this props based in the last nailed viewer\n    newViewer.id = getNewId();\n    newViewer.close = () => {\n      if (nailing) {\n        setNailedViewers(nailed => {\n          const newNailed = [...nailed];\n          const index = nailed.indexOf(newViewer);\n          if (index !== -1) newNailed.splice(index, 1);\n          return newNailed;\n        });\n      }\n      if (onClose) onClose(newViewer);\n      usedIds.current.push(newViewer.id);\n    };\n    // If the nailer function is passed, add the logic for the viewer to be nailed further\n    if (nailing)\n      newViewer.nail = () => {\n        setNailedViewers(nailed => [...nailed, newViewer]);\n        if (onNail) onNail(newViewer);\n        usedIds.current.push(newViewer.id);\n      };\n    // Add the current viewer to the viewers list\n    viewers.push(newViewer);\n  }\n\n  // Render a viewer for each prop. Use the 'selected' parameter as unique id\n  return viewers.map(viewer => <NGLViewerInDND key={viewer.id} {...viewer} />);\n};\n\n// This component render a small NGL viewer\n// It is called when user clicks in a point in the projections component\n// Also it is called by the generic analysis page\nconst NGLViewerInDND = props => {\n  // Set a reference for the viewer\n  // If a reference is passed among the viewer arguments then use it instead\n  const viewerRef = props.viewerRef || useRef(null);\n\n  // Set the default position and size\n  const [place, setPlace] = useState(() => {\n    // Set an extra margin\n    const MARGIN = 20;\n    // Get the screen pixel sizes and vertical scroll position\n    const { innerWidth, innerHeight, scrollY } = window;\n    // The spawned elements are parented to the 'main' element, not to the 'body'\n    // We have to take this in count, since the header adds an extra offset in vertical position\n    const offsetHeight = document.querySelector('main').offsetTop;\n    // Set a reasonable dimension for the ngl window\n    const dimension = Math.max(\n      Math.min(innerWidth / 4, innerHeight / 4),\n      MIN_NGL_DIMENSION,\n    );\n    const reasonableHeight = 1.5 * dimension;\n    const reasonableWidth = 2 * dimension;\n    return {\n      // WARNING: If you set the width as 'auto' the window stays very wide when exiting fullscreen\n      width: reasonableWidth, // Let the Rnd logic set the width automatically\n      height: reasonableHeight, // Reasonable height\n      x: 0, // Left border\n      y: innerHeight - offsetHeight - reasonableHeight - MARGIN + scrollY, // Bottom border\n    };\n  });\n\n  return (\n    // Rnd is the draggable and resizable system where the ngl viewer is placed\n    <Rnd\n      position={{ x: place.x, y: place.y }}\n      size={{ width: place.width, height: place.height }}\n      // Update the zIndex to make this window the first visible\n      style={{ zIndex: nextZ() }}\n      className={style.rnd}\n      data-rnd\n      // Limits where the window can be dragged/resized to\n      // WARNING: bounds=\"main\" is problematic since the window may appear out of bounds\n      // WARNING: Then when it is moved for the first time it jumps inside the bonds, not elegant\n      bounds=\"window\"\n      // Prevent the mouse to drag/resize the window when it is over specific elements\n      cancel=\"canvas, [data-popover], #preventDragSize, .prevent-drag\"\n      // On drag/resize starts we do not change anything, but use the hook to re-render this component\n      // The Z Index is updated and the selected window becomes the first in the z axis automatically\n      // WARNING: Drag functions are also called when you just click (e.g. clicking buttons)\n      onDragStart={() => {\n        setPlace({ ...place });\n      }}\n      onResizeStart={() => {\n        setPlace({ ...place });\n      }}\n      onDragStop={(e, d) => {\n        // Use this to reject some bugged event calls: e.g. the frames number selector\n        if (e.layerX === 0 && e.layerY === 0) return;\n        // We re-render only if the new position does not equal the old position\n        if (place.x !== d.x || place.y !== d.y)\n          setPlace({\n            ...place,\n            x: d.x,\n            y: d.y,\n          });\n      }}\n      // Re-adapt the viewer and update the position/size when the window is resized\n      onResize={() => viewerRef.current && viewerRef.current.autoResize()}\n      onResizeStop={(e, direction, ref, delta, position) => {\n        setPlace({\n          width: ref.style.width,\n          height: ref.style.height,\n          ...position,\n        });\n        // if (!viewerRef.current) return;\n        // viewerRef.current.autoResize();\n        // viewerRef.current.autoResize.flush();\n      }}\n    >\n      <Card className={style['floating-card']} elevation={4}>\n        <Suspense fallback={null}>\n          <ViewerWithControls\n            className={style['floating-card']}\n            ref={viewerRef}\n            startsPlaying={false}\n            {...props}\n          />\n        </Suspense>\n      </Card>\n    </Rnd>\n  );\n};\n\nexport default ViewerSpawner;\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"style_card__KGoPv\"};","import React, { lazy, Suspense, useState, useContext, useMemo, useCallback } from 'react';\n\nimport {\n  CardContent,\n  Typography,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n} from '@mui/material';\n\nimport Card from '../../../components/animated-card';\nimport ViewerSpawner from '../../../components/viewer-spawner';\nimport Loading from '../../../components/loading';\n\nimport useAPI from '../../../hooks/use-api';\n\nimport { ProjectCtx } from '../../../contexts';\n\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\n\nimport style from './style.module.css';\n\nconst Graph = lazy(() =>\n  import(/* webpackChunkName: 'graph' */ '../../../components/graph'),\n);\n\nconst cents = num => Math.round(num * 100) / 100;\n\nconst Rgyr = () => {\n  // Get the current project metadata\n  const { accessionAndMdNumber, metadata, populations } = useContext(ProjectCtx);\n\n  // Send a request to the API with the url of the rgyr analysis\n  const { loading, payload, error } = useAPI(\n    `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/rgyr/`,\n  );\n\n  // Rgyr analysis comes in nanometers (nm) and we want it in Ångstroms (Å) so we must multuply by 10 all values\n  useMemo(() => {\n    if (!payload) return;\n    const rgyr = payload.y['rgyr'];\n    rgyr.data = rgyr.data.map(v => v * 10);\n    const rgyrx = payload.y['rgyrx'];\n    rgyrx.data = rgyrx.data.map(v => v * 10);\n    rgyrx.color = 'red';\n    const rgyry = payload.y['rgyry'];\n    rgyry.data = rgyry.data.map(v => v * 10);\n    rgyry.color = 'green';\n    const rgyrz = payload.y['rgyrz'];\n    rgyrz.data = rgyrz.data.map(v => v * 10);\n    rgyrz.color = 'blue';\n  }, [payload]);\n\n  const {\n    frameStep,\n    xAxisStep,\n    xAxisLabel,\n    isEnsemble,\n    xTooltip,\n    xWeights,\n  } = useMemo(() => {\n    if (!payload || (populations && populations.loading) || !metadata) return {};\n    // Get the frames step\n    const analysisFrameStep = payload.step;\n    // Get the total time length\n    const framesTimeStep = metadata.FRAMESTEP;\n    // If this is an ensemble or we are missing the time length then we use frames as the x axis\n    // If this is a trajectory and we have the time length then we use time as the x axis\n    const isEnsemble = metadata.TYPE === 'ensemble';\n    let xAxisStep;\n    let xAxisLabel;\n    let xTooltip;\n    if (isEnsemble || !framesTimeStep) {\n      xAxisStep = analysisFrameStep;\n      xAxisLabel = 'Frames';\n      xTooltip = xValue => 'frame ' + xValue;\n    }\n    else {\n      // DANI: Esto es lo correcto, pero dado que hay analysis con el step mal de momento lo tapamos\n      //const analysisTimeStep = analysisFrameStep * framesTimeStep\n      //xAxisStep = analysisTimeStep;\n      // DANI: De esta forma siempre cuarda, pero si realmente el step era correcto entonces el eje estará mal\n      const timeLength = metadata.FRAMESTEP * metadata.mdFrames;\n      const analysisSteps = payload.y.rgyr.data.length;\n      xAxisStep = timeLength / analysisSteps;\n      xAxisLabel = 'Time (ns)';\n      xTooltip = xValue => +xValue.toFixed(2) + ' ns';\n    }\n    // Get the weigths for each data value corresponding frame\n    let xWeights;\n    if (populations && populations.payload) {\n      xWeights = [];\n      for (let i = 0; i < populations.payload.length; i += xAxisStep) {\n        xWeights.push(populations.payload[i]);\n      }\n    }\n\n    return { frameStep: analysisFrameStep, xAxisStep, xAxisLabel, isEnsemble, xTooltip, xWeights };\n  }, [payload, metadata, populations]);\n\n  // React hooks\n  // Set the index selected in the graph\n  const [selectedGraphIndex, setSelectedGraphIndex] = useState(null);\n\n  // Set the selected frame which corresponds to the selected graph index\n  const selectedFrame = useMemo(() => {\n    if (frameStep === undefined) return null;\n    if (selectedGraphIndex === null) return null;\n    return frameStep * selectedGraphIndex;\n  }, [frameStep, selectedGraphIndex]);\n\n  // Set the mark for the selected frame\n  const marks = useMemo(() => {\n    const selectedMark = {\n      x: selectedGraphIndex,\n      attr: { fill: '#c8c8c8' },\n    };\n    return [selectedMark];\n  }, [selectedGraphIndex]);  \n\n  // Handle when the viewer is closed or nailed\n  // If we close/nail the current active viewer then reset the selected graph index\n  const handleCloseViewer = useCallback(viewer => {\n    setSelectedGraphIndex(currentSelectedGraphIndex => {\n      // If closed viewer is the current active viewer then set the selected index as null\n      if (viewer.graphIndex === currentSelectedGraphIndex) return null;\n      // Otherwise leave the current selected index as is\n      else return currentSelectedGraphIndex;\n    })\n  }, [setSelectedGraphIndex]);\n\n  // Render loading or error messages according with the API response\n  if (loading || (populations && populations.loading)) return <Loading />;\n  else if (error) return error.toString();\n  else if (populations && populations.error)\n    return populations.error.toString();\n  else if (!payload) return 'Something bad happened with the analysis data';\n  else if (populations && !populations.payload)\n    return 'Something bad happened with populations';\n\n  // Render\n  return (\n    <Suspense fallback={<Loading />}>\n      <Card className={style.card}>\n        <CardContent>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>name</TableCell>\n                <TableCell>mean (Å)</TableCell>\n                <TableCell>standard deviation (Å)</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              <TableRow>\n                <TableCell>{'Rgyr (x,y,z)'}</TableCell>\n                <TableCell>\n                  {cents(payload.y.rgyr.average) +\n                    ' (' +\n                    cents(payload.y.rgyrx.average) +\n                    ', ' +\n                    cents(payload.y.rgyry.average) +\n                    ', ' +\n                    cents(payload.y.rgyrz.average) +\n                    ')'}\n                </TableCell>\n                <TableCell>\n                  {cents(payload.y.rgyr.stddev) +\n                    ' (' +\n                    cents(payload.y.rgyrx.stddev) +\n                    ', ' +\n                    cents(payload.y.rgyry.stddev) +\n                    ', ' +\n                    cents(payload.y.rgyrz.stddev) +\n                    ')'}\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n      <Card className={style.card}>\n        <CardContent>\n          <Typography variant=\"h6\" />\n          <Graph\n            yData={payload.y}\n            step={xAxisStep}\n            xAxisLabel={xAxisLabel}\n            type={isEnsemble ? 'dots' : 'line'}\n            xWeights={xWeights}\n            xTooltip={xTooltip}\n            xScaleFactor={1}\n            yAxisLabel={'Rgyr (Å)'}\n            onSelect={setSelectedGraphIndex}\n            selfLegend={true}\n            mean={true}\n            standardDeviation={true}\n            marks={marks}\n          />\n        </CardContent>\n      </Card>\n      <ViewerSpawner\n        // Set the new viewer or null if there is not a proper \"selectedFrame\" value\n        newViewer={\n          selectedFrame !== null\n            ? {\n                requestedFrame: selectedFrame,\n                // This is used only as a tag for the onNail and onClose functions below\n                // It has no effect on the viewer\n                graphIndex: selectedGraphIndex\n              }\n            : null\n        }\n        // If the nailed/closed viewer is the current viewer then reset the 'selectedFrame'\n        onNail={handleCloseViewer}\n        onClose={handleCloseViewer}\n      />\n    </Suspense>\n  );\n};\n\nexport default Rgyr;\n"],"names":["KEYFRAMES","opacity","reducedMotion","transform","ANIMATION_OPTIONS","fill","easing","duration","forwardRef","_ref","ref","overrideComponent","props","containerRef","useRef","useLayoutEffect","node","current","firstElementChild","animate","index","Array","from","document","querySelectorAll","findIndex","section","animation","delay","cancel","Component","Card","_jsx","className","style","children","component","ViewerWithControls","lazy","maxZ","NGLViewerInDND","viewerRef","place","setPlace","useState","innerWidth","innerHeight","scrollY","window","offsetHeight","querySelector","offsetTop","dimension","Math","max","min","reasonableHeight","width","height","x","y","Rnd","position","size","zIndex","bounds","onDragStart","onResizeStart","onDragStop","e","d","layerX","layerY","onResize","autoResize","onResizeStop","direction","delta","elevation","Suspense","fallback","startsPlaying","newViewer","nailing","onNail","onClose","nailedViewers","setNailedViewers","viewers","usedIds","getNewId","id","indexOf","console","error","close","nailed","newNailed","splice","push","nail","map","viewer","Graph","cents","num","round","Rgyr","accessionAndMdNumber","metadata","populations","useContext","ProjectCtx","loading","payload","useAPI","BASE_PATH_PROJECTS","useMemo","rgyr","data","v","rgyrx","color","rgyry","rgyrz","frameStep","xAxisStep","xAxisLabel","isEnsemble","xTooltip","xWeights","analysisFrameStep","step","framesTimeStep","FRAMESTEP","TYPE","xValue","mdFrames","length","toFixed","i","selectedGraphIndex","setSelectedGraphIndex","selectedFrame","undefined","marks","attr","handleCloseViewer","useCallback","currentSelectedGraphIndex","graphIndex","Loading","toString","_jsxs","card","CardContent","Table","TableHead","TableRow","TableCell","TableBody","average","stddev","Typography","variant","yData","type","xScaleFactor","yAxisLabel","onSelect","selfLegend","mean","standardDeviation","ViewerSpawner","requestedFrame"],"sourceRoot":""}