{"version":3,"file":"static/js/9072.fab049b4.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/Divider/dividerClasses.js","../node_modules/@mui/material/List/ListContext.js","../node_modules/@mui/material/ListItemIcon/listItemIconClasses.js","../node_modules/@mui/material/ListItemText/listItemTextClasses.js","../node_modules/@mui/material/MenuItem/menuItemClasses.js","../node_modules/@mui/material/MenuItem/MenuItem.js","../node_modules/@mui/material/List/listClasses.js","../node_modules/@mui/material/List/List.js","../node_modules/@mui/material/utils/getScrollbarSize.js","../node_modules/@mui/material/MenuList/MenuList.js","../node_modules/@mui/material/Typography/typographyClasses.js","../node_modules/@mui/material/Typography/Typography.js","../node_modules/@mui/utils/esm/getScrollbarSize/getScrollbarSize.js","../node_modules/inline-style-parser/index.js","../node_modules/is-buffer/index.js","../node_modules/style-to-object/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/remark-parse/lib/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/unist-util-position/lib/index.js","../node_modules/mdast-util-definitions/lib/index.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/unist-util-generated/lib/index.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/remark-rehype/lib/index.js","../node_modules/react-markdown/lib/rehype-filter.js","../node_modules/hast-util-whitespace/index.js","../node_modules/style-to-object/index.mjs","../node_modules/react-markdown/lib/uri-transformer.js","../node_modules/react-markdown/lib/ast-to-react.js","../node_modules/react-markdown/lib/react-markdown.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getDividerUtilityClass(slot) {\n  return generateUtilityClass('MuiDivider', slot);\n}\nconst dividerClasses = generateUtilityClasses('MuiDivider', ['root', 'absolute', 'fullWidth', 'inset', 'middle', 'flexItem', 'light', 'vertical', 'withChildren', 'withChildrenVertical', 'textAlignRight', 'textAlignLeft', 'wrapper', 'wrapperVertical']);\nexport default dividerClasses;","'use client';\n\nimport * as React from 'react';\n\n/**\n * @ignore - internal component.\n */\nconst ListContext = /*#__PURE__*/React.createContext({});\nif (process.env.NODE_ENV !== 'production') {\n  ListContext.displayName = 'ListContext';\n}\nexport default ListContext;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getListItemIconUtilityClass(slot) {\n  return generateUtilityClass('MuiListItemIcon', slot);\n}\nconst listItemIconClasses = generateUtilityClasses('MuiListItemIcon', ['root', 'alignItemsFlexStart']);\nexport default listItemIconClasses;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getListItemTextUtilityClass(slot) {\n  return generateUtilityClass('MuiListItemText', slot);\n}\nconst listItemTextClasses = generateUtilityClasses('MuiListItemText', ['root', 'multiline', 'dense', 'inset', 'primary', 'secondary']);\nexport default listItemTextClasses;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getMenuItemUtilityClass(slot) {\n  return generateUtilityClass('MuiMenuItem', slot);\n}\nconst menuItemClasses = generateUtilityClasses('MuiMenuItem', ['root', 'focusVisible', 'dense', 'disabled', 'divider', 'gutters', 'selected']);\nexport default menuItemClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"autoFocus\", \"component\", \"dense\", \"divider\", \"disableGutters\", \"focusVisibleClassName\", \"role\", \"tabIndex\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport ListContext from '../List/ListContext';\nimport ButtonBase from '../ButtonBase';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport useForkRef from '../utils/useForkRef';\nimport { dividerClasses } from '../Divider';\nimport { listItemIconClasses } from '../ListItemIcon';\nimport { listItemTextClasses } from '../ListItemText';\nimport menuItemClasses, { getMenuItemUtilityClass } from './menuItemClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const overridesResolver = (props, styles) => {\n  const {\n    ownerState\n  } = props;\n  return [styles.root, ownerState.dense && styles.dense, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    disabled,\n    dense,\n    divider,\n    disableGutters,\n    selected,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', dense && 'dense', disabled && 'disabled', !disableGutters && 'gutters', divider && 'divider', selected && 'selected']\n  };\n  const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\nconst MenuItemRoot = styled(ButtonBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiMenuItem',\n  slot: 'Root',\n  overridesResolver\n})(({\n  theme,\n  ownerState\n}) => _extends({}, theme.typography.body1, {\n  display: 'flex',\n  justifyContent: 'flex-start',\n  alignItems: 'center',\n  position: 'relative',\n  textDecoration: 'none',\n  minHeight: 48,\n  paddingTop: 6,\n  paddingBottom: 6,\n  boxSizing: 'border-box',\n  whiteSpace: 'nowrap'\n}, !ownerState.disableGutters && {\n  paddingLeft: 16,\n  paddingRight: 16\n}, ownerState.divider && {\n  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,\n  backgroundClip: 'padding-box'\n}, {\n  '&:hover': {\n    textDecoration: 'none',\n    backgroundColor: (theme.vars || theme).palette.action.hover,\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  },\n  [`&.${menuItemClasses.selected}`]: {\n    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n    [`&.${menuItemClasses.focusVisible}`]: {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n    }\n  },\n  [`&.${menuItemClasses.selected}:hover`]: {\n    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)\n    }\n  },\n  [`&.${menuItemClasses.focusVisible}`]: {\n    backgroundColor: (theme.vars || theme).palette.action.focus\n  },\n  [`&.${menuItemClasses.disabled}`]: {\n    opacity: (theme.vars || theme).palette.action.disabledOpacity\n  },\n  [`& + .${dividerClasses.root}`]: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  },\n  [`& + .${dividerClasses.inset}`]: {\n    marginLeft: 52\n  },\n  [`& .${listItemTextClasses.root}`]: {\n    marginTop: 0,\n    marginBottom: 0\n  },\n  [`& .${listItemTextClasses.inset}`]: {\n    paddingLeft: 36\n  },\n  [`& .${listItemIconClasses.root}`]: {\n    minWidth: 36\n  }\n}, !ownerState.dense && {\n  [theme.breakpoints.up('sm')]: {\n    minHeight: 'auto'\n  }\n}, ownerState.dense && _extends({\n  minHeight: 32,\n  // https://m2.material.io/components/menus#specs > Dense\n  paddingTop: 4,\n  paddingBottom: 4\n}, theme.typography.body2, {\n  [`& .${listItemIconClasses.root} svg`]: {\n    fontSize: '1.25rem'\n  }\n})));\nconst MenuItem = /*#__PURE__*/React.forwardRef(function MenuItem(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiMenuItem'\n  });\n  const {\n      autoFocus = false,\n      component = 'li',\n      dense = false,\n      divider = false,\n      disableGutters = false,\n      focusVisibleClassName,\n      role = 'menuitem',\n      tabIndex: tabIndexProp,\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const context = React.useContext(ListContext);\n  const childContext = React.useMemo(() => ({\n    dense: dense || context.dense || false,\n    disableGutters\n  }), [context.dense, dense, disableGutters]);\n  const menuItemRef = React.useRef(null);\n  useEnhancedEffect(() => {\n    if (autoFocus) {\n      if (menuItemRef.current) {\n        menuItemRef.current.focus();\n      } else if (process.env.NODE_ENV !== 'production') {\n        console.error('MUI: Unable to set focus to a MenuItem whose component has not been rendered.');\n      }\n    }\n  }, [autoFocus]);\n  const ownerState = _extends({}, props, {\n    dense: childContext.dense,\n    divider,\n    disableGutters\n  });\n  const classes = useUtilityClasses(props);\n  const handleRef = useForkRef(menuItemRef, ref);\n  let tabIndex;\n  if (!props.disabled) {\n    tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;\n  }\n  return /*#__PURE__*/_jsx(ListContext.Provider, {\n    value: childContext,\n    children: /*#__PURE__*/_jsx(MenuItemRoot, _extends({\n      ref: handleRef,\n      role: role,\n      tabIndex: tabIndex,\n      component: component,\n      focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),\n      className: clsx(classes.root, className)\n    }, other, {\n      ownerState: ownerState,\n      classes: classes\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuItem.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the list item is focused during the first mount.\n   * Focus will also be triggered if the value changes from false to true.\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input is used.\n   * The prop defaults to the value inherited from the parent Menu component.\n   * @default false\n   */\n  dense: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * If `true`, a 1px light border is added to the bottom of the menu item.\n   * @default false\n   */\n  divider: PropTypes.bool,\n  /**\n   * This prop can help identify which element has keyboard focus.\n   * The class name will be applied when the element gains the focus through keyboard interaction.\n   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\n   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\n   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components\n   * if needed.\n   */\n  focusVisibleClassName: PropTypes.string,\n  /**\n   * @ignore\n   */\n  role: PropTypes /* @typescript-to-proptypes-ignore */.string,\n  /**\n   * If `true`, the component is selected.\n   * @default false\n   */\n  selected: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * @default 0\n   */\n  tabIndex: PropTypes.number\n} : void 0;\nexport default MenuItem;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getListUtilityClass(slot) {\n  return generateUtilityClass('MuiList', slot);\n}\nconst listClasses = generateUtilityClasses('MuiList', ['root', 'padding', 'dense', 'subheader']);\nexport default listClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"component\", \"dense\", \"disablePadding\", \"subheader\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport ListContext from './ListContext';\nimport { getListUtilityClass } from './listClasses';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePadding,\n    dense,\n    subheader\n  } = ownerState;\n  const slots = {\n    root: ['root', !disablePadding && 'padding', dense && 'dense', subheader && 'subheader']\n  };\n  return composeClasses(slots, getListUtilityClass, classes);\n};\nconst ListRoot = styled('ul', {\n  name: 'MuiList',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, !ownerState.disablePadding && styles.padding, ownerState.dense && styles.dense, ownerState.subheader && styles.subheader];\n  }\n})(({\n  ownerState\n}) => _extends({\n  listStyle: 'none',\n  margin: 0,\n  padding: 0,\n  position: 'relative'\n}, !ownerState.disablePadding && {\n  paddingTop: 8,\n  paddingBottom: 8\n}, ownerState.subheader && {\n  paddingTop: 0\n}));\nconst List = /*#__PURE__*/React.forwardRef(function List(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiList'\n  });\n  const {\n      children,\n      className,\n      component = 'ul',\n      dense = false,\n      disablePadding = false,\n      subheader\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const context = React.useMemo(() => ({\n    dense\n  }), [dense]);\n  const ownerState = _extends({}, props, {\n    component,\n    dense,\n    disablePadding\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(ListContext.Provider, {\n    value: context,\n    children: /*#__PURE__*/_jsxs(ListRoot, _extends({\n      as: component,\n      className: clsx(classes.root, className),\n      ref: ref,\n      ownerState: ownerState\n    }, other, {\n      children: [subheader, children]\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? List.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input is used for\n   * the list and list items.\n   * The prop is available to descendant components as the `dense` context.\n   * @default false\n   */\n  dense: PropTypes.bool,\n  /**\n   * If `true`, vertical padding is removed from the list.\n   * @default false\n   */\n  disablePadding: PropTypes.bool,\n  /**\n   * The content of the subheader, normally `ListSubheader`.\n   */\n  subheader: PropTypes.node,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default List;","import getScrollbarSize from '@mui/utils/getScrollbarSize';\nexport default getScrollbarSize;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"actions\", \"autoFocus\", \"autoFocusItem\", \"children\", \"className\", \"disabledItemsFocusable\", \"disableListWrap\", \"onKeyDown\", \"variant\"];\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport ownerDocument from '../utils/ownerDocument';\nimport List from '../List';\nimport getScrollbarSize from '../utils/getScrollbarSize';\nimport useForkRef from '../utils/useForkRef';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction nextItem(list, item, disableListWrap) {\n  if (list === item) {\n    return list.firstChild;\n  }\n  if (item && item.nextElementSibling) {\n    return item.nextElementSibling;\n  }\n  return disableListWrap ? null : list.firstChild;\n}\nfunction previousItem(list, item, disableListWrap) {\n  if (list === item) {\n    return disableListWrap ? list.firstChild : list.lastChild;\n  }\n  if (item && item.previousElementSibling) {\n    return item.previousElementSibling;\n  }\n  return disableListWrap ? null : list.lastChild;\n}\nfunction textCriteriaMatches(nextFocus, textCriteria) {\n  if (textCriteria === undefined) {\n    return true;\n  }\n  let text = nextFocus.innerText;\n  if (text === undefined) {\n    // jsdom doesn't support innerText\n    text = nextFocus.textContent;\n  }\n  text = text.trim().toLowerCase();\n  if (text.length === 0) {\n    return false;\n  }\n  if (textCriteria.repeating) {\n    return text[0] === textCriteria.keys[0];\n  }\n  return text.indexOf(textCriteria.keys.join('')) === 0;\n}\nfunction moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {\n  let wrappedOnce = false;\n  let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);\n  while (nextFocus) {\n    // Prevent infinite loop.\n    if (nextFocus === list.firstChild) {\n      if (wrappedOnce) {\n        return false;\n      }\n      wrappedOnce = true;\n    }\n\n    // Same logic as useAutocomplete.js\n    const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';\n    if (!nextFocus.hasAttribute('tabindex') || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {\n      // Move to the next element.\n      nextFocus = traversalFunction(list, nextFocus, disableListWrap);\n    } else {\n      nextFocus.focus();\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * A permanently displayed menu following https://www.w3.org/WAI/ARIA/apg/patterns/menu-button/.\n * It's exposed to help customization of the [`Menu`](/material-ui/api/menu/) component if you\n * use it separately you need to move focus into the component manually. Once\n * the focus is placed inside the component it is fully keyboard accessible.\n */\nconst MenuList = /*#__PURE__*/React.forwardRef(function MenuList(props, ref) {\n  const {\n      // private\n      // eslint-disable-next-line react/prop-types\n      actions,\n      autoFocus = false,\n      autoFocusItem = false,\n      children,\n      className,\n      disabledItemsFocusable = false,\n      disableListWrap = false,\n      onKeyDown,\n      variant = 'selectedMenu'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const listRef = React.useRef(null);\n  const textCriteriaRef = React.useRef({\n    keys: [],\n    repeating: true,\n    previousKeyMatched: true,\n    lastTime: null\n  });\n  useEnhancedEffect(() => {\n    if (autoFocus) {\n      listRef.current.focus();\n    }\n  }, [autoFocus]);\n  React.useImperativeHandle(actions, () => ({\n    adjustStyleForScrollbar: (containerElement, {\n      direction\n    }) => {\n      // Let's ignore that piece of logic if users are already overriding the width\n      // of the menu.\n      const noExplicitWidth = !listRef.current.style.width;\n      if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {\n        const scrollbarSize = `${getScrollbarSize(ownerDocument(containerElement))}px`;\n        listRef.current.style[direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;\n        listRef.current.style.width = `calc(100% + ${scrollbarSize})`;\n      }\n      return listRef.current;\n    }\n  }), []);\n  const handleKeyDown = event => {\n    const list = listRef.current;\n    const key = event.key;\n    /**\n     * @type {Element} - will always be defined since we are in a keydown handler\n     * attached to an element. A keydown event is either dispatched to the activeElement\n     * or document.body or document.documentElement. Only the first case will\n     * trigger this specific handler.\n     */\n    const currentFocus = ownerDocument(list).activeElement;\n    if (key === 'ArrowDown') {\n      // Prevent scroll of the page\n      event.preventDefault();\n      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);\n    } else if (key === 'ArrowUp') {\n      event.preventDefault();\n      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);\n    } else if (key === 'Home') {\n      event.preventDefault();\n      moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);\n    } else if (key === 'End') {\n      event.preventDefault();\n      moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);\n    } else if (key.length === 1) {\n      const criteria = textCriteriaRef.current;\n      const lowerKey = key.toLowerCase();\n      const currTime = performance.now();\n      if (criteria.keys.length > 0) {\n        // Reset\n        if (currTime - criteria.lastTime > 500) {\n          criteria.keys = [];\n          criteria.repeating = true;\n          criteria.previousKeyMatched = true;\n        } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {\n          criteria.repeating = false;\n        }\n      }\n      criteria.lastTime = currTime;\n      criteria.keys.push(lowerKey);\n      const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);\n      if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {\n        event.preventDefault();\n      } else {\n        criteria.previousKeyMatched = false;\n      }\n    }\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n  const handleRef = useForkRef(listRef, ref);\n\n  /**\n   * the index of the item should receive focus\n   * in a `variant=\"selectedMenu\"` it's the first `selected` item\n   * otherwise it's the very first item.\n   */\n  let activeItemIndex = -1;\n  // since we inject focus related props into children we have to do a lookahead\n  // to check if there is a `selected` item. We're looking for the last `selected`\n  // item and use the first valid item as a fallback\n  React.Children.forEach(children, (child, index) => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      if (activeItemIndex === index) {\n        activeItemIndex += 1;\n        if (activeItemIndex >= children.length) {\n          // there are no focusable items within the list.\n          activeItemIndex = -1;\n        }\n      }\n      return;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"MUI: The Menu component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n    if (!child.props.disabled) {\n      if (variant === 'selectedMenu' && child.props.selected) {\n        activeItemIndex = index;\n      } else if (activeItemIndex === -1) {\n        activeItemIndex = index;\n      }\n    }\n    if (activeItemIndex === index && (child.props.disabled || child.props.muiSkipListHighlight || child.type.muiSkipListHighlight)) {\n      activeItemIndex += 1;\n      if (activeItemIndex >= children.length) {\n        // there are no focusable items within the list.\n        activeItemIndex = -1;\n      }\n    }\n  });\n  const items = React.Children.map(children, (child, index) => {\n    if (index === activeItemIndex) {\n      const newChildProps = {};\n      if (autoFocusItem) {\n        newChildProps.autoFocus = true;\n      }\n      if (child.props.tabIndex === undefined && variant === 'selectedMenu') {\n        newChildProps.tabIndex = 0;\n      }\n      return /*#__PURE__*/React.cloneElement(child, newChildProps);\n    }\n    return child;\n  });\n  return /*#__PURE__*/_jsx(List, _extends({\n    role: \"menu\",\n    ref: handleRef,\n    className: className,\n    onKeyDown: handleKeyDown,\n    tabIndex: autoFocus ? 0 : -1\n  }, other, {\n    children: items\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuList.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, will focus the `[role=\"menu\"]` container and move into tab order.\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * If `true`, will focus the first menuitem if `variant=\"menu\"` or selected item\n   * if `variant=\"selectedMenu\"`.\n   * @default false\n   */\n  autoFocusItem: PropTypes.bool,\n  /**\n   * MenuList contents, normally `MenuItem`s.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true`, the menu items will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus\n   * and the vertical alignment relative to the anchor element.\n   * @default 'selectedMenu'\n   */\n  variant: PropTypes.oneOf(['menu', 'selectedMenu'])\n} : void 0;\nexport default MenuList;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTypographyUtilityClass(slot) {\n  return generateUtilityClass('MuiTypography', slot);\n}\nconst typographyClasses = generateUtilityClasses('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);\nexport default typographyClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"align\", \"className\", \"component\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { extendSxProp } from '@mui/system/styleFunctionSx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport capitalize from '../utils/capitalize';\nimport { getTypographyUtilityClass } from './typographyClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    align,\n    gutterBottom,\n    noWrap,\n    paragraph,\n    variant,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, ownerState.align !== 'inherit' && `align${capitalize(align)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']\n  };\n  return composeClasses(slots, getTypographyUtilityClass, classes);\n};\nexport const TypographyRoot = styled('span', {\n  name: 'MuiTypography',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  margin: 0\n}, ownerState.variant === 'inherit' && {\n  // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.\n  font: 'inherit'\n}, ownerState.variant !== 'inherit' && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {\n  textAlign: ownerState.align\n}, ownerState.noWrap && {\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap'\n}, ownerState.gutterBottom && {\n  marginBottom: '0.35em'\n}, ownerState.paragraph && {\n  marginBottom: 16\n}));\nconst defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p',\n  inherit: 'p'\n};\n\n// TODO v6: deprecate these color values in v5.x and remove the transformation in v6\nconst colorTransformations = {\n  primary: 'primary.main',\n  textPrimary: 'text.primary',\n  secondary: 'secondary.main',\n  textSecondary: 'text.secondary',\n  error: 'error.main'\n};\nconst transformDeprecatedColors = color => {\n  return colorTransformations[color] || color;\n};\nconst Typography = /*#__PURE__*/React.forwardRef(function Typography(inProps, ref) {\n  const themeProps = useDefaultProps({\n    props: inProps,\n    name: 'MuiTypography'\n  });\n  const color = transformDeprecatedColors(themeProps.color);\n  const props = extendSxProp(_extends({}, themeProps, {\n    color\n  }));\n  const {\n      align = 'inherit',\n      className,\n      component,\n      gutterBottom = false,\n      noWrap = false,\n      paragraph = false,\n      variant = 'body1',\n      variantMapping = defaultVariantMapping\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    align,\n    color,\n    className,\n    component,\n    gutterBottom,\n    noWrap,\n    paragraph,\n    variant,\n    variantMapping\n  });\n  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(TypographyRoot, _extends({\n    as: Component,\n    ref: ref,\n    ownerState: ownerState,\n    className: clsx(classes.root, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Set the text-align on the component.\n   * @default 'inherit'\n   */\n  align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the text will have a bottom margin.\n   * @default false\n   */\n  gutterBottom: PropTypes.bool,\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   * @default false\n   */\n  noWrap: PropTypes.bool,\n  /**\n   * If `true`, the element will be a paragraph element.\n   * @default false\n   */\n  paragraph: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Applies the theme typography styles.\n   * @default 'body1'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string]),\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   * @default {\n   *   h1: 'h1',\n   *   h2: 'h2',\n   *   h3: 'h3',\n   *   h4: 'h4',\n   *   h5: 'h5',\n   *   h6: 'h6',\n   *   subtitle1: 'h6',\n   *   subtitle2: 'h6',\n   *   body1: 'p',\n   *   body2: 'p',\n   *   inherit: 'p',\n   * }\n   */\n  variantMapping: PropTypes /* @typescript-to-proptypes-ignore */.object\n} : void 0;\nexport default Typography;","// A change of the browser zoom change the scrollbar size.\n// Credit https://github.com/twbs/bootstrap/blob/488fd8afc535ca3a6ad4dc581f5e89217b6a36ac/js/src/util/scrollbar.js#L14-L18\nexport default function getScrollbarSize(doc) {\n  // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes\n  const documentWidth = doc.documentElement.clientWidth;\n  return Math.abs(window.innerWidth - documentWidth);\n}","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = index\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n"],"names":["getDividerUtilityClass","slot","generateUtilityClass","generateUtilityClasses","React","getListItemIconUtilityClass","getListItemTextUtilityClass","getMenuItemUtilityClass","_excluded","MenuItemRoot","styled","ButtonBase","shouldForwardProp","prop","rootShouldForwardProp","name","overridesResolver","props","styles","ownerState","root","dense","divider","disableGutters","gutters","_ref","theme","_extends","typography","body1","display","justifyContent","alignItems","position","textDecoration","minHeight","paddingTop","paddingBottom","boxSizing","whiteSpace","paddingLeft","paddingRight","borderBottom","concat","vars","palette","backgroundClip","backgroundColor","action","hover","menuItemClasses","selected","primary","mainChannel","selectedOpacity","alpha","main","focusVisible","focusOpacity","hoverOpacity","focus","disabled","opacity","disabledOpacity","dividerClasses","marginTop","spacing","marginBottom","inset","marginLeft","listItemTextClasses","listItemIconClasses","minWidth","breakpoints","up","body2","fontSize","inProps","ref","useDefaultProps","autoFocus","component","focusVisibleClassName","role","tabIndex","tabIndexProp","className","other","_objectWithoutPropertiesLoose","context","ListContext","childContext","menuItemRef","useEnhancedEffect","current","classes","slots","composedClasses","composeClasses","useUtilityClasses","handleRef","useForkRef","undefined","_jsx","Provider","value","children","clsx","getListUtilityClass","ListRoot","disablePadding","padding","subheader","listStyle","margin","_jsxs","as","nextItem","list","item","disableListWrap","firstChild","nextElementSibling","previousItem","lastChild","previousElementSibling","textCriteriaMatches","nextFocus","textCriteria","text","innerText","textContent","trim","toLowerCase","length","repeating","keys","indexOf","join","moveFocus","currentFocus","disabledItemsFocusable","traversalFunction","wrappedOnce","nextFocusDisabled","getAttribute","hasAttribute","actions","autoFocusItem","onKeyDown","variant","listRef","textCriteriaRef","previousKeyMatched","lastTime","adjustStyleForScrollbar","containerElement","direction","noExplicitWidth","style","width","clientHeight","scrollbarSize","getScrollbarSize","ownerDocument","activeItemIndex","forEach","child","index","muiSkipListHighlight","type","items","map","newChildProps","List","event","key","activeElement","preventDefault","criteria","lowerKey","currTime","performance","now","push","keepFocusOnCurrent","getTypographyUtilityClass","TypographyRoot","align","capitalize","noWrap","gutterBottom","paragraph","font","textAlign","overflow","textOverflow","defaultVariantMapping","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","inherit","colorTransformations","textPrimary","secondary","textSecondary","error","themeProps","color","transformDeprecatedColors","extendSxProp","variantMapping","Component","doc","documentWidth","documentElement","clientWidth","Math","abs","window","innerWidth","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","str","replace","module","exports","options","TypeError","lineno","column","updatePosition","lines","match","i","lastIndexOf","start","line","node","Position","whitespace","this","end","source","prototype","content","errorsList","msg","err","Error","reason","filename","silent","re","m","exec","slice","comments","rules","c","comment","pos","charAt","declaration","val","ret","property","decl","decls","declarations","obj","constructor","isBuffer","parse","require","StyleToObject","iterator","output","hasIterator","len","stringifyPosition","point","VFileMessage","place","origin","parts","super","message","stack","fatal","ruleId","file","actual","expected","url","note","path","basename","ext","assertPath","seenNonSlash","charCodeAt","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","code","joined","_len","arguments","segments","Array","_key","absolute","allowAboveRoot","lastSlashIndex","result","lastSegmentLength","lastSlash","dots","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","bufferLike","buffer","data","messages","history","stored","includes","assertNonEmpty","assertPart","stem","toString","encoding","info","fail","part","unified","base","transformers","trough","attachers","frozen","namespace","freezeIndex","processor","assertUnfrozen","own","call","Parser","Compiler","freeze","attacher","transformer","use","Number","POSITIVE_INFINITY","settings","addPlugin","isArray","addList","addPreset","Object","assign","add","plugin","plugins","entry","isPlainObj","extend","vfile","assertParser","newable","String","assertCompiler","assertNode","compile","run","callback","Promise","executor","resolve","reject","done","tree","runSync","complete","assertDone","bail","process","processSync","destination","hasOwnProperty","asyncName","Boolean","looksLikeAVFile","emptyOptions","one","includeImageAlt","includeHtml","alt","all","values","splice","remove","parameters","chunkStart","from","unshift","syntaxExtension","extension","hook","left","right","constructs","existing","before","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","test","fromCharCode","factorySpace","effects","ok","max","limit","size","enter","prefix","consume","exit","tokenize","contentStart","attempt","parser","contentInitial","lineStart","previous","token","contentType","next","document","self","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","disable","null","blankLine","after","partial","subtokenize","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","adjust","breaks","_gfmTasklistFirstContentOfListItem","pop","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","toUpperCase","definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","characterReference","numeric","decodeNamedCharacterReference","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","resolveText","extensions","combineExtensions","defaultConstructs","search","decodeNumericCharacterReference","parseInt","characterEscapeOrReference","decode","$0","$1","$2","hex","fromMarkdown","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","lang","title","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","endPosition","lastIndex","ceil","preprocess","d","combined","remarkParse","normalizeUri","skip","encodeURIComponent","convert","castFactory","typeFactory","tests","checks","any","anyFactory","propsFactory","_len2","_key2","CONTINUE","EXIT","visitParents","visitor","reverse","is","step","factory","parents","defineProperty","visit","subresult","grandparents","toResult","parent","pointStart","pointEnd","clean","footnoteReference","id","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","properties","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","handlers","blockquote","wrap","break","delete","footnote","footnoteById","no","dangerous","imageReference","src","inlineCode","linkReference","results","loose","listLoose","table","rows","firstRow","tableContent","body","tableCell","tableRow","siblings","cellIndex","cells","cell","alignValue","trimLines","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","cache","definitions","augment","hName","hProperties","hChildren","ctx","generated","to","defaultUnknownHandler","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","bridge","mutate","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","unwrapDisallowed","thing","protocols","uriTransformer","uri","first","colon","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","transform","transformLinkUri","parentSchema","schema","space","svg","addProperty","listDepth","components","basic","ReactIs","linkTarget","target","inline","level","transformImageUri","input","getInputElement","getElementsBeforeCount","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","find","commaSeparated","commas","spaces","v","k","styleReplacer","parseStyle","hastToReact","attribute","changelog","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehype","remarkRehypeOptions","rehypePlugins","hastNode","propTypes","PropTypes"],"sourceRoot":""}