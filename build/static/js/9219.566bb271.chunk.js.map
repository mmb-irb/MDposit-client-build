{"version":3,"file":"static/js/9219.566bb271.chunk.js","mappings":"yJACA,QAA4B,yB,eCM5B,MAAMA,EAAY,CAAEC,QAAS,CAAC,EAAG,KAE5BC,EAAAA,EAAAA,OACHF,EAAUG,UAAY,CAAC,mBAAoB,kBAG7C,MAAMC,EAAoB,CACxBC,KAAM,OACNC,OAAQ,iCACRC,SAAU,KAgCZ,GA5BqBC,EAAAA,EAAAA,YAAW,CAAAC,EAAkCC,KAAS,IAA1C,kBAAEC,KAAsBC,GAAOH,EAC9D,MAAMI,GAAeC,EAAAA,EAAAA,QAAO,OAE5BC,EAAAA,EAAAA,iBAAgB,KACd,MAAMC,EAAOH,EAAaI,SAAWJ,EAAaI,QAAQC,kBAC1D,IAAMF,IAAQA,EAAKG,QAAU,OAE7B,MAAMC,EAAQC,MAAMC,KAClBC,SAASC,iBAAiB,iBAC1BC,UAAUC,GAAWV,IAASU,GAE1BC,EAAYX,EAAKG,QAAQnB,EAAW,IACrCI,EACHwB,MAAe,IAARR,IAGT,MAAO,IAAMO,EAAUE,UACtB,IAEH,MAAMC,EAAYnB,EAAoB,UAAYoB,EAAAA,EAElD,OACEC,EAAAA,EAAAA,KAAA,OAAKtB,IAAKG,EAAcoB,UAAWC,EAAgBC,UACjDH,EAAAA,EAAAA,KAACF,EAAS,CAACM,UAAU,aAAcxB,EAAOF,IAAKA,O,wEC1CrD,QAAsB,mBAAtB,EAAyD,6B,eCQzD,MAAM2B,GAAqBC,EAAAA,EAAAA,MAAK,IAC9B,wIAUF,IAAIC,EAAO,EACX,MA+DMC,EAAiB5B,IAGrB,MAAM6B,EAAY7B,EAAM6B,YAAa3B,EAAAA,EAAAA,QAAO,OAGrC4B,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAEjC,MAEM,WAAEC,EAAU,YAAEC,EAAW,QAAEC,GAAYC,OAGvCC,EAAe1B,SAAS2B,cAAc,QAAQC,UAE9CC,EAAYC,KAAKC,IACrBD,KAAKE,IAAIV,EAAa,EAAGC,EAAc,GApFnB,KAuFhBU,EAAmB,IAAMJ,EAE/B,MAAO,CAELK,MAHsB,EAAIL,EAI1BM,OAAQF,EACRG,EAAG,EACHC,EAAGd,EAAcG,EAAeO,EAlBnB,GAkB+CT,KAIhE,OAEEf,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CACFC,SAAU,CAAEH,EAAGjB,EAAMiB,EAAGC,EAAGlB,EAAMkB,GACjCG,KAAM,CAAEN,MAAOf,EAAMe,MAAOC,OAAQhB,EAAMgB,QAE1CxB,MAAO,CAAE8B,QAlGbzB,GAAQ,EACDA,IAkGHN,UAAWC,EACX,cAIA+B,OAAO,SAEPpC,OAAO,0DAIPqC,YAAaA,KACXvB,EAAS,IAAKD,KAEhByB,cAAeA,KACbxB,EAAS,IAAKD,KAEhB0B,WAAYA,CAACC,EAAGC,KAEG,IAAbD,EAAEE,QAA6B,IAAbF,EAAEG,QAEpB9B,EAAMiB,IAAMW,EAAEX,GAAKjB,EAAMkB,IAAMU,EAAEV,GACnCjB,EAAS,IACJD,EACHiB,EAAGW,EAAEX,EACLC,EAAGU,EAAEV,KAIXa,SAAUA,IAAMhC,EAAUxB,SAAWwB,EAAUxB,QAAQyD,aACvDC,aAAcA,CAACN,EAAGO,EAAWlE,EAAKmE,EAAOf,KACvCnB,EAAS,CACPc,MAAO/C,EAAIwB,MAAMuB,MACjBC,OAAQhD,EAAIwB,MAAMwB,UACfI,KAKL3B,UAEFH,EAAAA,EAAAA,KAACD,EAAAA,EAAI,CAACE,UAAWC,EAAwB4C,UAAW,EAAE3C,UACpDH,EAAAA,EAAAA,KAAC+C,EAAAA,SAAQ,CAACC,SAAU,KAAK7C,UACvBH,EAAAA,EAAAA,KAACK,EAAkB,CACjBJ,UAAWC,EACXxB,IAAK+B,EACLwC,eAAe,KACXrE,WAQhB,EApJsBH,IAAqD,IAApD,UAAEyE,EAAS,QAAEC,GAAU,EAAI,OAAEC,EAAM,QAAEC,GAAS5E,EAEnE,MAAO6E,EAAeC,IAAoB3C,EAAAA,EAAAA,UAAS,IAG7C4C,EAAU,IAAIF,GAGdG,GAAU3E,EAAAA,EAAAA,QAAO,IAEvB,GAAIoE,EAAW,CAKb,MAAMQ,EAAWA,KACf,IAAIC,EAAK,EACT,KAAOA,EAAK,KAAK,CACf,IAAqC,IAAjCF,EAAQxE,QAAQ2E,QAAQD,GAAY,OAAOA,EAC/CA,GAAM,CACR,CACAE,QAAQC,MAAM,sCAIhBZ,EAAUS,GAAKD,IACfR,EAAUa,MAAQ,KACZZ,GACFI,EAAiBS,IACf,MAAMC,EAAY,IAAID,GAChB5E,EAAQ4E,EAAOJ,QAAQV,GAE7B,OADe,IAAX9D,GAAc6E,EAAUC,OAAO9E,EAAO,GACnC6E,IAGPZ,GAASA,EAAQH,GACrBO,EAAQxE,QAAQkF,KAAKjB,EAAUS,KAG7BR,IACFD,EAAUkB,KAAO,KACfb,EAAiBS,GAAU,IAAIA,EAAQd,IACnCE,GAAQA,EAAOF,GACnBO,EAAQxE,QAAQkF,KAAKjB,EAAUS,MAGnCH,EAAQW,KAAKjB,EACf,CAGA,OAAOM,EAAQa,IAAIC,IAAUtE,EAAAA,EAAAA,KAACQ,EAAc,IAAqB8D,GAAfA,EAAOX,K,0RCnD3D,MAAMY,GAAQjE,EAAAA,EAAAA,MAAK,IACjB,oEAGIkE,EAAS,CAAC,QAAS,MAAO,SAAU,SAAU,QAAS,OAAQ,UA4RrE,EA1RmBC,KACjB,MAAM,UAAEC,EAAS,qBAAEC,EAAoB,SAAEC,EAAQ,mBAAEC,IAAuBC,EAAAA,EAAAA,YAAWC,EAAAA,IAE/E,QACJC,EAAO,QACPC,EAAO,MACPnB,IACEoB,EAAAA,EAAAA,GAAO,GAAGC,EAAAA,MAAsBR,4BAG7BS,EAAeC,IAAoBzE,EAAAA,EAAAA,UAAS,OAC5C0E,EAASC,IAAc3E,EAAAA,EAAAA,UAAS,CAAC,IACjC4E,EAAWC,IAAgB7E,EAAAA,EAAAA,UAAS,OACpC8E,EAAiBC,IAAsB/E,EAAAA,EAAAA,UAAS,OAChDgF,EAAOC,IAAYjF,EAAAA,EAAAA,WAAS,IAC5BkF,EAAYC,IAAiBnF,EAAAA,EAAAA,WAAS,GAGvCoF,GAAaC,EAAAA,EAAAA,SAAQ,IACpBhB,EACEiB,OAAOC,KAAKlB,EAAQmB,MADN,GAEpB,CAACnB,KAGJoB,EAAAA,EAAAA,WAAU,KACJL,EAAWM,SAAWlB,GACxBC,EAAiBW,EAAW,KAE7B,CAACA,IAGJ,MAAMO,GAAaN,EAAAA,EAAAA,SAAQ,IACpBD,EAAWM,QAAWzB,EACpBmB,EAAWQ,OAAO,CAACC,EAAKC,KAC7B,MAAMhI,EAAMmG,EAAmB8B,KAAKjI,GAAOA,EAAIkI,WAAaF,GAC5D,IAAIG,EAAMC,EAAWC,EAWrB,OAVIrI,EAAIsI,UAAUC,UAChBJ,EAAOnI,EAAIsI,UAAUH,KACrBC,EAAYpI,EAAIsI,UAAUC,SAASC,MAAM,MAAMC,KAAK,CAACC,EAAGC,IAAMD,EAAEd,OAASe,EAAEf,QAAQ,GACnFS,EAAWrI,EAAIsI,UAAUM,UAChB5I,EAAI6I,YAAYN,WACzBJ,EAAOC,EAAYpI,EAAI6I,YAAYN,SAASN,KAAKa,GAAsB,iBAAdA,EAAKC,MAAyBZ,KACvFE,EAAWrI,EAAI6I,YAAYG,aAE7B7D,QAAQ8D,IAAI,QAASjB,EAAO,OAAQG,EAAM,YAAaC,EAAW,WAAYC,GAC9EN,EAAIC,GAAS,CAAEG,OAAMC,YAAWC,YACzBN,GACN,CAAC,GAfkD,CAAC,EAgBtD,CAACT,EAAYnB,IAGV+C,GAAiB3B,EAAAA,EAAAA,SAAQ,IACxBD,EAAWM,QAAW1B,EACpBoB,EAAWQ,OAAO,CAACC,EAAKC,KAC7B,MAAMmB,EAAajD,EAASkD,2BAA2BpB,GACjDqB,EAAiB,MAAMnD,EAASoD,oBAAoBH,GAAYI,KAAK,SAE3E,OADAxB,EAAIC,GAASqB,EACNtB,GACN,CAAC,GANwC,CAAC,EAO5C,CAACT,EAAYpB,IAGVsD,GAAkBjC,EAAAA,EAAAA,SAAQ,KAC9B,IAAKhB,IAAYG,EAAe,MAAO,CAAC,EACxC,MAAM+C,EAAc,CAAC,EACfC,EAAiB,CAAC,EAClBC,EAASpD,EAAQmB,KAAKhB,GAgB5B,OAfAc,OAAOoC,QAAQD,GAAQE,QAAQ9J,IAA2B,IAAzB+J,EAASC,GAAUhK,EAClD,MAAMiK,EAAW,QAAQC,SAASH,GAAW,IACvCI,EAAU,CACdxC,KAAMqC,EAAUI,IAAIxE,IAAIyE,GAAKlD,GAASkD,EAAIA,GAC1CC,WAAYN,EAAUO,IACtBC,OAAQR,EAAUS,MAClBC,MAAO3E,EAAOmE,SAASH,GAAWhE,EAAO8B,UAEnC8C,KAAMC,EAASC,KAAMC,IAAWC,EAAAA,EAAAA,GAAeZ,EAAQxC,MAC/DwC,EAAQS,QAAUA,EAClBT,EAAQW,OAASA,EACjBpB,EAAYO,GAAYE,EACxBR,EAAeM,IAAY,IAE7BnD,EAAW6C,GACJD,GACN,CAAClD,EAASG,EAAeQ,EAAOhB,IAG7B6E,GAASxD,EAAAA,EAAAA,SAAQ,IAChBiC,GAAoB5C,EAClBjE,KAAKC,OACP4E,OAAOoC,QAAQJ,GACfwB,OAAOC,IAAA,IAAEC,GAAID,EAAA,OAAKrE,EAAQsE,KAC1BvF,IAAIwF,IAAA,IAAEC,EAAG1D,GAAKyD,EAAA,OAAKxI,KAAKC,OAAQ8E,EAAK2C,YAAc,OAJf,EAMxC,CAACb,EAAiB5C,IAGfyE,GAAe9D,EAAAA,EAAAA,SAAQ,KAC3B,GAAKM,EAAWnB,IAAmBwC,EAAexC,GAClD,MAAO,CACL,KAAQmB,EAAWnB,GAAe4E,QAClC,KAAQ,WACR,MAAS,SACT,QAAW,GACX,UAAapC,EAAexC,GAC5B,UAAaA,EACb,MAAQ,IAET,CAACA,EAAeR,KAGnByB,EAAAA,EAAAA,WAAU,KACR,IAAKf,IAAY4C,EAAiB,OAClC,MAAM+B,EAAO,CAACF,GACI,OAAdvE,GAEFU,OAAOC,KAAK+B,GAAiBK,QAAQ,CAACG,EAAUtJ,KAC9C,MAAM8K,EAAWhC,EAAgBQ,GAAUO,OAAOzD,GAC7C0E,GACLD,EAAK9F,KAAK,CACR,KAAQ,GAAG+F,IACX,KAAQ,aACR,MAAS1F,EAAOpF,EAAQoF,EAAO8B,QAC/B,QAAW,GACX,UAAa,GAAGsB,EAAexC,WAAuB8E,IACtD,MAAS,CAAEC,OAAQ,IACnB,KAAQ7E,EAAQoD,GAChB,UAAa,GAAGtD,KAAiBhG,QAKvCuG,EAAmBsE,IAClB,CAACF,EAAc3E,EAAeI,EAAWF,EAAS4C,IAGrD,MAAMkC,GAAQnE,EAAAA,EAAAA,SAAQ,IACC,OAAdT,EAAqB,CAAC,CAC3B7D,EAAG6D,EACH6E,KAAM,CAAEhM,KAAM,aACX,GACJ,CAACmH,IAEJ,GAAIR,EAAS,OAAOhF,EAAAA,EAAAA,KAACsK,EAAAA,EAAO,IAC5B,GAAIxG,EAAO,OAAOA,EAAMyG,WACxB,IAAKtF,EAAS,MAAO,mDAErB,MAAMuF,EAAQC,GAAOpJ,KAAKqJ,MAAY,IAAND,GAAa,IAE7C,OACEE,EAAAA,EAAAA,MAAC5H,EAAAA,SAAQ,CAACC,UAAUhD,EAAAA,EAAAA,KAACsK,EAAAA,EAAO,IAAInK,SAAA,EAC9BH,EAAAA,EAAAA,KAACD,EAAAA,EAAI,CAACE,UAAWC,EAAAA,QAAM0K,KAAKzK,UAC1BwK,EAAAA,EAAAA,MAACE,EAAAA,EAAW,CAAA1K,SAAA,EACVH,EAAAA,EAAAA,KAAC8K,EAAAA,EAAI,CACHC,MAAO3F,EACP4F,QAAQ,YACRC,eAAe,UACfC,UAAU,UACVC,SAAUA,CAACC,EAAOL,KAChB1F,EAAiB0F,IAEnB9K,UAAWC,EAAAA,QAAM,mBAAmBC,SAEnC6F,EAAW3B,IAAKqC,GACfH,EAAWG,KAAU1G,EAAAA,EAAAA,KAACqL,EAAAA,EAAG,CAEvBN,MAAOrE,EACP4E,OACEX,EAAAA,EAAAA,MAAA,OAAKzK,MAAO,CAAEoF,QAAS,OAAQiG,cAAe,SAAUC,WAAY,UAAWrL,SAAA,EAC7EH,EAAAA,EAAAA,KAAA,QAAMyL,MAAO,GAAGlF,EAAWG,GAAOK,WAAW5G,SAC1CoG,EAAWG,GAAOG,OAEpBN,EAAWG,GAAOI,YAAcP,EAAWG,GAAOG,OACjD7G,EAAAA,EAAAA,KAAC0L,EAAAA,EAAU,CAACV,QAAQ,UAAU7B,MAAM,iBAAiBsC,MAAO,GAAGlF,EAAWG,GAAOK,WAAW5G,SACzFoG,EAAWG,GAAOI,gBATtBJ,OAkBXiE,EAAAA,EAAAA,MAACgB,EAAAA,EAAK,CAACC,QAAQ,WAAUzL,SAAA,EACvBH,EAAAA,EAAAA,KAAC6L,EAAAA,EAAS,CAAA1L,UACRwK,EAAAA,EAAAA,MAACmB,EAAAA,EAAQ,CAAA3L,SAAA,EACPH,EAAAA,EAAAA,KAAC+L,EAAAA,EAAS,CAAA5L,SAAC,WACXH,EAAAA,EAAAA,KAAC+L,EAAAA,EAAS,CAAA5L,SAAC,0BACXH,EAAAA,EAAAA,KAAC+L,EAAAA,EAAS,CAAA5L,SAAC,6BAGfH,EAAAA,EAAAA,KAACgM,EAAAA,EAAS,CAAA7L,SACP+F,OAAOoC,QAAQJ,GAAiB7D,IAAI,CAAA4H,EAAcC,KAAC,IAAbtC,EAAKxD,GAAK6F,EAAA,OAC/CtB,EAAAA,EAAAA,MAACmB,EAAAA,EAAQ,CAAA3L,SAAA,EACPH,EAAAA,EAAAA,KAAC+L,EAAAA,EAAS,CAAA5L,UACRH,EAAAA,EAAAA,KAACmM,EAAAA,EAAgB,CACfhB,SAAUA,IACR5F,EAAW6G,IAAQ,IACdA,EACH,CAACxC,IAAOwC,EAASxC,MAGrByC,SACErM,EAAAA,EAAAA,KAACsM,EAAAA,EAAQ,CACPC,QAASjH,EAAQsE,GACjB1J,MAAO,CAAEiJ,MAAO/C,EAAK+C,SAGzBmC,MAAO1B,OAGX5J,EAAAA,EAAAA,KAAC+L,EAAAA,EAAS,CAAA5L,SAAEqK,EAAMpE,EAAKiD,YACvBrJ,EAAAA,EAAAA,KAAC+L,EAAAA,EAAS,CAAA5L,SAAEqK,EAAMpE,EAAKmD,YAnBVK,gBA2BzBe,EAAAA,EAAAA,MAAC5K,EAAAA,EAAI,CAACE,UAAWC,EAAAA,QAAM0K,KAAKzK,SAAA,EAC1BH,EAAAA,EAAAA,KAACmM,EAAAA,EAAgB,CACfE,SACErM,EAAAA,EAAAA,KAACsM,EAAAA,EAAQ,CACPC,QAASzG,EACTqF,SAAW9I,GAAM0D,EAAc1D,EAAEmK,OAAOD,WAG5CjB,MAAM,6BAERtL,EAAAA,EAAAA,KAACmM,EAAAA,EAAgB,CACfE,SACErM,EAAAA,EAAAA,KAACsM,EAAAA,EAAQ,CACPC,QAAS3G,EACTuF,SAAW9I,GAAMwD,EAASxD,EAAEmK,OAAOD,WAGvCjB,MAAM,0BAERtL,EAAAA,EAAAA,KAAC6K,EAAAA,EAAW,CAAA1K,UACVH,EAAAA,EAAAA,KAACuE,EAAK,CACJkI,MAAOvE,EACPwE,WAAW,kBACXC,WAAW,kBACXlF,KAAK,OACLmF,YAAY,EACZC,YAAavH,EACbwH,eAAe,EACfC,SAAUA,CAACjD,EAAGkD,IAAW,YAAYA,EAAS,IAC9CC,SAAUxH,EACV2E,MAAOA,EACPrB,WAAYjD,EACZoH,SAAUpH,EAAa2D,EAAS,UAItCzJ,EAAAA,EAAAA,KAACmN,EAAAA,EAAa,CACZjK,UACuB,kBAAdsC,EACH,CACAd,UAAWA,EACX0I,WAAY5H,EACZ6H,qBAAsB,CAAC3H,EAAiBC,IAExC,KAENvC,OAAQkB,GACNmB,EAAa2G,GACP9H,EAAO8I,aAAehB,EAAiB,KAC/BA,GAGhB/I,QAASiB,GACPmB,EAAa2G,GACP9H,EAAO8I,aAAehB,EAAiB,KAC/BA,Q,2CC/SjB,MAAMkB,EAAUlH,IACrB,IAAKA,EAAM,OAGX,OAFYA,EAAKI,OAAO,CAAC+G,EAAIC,IAAOD,EAAKC,EAAI,GACnCpH,EAAKE,QAKJkD,EAAiBpD,IAC5B,IAAKA,EAAM,OACX,MAAMqH,EAAMrH,EAAKI,OAAO,CAAC+G,EAAIC,IAAOD,EAAKC,EAAI,GACvCE,EAAItH,EAAKE,OACT8C,EAAOqE,EAAMC,EACbpE,EAAOjI,KAAKsM,KAChBvH,EAAK/B,IAAI1C,GAAKN,KAAKuM,IAAIjM,EAAIyH,EAAM,IAAI5C,OAAO,CAACY,EAAGC,IAAMD,EAAIC,GAAKqG,GAEjE,MAAO,CAAEtE,OAAME,Q,0ICXjB,SAAeuE,EAAAA,EAAAA,IAA4B7N,EAAAA,EAAAA,KAAK,OAAQ,CACtDsC,EAAG,+FACD,wBCFJ,GAAeuL,EAAAA,EAAAA,IAA4B7N,EAAAA,EAAAA,KAAK,OAAQ,CACtDsC,EAAG,wIACD,YCFJ,GAAeuL,EAAAA,EAAAA,IAA4B7N,EAAAA,EAAAA,KAAK,OAAQ,CACtDsC,EAAG,kGACD,yB,qECTG,SAASwL,EAAwBC,GACtC,OAAOC,EAAAA,EAAAA,IAAqB,cAAeD,EAC7C,CACA,MACA,GADwBE,EAAAA,EAAAA,GAAuB,cAAe,CAAC,OAAQ,UAAW,WAAY,gBAAiB,eAAgB,iBAAkB,YAAa,eCDxJC,EAAY,CAAC,cAAe,QAAS,OAAQ,gBAAiB,oBAAqB,aAAc,OAAQ,aA6BzGC,GAAeC,EAAAA,EAAAA,IAAOC,EAAAA,EAAY,CACtCC,kBAAmBC,IAAQC,EAAAA,EAAAA,GAAsBD,IAAkB,YAATA,EAC1D1H,KAAM,cACNkH,KAAM,OACNU,kBAAmBA,CAAC7P,EAAO8P,KACzB,MAAM,WACJC,GACE/P,EACJ,MAAO,CAAC8P,EAAOE,KAAMD,EAAWE,eAAiBH,EAAOG,cAAeH,EAAO,QAAOI,EAAAA,EAAAA,GAAWH,EAAW5M,SAA+B,YAArB4M,EAAWxF,OAAuBuF,EAAO,SAAQI,EAAAA,EAAAA,GAAWH,EAAWxF,aAR3KiF,CAUlB3P,IAAA,IAAC,MACFsQ,EAAK,WACLJ,GACDlQ,EAAA,OAAKuQ,EAAAA,EAAAA,GAAS,CACb7F,OAAQ4F,EAAME,MAAQF,GAAOG,QAAQC,KAAKC,YACxCT,EAAWU,eAAiB,CAC9B,UAAW,CACTC,gBAAiBP,EAAME,KAAO,QAA6B,YAArBN,EAAWxF,MAAsB4F,EAAME,KAAKC,QAAQK,OAAOC,cAAgBT,EAAME,KAAKC,QAAQP,EAAWxF,OAAOsG,iBAAiBV,EAAME,KAAKC,QAAQK,OAAOG,iBAAkBC,EAAAA,EAAAA,IAA2B,YAArBhB,EAAWxF,MAAsB4F,EAAMG,QAAQK,OAAOK,OAASb,EAAMG,QAAQP,EAAWxF,OAAO0G,KAAMd,EAAMG,QAAQK,OAAOG,cAEnV,uBAAwB,CACtBJ,gBAAiB,iBAGC,YAArBX,EAAWxF,OAAuB,CACnC,CAAC,KAAK2G,EAAgBvD,cAAcuD,EAAgBjB,iBAAkB,CACpE1F,OAAQ4F,EAAME,MAAQF,GAAOG,QAAQP,EAAWxF,OAAO0G,MAEzD,CAAC,KAAKC,EAAgBC,YAAa,CACjC5G,OAAQ4F,EAAME,MAAQF,GAAOG,QAAQK,OAAOQ,cAG1CC,GAAkChQ,EAAAA,EAAAA,KAAKiQ,EAAc,CAAC,GACtDC,GAA2BlQ,EAAAA,EAAAA,KAAKmQ,EAA0B,CAAC,GAC3DC,GAAwCpQ,EAAAA,EAAAA,KAAKqQ,EAA2B,CAAC,GAiJ/E,EAhJ8BC,EAAAA,WAAiB,SAAkBC,EAAS7R,GACxE,IAAI8R,EAAsBC,EAC1B,MAAM7R,GAAQ8R,EAAAA,EAAAA,GAAgB,CAC5B9R,MAAO2R,EACP1J,KAAM,iBAEF,YACF8J,EAAcX,EAAkB,MAChC7G,EAAQ,UACRyH,KAAMC,EAAWX,EAAW,cAC5BrB,GAAgB,EAChBiC,kBAAmBC,EAAwBX,EAAwB,WACnEY,EAAU,KACVjP,EAAO,SAAQ,UACf9B,GACErB,EACJqS,GAAQC,EAAAA,EAAAA,GAA8BtS,EAAOsP,GACzC0C,EAAO/B,EAAgBkC,EAAwBF,EAC/CC,EAAoBjC,EAAgBkC,EAAwBJ,EAC5DhC,GAAaK,EAAAA,EAAAA,GAAS,CAAC,EAAGpQ,EAAO,CACrCuK,QACA0F,gBACA9M,SAEIoP,EAvEkBxC,KACxB,MAAM,QACJwC,EAAO,cACPtC,EAAa,MACb1F,EAAK,KACLpH,GACE4M,EACEyC,EAAQ,CACZxC,KAAM,CAAC,OAAQC,GAAiB,gBAAiB,SAAQC,EAAAA,EAAAA,GAAW3F,KAAU,QAAO2F,EAAAA,EAAAA,GAAW/M,OAE5FsP,GAAkBC,EAAAA,EAAAA,GAAeF,EAAOtD,EAAyBqD,GACvE,OAAOnC,EAAAA,EAAAA,GAAS,CAAC,EAAGmC,EAASE,IA4DbE,CAAkB5C,GAClC,OAAoB3O,EAAAA,EAAAA,KAAKmO,GAAca,EAAAA,EAAAA,GAAS,CAC9CvH,KAAM,WACNuJ,YAAYhC,EAAAA,EAAAA,GAAS,CACnB,qBAAsBH,GACrBmC,GACHJ,KAAmBN,EAAAA,aAAmBM,EAAM,CAC1CY,SAA0D,OAA/ChB,EAAuBI,EAAKhS,MAAM4S,UAAoBhB,EAAuBzO,IAE1F4O,YAA0BL,EAAAA,aAAmBQ,EAAmB,CAC9DU,SAAwE,OAA7Df,EAAwBK,EAAkBlS,MAAM4S,UAAoBf,EAAwB1O,IAEzG4M,WAAYA,EACZjQ,IAAKA,EACLuB,WAAWwR,EAAAA,EAAAA,GAAKN,EAAQvC,KAAM3O,IAC7BgR,EAAO,CACRE,QAASA,IAEb,E,gDC5GA,SAAgB,KAAO,oBAAoB,kBAAkB,+B","sources":["webpack://mdposit/./src/components/animated-card/style.module.css?d4d9","components/animated-card/index.js","webpack://mdposit/./src/components/viewer-spawner/style.module.css?df6e","components/viewer-spawner/index.js","pages/accession/lipid-order/lipid-order.js","utils/statistics/index.js","../node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@mui/material/internal/svg-icons/CheckBox.js","../node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@mui/material/Checkbox/checkboxClasses.js","../node_modules/@mui/material/Checkbox/Checkbox.js","webpack://mdposit/./src/pages/accession/lipid-order/style.module.css?abb6"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__M9GCG\"};","import React, { useLayoutEffect, useRef, forwardRef } from 'react';\nimport { Card } from '@mui/material';\n\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nconst KEYFRAMES = { opacity: [0, 1] };\n\nif (!reducedMotion()) {\n  KEYFRAMES.transform = ['translateY(50px)', 'translateY(0)'];\n}\n\nconst ANIMATION_OPTIONS = {\n  fill: 'both',\n  easing: 'cubic-bezier(0, .99, .56, 1.1)',\n  duration: 500,\n};\n\n// Make the card appear and slide softly from down to up when the page is loaded\nconst AnimatedCard = forwardRef(({ overrideComponent, ...props }, ref) => {\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const node = containerRef.current && containerRef.current.firstElementChild;\n    if (!(node && node.animate)) return;\n\n    const index = Array.from(\n      document.querySelectorAll('main section'),\n    ).findIndex(section => node === section);\n\n    const animation = node.animate(KEYFRAMES, {\n      ...ANIMATION_OPTIONS,\n      delay: index * 150,\n    });\n\n    return () => animation.cancel();\n  }, []);\n\n  const Component = overrideComponent ? 'section' : Card;\n\n  return (\n    <div ref={containerRef} className={style.container}>\n      <Component component=\"section\" {...props} ref={ref} />\n    </div>\n  );\n});\n\nexport default AnimatedCard;\n","// extracted by mini-css-extract-plugin\nexport default {\"rnd\":\"style_rnd__Txifm\",\"floating-card\":\"style_floating-card__HHpby\"};","import React, { lazy, Suspense, useRef, useState } from 'react';\n\n// Rnd is the resizable and draggable system where the ngl viewer is placed\nimport { Rnd } from 'react-rnd';\n\nimport Card from '../animated-card';\n\nimport style from './style.module.css';\n\nconst ViewerWithControls = lazy(() =>\n  import(\n    /* webpackChunkName: 'viewer-with-controls' */ '../viewer-with-controls'\n  ),\n);\n\n// Minimal ngl window height\nconst MIN_NGL_DIMENSION = 150;\n\n// Counter to get always the maximum zIndex\n// This is useful to set a new or currently dragged/resized ngl window over the others\nlet maxZ = 0;\nconst nextZ = () => {\n  maxZ += 1;\n  return maxZ;\n};\n\n// This function spawns all the NGL viewers needed\n// i.e. one viewer with the requested 'props' and all previous viewers which have been nailed\nconst ViewerSpawner = ({ newViewer, nailing = true, onNail, onClose }) => {\n  // Store here all nailed NGL viewers\n  const [nailedViewers, setNailedViewers] = useState([]);\n\n  // Set the viewers as the nailed viewers and the new viewer\n  const viewers = [...nailedViewers];\n\n  // Keep listed all arrays which have been used (i.e. ngl viewers which have been nailed or closed)\n  const usedIds = useRef([]);\n\n  if (newViewer) {\n    // Find a new suitable Id that meet 2 conditions:\n    // - There is never 2 viewers with the same id, so we avoid errors\n    // - If we pick diferent frames in the graph without nailing anything, the current viewer has always the same id\n    // (This way the current viewer does not appear in the origin position every time)\n    const getNewId = () => {\n      let id = 0;\n      while (id < 999) {\n        if (usedIds.current.indexOf(id) === -1) return id;\n        id += 1;\n      }\n      console.error('Maximum number of viewers reached');\n    };\n\n    // Set a unique id for this props based in the last nailed viewer\n    newViewer.id = getNewId();\n    newViewer.close = () => {\n      if (nailing) {\n        setNailedViewers(nailed => {\n          const newNailed = [...nailed];\n          const index = nailed.indexOf(newViewer);\n          if (index !== -1) newNailed.splice(index, 1);\n          return newNailed;\n        });\n      }\n      if (onClose) onClose(newViewer);\n      usedIds.current.push(newViewer.id);\n    };\n    // If the nailer function is passed, add the logic for the viewer to be nailed further\n    if (nailing)\n      newViewer.nail = () => {\n        setNailedViewers(nailed => [...nailed, newViewer]);\n        if (onNail) onNail(newViewer);\n        usedIds.current.push(newViewer.id);\n      };\n    // Add the current viewer to the viewers list\n    viewers.push(newViewer);\n  }\n\n  // Render a viewer for each prop. Use the 'selected' parameter as unique id\n  return viewers.map(viewer => <NGLViewerInDND key={viewer.id} {...viewer} />);\n};\n\n// This component render a small NGL viewer\n// It is called when user clicks in a point in the projections component\n// Also it is called by the generic analysis page\nconst NGLViewerInDND = props => {\n  // Set a reference for the viewer\n  // If a reference is passed among the viewer arguments then use it instead\n  const viewerRef = props.viewerRef || useRef(null);\n\n  // Set the default position and size\n  const [place, setPlace] = useState(() => {\n    // Set an extra margin\n    const MARGIN = 20;\n    // Get the screen pixel sizes and vertical scroll position\n    const { innerWidth, innerHeight, scrollY } = window;\n    // The spawned elements are parented to the 'main' element, not to the 'body'\n    // We have to take this in count, since the header adds an extra offset in vertical position\n    const offsetHeight = document.querySelector('main').offsetTop;\n    // Set a reasonable dimension for the ngl window\n    const dimension = Math.max(\n      Math.min(innerWidth / 4, innerHeight / 4),\n      MIN_NGL_DIMENSION,\n    );\n    const reasonableHeight = 1.5 * dimension;\n    const reasonableWidth = 2 * dimension;\n    return {\n      // WARNING: If you set the width as 'auto' the window stays very wide when exiting fullscreen\n      width: reasonableWidth, // Let the Rnd logic set the width automatically\n      height: reasonableHeight, // Reasonable height\n      x: 0, // Left border\n      y: innerHeight - offsetHeight - reasonableHeight - MARGIN + scrollY, // Bottom border\n    };\n  });\n\n  return (\n    // Rnd is the draggable and resizable system where the ngl viewer is placed\n    <Rnd\n      position={{ x: place.x, y: place.y }}\n      size={{ width: place.width, height: place.height }}\n      // Update the zIndex to make this window the first visible\n      style={{ zIndex: nextZ() }}\n      className={style.rnd}\n      data-rnd\n      // Limits where the window can be dragged/resized to\n      // WARNING: bounds=\"main\" is problematic since the window may appear out of bounds\n      // WARNING: Then when it is moved for the first time it jumps inside the bonds, not elegant\n      bounds=\"window\"\n      // Prevent the mouse to drag/resize the window when it is over specific elements\n      cancel=\"canvas, [data-popover], #preventDragSize, .prevent-drag\"\n      // On drag/resize starts we do not change anything, but use the hook to re-render this component\n      // The Z Index is updated and the selected window becomes the first in the z axis automatically\n      // WARNING: Drag functions are also called when you just click (e.g. clicking buttons)\n      onDragStart={() => {\n        setPlace({ ...place });\n      }}\n      onResizeStart={() => {\n        setPlace({ ...place });\n      }}\n      onDragStop={(e, d) => {\n        // Use this to reject some bugged event calls: e.g. the frames number selector\n        if (e.layerX === 0 && e.layerY === 0) return;\n        // We re-render only if the new position does not equal the old position\n        if (place.x !== d.x || place.y !== d.y)\n          setPlace({\n            ...place,\n            x: d.x,\n            y: d.y,\n          });\n      }}\n      // Re-adapt the viewer and update the position/size when the window is resized\n      onResize={() => viewerRef.current && viewerRef.current.autoResize()}\n      onResizeStop={(e, direction, ref, delta, position) => {\n        setPlace({\n          width: ref.style.width,\n          height: ref.style.height,\n          ...position,\n        });\n        // if (!viewerRef.current) return;\n        // viewerRef.current.autoResize();\n        // viewerRef.current.autoResize.flush();\n      }}\n    >\n      <Card className={style['floating-card']} elevation={4}>\n        <Suspense fallback={null}>\n          <ViewerWithControls\n            className={style['floating-card']}\n            ref={viewerRef}\n            startsPlaying={false}\n            {...props}\n          />\n        </Suspense>\n      </Card>\n    </Rnd>\n  );\n};\n\nexport default ViewerSpawner;\n","import React, { lazy, Suspense, useState, useContext, useMemo, useEffect, useRef } from 'react';\n\nimport {\n  CardContent,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  FormControlLabel,\n  Checkbox,\n  Tabs,\n  Tab,\n  Typography,\n} from '@mui/material';\n\nimport Card from '../../../components/animated-card';\nimport ViewerSpawner from '../../../components/viewer-spawner';\nimport Loading from '../../../components/loading';\n\nimport useAPI from '../../../hooks/use-api';\nimport { ProjectCtx } from '../../../contexts';\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\nimport { getMeanAndStdv } from '../../../utils/statistics';\n\nimport style from './style.module.css';\n\nconst Graph = lazy(() =>\n  import(/* webpackChunkName: 'graph' */ '../../../components/graph'),\n);\n\nconst colors = ['black', 'red', 'orange', 'yellow', 'green', 'blue', 'purple'];\n\nconst LipidOrder = () => {\n  const { accession, accessionAndMdNumber, topology, inchikeyReferences } = useContext(ProjectCtx);\n  // Send a request to the API with the url of the specific analysis\n  const {\n    loading,\n    payload,\n    error,\n  } = useAPI(`${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/lipid-order/`);\n\n  // Add state for selected lipid type\n  const [selectedLipid, setSelectedLipid] = useState(null);\n  const [display, setDisplay] = useState({});\n  const [xSelected, setXSelected] = useState(null);\n  const [representations, setRepresentations] = useState(null);\n  const [flipY, setFlipY] = useState(false);\n  const [showStdDev, setShowStdDev] = useState(true);\n\n  // Get available lipid (inchikey) types for tabs\n  const lipidTypes = useMemo(() => {\n    if (!payload) return [];\n    return Object.keys(payload.data);\n  }, [payload]);\n\n  // Set initial selected lipid when data loads\n  useEffect(() => {\n    if (lipidTypes.length && !selectedLipid) {\n      setSelectedLipid(lipidTypes[0]);\n    }\n  }, [lipidTypes]);\n\n  // Get the names and synonyms from the references\n  const lipidNames = useMemo(() => {\n    if (!lipidTypes.length || !inchikeyReferences) return {};\n    return lipidTypes.reduce((acc, lipid) => {\n      const ref = inchikeyReferences.find(ref => ref.inchikey === lipid);\n      let name, shortName, longName;\n      if (ref.lipidmaps.synonyms) {\n        name = ref.lipidmaps.name;\n        shortName = ref.lipidmaps.synonyms.split('; ').sort((a, b) => a.length - b.length)[0];\n        longName = ref.lipidmaps.sys_name;\n      } else if (ref.swisslipids.synonyms) {\n        name = shortName = ref.swisslipids.synonyms.find(item => item.type === 'abbreviation').name;\n        longName = ref.swisslipids.entity_name;\n      }\n      console.log('lipid', lipid, 'name', name, 'shortName', shortName, 'longName', longName);\n      acc[lipid] = { name, shortName, longName };\n      return acc;\n    }, {});\n  }, [lipidTypes, inchikeyReferences]);\n\n  // Get the lipid residue selection for the SpawnViewer\n  const lipidSelection = useMemo(() => {\n    if (!lipidTypes.length || !topology) return {};\n    return lipidTypes.reduce((acc, lipid) => {\n      const resIndices = topology.getReferenceResidueIndices(lipid);\n      const atomsSelection = `( @${topology.residue2atomIndices(resIndices).join(',')} )`;\n      acc[lipid] = atomsSelection;\n      return acc;\n    }, {});\n  }, [lipidTypes, topology]);\n\n  // Select the data for the graph\n  const orderParameters = useMemo(() => {\n    if (!payload || !selectedLipid) return {};\n    const orderParams = {};\n    const defaultDisplay = {};\n    const chains = payload.data[selectedLipid];\n    Object.entries(chains).forEach(([chainId, chainData]) => {\n      const tailName = `Tail ${parseInt(chainId) + 1}`;\n      const dataset = {\n        data: chainData.avg.map(v => flipY ? -v : v),\n        areaStdDev: chainData.std,\n        labels: chainData.atoms,\n        color: colors[parseInt(chainId) % colors.length],\n      };\n      const { mean: average, stdv: stddev } = getMeanAndStdv(dataset.data);\n      dataset.average = average;\n      dataset.stddev = stddev;\n      orderParams[tailName] = dataset;\n      defaultDisplay[tailName] = true;\n    });\n    setDisplay(defaultDisplay);\n    return orderParams;\n  }, [payload, selectedLipid, flipY, topology]);\n\n  // Calculate maximum standard deviation to kwon the y-axis padding\n  const maxStd = useMemo(() => {\n    if (!orderParameters || !display) return 0;\n    return Math.max(\n      ...Object.entries(orderParameters)\n        .filter(([key]) => display[key])\n        .map(([_, data]) => Math.max(...(data.areaStdDev || [])))\n    );\n  }, [orderParameters, display]);\n\n  // Set the representation for the lipid\n  const baseLipidRep = useMemo(() => {\n    if (!lipidNames[selectedLipid] || !lipidSelection[selectedLipid]) return;\n    return {\n      'name': lipidNames[selectedLipid].synonym,\n      'type': 'licorice',\n      'color': 'orange',\n      'opacity': 0.5,\n      'selection': lipidSelection[selectedLipid],\n      'reference': selectedLipid,\n      'show': true,\n    };\n  }, [selectedLipid, topology]);\n\n  // Define representations when data changes\n  useEffect(() => {\n    if (!display || !orderParameters) return;\n    const reps = [baseLipidRep];\n    if (xSelected !== null) {\n      // Iterate through orderParameters[selectedLipid] dictionary keys\n      Object.keys(orderParameters).forEach((tailName, index) => {\n        const atomName = orderParameters[tailName].labels[xSelected];\n        if (!atomName) return;\n        reps.push({\n          'name': `${atomName}`,\n          'type': 'ball+stick',\n          'color': colors[index % colors.length],\n          'opacity': 0.9,\n          'selection': `${lipidSelection[selectedLipid]} and .${atomName}`,\n          'other': { radius: 0.3 },\n          'show': display[tailName],\n          'reference': `${selectedLipid} ${index}`,\n\n        });\n      });\n    }\n    setRepresentations(reps);\n  }, [baseLipidRep, selectedLipid, xSelected, display, orderParameters]);\n\n  // Create marks for graph highlighting\n  const marks = useMemo(() => {\n    return xSelected !== null ? [{\n      x: xSelected,\n      attr: { fill: '#c8c8c8' },\n    }] : [];\n  }, [xSelected]);\n\n  if (loading) return <Loading />;\n  if (error) return error.toString();\n  if (!payload) return 'Something bad happened with Lipid Order analysis';\n\n  const cents = num => Math.round(num * 100) / 100;\n\n  return (\n    <Suspense fallback={<Loading />}>\n      <Card className={style.card}>\n        <CardContent>\n          <Tabs\n            value={selectedLipid}\n            variant=\"fullWidth\"\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            onChange={(event, value) => {\n              setSelectedLipid(value);\n            }}\n            className={style['margined-bottom']}\n          >\n            {lipidTypes.map((lipid) => (\n              lipidNames[lipid] && <Tab\n                key={lipid}\n                value={lipid}\n                label={\n                  <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n                    <span title={`${lipidNames[lipid].longName}`}>\n                      {lipidNames[lipid].name}\n                    </span>\n                    {lipidNames[lipid].shortName !== lipidNames[lipid].name && (\n                      <Typography variant=\"caption\" color=\"text.secondary\" title={`${lipidNames[lipid].longName}`}>\n                        {lipidNames[lipid].shortName}\n                      </Typography>\n                    )}\n                  </div>\n\n                }\n              />\n            ))}\n          </Tabs>\n          <Table padding=\"checkbox\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Lipid</TableCell>\n                <TableCell>Mean Order Parameter</TableCell>\n                <TableCell>Standard Deviation</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {Object.entries(orderParameters).map(([key, data], i) => (\n                <TableRow key={key}>\n                  <TableCell>\n                    <FormControlLabel\n                      onChange={() =>\n                        setDisplay(previous => ({\n                          ...previous,\n                          [key]: !previous[key],\n                        }))\n                      }\n                      control={\n                        <Checkbox\n                          checked={display[key]}\n                          style={{ color: data.color }}\n                        />\n                      }\n                      label={key}\n                    />\n                  </TableCell>\n                  <TableCell>{cents(data.average)}</TableCell>\n                  <TableCell>{cents(data.stddev)}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n\n        </CardContent>\n      </Card>\n      <Card className={style.card}>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={showStdDev}\n              onChange={(e) => setShowStdDev(e.target.checked)}\n            />\n          }\n          label=\"Show standard deviation\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={flipY}\n              onChange={(e) => setFlipY(e.target.checked)}\n            />\n          }\n          label=\"Invert Y-axis values\"\n        />\n        <CardContent>\n          <Graph\n            yData={orderParameters}\n            xAxisLabel=\"Carbon Position\"\n            yAxisLabel=\"Order Parameter\"\n            type=\"line\"\n            selfLegend={false}\n            dataDisplay={display}\n            labelsOnHover={true}\n            xTooltip={(_, xIndex) => `Position ${xIndex + 1}`}\n            onSelect={setXSelected}\n            marks={marks}\n            areaStdDev={showStdDev}\n            yPadding={showStdDev ? maxStd : 0}\n          />\n        </CardContent>\n      </Card>\n      <ViewerSpawner\n        newViewer={\n          typeof xSelected === 'number'\n            ? {\n              accession: accession,\n              xSelection: xSelected,\n              representationsState: [representations, setRepresentations]\n            }\n            : null\n        }\n        onNail={viewer =>\n          setXSelected(previous => {\n            if (viewer.xSelection === previous) return null;\n            else return previous;\n          })\n        }\n        onClose={viewer =>\n          setXSelected(previous => {\n            if (viewer.xSelection === previous) return null;\n            else return previous;\n          })\n        }\n      />\n    </Suspense>\n  );\n};\n\nexport default LipidOrder;\n","// Statistics\n// Provide some usual statistics functions\n\n// Set a function which returns just the average\nexport const getMean = data => {\n  if (!data) return;\n  const sum = data.reduce((pv, cv) => pv + cv, 0);\n  const n = data.length;\n  return sum / n;\n};\n\n// Set a function which returns the average and standard deviation from a numeric array\nexport const getMeanAndStdv = data => {\n  if (!data) return;\n  const sum = data.reduce((pv, cv) => pv + cv, 0);\n  const n = data.length;\n  const mean = sum / n;\n  const stdv = Math.sqrt(\n    data.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n,\n  );\n  return { mean, stdv };\n};\n","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCheckboxUtilityClass(slot) {\n  return generateUtilityClass('MuiCheckbox', slot);\n}\nconst checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium']);\nexport default checkboxClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checkedIcon\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport checkboxClasses, { getCheckboxUtilityClass } from './checkboxClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    indeterminate,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`, `size${capitalize(size)}`]\n  };\n  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\nconst CheckboxRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiCheckbox',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.indeterminate && styles.indeterminate, styles[`size${capitalize(ownerState.size)}`], ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  color: (theme.vars || theme).palette.text.secondary\n}, !ownerState.disableRipple && {\n  '&:hover': {\n    backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  }\n}, ownerState.color !== 'default' && {\n  [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {\n    color: (theme.vars || theme).palette[ownerState.color].main\n  },\n  [`&.${checkboxClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  }\n}));\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(CheckBoxIcon, {});\nconst defaultIcon = /*#__PURE__*/_jsx(CheckBoxOutlineBlankIcon, {});\nconst defaultIndeterminateIcon = /*#__PURE__*/_jsx(IndeterminateCheckBoxIcon, {});\nconst Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(inProps, ref) {\n  var _icon$props$fontSize, _indeterminateIcon$pr;\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCheckbox'\n  });\n  const {\n      checkedIcon = defaultCheckedIcon,\n      color = 'primary',\n      icon: iconProp = defaultIcon,\n      indeterminate = false,\n      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,\n      inputProps,\n      size = 'medium',\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const icon = indeterminate ? indeterminateIconProp : iconProp;\n  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n  const ownerState = _extends({}, props, {\n    color,\n    indeterminate,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CheckboxRoot, _extends({\n    type: \"checkbox\",\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size\n    }),\n    ownerState: ownerState,\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other, {\n    classes: classes\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckBoxIcon />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <CheckBoxOutlineBlankIcon />\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate: PropTypes.bool,\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateCheckBoxIcon />\n   */\n  indeterminateIcon: PropTypes.node,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense checkbox styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Checkbox;","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"style_card__Tu+j+\",\"margined-bottom\":\"style_margined-bottom__WM5Gb\"};"],"names":["KEYFRAMES","opacity","reducedMotion","transform","ANIMATION_OPTIONS","fill","easing","duration","forwardRef","_ref","ref","overrideComponent","props","containerRef","useRef","useLayoutEffect","node","current","firstElementChild","animate","index","Array","from","document","querySelectorAll","findIndex","section","animation","delay","cancel","Component","Card","_jsx","className","style","children","component","ViewerWithControls","lazy","maxZ","NGLViewerInDND","viewerRef","place","setPlace","useState","innerWidth","innerHeight","scrollY","window","offsetHeight","querySelector","offsetTop","dimension","Math","max","min","reasonableHeight","width","height","x","y","Rnd","position","size","zIndex","bounds","onDragStart","onResizeStart","onDragStop","e","d","layerX","layerY","onResize","autoResize","onResizeStop","direction","delta","elevation","Suspense","fallback","startsPlaying","newViewer","nailing","onNail","onClose","nailedViewers","setNailedViewers","viewers","usedIds","getNewId","id","indexOf","console","error","close","nailed","newNailed","splice","push","nail","map","viewer","Graph","colors","LipidOrder","accession","accessionAndMdNumber","topology","inchikeyReferences","useContext","ProjectCtx","loading","payload","useAPI","BASE_PATH_PROJECTS","selectedLipid","setSelectedLipid","display","setDisplay","xSelected","setXSelected","representations","setRepresentations","flipY","setFlipY","showStdDev","setShowStdDev","lipidTypes","useMemo","Object","keys","data","useEffect","length","lipidNames","reduce","acc","lipid","find","inchikey","name","shortName","longName","lipidmaps","synonyms","split","sort","a","b","sys_name","swisslipids","item","type","entity_name","log","lipidSelection","resIndices","getReferenceResidueIndices","atomsSelection","residue2atomIndices","join","orderParameters","orderParams","defaultDisplay","chains","entries","forEach","chainId","chainData","tailName","parseInt","dataset","avg","v","areaStdDev","std","labels","atoms","color","mean","average","stdv","stddev","getMeanAndStdv","maxStd","filter","_ref2","key","_ref3","_","baseLipidRep","synonym","reps","atomName","radius","marks","attr","Loading","toString","cents","num","round","_jsxs","card","CardContent","Tabs","value","variant","indicatorColor","textColor","onChange","event","Tab","label","flexDirection","alignItems","title","Typography","Table","padding","TableHead","TableRow","TableCell","TableBody","_ref4","i","FormControlLabel","previous","control","Checkbox","checked","target","yData","xAxisLabel","yAxisLabel","selfLegend","dataDisplay","labelsOnHover","xTooltip","xIndex","onSelect","yPadding","ViewerSpawner","xSelection","representationsState","getMean","pv","cv","sum","n","sqrt","pow","createSvgIcon","getCheckboxUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CheckboxRoot","styled","SwitchBase","shouldForwardProp","prop","rootShouldForwardProp","overridesResolver","styles","ownerState","root","indeterminate","capitalize","theme","_extends","vars","palette","text","secondary","disableRipple","backgroundColor","action","activeChannel","mainChannel","hoverOpacity","alpha","active","main","checkboxClasses","disabled","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","React","inProps","_icon$props$fontSize","_indeterminateIcon$pr","useDefaultProps","checkedIcon","icon","iconProp","indeterminateIcon","indeterminateIconProp","inputProps","other","_objectWithoutPropertiesLoose","classes","slots","composedClasses","composeClasses","useUtilityClasses","fontSize","clsx"],"sourceRoot":""}