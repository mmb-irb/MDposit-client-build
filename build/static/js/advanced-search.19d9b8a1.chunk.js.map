{"version":3,"file":"static/js/advanced-search.19d9b8a1.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/animated-card/style.module.css?d4d9","components/animated-card/index.js","webpack://mdposit/./src/pages/advanced-search/style.module.css?b85f","pages/advanced-search/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__M9GCG\"};","import React, { useLayoutEffect, useRef, forwardRef } from 'react';\nimport { Card } from '@mui/material';\n\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nconst KEYFRAMES = { opacity: [0, 1] };\n\nif (!reducedMotion()) {\n  KEYFRAMES.transform = ['translateY(50px)', 'translateY(0)'];\n}\n\nconst ANIMATION_OPTIONS = {\n  fill: 'both',\n  easing: 'cubic-bezier(0, .99, .56, 1.1)',\n  duration: 500,\n};\n\n// Make the card appear and slide softly from down to up when the page is loaded\nconst AnimatedCard = forwardRef(({ overrideComponent, ...props }, ref) => {\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const node = containerRef.current && containerRef.current.firstElementChild;\n    if (!(node && node.animate)) return;\n\n    const index = Array.from(\n      document.querySelectorAll('main section'),\n    ).findIndex(section => node === section);\n\n    const animation = node.animate(KEYFRAMES, {\n      ...ANIMATION_OPTIONS,\n      delay: index * 150,\n    });\n\n    return () => animation.cancel();\n  }, []);\n\n  const Component = overrideComponent ? 'section' : Card;\n\n  return (\n    <div ref={containerRef} className={style.container}>\n      <Component component=\"section\" {...props} ref={ref} />\n    </div>\n  );\n});\n\nexport default AnimatedCard;\n","// extracted by mini-css-extract-plugin\nexport default {\"tall\":\"style_tall__uLxlS\",\"margined\":\"style_margined__hiFK4\",\"spaced\":\"style_spaced__jKimP\",\"trash\":\"style_trash__JtAQQ\",\"grey\":\"style_grey__f3+Yh\",\"unpadded\":\"style_unpadded__QkJ-Y\",\"outlined\":\"style_outlined__b4B+l\",\"right\":\"style_right__ci4FV\",\"search\":\"style_search__JEl1-\"};","// React\nimport React, { useState, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Additional components\nimport Card from '../../components/animated-card'; // The exceled parcels in which almost all features are based\n\n// Visual assets\nimport {\n  CardContent,\n  Select,\n  MenuItem,\n  FormControl,\n  TextField,\n  IconButton,\n  Button,\n  FormHelperText,\n  FormControlLabel,\n  Checkbox,\n  ListSubheader,\n} from '@mui/material';\nimport {\n  faPlusCircle,\n  faTrash,\n  faSearch,\n  faTimes,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n// CSS styles\nimport style from './style.module.css';\n\n// It is used to check if the user has the reduced motion setting active\nimport reducedMotion from '../../utils/reduced-motion';\n\n// Get the host congifuration\nimport { HOST_CONFIG } from \"../../utils/constants\";\n\n// Get the available search fields\nconst queryFields = HOST_CONFIG.queryFields;\nconst availableFields = Object.values(queryFields).reduce((acc, curr) => acc.concat(curr), []);\n\n// These keyframes are used for an animate()\n// An image opacity is iterated between 0 (invisible) and 1 (visible)\nconst keyframes = {\n  opacity: [0, 1],\n};\n\n// Same image vertical position is iterated between 0 and 50 pixels (It may have no effect)\n// This is only set when user has not activated the reduced motion option from the navigator\nif (!reducedMotion()) {\n  keyframes.transform = ['translateX(2.5%)', 'translateX(0)'];\n}\n\n// Escape all regex sensible characters\nconst escapeRegExp = input => {\n  return input.replace(/[-[/\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n};\n\n// Set the basic logic operands to handle multiple conditions\nconst availableLogics = [\n  { name: 'AND', operator: '$and', noperator: '$not' },\n  { name: 'OR', operator: '$or', noperator: '$nor' },\n];\n// Set the possible comparators to apply according to each field type\n// Set also the format in the mongo query for each comparator\nconst simpleFormat = (comparator, value) => {\n  return { [comparator]: value };\n};\nconst regexFormat = (comparator, value) => {\n  return { [comparator]: value, $options: 'i' };\n};\nconst numericFormat = (comparator, value) => {\n  return { [comparator]: +value };\n};\nconst booleanFormat = (comparator, _) => comparator === 'true';\nconst availableComparators = {\n  string: [\n    {\n      name: 'contains',\n      operator: '$regex',\n      formatter: (comparator, value) => {\n        // Regex characters must be scaped here\n        const parsedVaue = escapeRegExp(value);\n        return regexFormat(comparator, parsedVaue);\n      },\n    },\n    { name: 'equals', operator: '$eq', formatter: simpleFormat },\n    { name: 'regular expression', operator: '$regex', formatter: regexFormat },\n  ],\n  float: [\n    { name: 'greater than', operator: '$gt', formatter: numericFormat },\n    { name: 'lower than', operator: '$lt', formatter: numericFormat },\n  ],\n  int: [\n    { name: 'equals', operator: '$eq', formatter: numericFormat },\n    { name: 'greater than', operator: '$gt', formatter: numericFormat },\n    { name: 'lower than', operator: '$lt', formatter: numericFormat },\n  ],\n  boolean: [\n    { name: 'true', operator: 'true', formatter: booleanFormat },\n    { name: 'false', operator: 'false', formatter: booleanFormat },\n  ],\n};\n\n// Set the default query configuration\nconst defaultQuery = {\n  logic: 'AND',\n  is: true,\n  fields: [\n    { field: '', is: true, comparator: '', value: '' },\n    { field: '', is: true, comparator: '', value: '' },\n  ],\n};\n\n// How arithmetic signs results\nconst signLogic = (positive1, positive2) => {\n  if (positive1) {\n    if (positive2) return true;\n    if (!positive2) return false;\n  } else {\n    if (positive2) return false;\n    if (!positive2) return true;\n  }\n};\n\n// DANI: a esta página dejé de darle mantenimiento al introducir las queries a la colección de references\n// DANI: con la implementación actual de la API esto rompe un poco la idea de una única query\n// DANI: las queries a references van por separado internamente en la API\n// DANI: los resultados de queries a projects y queries a references se suman mediante AND por defecto\n// DANI: montar un sistema en que el usuario pueda decidir sumar estos resultados miedante un OR es un marrón\n// DANI: no permitir un OR entre estos campos no sería coherente, y dificil de entender para el usuario\n// DANI: prefiero dejar de mantener esta versión de búsqueda de momento y centrarme en la otra\n\n// Advanced search page\nconst AdvancedSearch = () => {\n  // Save the query\n  const query = useRef(defaultQuery);\n\n  // Track if the user has tried to search the current query\n  // In case it has tried, all error messages appear if things are wrong\n  const [displayErrors, setDisplayErrors] = useState(false);\n\n  // Get acces to the history so wen can redirect the user later\n  const history = useNavigate();\n\n  // This is a trick to force the page rerender\n  const [, setUpdater] = useState(true);\n  const forceUpdate = () => {\n    setUpdater(value => !value);\n  };\n\n  // Track if there is any input error\n  let inputError = false;\n\n  const ComparatorSelector = ({\n    object,\n    label,\n    options,\n    handleChange,\n    error,\n    helpText,\n  }) => (\n    <FormControl className={style.spaced}>\n      <Select\n        id=\"select\"\n        title={'Select the desired ' + label}\n        value={object[label]}\n        onChange={handleChange}\n        displayEmpty\n        error={error}\n      >\n        <MenuItem disabled value={''} key={'placeholder'}>\n          <em className={style.grey}>{label}</em>\n        </MenuItem>\n        {options.map(key => (\n          <MenuItem value={key} key={key}>\n            {key}\n          </MenuItem>\n        ))}\n      </Select>\n      {helpText && <FormHelperText>{helpText}</FormHelperText>}\n    </FormControl>\n  );\n\n  const LogicsAndFieldsSelector = ({\n    object,\n    label,\n    options,\n    handleChange,\n  }) => (\n    <FormControl className={style.spaced}>\n      <Select\n        id=\"select\"\n        title={'Select the desired ' + label}\n        value={object[label]}\n        onChange={handleChange}\n        displayEmpty\n      >\n        <MenuItem disabled value={''} key={'placeholder'}>\n          <em className={style.grey}>{label}</em>\n        </MenuItem>\n        {options.map(category => {\n          // Note that each object has a single entry\n          const [ categoryName, categoryOptions ] = Object.entries(category)[0];\n          return [\n            <ListSubheader color={'primary'}>{categoryName}</ListSubheader>,\n            ...categoryOptions.map(categoryOption => (\n              <MenuItem value={categoryOption} key={categoryOption}>\n                {categoryOption}\n              </MenuItem>\n            ))\n          ];\n        })}\n      </Select>\n    </FormControl>\n  );\n\n  // The inputMode is useful for mobiles\n  const inputParameteres = {\n    string: { inputMode: 'text' },\n    int: {\n      inputMode: 'numeric',\n      pattern: '[0-9+-]*',\n      helpText: 'integer numbers accepted only',\n    },\n    float: {\n      inputMode: 'numeric',\n      pattern: '[0-9.,+-]*',\n      helpText: 'numbers accepted only',\n    },\n  };\n\n  // Represent the query object\n  // Set the layout for query fields\n  // In case of logic (i.e. AND, OR, etc.), call this function for each element\n  const Represent = ({ object, parent, index }) => {\n    // Find the field options\n    // Field options include logicals\n    // DANI: descartamos fields de references, que no funcionarían por defecto\n    const logicOptions = availableLogics.map(operand => operand.name);\n    const fieldOptions = Object.entries(queryFields).map(([category, fields]) => {\n      return { [category]: fields.map(field => field.name) };\n    });\n    // We set this as a list objects with a single value each instead of a single object\n    // This is because the order is to be respected\n    const logicsAndFields = [\n      { 'Logic operators': logicOptions },\n      ...fieldOptions\n    ];\n    // In case it is a field set the layout\n    if (object.field !== undefined) {\n      // Get the parameters for the current field\n      const currentField = availableFields.find(\n        field => field.name === object.field,\n      );\n      // Get the available comparator options for the current field type\n      const comparatorOptions = currentField &&\n        availableComparators[currentField.type].map(c => c.name);\n      // Seth whenever the value text input must be rendered\n      const isBoolean = currentField && currentField.type === 'boolean';\n      // Handle input errors\n      const missingComparator = currentField && !object.comparator;\n      const helpTextComparator =\n        missingComparator && 'please select a comparator';\n      const missingValue = currentField && !isBoolean && !object.value;\n      const parameters = currentField && !isBoolean &&\n        inputParameteres[currentField.type];\n      const match = currentField && !isBoolean && parameters.pattern &&\n        object.value.match(parameters.pattern);\n      const wrongValue = match && match[0] !== object.value;\n      const helpTextValue =\n        (missingValue && 'please specify a value') ||\n        (wrongValue && parameters.helpText);\n      if (missingComparator || missingValue || wrongValue) inputError = true;\n      // Handle when the text input has changed\n      const handleInputChange = event => {\n        const newValue = event.target.value;\n        object.value = newValue;\n        forceUpdate();\n      };\n      return (\n        <div className={style.margined}>\n          <LogicsAndFieldsSelector\n            object={object}\n            label={'field'}\n            options={logicsAndFields}\n            handleChange={event => {\n              const newValue = event.target.value;\n              const isLogic = logicOptions.includes(newValue);\n              // If the new value is a logic\n              if (isLogic) {\n                delete object.field;\n                delete object.comparator;\n                delete object.value;\n                object.logic = newValue;\n                object.is = true;\n                object.fields = [];\n                forceUpdate();\n                return;\n              }\n              // If the new value is another field\n              object.field = newValue;\n              const newField = availableFields.find(\n                field => field.name === newValue,\n              );\n              const newComparatorOptions =\n                newField &&\n                availableComparators[newField.type].map(c => c.name);\n              // If the new field has not the previously selected comparator option then we reset it\n              if (newComparatorOptions.indexOf(object.comparator) === -1)\n                object.comparator = '';\n              forceUpdate();\n            }}\n          />\n          {currentField && !isBoolean && (\n            <FormControlLabel\n              onChange={() => {\n                object.is = !object.is;\n                forceUpdate();\n              }}\n              control={\n                <Checkbox\n                  checked={!object.is}\n                  icon={\n                    <FontAwesomeIcon\n                      icon={faTimes}\n                      size=\"xs\"\n                      style={{ visibility: 'hidden' }}\n                    />\n                  }\n                  checkedIcon={<FontAwesomeIcon icon={faTimes} size=\"xs\" />}\n                  style={{ color: 'black' }}\n                />\n              }\n              label={'NOT'}\n              style={object.is ? { color: 'lightgrey' } : { color: 'black' }}\n              className={style.outlined}\n            />\n          )}\n          {currentField && (\n            <ComparatorSelector\n              object={object}\n              label={'comparator'}\n              options={comparatorOptions}\n              handleChange={event => {\n                const newValue = event.target.value;\n                object.comparator = newValue;\n                forceUpdate();\n              }}\n              helpText={displayErrors && helpTextComparator}\n              error={displayErrors && missingComparator}\n            />\n          )}\n          {currentField && !isBoolean && (\n            <TextField\n              title={'Type here the value for the specified field'}\n              defaultValue={object['value']}\n              // When pressing enter\n              onKeyPress={event => {\n                if (event.key === 'Enter') handleInputChange(event);\n              }}\n              // When clicking out, pressing tabulator, etc.\n              onBlur={handleInputChange}\n              placeholder={'e.g. ' + currentField.example}\n              inputProps={{ inputMode: parameters.inputMode }}\n              helperText={displayErrors && helpTextValue}\n              error={displayErrors && (missingValue || wrongValue)}\n            />\n          )}\n          <IconButton\n            variant=\"contained\"\n            onClick={() => {\n              parent.splice(index, 1);\n              forceUpdate();\n            }}\n            className={style.trash}\n            size=\"large\"\n          >\n            <FontAwesomeIcon icon={faTrash} size=\"xs\" />\n          </IconButton>\n        </div>\n      );\n    }\n    // In case it is a logic call this function for each containing field\n    if (object.fields !== undefined) {\n      return (\n        <div className={style.margined}>\n          <LogicsAndFieldsSelector\n            object={object}\n            label={'logic'}\n            options={logicsAndFields}\n            handleChange={event => {\n              const newValue = event.target.value;\n              const isField = logicOptions.indexOf(newValue) === -1;\n              // If the new value is a field\n              if (isField) {\n                delete object.fields;\n                delete object.logic;\n                object.field = newValue;\n                object.is = true;\n                object.comparator = '';\n                object.value = '';\n                forceUpdate();\n                return;\n              }\n              // If the new value is another logic\n              object.logic = newValue;\n              forceUpdate();\n            }}\n          />\n          <FormControlLabel\n            onChange={() => {\n              object.is = !object.is;\n              forceUpdate();\n            }}\n            control={\n              <Checkbox\n                checked={!object.is}\n                icon={\n                  <FontAwesomeIcon\n                    icon={faTimes}\n                    size=\"xs\"\n                    style={{ visibility: 'hidden' }}\n                  />\n                }\n                checkedIcon={<FontAwesomeIcon icon={faTimes} size=\"xs\" />}\n                style={{ color: 'black' }}\n              />\n            }\n            label={'NOT'}\n            style={object.is ? { color: 'lightgrey' } : { color: 'black' }}\n            className={style.outlined}\n          />\n          <IconButton\n            variant=\"contained\"\n            onClick={() => {\n              object.fields.unshift({\n                field: '',\n                is: true,\n                comparator: '',\n                value: '',\n              });\n              forceUpdate();\n            }}\n            className={style.unpadded}\n            size=\"large\"\n          >\n            <FontAwesomeIcon icon={faPlusCircle} />\n          </IconButton>\n          {parent && (\n            <IconButton\n              variant=\"contained\"\n              onClick={() => {\n                parent.splice(index, 1);\n                forceUpdate();\n              }}\n              className={style.unpadded}\n              size=\"large\"\n            >\n              <FontAwesomeIcon icon={faTrash} size=\"xs\" />\n            </IconButton>\n          )}\n          {object.fields.map((field, i) => (\n            <Represent\n              key={i}\n              object={field}\n              parent={object.fields}\n              index={i}\n            />\n          ))}\n        </div>\n      );\n    }\n  };\n\n  // Parse a query object\n  // Replace names by tags\n  const parse = object => {\n    // In case it is a field\n    if (object.field !== undefined) {\n      // Get the parameters for the current field\n      const currentField = availableFields.find(\n        field => field.name === object.field,\n      );\n      // Get the path to the field to be queried\n      const fieldPath = currentField.path;\n      // Get the available comparators for the current field type\n      const comparators =\n        currentField && availableComparators[currentField.type];\n      // Get the parameters for the current comparator\n      const currentComparator = comparators.find(\n        c => c.name === object.comparator,\n      );\n      // Get the comparator operator\n      const operator = currentComparator.operator;\n      // Get the formatter for using this comparator\n      const formatter = currentComparator.formatter;\n      // Return the object with the mongo format\n      if (object.is) return { [fieldPath]: formatter(operator, object.value) };\n      return { [fieldPath]: { $not: formatter(operator, object.value) } };\n    }\n    // In case it is a logic\n    if (object.logic !== undefined) {\n      const logic = object.logic;\n      const logicOperator = availableLogics.find(l => l.name === logic)[\n        object.is ? 'operator' : 'noperator'\n      ];\n      // Get only fields which are not empty\n      const fields = object.fields.filter(f => f.field || f.logic);\n      // If there is no content in this logic then return nothing\n      if (fields.length === 0) return;\n      // If there is only 1 field in this logic then the logic makes not sense\n      if (fields.length === 1) {\n        const uniqueField = fields[0];\n        uniqueField.is = signLogic(uniqueField.is, object.is);\n        return parse(uniqueField);\n      }\n      // If there are several fields\n      return { [logicOperator]: fields.map(child => parse(child)) };\n    }\n  };\n\n  // Parse the query to an HTML string which may be passed as an URL\n  const search = () => {\n    if (inputError) {\n      setDisplayErrors(true);\n      return;\n    }\n    // Sum up the query parameters into an abreviated object\n    const currentQuery = query.current;\n    const parsedQuery = parse(currentQuery);\n    // Convert the summary obejct to a single string\n    const stringQuery = JSON.stringify(parsedQuery);\n    if (!stringQuery) return;\n    // Then make a browse with the new query\n    history('/browse?query=' + stringQuery);\n  };\n\n  return (\n    <Card className={style.tall}>\n      <CardContent>\n        Use the <b>advanced search</b> query builder to create complex database\n        queries.<br />\n        <hr style={{ color: 'lightGrey' }} />\n        <Represent object={query.current} />\n        <div className={style.right}>\n          <Button variant=\"contained\" onClick={search} className={style.search}>\n            <FontAwesomeIcon icon={faSearch} />\n            &nbsp;\n            <span>Search</span>\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default AdvancedSearch;\n"],"names":["KEYFRAMES","opacity","reducedMotion","transform","ANIMATION_OPTIONS","fill","easing","duration","forwardRef","_ref","ref","overrideComponent","props","containerRef","useRef","useLayoutEffect","node","current","firstElementChild","animate","index","Array","from","document","querySelectorAll","findIndex","section","animation","delay","cancel","Component","Card","_jsx","className","style","children","component","queryFields","HOST_CONFIG","availableFields","Object","values","reduce","acc","curr","concat","keyframes","availableLogics","name","operator","noperator","regexFormat","comparator","value","$options","numericFormat","booleanFormat","_","availableComparators","string","formatter","parsedVaue","replace","simpleFormat","float","int","boolean","defaultQuery","logic","is","fields","field","AdvancedSearch","query","displayErrors","setDisplayErrors","useState","history","useNavigate","setUpdater","forceUpdate","inputError","ComparatorSelector","object","label","options","handleChange","error","helpText","_jsxs","FormControl","Select","id","title","onChange","displayEmpty","MenuItem","disabled","map","key","FormHelperText","LogicsAndFieldsSelector","_ref2","category","categoryName","categoryOptions","entries","ListSubheader","color","categoryOption","inputParameteres","inputMode","pattern","Represent","_ref3","parent","logicOptions","operand","fieldOptions","_ref4","logicsAndFields","undefined","currentField","find","comparatorOptions","type","c","isBoolean","missingComparator","helpTextComparator","missingValue","parameters","match","wrongValue","helpTextValue","handleInputChange","event","newValue","target","includes","newField","indexOf","FormControlLabel","control","Checkbox","checked","icon","FontAwesomeIcon","faTimes","size","visibility","checkedIcon","TextField","defaultValue","onKeyPress","onBlur","placeholder","example","inputProps","helperText","IconButton","variant","onClick","splice","faTrash","unshift","faPlusCircle","i","parse","fieldPath","path","currentComparator","$not","logicOperator","l","filter","f","length","uniqueField","signLogic","positive1","positive2","child","CardContent","Button","search","currentQuery","parsedQuery","stringQuery","JSON","stringify","faSearch"],"sourceRoot":""}