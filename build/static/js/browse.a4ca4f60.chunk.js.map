{"version":3,"file":"static/js/browse.a4ca4f60.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/animated-card/style.module.css?d4d9","components/animated-card/index.js","webpack://mdposit/./src/pages/browse/custom-search/style.module.css?36f5","pages/browse/custom-search/index.js","webpack://mdposit/./src/components/highlight/style.module.css?2fb6","components/highlight/index.js","webpack://mdposit/./src/pages/browse/style.module.css?1eb9","pages/browse/row.js","pages/browse/pagination.js","webpack://mdposit/./src/pages/browse/search/style.module.css?d5c5","pages/browse/search/index.js","pages/browse/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__M9GCG\"};","import React, { useLayoutEffect, useRef, forwardRef } from 'react';\nimport { Card } from '@mui/material';\n\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nconst KEYFRAMES = { opacity: [0, 1] };\n\nif (!reducedMotion()) {\n  KEYFRAMES.transform = ['translateY(50px)', 'translateY(0)'];\n}\n\nconst ANIMATION_OPTIONS = {\n  fill: 'both',\n  easing: 'cubic-bezier(0, .99, .56, 1.1)',\n  duration: 500,\n};\n\n// Make the card appear and slide softly from down to up when the page is loaded\nconst AnimatedCard = forwardRef(({ overrideComponent, ...props }, ref) => {\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const node = containerRef.current && containerRef.current.firstElementChild;\n    if (!(node && node.animate)) return;\n\n    const index = Array.from(\n      document.querySelectorAll('main section'),\n    ).findIndex(section => node === section);\n\n    const animation = node.animate(KEYFRAMES, {\n      ...ANIMATION_OPTIONS,\n      delay: index * 150,\n    });\n\n    return () => animation.cancel();\n  }, []);\n\n  const Component = overrideComponent ? 'section' : Card;\n\n  return (\n    <div ref={containerRef} className={style.container}>\n      <Component component=\"section\" {...props} ref={ref} />\n    </div>\n  );\n});\n\nexport default AnimatedCard;\n","// extracted by mini-css-extract-plugin\nexport default {\"tall\":\"style_tall__9YO3U\",\"advanced\":\"style_advanced__6aE-M\",\"category\":\"style_category__W7eVa\",\"margined\":\"style_margined__DUiBx\",\"spaced\":\"style_spaced__HNl1x\",\"trash\":\"style_trash__eOEA9\",\"grey\":\"style_grey__AAhrx\",\"unpadded\":\"style_unpadded__NAWaV\",\"outlined\":\"style_outlined__i353I\",\"accordion\":\"style_accordion__dE2XH\",\"summary\":\"style_summary__2P8gb\",\"section\":\"style_section__Yij1f\",\"aligned\":\"style_aligned__O8YMt\",\"button\":\"style_button__kRCGy\",\"search\":\"style_search__ZlOSm\"};","// React\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { debounce } from 'lodash-es';\nimport { parse } from 'qs';\n\n// Additional components\nimport Card from '../../../components/animated-card'; // The exceled parcels in which almost all features are based\n\n// Visual assets\nimport {\n  CardContent,\n  TextField,\n  FormControlLabel,\n  Checkbox,\n  Autocomplete,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Typography\n} from '@mui/material';\n\n// CSS styles\nimport style from './style.module.css';\n\n// Constants\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\nconst DEBOUNCE_DELAY = 500; // Half a second delay, same as in search component\n\n// Hooks\nimport useAPI from '../../../hooks/use-api'; // API acces\nimport Loading from '../../../components/loading'; // Displays an animated \"loading\" circle\n\n// Get the host congifuration\nimport { HOST_CONFIG } from \"../../../utils/constants\";\n\n// Get the avilable search fields\nconst queryFields = HOST_CONFIG.queryFields;\nconst optionsField = HOST_CONFIG.optionsField;\nconst availableFields = Object.values(queryFields).reduce((acc, curr) => acc.concat(curr), []);\n\n// Escape all regex sensible characters\nconst escapeRegExp = input => {\n  return input.replace(/[-[/\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n};\n\n// Parse the URL query back to our internal query format\nconst parseUrlQuery = (urlQuery) => {\n  try {\n    if (!urlQuery) return {};\n    \n    const parsedQuery = JSON.parse(urlQuery);\n    const internalQuery = {};\n\n    // Handle direct field queries (string search with regex)\n    Object.entries(parsedQuery).forEach(([key, value]) => {\n      if (key === '$and' || key === '$or') return;\n\n      const field = availableFields.find(f => f.path === key);\n      if (!field) return;\n\n      // Handle regex string search\n      if (value.$regex) {\n        internalQuery[key] = value.$regex.replace(/\\\\/g, '');\n        return;\n      }\n\n      // Handle numeric ranges\n      if (value.$gt !== undefined || value.$lt !== undefined) {\n        internalQuery[key] = {};\n        if (value.$gt !== undefined) internalQuery[key].min = value.$gt;\n        if (value.$lt !== undefined) internalQuery[key].max = value.$lt;\n        return;\n      }\n\n      // Handle direct equality (for checkbox values)\n      if (field.checkbox) {\n        internalQuery[key] = [value === null ? NA_TAG : String(value)];\n      } else {\n        internalQuery[key] = value === null ? NA_TAG : String(value);\n      }\n    });\n\n    // Handle $or queries (for checkboxes with multiple selections)\n    if (parsedQuery.$or && Array.isArray(parsedQuery.$or)) {\n      parsedQuery.$or.forEach(condition => {\n        const entries = Object.entries(condition);\n        if (entries.length !== 1) return;\n        \n        const [key, value] = entries[0];\n        if (!internalQuery[key]) {\n          internalQuery[key] = [value === null ? NA_TAG : String(value)];\n        } else if (Array.isArray(internalQuery[key])) {\n          internalQuery[key].push(value === null ? NA_TAG : String(value));\n        }\n      });\n    }\n\n    // Handle $and queries with nested $or conditions\n    if (parsedQuery.$and && Array.isArray(parsedQuery.$and)) {\n      parsedQuery.$and.forEach(condition => {\n        if (condition.$or && Array.isArray(condition.$or)) {\n          const firstCondition = condition.$or[0];\n          const key = Object.keys(firstCondition)[0];\n          \n          if (!internalQuery[key]) {\n            internalQuery[key] = [];\n          }\n          \n          condition.$or.forEach(orCondition => {\n            const orKey = Object.keys(orCondition)[0];\n            const orValue = orCondition[orKey];\n            if (orKey === key) {\n              internalQuery[key].push(orValue === null ? NA_TAG : String(orValue));\n            }\n          });\n        }\n      });\n    }\n\n    return internalQuery;\n  } catch (error) {\n    console.error(\"Error parsing URL query:\", error);\n    return {};\n  }\n};\n\n// Parse the query to an HTML string which may be passed as an URL\n// Note that this function is called only at the end, when the search button is pressed\n// The actual query is build below in the code\nconst parseQuery = (currentQuery, currentLocation) => {\n  // Parse current URL parameters to preserve them\n  const currentParams = parse(decodeURIComponent(currentLocation.search), {\n    ignoreQueryPrefix: true,\n    decoder: c => c,\n  });\n  // If the query is empty, rebuild the URL with only the currentParams\n  if (Object.keys(currentQuery).length === 0) {\n    delete currentParams.query; // Remove the 'query' key\n    return '/browse?' + Object.entries(currentParams)\n      .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n      .join('&');\n  }\n  \n  // Set a function to parse our queries to a mongo query object\n  const parsedQuery = {};\n  let errors = 0;\n  const parseAndAddQuery = ([key, value]) => {\n    // DANI: Aquí me he quedado. Esto debería ser idéntico para las ref queries. Habría que aislar esta función.\n    // Get the current field to know which is the expected type\n    const currentField = availableFields.find(f => f.path === key);\n    // Provided that value will allways be a string (or string array) do the corresponding parsing\n    const parseType = string => {\n      if (string === NA_TAG) return { $eq: null };\n      if (currentField.type === 'string') return string;\n      if (currentField.type === 'int' || currentField.type === 'float')\n        return +string;\n      if (currentField.type === 'boolean') return string === 'true';\n    };\n    // In case it is a string search it means it comes from a string textfield\n    if (typeof value === 'string') {\n      const parsedValue = escapeRegExp(value);\n      parsedQuery[key] = { $regex: parsedValue, $options: 'i' };\n      return;\n    }\n    // In case it has min or max propierties it comes from a number range pair of textfields\n    if (value.min || value.max) {\n      const parsedValue = {};\n      if (value.min) {\n        if (isNaN(+value.min)) return ++errors;\n        parsedValue['$gt'] = +value.min;\n      }\n      if (value.max) {\n        if (isNaN(+value.max)) return ++errors;\n        parsedValue['$lt'] = +value.max;\n      }\n      parsedQuery[key] = parsedValue;\n      return;\n    }\n    if (!Array.isArray(value))\n      throw new Error('Wrong ' + key + ' -> ' + value);\n    // If value is not one of the previous it must be an array, so it comes from checkboxes\n    // If value array has only one element then search only for this option\n    if (value.length === 1) {\n      parsedQuery[key] = parseType(value[0]);\n      return;\n    }\n    // Otherwise we must use a $or operand for each option\n    // In case more than one field have more than one option we must use $and operand to declare multiple $or operands\n    // So, if there is already an $and operator push the new $or operand to it\n    const currentAnd = parsedQuery['$and'];\n    if (currentAnd) {\n      currentAnd.push({ $or: value.map(v => ({ [key]: parseType(v) })) });\n      return;\n    }\n    // In case there is no $and operator but there is already an $or operand we must create the $and operator\n    // Then the old $or operator must be copied into the $and operator and deleted from the query object\n    const currentOr = parsedQuery['$or'];\n    if (currentOr) {\n      parsedQuery['$and'] = [\n        { $or: currentOr },\n        { $or: value.map(v => ({ [key]: parseType(v) })) },\n      ];\n      delete parsedQuery['$or'];\n      return;\n    }\n    // In case there is no $and/$or operators we set the first $or operator alone\n    parsedQuery['$or'] = value.map(v => ({ [key]: parseType(v) }));\n  };\n\n  // Parse the query\n  Object.entries(currentQuery).forEach(entry => parseAndAddQuery(entry));\n\n  // This may happen when a numeric textfield has text\n  if (errors > 0) return;\n\n  // Create params object with preserved sort parameters\n  const params = {\n    ...currentParams, // Preserve sort parameters\n    query: JSON.stringify(parsedQuery),\n  };\n\n  // Filter out undefined values\n  Object.keys(params).forEach(key => \n    params[key] === undefined && delete params[key]\n  );\n\n  // Return the query as a URL string with preserved parameters\n  return '/browse?' + Object.entries(params)\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n    .join('&');\n};\n\n// Set the tag to be shown for null and undefined values\nconst NA_TAG = 'Not defined';\n\n// Store queries per location id, since I am not able to make the location remember a bloody state\nconst storedQueries = {};\n\n// Advanced search page\nconst CustomSearch = () => {\n\n  // Get access to the history so wen can redirect the user later\n  const history = useNavigate();\n\n  // Get the location\n  const location = useLocation();\n  \n  // Parse the query parameter from URL \n  const urlParams = parse(location.search, { ignoreQueryPrefix: true });\n  const urlQuery = urlParams.query;\n  \n  // Initialize the query based on URL or empty object\n  const initialQuery = urlQuery ? parseUrlQuery(urlQuery) : {};\n  // Use URL search params as a dependency for state\n  const [query, setQuery] = useState(initialQuery);\n  const [queryUpdated, setQueryUpdated] = useState(false);\n  // Track whether search was triggered by user action or URL change\n  const isUserInitiatedSearchRef = useRef(false);\n\n  // Reset query when URL changes\n  useEffect(() => {\n    if (!urlQuery) {\n      // Clear the query when there's no query parameter in URL\n      setQuery({});\n    } else {\n      // Update query with parsed URL data\n      setQuery(parseUrlQuery(urlQuery));\n    }\n  }, [location.search, urlQuery]);\n\n  // Make a function to parse the query once built and browse\n  const parseAndSearch = () => {\n    isUserInitiatedSearchRef.current = true; // Set the ref instead of state\n    const browseURL = parseQuery(query, location);\n    history(browseURL);\n  };\n\n  // Create a debounced version of the parseAndSearch function\n  const debouncedParseAndSearch = debounce(parseAndSearch, DEBOUNCE_DELAY);\n  // Cleanup the debounced function when component unmounts\n  useEffect(() => {\n    return () => debouncedParseAndSearch.cancel();\n  }, []);\n\n  // Query all the available fields using the 'options' endpoint\n  const projectionStrings = availableFields.filter(field => field.options).map(field => 'projection=' + field.path);\n  const projectionQuery = projectionStrings.join('&');\n\n  // Build the API URL for the options requests\n  // DANI: Se piden todas las options de golpe, lo cual no es muy eficiente y la API tarda 3 segundos aprox\n  // DANI: Hemos decidido que este valor se guardará en la db y se actualizará periódicamente, cosa mucho más eficiente\n  const optionsUrl = `${BASE_PATH_PROJECTS}/options?${projectionQuery}`;\n  const { payload: optionsPayload, error: optionsError } = useAPI(optionsUrl, { name: 'browse', cacheOn: true });\n\n  // State to track expanded accordions\n  const [expandedCategory, setExpandedCategory] = useState(true);\n  const [expandedFields, setExpandedFields] = useState({});\n\n  // Initialize expanded state based on URL query\n  const initializeExpandedState = (queryFields, query, defaultOpen = false) => {\n    // Initialize category accordions as expanded\n    const categoryState = Object.keys(queryFields).reduce((acc, category) => {\n      acc[category] = true;\n      return acc;\n    }, {});\n    // Initialize field accordions based on defaultOpen only (since query is empty)\n    const fieldState = Object.values(queryFields).flat().reduce((acc, field) => {\n      acc[field.path] = field.defaultOpen || (defaultOpen && field.path in query);\n      return acc;\n    }, {});\n  \n    return { categoryState, fieldState };\n  };\n\n  // Set initial expanded state based on URL query\n  useEffect(() => {\n    const { categoryState, fieldState } = initializeExpandedState(queryFields, query, true);\n    setExpandedCategory(categoryState);\n    setExpandedFields(fieldState);\n  }, []);\n  \n  useEffect(() => {\n    // Only reset accordions if URL was cleared externally (not by user action)\n    // and there is no query or search options\n    if (!urlQuery && !isUserInitiatedSearchRef.current && !location.search) {\n      const { categoryState, fieldState } = initializeExpandedState(queryFields, query);\n      setExpandedCategory(categoryState);\n      setExpandedFields(fieldState);\n    }\n    // Reset the ref after handling the state update\n    if (isUserInitiatedSearchRef.current) {\n      isUserInitiatedSearchRef.current = false;\n  }\n  }, [location.search, urlQuery]);\n\n  // Handle category accordion changes\n  const handleCategoryChange = (category) => (event, isExpanded) => {\n    setExpandedCategory({\n      ...expandedCategory,\n      [category]: isExpanded\n    });\n  };\n\n  // Handle field accordion changes\n  const handleFieldChange = (fieldPath) => (event, isExpanded) => {\n    setExpandedFields({\n      ...expandedFields,\n      [fieldPath]: isExpanded\n    });\n  };\n  // Stop here if any of the requests failed\n  if (optionsError) return optionsError.toString();\n\n  // Helper function to update query state and trigger search\n  const updateQueryValue = (fieldPath, value, options = {}) => {\n    const { isArray = false, isRange = false, rangeSide = null } = options;\n    \n    if (isArray) {\n      // Handle checkbox arrays\n      if (!query[fieldPath]) {\n        query[fieldPath] = [value];\n      } else if (Array.isArray(query[fieldPath])) {\n        const index = query[fieldPath].indexOf(value);\n        if (index === -1) {\n          query[fieldPath].push(value);\n        } else {\n          query[fieldPath].splice(index, 1);\n          if (query[fieldPath].length === 0) {\n            delete query[fieldPath];\n          }\n        }\n      }\n    } else if (isRange) {\n      // Handle numeric ranges\n      if (value === '') {\n        if (!query[fieldPath]) return;\n        if (query[fieldPath][rangeSide]) {\n          delete query[fieldPath][rangeSide];\n          if (Object.keys(query[fieldPath]).length === 0) {\n            delete query[fieldPath];\n          }\n        }\n      } else {\n        if (!query[fieldPath]) {\n          query[fieldPath] = { [rangeSide]: value };\n        } else {\n          query[fieldPath][rangeSide] = value;\n        }\n      }\n    } else {\n      // Handle simple string values\n      if (value === '') {\n        delete query[fieldPath];\n      } else {\n        query[fieldPath] = value;\n      }\n    }\n    \n    // Trigger state update and search\n    setQueryUpdated(prev => !prev);\n    debouncedParseAndSearch();\n  };\n\n  // Here is where queries are built by the user\n  return (\n    <Card className={style.tall}>\n      <CardContent style={{ paddingLeft: '0' }}>\n        <div className={style.advanced}>Use the <b>search</b> menu to create a specific query.\n        Go to{' '} <a href=\"/#/advanced-search\">advanced search</a> for a most complex query.\n        </div>\n        {Object.entries(queryFields).map(([category, fields], c) => {\n          return (\n            <Accordion \n              key={c} \n              expanded={!!expandedCategory[category]}\n              onChange={handleCategoryChange(category)} \n              disableGutters={true} \n              className={style['category']}\n            >\n              <AccordionSummary \n                className={style.categorySummary}\n              >\n                <Typography variant='h6' className={style.margined}>{category}</Typography>\n              </AccordionSummary>\n              <AccordionDetails  className={style.section}>\n                <div>\n                  {fields.map((field, f) => {\n                    if (field.path === optionsField) return null; // hide the one in OptionsFilter\n                    return (\n                      <Accordion \n                        key={f} \n                        className={style.accordion} \n                        disableGutters={true}\n                        expanded={!!expandedFields[field.path]}\n                        onChange={handleFieldChange(field.path)}\n                      >\n                        <AccordionSummary className={style.summary}>{field.name}</AccordionSummary>\n                        <AccordionDetails>\n                          {(() => {\n                            // Get the corresponding payload\n                            if (!optionsPayload) return <Loading />;\n                            // Save the current queries\n                            const currentQuery = query;\n                            // In case it is a field with options (i.e. input is specified through checkboxes)\n                            if (field.options) {\n                              const fieldData = optionsPayload[field.path];\n                              // In case we have nulls or undefineds we merge them in a single 'Not defined' field\n                              let notDefined = 0;\n                              if (fieldData && fieldData.null) {\n                                notDefined += fieldData.null;\n                                delete fieldData.null;\n                              }\n                              if (!fieldData) return null;\n                              // If the field values are set to be selectable as checkboxes\n                              if (field.checkbox) {\n                                // For each entry generate a checkbox\n                                const entries = Object.entries(fieldData).sort(([aKey, aCount], [bKey, bCount]) => bCount - aCount);\n                                return entries.map(([option, count], i) => {\n                                  // Check if this option is selected from the URL query\n                                  const isChecked = !!(currentQuery[field.path] && \n                                    Array.isArray(currentQuery[field.path]) && \n                                    currentQuery[field.path].includes(option));\n                                  \n                                  return (\n                                    <FormControlLabel\n                                      key={i}\n                                      onChange={() => updateQueryValue(field.path, option, { isArray: true })}\n                                      control={\n                                        <Checkbox\n                                          checked={isChecked}\n                                          style={{ color: 'black' }}\n                                          inputProps={{ 'data-key': option }}\n                                        />\n                                      }\n                                      label={`${option} (${count})`}\n                                      style={{ color: 'black' }}\n                                    />\n                                  );\n                                });\n                              }\n                              else {\n                                const options = Object.entries(fieldData).map(\n                                  ([value, count]) => ({ label: value, count })\n                                ).sort((a, b) => b.count - a.count);\n                                \n                                return (\n                                  <div className={style.aligned}>\n                                    <Autocomplete\n                                      options={options}\n                                      getOptionLabel={option => option.label}\n                                      renderOption={(props, option) => <li {...props}>{option.label + ' (' + option.count + ')'}</li>}\n                                      sx={{ width: '50vh' }}\n                                      clearOnBlur={false}\n                                      value={currentQuery[field.path] ? \n                                        options.find(opt => opt.label === currentQuery[field.path]) || null : \n                                        null}\n                                      renderInput={(params) => \n                                        <TextField\n                                          {...params}\n                                          title={'Type here the value for the specified field'}\n                                          placeholder={'e.g. ' + field.example}\n                                          className={style.spaced}\n                                        />}\n                                      onChange={(event, newValue) => {\n                                        const value = newValue ? newValue.label : '';\n                                        updateQueryValue(field.path, value);\n                                      }}\n                                    />\n                                  </div>\n                                );\n                              }\n                            }\n                            // In case it is a field without options (i.e. input is specified through a textfield)\n                            else {\n                              // If the field is a string we show a unique textfield\n                              if (field.type === 'string') {\n                                return (\n                                  <div className={style.aligned}>\n                                    <TextField\n                                      title={'Type here the value for the specified field'}\n                                      value={currentQuery[field.path] || ''}\n                                      onChange={({ target: { value } }) => updateQueryValue(field.path, value)}\n                                      onKeyPress={event => {\n                                        if (event.key === 'Enter') {\n                                          updateQueryValue(field.path, event.target.value);\n                                        }\n                                      }}\n                                      placeholder={'e.g. ' + field.example}\n                                      inputProps={{ inputMode: 'text' }}\n                                      className={style.spaced}\n                                    />\n                                  </div>\n                                );\n                              }\n                              // Otherwise it must be a number, since booleans will always be in options\n                              // Then show two textfields: one for the minimum and one for the maximum\n                              else {\n                                // Get min and max values from query if available\n                                const minValue = currentQuery[field.path] && currentQuery[field.path].min || '';\n                                const maxValue = currentQuery[field.path] && currentQuery[field.path].max || '';\n                                \n                                return (\n                                  <div className={style.aligned}>\n                                    <TextField\n                                      title={'Type here the value for the specified field'}\n                                      value={minValue}\n                                      onChange={({ target: { value } }) => \n                                        updateQueryValue(field.path, value, { isRange: true, rangeSide: 'min' })}\n                                      onKeyPress={event => {\n                                        if (event.key === 'Enter') {\n                                          updateQueryValue(field.path, event.target.value, \n                                            { isRange: true, rangeSide: 'min'}\n                                          );\n                                        }\n                                      }}\n                                      placeholder={'> e.g. ' + field.example}\n                                      inputProps={{\n                                        inputMode: 'numeric',\n                                        pattern: '[0-9.,+-]*',\n                                      }}\n                                      className={style.spaced}\n                                    />\n                                    <span style={{padding: '3px'}}>-</span>\n                                    <TextField\n                                      title={'Type here the value for the specified field'}\n                                      value={maxValue}\n                                      onChange={({ target: { value } }) => \n                                        updateQueryValue(field.path, value, { isRange: true, rangeSide: 'max' })}\n                                      onKeyPress={event => {\n                                        if (event.key === 'Enter') {\n                                          updateQueryValue(field.path, event.target.value, \n                                            {isRange: true, rangeSide: 'max'}\n                                          );\n                                        }\n                                      }}\n                                      placeholder={'< e.g. ' + field.example}\n                                      inputProps={{\n                                        inputMode: 'numeric',\n                                        pattern: '[0-9.,+-]*',\n                                      }}\n                                      className={style.spaced}\n                                    />\n                                  </div>\n                                );\n                              }\n                            }\n                          })()}\n                        </AccordionDetails>\n                      </Accordion>\n                    );\n                  })}\n                </div>\n              </AccordionDetails>\n            </Accordion>\n          );\n        })}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default CustomSearch;\n","// extracted by mini-css-extract-plugin\nexport default {\"highlightable\":\"style_highlightable__biB77\"};","import React from 'react';\nimport { escapeRegExp, memoize } from 'lodash-es';\n\nimport style from './style.module.css';\n\n// A fragment of text is converted to a specific RegExp format\n// The generated RexExp matches each word from the original text (highlight)\nconst spaces = /\\s+/;\n// Memoize saves the result of the function when the properties are the same\nconst getRegExFor = memoize(\n  highlight =>\n    new RegExp(\n      `(${highlight\n        .toString() // Convert it into a string\n        .trim() // Remove spaces\n        .split(spaces) // Split by a previously defined RegExp\n        // escapeRegExp returns a string which \"escapes\" RegExp special characters\n        .map(escapeRegExp) // It is equivalent to adding \"\\\" before each special character\n        .join('|')})`, // Finally, join all split fragments separated by \"|\"\n      'i', // \"i\" is a RegExp flag called \"ignore case\"\n    ),\n);\n\n// This function finds text fragments inside a text input which must be highlighted\n// This function expects to recieve 2 propierties: \"highlight\" and \"children\"\n// \"highlight\" is a text search provided by the user\n// \"children\" is all the text where the highlight must be serached\n// Propierties are delcared as <Highlight highlight={highlight}> children </Highlight>\n// This function returns multiple reacts elements which contain text chunks tagged to be marked or not\nconst Highlight = React.memo(({ highlight, children }) => {\n  // If multiple childs are requested then apply highlight to each of them separatedly\n  if (Array.isArray(children)) {\n    return children.map((child, i) => (\n      <Highlight highlight={highlight} key={i}>\n        {child}\n      </Highlight>\n    ));\n  }\n\n  // If there is no text to highlight or selected children, send the children back\n  // If children is not a string or a finite number, send the children back\n  if (\n    !highlight ||\n    !children ||\n    !(typeof children === 'string' || Number.isFinite(children))\n  ) {\n    return children || null; // If children is falsy (undefined or similar) returns null instead, which is supported by React\n  }\n\n  // Generates a RegExp pattern that matches each word from the provided text search (highlight)\n  const re = getRegExFor(highlight);\n\n  return (\n    <span className={style.highlightable}>\n      {children\n        .toString() // Convert it into a string\n        .split(re) // Split the children by the previously generated RegExp pattern\n        .filter(Boolean) // Save only non empty (\"\") strings\n        .map((chunk, index) =>\n          React.createElement(\n            // Create a new React element for each chunk\n            // Since children has been split by the \"re\" RegExp pattern, the half of the chunks should match this pattern\n            // Chunks wich match \"re\" are tagged as \"mark\" and chunk which do not match are tagged as \"span\"\n            re.test(chunk) ? 'mark' : 'span',\n            { key: index }, // Save the array index as \"key\" attribute of an object\n            chunk, // save the chunk itself\n          ),\n        )}\n    </span>\n  );\n});\n\nexport default Highlight;\n","// extracted by mini-css-extract-plugin\nexport default {\"table-body\":\"style_table-body__UaSDI\",\"invalid-results\":\"style_invalid-results__xfJgr\",\"table-head\":\"style_table-head__tmuYe\",\"not-published\":\"style_not-published__KTvNz\",\"error-row\":\"style_error-row__LE6tS\",\"center\":\"style_center__5C2Uk\",\"sort\":\"style_sort__d7lWZ\",\"no-results-card\":\"style_no-results-card__hJ248\",\"minheight\":\"style_minheight__Qpr-9\",\"no-results-text\":\"style_no-results-text__PtOSj\",\"analysis\":\"style_analysis__M4Th0\",\"reduced-margin\":\"style_reduced-margin__XWbYA\",\"tab\":\"style_tab__4zoWO\",\"small\":\"style_small__QxCJm\",\"browser\":\"style_browser__HmO0n\",\"left-bar\":\"style_left-bar__kq-vA\",\"right-bar\":\"style_right-bar__jr0l7\",\"search\":\"style_search__c+hyw\",\"selector\":\"style_selector__XVrF1\",\"fillheight\":\"style_fillheight__1UWvV\"};","import React, { useLayoutEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport cn from 'classnames';\nimport { TableRow, TableCell, Chip } from '@mui/material';\nimport LazyImg from '../../components/lazy-img';\nimport Highlight from '../../components/highlight';\nimport reducedMotion from '../../utils/reduced-motion';\nimport { NICE_NAMES } from '../../utils/constants';\nimport style from './style.module.css';\nimport { Project } from '../../utils/project-manager';\n\nconst na = 'Not available';\n\n// These keyframes are used for an animate()\n// An image opacity is iterated between 0 (invisible) and 1 (visible)\nconst keyframes = {\n  opacity: [0, 1],\n};\n\n// Same image vertical position is iterated between 0 and 50 pixels (It may have no effect)\n// This is only set when user has not activated the reduced motion option from the navigator\nif (!reducedMotion()) {\n  keyframes.transform = ['translateX(2.5%)', 'translateX(0)'];\n}\n  \nconst Row = ({ projectData, highlight, index, previewUrl }) => {\n  // Parse the project data using the project manager\n  const project = new Project(projectData);\n  // Harvest data from the project object\n  const {\n    identifier,\n    accession,\n    published,\n    pdbInfo,\n    metadata,\n    mdCount,\n    directions\n  } = project;\n  // Declare a hook from a type called \"useRef\"\n  const ref = useRef(null);\n  // This type of hook is like a \"useEffect\" but it runs after the layout is calculated and before it is painted\n  // useEffect here would re-render the whole page, thus creating \"load hesitation\" and a delay\n  useLayoutEffect(() => {\n    if (!(ref.current && ref.current.animate)) return;\n    // Animate the rows to move from right to left when they appear\n    const animation = ref.current.animate(keyframes, {\n      fill: 'both',\n      easing: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',\n      duration: 750,\n      // Set a delay which depends on the index to create a cascade effect\n      delay: 100 + index * 75,\n    });\n\n    return () => animation.cancel();\n  }, [index]);\n\n  // In case we retrieve an errored entry\n  if (project.error) return (\n    <TableRow ref={ref} className={style['error-row']}>\n      {/* accession */}\n      <TableCell className={style.center}> {project.accession} </TableCell>\n      {/* name */}\n      <TableCell className={style.center}> {project.error} </TableCell>\n      {/* groups */}\n      <TableCell className={style.center}> - </TableCell>\n      {/* analyses */}\n      <TableCell className={style.center}> - </TableCell>\n    </TableRow>\n  );\n\n  // Returns a table with multiple rows\n  // The 3 first rows: accession, PDB accession and name are searchable. Search text is highlighted when found\n  return (\n    <TableRow\n      ref={ref} // \"ref\" is a method from TableRow and many other rendered elements\n      className={cn({ [style['not-published']]: !published })}\n    >\n      {/* accession */}\n      <TableCell className={style.center}>\n        <Link\n          to={{\n            pathname: `/id/${accession || identifier}/overview`,\n            // We pass the selected project data so there is no need to query it again\n            state: { projectData: project },\n          }}\n        >\n          <Highlight highlight={highlight}>\n            {accession || identifier}\n            {!published && <div>(not published)</div>}\n          </Highlight>\n        </Link>\n        {mdCount > 1 && <div className={style.small}>{`${mdCount} MDs`}</div>}\n      </TableCell>\n      {/* name */}\n      <TableCell className={style.center}>\n        <Highlight highlight={highlight}>\n          {metadata && metadata.NAME\n            ? metadata.NAME\n            : pdbInfo && pdbInfo.compound\n            ? pdbInfo.compound\n            : na}\n        </Highlight>\n      </TableCell>\n      {/* preview */}\n      <TableCell className={style.center}>\n        <LazyImg\n          src={previewUrl}\n          width=\"110\"\n          height=\"110\"\n          loading=\"lazy\"\n          alt={`Project preview`}\n        />\n      </TableCell>\n      {/* analyses */}\n      <TableCell className={style.center}>\n        {Object.entries(directions)\n          // Display only available directions\n          .filter(([direction, available]) => available)\n          // For each direction create a clickable button which links to the direction route\n          .map(([direction, available]) => (\n            <Chip\n              key={direction}\n              clickable\n              className={style.analysis}\n              component={Link}\n              to={{\n                pathname: `/id/${accession || identifier}/${direction}`,\n                // We pass the selected project data so there is no need to query it again\n                state: { projectData: project },\n              }}\n              label={NICE_NAMES.get(direction) || direction}\n              variant=\"outlined\"\n            />\n          ))}\n      </TableCell>\n      {/* date */}\n    </TableRow>\n  );\n};\n\nRow.displayName = 'Row';\nexport default Row;","import React from 'react';\nimport {\n\tTablePagination,\n\tTableRow,\n} from '@mui/material';\nimport { stringify } from 'qs';\n\n// Define non-changing props used by the table footer\nconst rowsPerPageOptions = [5, 10, 25, 50];\nconst backIconButtonProps = { title: 'Previous page' };\nconst nextIconButtonProps = { title: 'Next page' };\n\n/* Table footer used to change the page to see more results */\nconst Pagination = ({\n\tmatchCount,\n\tmdCount,\n\tsearch,\n\tlocation,\n\thistory,\n\tqueryPayload,\n\tcomponent = 'div',\n\tcolSpan,\n\tDEFAULT_LIMIT,\n\tDEFAULT_PAGE\n}) => {\n\treturn (\n\t\t<TableRow>\n\t\t\t<TablePagination\n\t\t\t\t// IMPORTANT: Pagination is controled through the 'history', which may be updated from 'search'\n\t\t\t\t// Many of the following variables are methods from TablePagination (They are tagged as MTP). https://material-ui.com/api/table-pagination/\n\t\t\t\trowsPerPageOptions={rowsPerPageOptions} // (MTP) Optional numbers of rows displayed in each page. It can be modified by the user.\n\t\t\t\tcolSpan={6} // Set the anchor of columns which is taken as a reference for the horizontal position of the footer\n\t\t\t\tcount={matchCount} // (MTP) Total number of rows\n\t\t\t\trowsPerPage={+search.limit || DEFAULT_LIMIT} // (MTP) The actual number of rows displayed\n\t\t\t\tpage={(+search.page || DEFAULT_PAGE) - 1} // (MTP) The actual page\n\t\t\t\tonPageChange={(_, page) => {\n\t\t\t\t\t// (MTP) When the page is changed\n\t\t\t\t\thistory({\n\t\t\t\t\t\t...location, // Load all location variables: hast, pathname, search and state\n\t\t\t\t\t\t// Convert into a single encoded string all parameters listed below\n\t\t\t\t\t\tsearch: stringify({\n\t\t\t\t\t\t\tsearch: search.search,\n\t\t\t\t\t\t\tquery: search.query,\n\t\t\t\t\t\t\toption: search.option,\n\t\t\t\t\t\t\tpage: page + 1 === DEFAULT_PAGE ? undefined : page + 1,\n\t\t\t\t\t\t\tlimit:\n\t\t\t\t\t\t\t\t!search.limit || +search.limit === DEFAULT_LIMIT\n\t\t\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t\t\t: +search.limit,\n\t\t\t\t\t\t}),\n\t\t\t\t\t});\n\t\t\t\t}}\n\t\t\t\tonRowsPerPageChange={({ target: { value } }) => {\n\t\t\t\t\t// (MTP) When the rowsPerPage is modified by the user\n\t\t\t\t\thistory({\n\t\t\t\t\t\t...location, // Load all location variables: hast, pathname, search and state\n\t\t\t\t\t\t// Convert into a single encoded string all parameters listed below\n\t\t\t\t\t\tsearch: stringify({\n\t\t\t\t\t\t\tsearch: search.search,\n\t\t\t\t\t\t\tquery: search.query,\n\t\t\t\t\t\t\toption: search.option,\n\t\t\t\t\t\t\tlimit: +value === DEFAULT_LIMIT ? undefined : value,\n\t\t\t\t\t\t}),\n\t\t\t\t\t});\n\t\t\t\t}}\n\t\t\t\tbackIconButtonProps={backIconButtonProps} // (MTP) Non-changing propierties of the back page button\n\t\t\t\tnextIconButtonProps={nextIconButtonProps} // (MTP) Non-changing propierties of the next page button\n\t\t\t\tlabelDisplayedRows={({ from, to, count }) => {\n\t\t\t\t\treturn `${from}-${to} of ${count} projects (${mdCount} MDs)`;\n\t\t\t\t}}\n\t\t\t/>\n\t\t</TableRow>\n\t);\n};\n\nexport default Pagination;","// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"style_searchbar__L3fSk\",\"searchbar-icon\":\"style_searchbar-icon__o1zED\",\"searchbar-letters\":\"style_searchbar-letters__NY7xQ\"};","import React, { useState, useEffect, useCallback } from 'react';\nimport { parse, stringify } from 'qs';\nimport { debounce } from 'lodash-es';\n\nimport { InputAdornment, TextField } from '@mui/material';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport { docs } from '../../help/documentation';\n\nimport style from './style.module.css';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { HOST_CONFIG } from '../../../utils/constants';\n\n// Half second delay (500 ms) to process changes in the search bar\nconst DEBOUNCE_DELAY = 500;\n\n// Define the non-changing props\nconst inputProps = {\n  'aria-label': 'Search projects by text',\n  startAdornment: (\n    <InputAdornment position=\"start\">\n      <FontAwesomeIcon\n        icon={faSearch}\n        size=\"2x\"\n        className={style['searchbar-icon']}\n      />\n    </InputAdornment>\n  ),\n  classes: {\n    input: style['searchbar-letters'],\n  },\n};\n\n// This function is never called directly, but it is called indirectly by calling \"debouncedUpdateLocation\"\nexport const updateLocation = (location, history, value) => {\n  const { search, ...nextSearchObject } = parse(location.search, {\n    ignoreQueryPrefix: true,\n  });\n  // If should replace it would be like a history.replace\n  // Otheriwse it would be like a history.push\n  const shouldReplace = Boolean(search) === Boolean(value);\n  if (value) nextSearchObject.search = value;\n  if (search === value) return;\n  // If this search is different to the previous search\n  // Reset page to the first page\n  nextSearchObject.page = undefined;\n  // Update history\n  history({\n    ...location,\n    search: stringify(nextSearchObject),\n    replace: shouldReplace,\n  });\n};\n\n// \"debounce\" is a method from the \"lodash\" library that invokes a function after a time delay\n// debounced functions are cancellable before the time delay has passed\n// debounced function, to avoid changing the URL too much while typing\nconst debouncedUpdateLocation = debounce(updateLocation, DEBOUNCE_DELAY);\n\n// This function is called each time that a letter is typed in the search bar\nconst Search = () => {\n  // Get the history and the location\n  const location = useLocation();\n  const history = useNavigate();\n  // Here, parse converts a query formatted search (e.g. \"?search=x\") in a string only with the text search (e.g. \"x\")\n  // Return the parsed searh text (value) and a function to change this value (SetValue)\n  const [value, setValue] = useState(\n    parse(location.search, { ignoreQueryPrefix: true }).search,\n  );\n  // Cancel the last debouncedUpdateLocation if it has not been executed yet because there is a new change\n  useEffect(() => debouncedUpdateLocation.cancel, []);\n  // Update the state and the query search in the URL with the new searched value\n  const handleChange = useCallback(\n    ({ target: { value } }) => {\n      setValue(value);\n      debouncedUpdateLocation(location, history, value);\n    },\n    [location, history],\n  );\n  const doc = docs.find(doc => doc.id === 'browser');\n\n  return (\n    <TextField\n      title={doc.text}\n      value={value || ''}\n      onChange={handleChange}\n      className={style.searchbar}\n      InputProps={inputProps}\n      placeholder={HOST_CONFIG.searchExample}\n    />\n  );\n};\n\nexport default Search;\n","// React logic\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport CustomSearch from './custom-search';\nimport Row from './row';\nimport Pagination from './pagination';\n\n// String managers\nimport { parse, stringify } from 'qs';\n\n// Classnames\nimport cn from 'classnames';\n\n// Visual assets\nimport {\n  CardContent,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableFooter,\n  Typography,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormControl,\n  Button\n} from '@mui/material';\n\n// Additional components\nimport Card from '../../components/animated-card'; // The exceled parcels in which almost all features are based\nimport Loading from '../../components/loading'; // Displays an animated \"loading\" circle\n\n// API acces\nimport useAPI from '../../hooks/use-api';\n\n// Constants\nimport {\n  BASE_PATH_PROJECTS,\n  HOST_CONFIG,\n} from '../../utils/constants';\n\n// CSS styles\nimport style from './style.module.css';\n\n// It is used to check if the user has the reduced motion setting active\nimport { SCREENSHOT_FILENAME } from '../../utils/constants';\n\n// The search bar\nimport Search from './search';\n\nconst DEFAULT_PAGE = 1;\nconst DEFAULT_LIMIT = 10;\n\n// Placeholder for when there is no option selected\nconst all = 'All results';\n\n// Get the options field from the host configuration e.g. collections\nconst optionsField = HOST_CONFIG.optionsField;\n\n// Options Filter Component\nconst OptionsFilter = ({ location, search, history }) => {\n  // State of the selected option\n  const [selectedOption, setSelectedOption] = useState(search.option || all);\n\n  // Options data from the API\n  const optionsUrl = optionsField ? `${BASE_PATH_PROJECTS}/options?projection=${optionsField}` : null;\n  const { payload: optionsPayload, error: optionsError } = useAPI(optionsUrl);\n\n  // Add the all flag at the beginning as default value\n  // Remove null values since they are not queryable\n  const availableOptions = useMemo(() => {\n    let actualOptions = [];\n    if (optionsPayload)\n      actualOptions = Object.keys(optionsPayload[optionsField]).filter(key => key !== 'null');\n    return [all, ...actualOptions];\n  }, [optionsPayload]);\n\n  // Sync selectedOption with the URL (search.option)\n  useEffect(() => {\n    setSelectedOption(search.option || all);\n  }, [search.option]);\n\n  // Handle when user clicks on the option selector\n  const handleChange = useCallback(\n    ({ target: { value } }) => {\n      // Update the history (which does not rerender the page)\n      history({\n        ...location,\n        search: stringify({\n          ...search,\n          // Do not keep the page\n          page: DEFAULT_PAGE,\n          // Thus if option is changed then the page is reset\n          option: value && value !== all ? value : undefined,\n        }),\n      });\n      // Update the actual value thus rerendering the page\n      setSelectedOption(value);\n    }, [location, search, setSelectedOption]\n  );\n\n  if (!optionsField) return null;\n  if (optionsError) return optionsError.toString();\n\n  return (\n    <FormControl className={style.selector}>\n      <InputLabel>{HOST_CONFIG.optionsLabel}</InputLabel>\n      <Select\n        label={HOST_CONFIG.optionsLabel}\n        value={selectedOption !== all ? selectedOption : ''}\n        onChange={handleChange}\n        className={style.fillheight}\n      >\n        {availableOptions.map((value, i) => (\n          <MenuItem key={i} value={value}>\n            {HOST_CONFIG.optionsNiceNames[value] || value}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n\n// Component to handle sorting state\nconst SortLogic = ({ search, location, history }) => {\n  // Combined state for sort configuration\n  const [sortState, setSortState] = useState(() => {\n    // Initialize from URL if available\n    if (search.sortField && search.sortDirection) {\n      return {\n        field: search.sortField,\n        direction: search.sortDirection === 'asc' ? 1 : -1, //-1 for descending, 1 for ascending\n        option: `${search.sortField}-${search.sortDirection}`\n      };\n    }\n    // Default sort state\n    return { field: 'added', direction: -1, option: 'added-desc' };\n  });\n\n  // Syncronize search and sortState\n  useEffect(() => {\n    if (search.sortField && search.sortDirection) {\n      setSortState({\n        field: search.sortField,\n        direction: search.sortDirection === 'asc' ? 1 : -1,\n        option: `${search.sortField}-${search.sortDirection}`,\n      });\n    } else {\n      // Reset to default sort state if no sort parameters are in the URL\n      setSortState({ field: 'added', direction: -1, option: 'added-desc' });\n    }\n  }, [search]);\n\n  // Available sort options with both ascending and descending for each field\n  const sortOptions = [\n    { value: 'accession-desc', label: 'Accession ▼', field: 'accession', direction: 'desc' },\n    { value: 'accession-asc', label: 'Accession ▲', field: 'accession', direction: 'asc' },\n    { value: 'name-desc', label: 'Name ▼', field: 'name', direction: 'desc' },\n    { value: 'name-asc', label: 'Name ▲', field: 'name', direction: 'asc' },\n    { value: 'added-desc', label: 'Added Date ▼', field: 'added', direction: 'desc' },\n    { value: 'added-asc', label: 'Added Date ▲', field: 'added', direction: 'asc' },\n    { value: 'updateDate-desc', label: 'Update Date ▼', field: 'updateDate', direction: 'desc' },\n    { value: 'updateDate-asc', label: 'Update Date ▲', field: 'updateDate', direction: 'asc' },\n  ];\n\n  // Unified sort handler for both dropdown changes and column header clicks\n  const handleSort = useCallback((fieldOrValue, fromColumnHeader = false) => {\n    let field, direction;\n\n    if (fromColumnHeader) {\n      // If coming from column header, toggle direction for same field or use ascending for new field\n      field = fieldOrValue;\n      direction = sortState.field === field ?\n        (sortState.direction === 1 ? 'desc' : 'asc') :\n        'asc';\n    } else {\n      // If coming from dropdown, get field and direction from the selected option\n      const selectedOption = sortOptions.find(option => option.value === fieldOrValue);\n      if (!selectedOption) return;\n\n      field = selectedOption.field;\n      direction = selectedOption.direction;\n    }\n\n    // Convert direction string to number (asc = 1, desc = -1)\n    const directionValue = direction === 'asc' ? 1 : -1;\n    // Update the combined sort state\n    const newSortState = { field, direction: directionValue, option: `${field}-${direction}` };\n\n    setSortState(newSortState);\n\n    // Use metadata.NAME for name sorting, added for date sorting, updateDate for update date sorting\n    let sortField = field;\n    if (field === 'name') sortField = 'metadata.NAME';\n    else if (field === 'added') sortField = '_id';\n    else if (field === 'updateDate') sortField = 'updateDate';\n\n    history({\n      ...location,\n      search: stringify({\n        ...search,\n        sort: JSON.stringify({ [sortField]: directionValue }),\n        sortField: field,\n        sortDirection: direction\n      }),\n    });\n  }, [sortOptions, location, search, sortState, history]);\n\n  return { sortState, sortOptions, handleSort };\n};\n\nconst Browse = () => {\n  // Get the location and the history\n  const location = useLocation();\n  const history = useNavigate();\n  // Convert the URL string into an object\n  // This \"parse\" comes from the \"qs\" library\n  // WARNING: The default \"parse\" decoding behaviour has a strong conflict between '+' and blank space character\n  // This workaround first decodes and then parses without decoding\n  // The 'decoder' option is necessary for not decoding\n  const search = useMemo(() => {\n    const decoded = decodeURIComponent(location.search);\n    return parse(decoded, {\n      ignoreQueryPrefix: true,\n      decoder: c => c,\n    });\n  }, [location.search]);\n  // State for sorting\n  const { sortState, sortOptions, handleSort } = SortLogic({ search, location, history });\n\n  // Convert the specified object back to a single encoded string for the query\n  const searchString = useMemo(() =>\n    stringify({\n      search: search.search,\n      query: search.query,\n      ref: search.ref,\n      page: search.page || DEFAULT_PAGE,\n      limit: search.limit || DEFAULT_LIMIT,\n      filter: search.option && search.option !== all && `${optionsField}+*${search.option}`,\n      sort: JSON.stringify({\n        [sortState.field === 'name' ? 'metadata.NAME' :\n         sortState.field === 'added' ? '_id' :\n         sortState.field === 'updateDate' ? 'updateDate' :\n         sortState.field]: sortState.direction\n      }),\n      countMds: 'true',\n    }),\n    [search, sortState]\n  );\n\n  // Scroll up when the page is changed\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [search.page]);\n\n  // Save the previous query payload\n  // It is rendered in low opacity when the new query payload is empty\n  const previousPayload = useRef(null);\n\n  // Projects data from the API\n  const queryUrl = `${BASE_PATH_PROJECTS}?${searchString}`;\n  const { loading: queryLoading, payload: queryPayload, error: queryError } = useAPI(queryUrl);\n\n  // While loading\n  // Code above is runned multiple times (around 5) each time the browser is loaded\n  if (queryLoading && !previousPayload.current) return <Loading />;\n\n  // When error\n  // This usually happens when the API does not work properly\n  if (queryError) return queryError.toString();\n\n  // Define the results for the final render since it won't support 'null's\n  let results;\n  let matchCount = 0;\n  let mdCount = 0;\n  if (queryPayload) {\n    results = queryPayload.projects;\n    matchCount = queryPayload.filteredCount;\n    mdCount = queryPayload.totalMdsCount;  \n    previousPayload.current = queryPayload;\n  } else if (previousPayload.current) {\n    results = previousPayload.current.projects;\n    matchCount = previousPayload.current.filteredCount;\n    mdCount = previousPayload.current.totalMdsCount;  \n  } else results = [];\n\n  // Set the screenshot URLs for the API\n  const screenshotsUrls = results.map(\n    project => `${BASE_PATH_PROJECTS}/${project.identifier}/files/${SCREENSHOT_FILENAME}`\n  );\n\n  // When success\n  return (\n    <Card>\n      <CardContent className={style.browser}>\n        <div className={style['left-bar']}>\n          <CustomSearch /> {/* Add the CustomSearch component */}\n        </div>\n        <div className={style['right-bar']}>\n          <div className={style.search}>\n            <Search />\n            <OptionsFilter location={location} search={search} history={history} />\n            <FormControl className={style.selector}>\n              <InputLabel>Sort by</InputLabel>\n              <Select\n                label=\"Sort by\"\n                value={sortState.option}\n                onChange={({ target: { value } }) => handleSort(value)}\n                className={style.fillheight}\n              >\n                {sortOptions.map((option) => (\n                  <MenuItem key={option.value} value={option.value}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </div>\n\n          {/* Render a 'no results' card when there are no results for the last search */}\n          {!queryLoading && !queryPayload ? (\n            <Card className={style['no-results-card']}>\n              <Typography variant=\"h5\" className={style['no-results-text']}>\n                No results were found\n              </Typography>\n            </Card>\n          ) : []}\n\n          <Table>\n            {/*className={cn({ [style['invalid-results']]: !queryPayload })} */}\n            {/* Table head with the names of each colum */}\n            <TableHead className={style['table-head']}>\n              {/* RUBEN: I want to put some pagination at the top but at the moment this looks ugly\n              <Pagination\n                matchCount={matchCount}\n                mdCount={mdCount}\n                search={search}\n                location={location}\n                history={history}\n                queryPayload={queryPayload}\n                DEFAULT_LIMIT={DEFAULT_LIMIT}\n                DEFAULT_PAGE={DEFAULT_PAGE}\n              /> */}\n              <TableRow>\n                <TableCell className={style.center}>accession\n                  <Button className={style.sort} onClick={() => handleSort('accession', true)}>\n                    {sortState.field === 'accession' ? (sortState.direction === 1 ? \"▲\" : \"▼\") : \"⋮\"}\n                  </Button>\n                </TableCell>\n                <TableCell className={style.center}>name\n                  <Button className={style.sort} onClick={() => handleSort('name', true)}>\n                    {sortState.field === 'name' ? (sortState.direction === 1 ? \"▲\" : \"▼\") : \"⋮\"}\n                  </Button>\n                </TableCell>\n                <TableCell className={style.center}>preview</TableCell>\n                <TableCell className={style.center}>analyses</TableCell>\n              </TableRow>\n            </TableHead>\n            {/* Table body with the content, which is defined above in the Row constant */}\n            {/* When the search has no results the table gets an opacity of 0.25 */}\n            <TableBody\n              className={queryPayload\n                ? cn(style['table-body'])\n                : cn(style['table-body'], style['invalid-results'])\n              }\n            >\n              {/* Create a row for each project in the query payload*/}\n              {results.map((project, index) => (\n                <Row\n                  // Load the propierties (inputs) that the class \"Row\" is expecting\n                  projectData={project} // Load identifier, accession, published, pdbInfo and analyses\n                  highlight={search.search} // Load the highlight\n                  index={index} // Load the index\n                  previewUrl={screenshotsUrls[index]}\n                  key={index} // Add a key for react to do not complain\n                />\n              ))}\n            </TableBody>\n            <TableFooter>\n              <Pagination\n                matchCount={matchCount}\n                mdCount={mdCount}\n                search={search}\n                location={location}\n                history={history}\n                queryPayload={queryPayload}\n                DEFAULT_LIMIT={DEFAULT_LIMIT}\n                DEFAULT_PAGE={DEFAULT_PAGE}\n              />\n            </TableFooter>\n          </Table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nBrowse.displayName = 'Browse';\nexport default Browse;\n"],"names":["KEYFRAMES","opacity","reducedMotion","transform","ANIMATION_OPTIONS","fill","easing","duration","forwardRef","_ref","ref","overrideComponent","props","containerRef","useRef","useLayoutEffect","node","current","firstElementChild","animate","index","Array","from","document","querySelectorAll","findIndex","section","animation","delay","cancel","Component","Card","_jsx","className","style","children","component","queryFields","HOST_CONFIG","optionsField","availableFields","Object","values","reduce","acc","curr","concat","parseUrlQuery","urlQuery","parsedQuery","JSON","parse","internalQuery","entries","forEach","key","value","field","find","f","path","$regex","undefined","$gt","$lt","min","max","checkbox","NA_TAG","String","replace","$or","isArray","condition","length","push","$and","firstCondition","keys","orCondition","orKey","orValue","error","console","parseQuery","currentQuery","currentLocation","currentParams","decodeURIComponent","search","ignoreQueryPrefix","decoder","c","query","map","_ref2","encodeURIComponent","join","errors","entry","_ref3","currentField","parseType","string","$eq","type","parsedValue","$options","isNaN","Error","currentAnd","v","currentOr","parseAndAddQuery","params","stringify","_ref4","CustomSearch","history","useNavigate","location","useLocation","initialQuery","setQuery","useState","queryUpdated","setQueryUpdated","isUserInitiatedSearchRef","useEffect","debouncedParseAndSearch","debounce","parseAndSearch","browseURL","projectionQuery","filter","options","optionsUrl","BASE_PATH_PROJECTS","payload","optionsPayload","optionsError","useAPI","name","cacheOn","expandedCategory","setExpandedCategory","expandedFields","setExpandedFields","initializeExpandedState","defaultOpen","arguments","categoryState","category","fieldState","flat","handleCategoryChange","event","isExpanded","toString","updateQueryValue","fieldPath","isRange","rangeSide","indexOf","splice","prev","tall","_jsxs","CardContent","paddingLeft","advanced","href","_ref5","fields","Accordion","expanded","onChange","disableGutters","AccordionSummary","categorySummary","Typography","variant","margined","AccordionDetails","accordion","summary","Loading","fieldData","notDefined","null","sort","_ref6","_ref7","aKey","aCount","bKey","bCount","_ref8","i","option","count","isChecked","includes","FormControlLabel","control","Checkbox","checked","color","inputProps","label","_ref9","a","b","aligned","Autocomplete","getOptionLabel","renderOption","sx","width","clearOnBlur","opt","renderInput","TextField","title","placeholder","example","spaced","newValue","_ref0","target","onKeyPress","inputMode","minValue","maxValue","_ref1","pattern","padding","_ref10","spaces","getRegExFor","memoize","highlight","RegExp","trim","split","escapeRegExp","Highlight","React","child","Number","isFinite","re","Boolean","chunk","test","keyframes","Row","projectData","previewUrl","project","Project","identifier","accession","published","pdbInfo","metadata","mdCount","directions","TableRow","TableCell","cn","Link","to","pathname","state","NAME","compound","LazyImg","src","height","loading","alt","direction","available","Chip","clickable","NICE_NAMES","get","displayName","rowsPerPageOptions","backIconButtonProps","nextIconButtonProps","matchCount","queryPayload","colSpan","DEFAULT_LIMIT","DEFAULT_PAGE","TablePagination","rowsPerPage","limit","page","onPageChange","_","onRowsPerPageChange","labelDisplayedRows","startAdornment","InputAdornment","position","FontAwesomeIcon","icon","faSearch","size","classes","input","debouncedUpdateLocation","updateLocation","nextSearchObject","shouldReplace","Search","setValue","handleChange","useCallback","doc","docs","id","text","InputProps","searchExample","all","OptionsFilter","selectedOption","setSelectedOption","availableOptions","useMemo","actualOptions","FormControl","InputLabel","optionsLabel","Select","MenuItem","optionsNiceNames","Browse","decoded","sortState","sortOptions","handleSort","setSortState","sortField","sortDirection","fieldOrValue","directionValue","SortLogic","searchString","countMds","window","scrollTo","previousPayload","queryUrl","queryLoading","queryError","results","projects","filteredCount","totalMdsCount","screenshotsUrls","SCREENSHOT_FILENAME","Table","TableHead","Button","onClick","TableBody","TableFooter","Pagination"],"sourceRoot":""}