{"version":3,"file":"static/js/electrostatic.eec0df5c.chunk.js","mappings":"8JACA,QAA4B,yB,eCM5B,MAAMA,EAAY,CAAEC,QAAS,CAAC,EAAG,KAE5BC,EAAAA,EAAAA,OACHF,EAAUG,UAAY,CAAC,mBAAoB,kBAG7C,MAAMC,EAAoB,CACxBC,KAAM,OACNC,OAAQ,iCACRC,SAAU,KAgCZ,GA5BqBC,EAAAA,EAAAA,aAAW,CAAAC,EAAkCC,KAAS,IAA1C,kBAAEC,KAAsBC,GAAOH,EAC9D,MAAMI,GAAeC,EAAAA,EAAAA,QAAO,OAE5BC,EAAAA,EAAAA,kBAAgB,KACd,MAAMC,EAAOH,EAAaI,SAAWJ,EAAaI,QAAQC,kBAC1D,IAAMF,IAAQA,EAAKG,QAAU,OAE7B,MAAMC,EAAQC,MAAMC,KAClBC,SAASC,iBAAiB,iBAC1BC,WAAUC,GAAWV,IAASU,IAE1BC,EAAYX,EAAKG,QAAQnB,EAAW,IACrCI,EACHwB,MAAe,IAARR,IAGT,MAAO,IAAMO,EAAUE,QAAQ,GAC9B,IAEH,MAAMC,EAAYnB,EAAoB,UAAYoB,EAAAA,EAElD,OACEC,EAAAA,EAAAA,KAAA,OAAKtB,IAAKG,EAAcoB,UAAWC,EAAgBC,UACjDH,EAAAA,EAAAA,KAACF,EAAS,CAACM,UAAU,aAAcxB,EAAOF,IAAKA,KAC3C,G,6JC3CV,QAA6B,0BAA7B,EAA6E,mC,eCkB7E,MAAM2B,EAAiB,CACrB,CAAEC,MAAO,eAAgBC,MAAO,mBAChC,CAAED,MAAO,qBAAsBC,MAAO,sBA2GxC,EA/F4B9B,IAcrB,IAdsB,aAC3B+B,EAAY,oBACZC,EAAmB,uBACnBC,EAAsB,iBACtBC,EAAgB,oBAChBC,EAAmB,cACnBC,EAAa,kBACbC,EAAiB,gBACjBC,EAAe,kBACfC,EAAiB,iBACjBC,EAAgB,mBAChBC,EAAkB,mBAClBC,EAAkB,cAClBC,GAAgB,GACjB3C,EACC,MAYM4C,EAAqBb,EAAaC,GAGxC,OACEa,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAACC,UAAUxB,EAAAA,EAAAA,KAACyB,EAAAA,EAAO,IAAItB,SAAA,EAC9BH,EAAAA,EAAAA,KAAC0B,EAAAA,EAAM,CACLnB,MAAOE,EACPkB,SAnBoBC,IACxBlB,EAAuBkB,EAAMC,OAAOtB,MAAM,EAmBtCN,UAAWC,EAA6BC,SAEvCK,EAAasB,KAAI,CAACC,EAAaC,KAC9BhC,EAAAA,EAAAA,KAACiC,EAAAA,EAAQ,CAAS1B,MAAOyB,EAAE7B,SACxB4B,EAAYzB,OAASyB,EAAYG,MADrBF,OAKlBrB,IACCX,EAAAA,EAAAA,KAACmC,EAAAA,EAAU,CACT5B,MAAOI,EACPgB,SA3BeC,IACrBhB,EAAoBgB,EAAMC,OAAOtB,MAAM,EA2BjCN,UAAWC,EAAiBC,SAE3BE,EAAeyB,KAAI,CAACM,EAAKJ,KACxBhC,EAAAA,EAAAA,KAACqC,EAAAA,EAAgB,CAEf9B,MAAO6B,EAAI7B,MACX+B,SAAStC,EAAAA,EAAAA,KAACuC,EAAAA,EAAK,CAACC,MAAM,YACtBlC,MAAO8B,EAAI9B,MACXmC,SAAwB,iBAAdL,EAAI9B,OAA4Bc,GAJrCY,YASMU,IAAlB7B,IACCS,EAAAA,EAAAA,MAAAqB,EAAAA,SAAA,CAAAxC,SAAA,EACEH,EAAAA,EAAAA,KAAC4C,EAAAA,EACC,CACAtC,MAAOS,EACP8B,MAAO7B,EACPT,MACEM,EACIQ,EAAmByB,QACnBzB,EAAmB0B,WAG3B/C,EAAAA,EAAAA,KAACgD,EAAAA,EAAU,CACTH,MAAO1B,EACP8B,QAnDUC,KAClBpC,GAAmB,EAmDXqC,KAAK,QAAOhD,UAEZH,EAAAA,EAAAA,KAACoD,EAAAA,EAAe,CAACC,KAAMC,EAAAA,SAEzBtD,EAAAA,EAAAA,KAAC4C,EAAAA,EACC,CACAtC,MAAOW,EACP4B,MAAO3B,EACPX,MACEM,EACIQ,EAAmB0B,QACnB1B,EAAmByB,eAKtB,C,sHC3Hf,QAAuB,oBAAvB,EAAuD,yBAAvD,EAA6F,0B,+ECsB7F,MAAMS,EAAmB,CAAEC,aAAa,EAAMC,WAAY,SAKpDC,EAAqB,CAAC,MAAO,QAAS,QAGtCC,EAAkB,cAClBC,EAAmB,eAsLzB,EApLsBC,KAGpB,MAAOC,EAAQC,IAAgBC,EAAAA,EAAAA,IAAUT,IAGnC,SAAEU,EAAQ,aAAEzD,IAAiB0D,EAAAA,EAAAA,YAAWC,EAAAA,IAGvC1D,EAAqBC,IAA0B0D,EAAAA,EAAAA,UAAS,IAGxDvD,EAAewD,IAAoBD,EAAAA,EAAAA,WAAS,IAG3CE,EAAiBC,IAAuBH,EAAAA,EAAAA,UAAS,MAGnDI,GAAyBC,EAAAA,EAAAA,KAGzBC,GAAqBC,EAAAA,EAAAA,UAAQ,KACjC,IAAKV,EAAU,OAEf,MAAMW,EAAUX,EAASY,YACzB,IAAKD,EAAS,OAEd,MAAME,GAAaC,EAAAA,EAAAA,OAChBC,MAAMtB,GACNuB,OAAO,EAAE,EAAG,EAAG,IAElB,OAAOC,EAAAA,mBAAmBC,WAAU,SAASC,GAC3CC,KAAKC,UAAYC,IAEf,MAAMC,EAASZ,EAAQW,EAAKnG,OAGtBqG,GAAWC,EAAAA,EAAAA,KAAQZ,EAAWU,IAASG,YAI7C,OADcC,SAASH,EAASI,UAAU,GAAI,GAClC,CAEhB,GAAE,GACD,CAAC5B,IAIE6B,GAAenB,EAAAA,EAAAA,UAAQ,KAC3B,IAAKV,IAAazD,EAAc,OAEhC,MAAMuB,EAAcvB,GAAgBA,EAAaC,GACjD,IAAKsB,EAAa,OAGlB,MAAOgE,EAAeC,GAAiB,CACrCjE,EAAYkE,oBACZlE,EAAYmE,qBACZpE,KAAIqE,GAAUlC,EAASmC,mBAAmBD,GAAQE,kBAG9CC,EAAqB,CACzBC,KAAM,UACN/D,MAAOkC,EAAqB,SAAW,gBACvC8B,aAAc9B,GAEV+B,EAAoB,CACxBF,KAAM,aACN/D,MAAO,WAIT+B,GAAmBmC,IAEjB,GAAgC,OAA5BA,EAAkC,CAEpClC,EAAuBmC,SAAQC,IAC7BA,EAAIJ,aAAe9B,EACnBkC,EAAI3I,QAAU,EAAG,IAInB,MAAM4I,EAAsB,CAC1B3E,KAAMH,EAAYe,QAAU,aAC5BgE,UAAWf,EACXgB,UAAWpD,KACP9C,EAAgByF,EAAqBG,GAGrCO,EAAuB,CAC3B9E,KAAMH,EAAYgB,QAAU,aAC5B+D,UAAWd,EACXe,UAAWnD,KACP/C,EAAgB4F,EAAoBH,GAG1C,MAAO,IACF9B,EACHqC,EACAG,EAEJ,CAIA,MAAMH,EAAsBH,EAAwBO,MAAKL,GAAOA,EAAIG,YAAcpD,IAClFkD,EAAoB3E,KAAOH,EAAYe,QAAU,aACjD+D,EAAoBC,UAAYf,EAChCmB,OAAOC,OAAON,EAAqBhG,EAAgByF,EAAqBG,GACxE,MAAMO,EAAuBN,EAAwBO,MAAKL,GAAOA,EAAIG,YAAcnD,IAKnF,OAJAoD,EAAqB9E,KAAOH,EAAYgB,QAAU,aAClDiE,EAAqBF,UAAYd,EACjCkB,OAAOC,OAAOH,EAAsBnG,EAAgB4F,EAAoBH,GAEjE,IAAII,EAAwB,IAMrC,MADqB,CAAEU,KAAM,EAAGC,KADZ,IAAAC,OAAOvB,EAAa,QAAAuB,OAAOtB,EAAa,KAEzC,GAClB,CACD/B,EACAS,EACAlE,EACAgE,EACA/D,EACAI,IAIF,IAAKL,GAAwC,IAAxBA,EAAa+G,OAClC,MAAO,4BAEP,IAAKtD,IAAazD,EAAc,OAAOR,EAAAA,EAAAA,KAACyB,EAAAA,EAAO,IAM/C,OACEH,EAAAA,EAAAA,MAAAqB,EAAAA,SAAA,CAAAxC,SAAA,EACEH,EAAAA,EAAAA,KAACD,EAAAA,EAAI,CAAAI,UACHmB,EAAAA,EAAAA,MAACkG,EAAAA,EAAW,CAACvH,UAAWC,EAAiBC,SAAA,EACvCH,EAAAA,EAAAA,KAACyH,EAAAA,EAAU,CAACC,QAAQ,KAAIvH,SAAC,kBACzBH,EAAAA,EAAAA,KAAC2H,EAAAA,EAAmB,CAClBnH,aAAcA,EACdC,oBAAqBA,EACrBC,uBAAwBA,EACxBG,cAAeA,EACfC,kBAdgBA,KACxBuD,GAAiBuD,IAAaA,GAAS,EAc/B7G,gBAAiB,qBACjBC,kBACE,qEAEFC,iBAAkB,oBAClBC,mBACE,gEAEFC,mBAAoB,2CAI1BnB,EAAAA,EAAAA,KAACD,EAAAA,EAAI,CAACE,UAAWC,EAAYxB,IAAKoF,EAAO3D,SAEtC4D,GACC/D,EAAAA,EAAAA,KAAC6H,EAAAA,QAAkB,CACjB5H,UAAWC,EACX4H,qBAAsB,CAAExD,EAAiBC,GACzCwD,eAAgB,EAChBjC,aAAcA,KAGhB9F,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAE8H,OAAQ,cAGzB,C,qJChNA,SAASC,EAAoBC,GAClC,OAAOC,EAAAA,EAAAA,IAAqB,UAAWD,EACzC,EACoBE,EAAAA,EAAAA,GAAuB,UAAW,CAAC,S,eCDvD,MAAMC,EAAY,CAAC,YAAa,UAoB1BC,GAAWC,EAAAA,EAAAA,IAAOC,EAAAA,EAAO,CAC7BtG,KAAM,UACNgG,KAAM,OACNO,kBAAmBA,CAAC7J,EAAO8J,IAAWA,EAAOC,MAH9BJ,EAId,KACM,CACLK,SAAU,aAwDd,EArD0BC,EAAAA,YAAiB,SAAcC,EAASpK,GAChE,MAAME,GAAQmK,EAAAA,EAAAA,GAAgB,CAC5BnK,MAAOkK,EACP5G,KAAM,aAEF,UACFjC,EAAS,OACT+I,GAAS,GACPpK,EACJqK,GAAQC,EAAAA,EAAAA,GAA8BtK,EAAOyJ,GACzCc,GAAaC,EAAAA,EAAAA,GAAS,CAAC,EAAGxK,EAAO,CACrCoK,WAEIK,EA/BkBF,KACxB,MAAM,QACJE,GACEF,EAIJ,OAAOG,EAAAA,EAAAA,GAHO,CACZX,KAAM,CAAC,SAEoBV,EAAqBoB,EAAQ,EAwB1CE,CAAkBJ,GAClC,OAAoBnJ,EAAAA,EAAAA,KAAKsI,GAAUc,EAAAA,EAAAA,GAAS,CAC1CnJ,WAAWuJ,EAAAA,EAAAA,GAAKH,EAAQV,KAAM1I,GAC9BwJ,UAAWT,EAAS,OAAItG,EACxBhE,IAAKA,EACLyK,WAAYA,GACXF,GACL,G,0ICnDO,SAASS,EAA2BxB,GACzC,OAAOC,EAAAA,EAAAA,IAAqB,iBAAkBD,EAChD,EAC2BE,EAAAA,EAAAA,GAAuB,iBAAkB,CAAC,S,eCDrE,MAAMC,EAAY,CAAC,YAAa,aAkB1BsB,GAAkBpB,EAAAA,EAAAA,IAAO,MAAO,CACpCrG,KAAM,iBACNgG,KAAM,OACNO,kBAAmBA,CAAC7J,EAAO8J,IAAWA,EAAOC,MAHvBJ,EAIrB,KACM,CACLqB,QAAS,GACT,eAAgB,CACdC,cAAe,QAoDrB,EAhDiChB,EAAAA,YAAiB,SAAqBC,EAASpK,GAC9E,MAAME,GAAQmK,EAAAA,EAAAA,GAAgB,CAC5BnK,MAAOkK,EACP5G,KAAM,oBAEF,UACFjC,EAAS,UACTG,EAAY,OACVxB,EACJqK,GAAQC,EAAAA,EAAAA,GAA8BtK,EAAOyJ,GACzCc,GAAaC,EAAAA,EAAAA,GAAS,CAAC,EAAGxK,EAAO,CACrCwB,cAEIiJ,EAlCkBF,KACxB,MAAM,QACJE,GACEF,EAIJ,OAAOG,EAAAA,EAAAA,GAHO,CACZX,KAAM,CAAC,SAEoBe,EAA4BL,EAAQ,EA2BjDE,CAAkBJ,GAClC,OAAoBnJ,EAAAA,EAAAA,KAAK2J,GAAiBP,EAAAA,EAAAA,GAAS,CACjDU,GAAI1J,EACJH,WAAWuJ,EAAAA,EAAAA,GAAKH,EAAQV,KAAM1I,GAC9BkJ,WAAYA,EACZzK,IAAKA,GACJuK,GACL,G","sources":["webpack://mdposit/./src/components/animated-card/style.module.css?d4d9","components/animated-card/index.js","webpack://mdposit/./src/components/interaction-selector/style.module.css?5392","components/interaction-selector/index.js","webpack://mdposit/./src/pages/accession/electrostatic/style.module.css?8eaf","pages/accession/electrostatic/index.js","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__M9GCG\"};","import React, { useLayoutEffect, useRef, forwardRef } from 'react';\nimport { Card } from '@mui/material';\n\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nconst KEYFRAMES = { opacity: [0, 1] };\n\nif (!reducedMotion()) {\n  KEYFRAMES.transform = ['translateY(50px)', 'translateY(0)'];\n}\n\nconst ANIMATION_OPTIONS = {\n  fill: 'both',\n  easing: 'cubic-bezier(0, .99, .56, 1.1)',\n  duration: 500,\n};\n\n// Make the card appear and slide softly from down to up when the page is loaded\nconst AnimatedCard = forwardRef(({ overrideComponent, ...props }, ref) => {\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const node = containerRef.current && containerRef.current.firstElementChild;\n    if (!(node && node.animate)) return;\n\n    const index = Array.from(\n      document.querySelectorAll('main section'),\n    ).findIndex(section => node === section);\n\n    const animation = node.animate(KEYFRAMES, {\n      ...ANIMATION_OPTIONS,\n      delay: index * 150,\n    });\n\n    return () => animation.cancel();\n  }, []);\n\n  const Component = overrideComponent ? 'section' : Card;\n\n  return (\n    <div ref={containerRef} className={style.container}>\n      <Component component=\"section\" {...props} ref={ref} />\n    </div>\n  );\n});\n\nexport default AnimatedCard;\n","// extracted by mini-css-extract-plugin\nexport default {\"horizontal\":\"style_horizontal__2DIWx\",\"horizontal-margined\":\"style_horizontal-margined__e9fQR\"};","import React, { Suspense } from 'react';\n\nimport {\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Select,\n  MenuItem,\n  TextField,\n  IconButton,\n} from '@mui/material';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport Loading from '../loading';\n\nimport style from './style.module.css';\n\nconst residueOptions = [\n  { label: 'All residues', value: 'residue_indices' },\n  { label: 'Interface residues', value: 'interface_indices' },\n];\n\n// Render a panel which allows to select the desired interaction\n// If the user selects a new interaction then the 'setSelectedInteraction' is set as its index\n// Interactions have the following structure:\n// { name: string, label: string, ... }\n// The 'label' field will replace the 'name' in the selector labels if exists\n// When 'selectedResidues' is passed, render also tools to select interaction residues\n// Residue options are 'all' or 'interface' residues\n// DANI: La guinda sería un 'custom' en las opciones de residuos\n// DANI: La idea sería desplegar dos residue selectors, uno para cada interaction agent\nconst InteractionSelector = ({\n  interactions,\n  selectedInteraction,\n  setSelectedInteraction,\n  selectedResidues,\n  setSelectedResidues,\n  selectedOrder,\n  handleToggleOrder,\n  firstOrderLabel, // The label to be represented over the first order rectangle\n  firstOrderTooltip, // The tooltip to be shown for the first order rectangle\n  secondOrderLabel, // The label to be represented over the second order rectangle\n  secondOrderTooltip, // The tooltip to be shown for the second order rectangle\n  toggleOrderTooltip, // The tooltip to be shown for the toggle order button\n  interfaceOnly = false, // Set if the 'All residues' button is enabled\n}) => {\n  const changeInteraction = event => {\n    setSelectedInteraction(event.target.value);\n  };\n\n  const changeResidues = event => {\n    setSelectedResidues(event.target.value);\n  };\n\n  const changeOrder = () => {\n    handleToggleOrder();\n  };\n\n  const currentInteraction = interactions[selectedInteraction];\n\n  // Render\n  return (\n    <Suspense fallback={<Loading />}>\n      <Select\n        value={selectedInteraction}\n        onChange={changeInteraction}\n        className={style['horizontal-margined']}\n      >\n        {interactions.map((interaction, i) => (\n          <MenuItem key={i} value={i}>\n            {interaction.label || interaction.name}\n          </MenuItem>\n        ))}\n      </Select>\n      {selectedResidues && (\n        <RadioGroup\n          value={selectedResidues}\n          onChange={changeResidues}\n          className={style.horizontal}\n        >\n          {residueOptions.map((opt, i) => (\n            <FormControlLabel\n              key={i}\n              value={opt.value}\n              control={<Radio color=\"primary\" />}\n              label={opt.label}\n              disabled={opt.label === 'All residues' && interfaceOnly}\n            />\n          ))}\n        </RadioGroup>\n      )}\n      {selectedOrder !== undefined && (\n        <>\n          <TextField\n            //margin=\"dense\"\n            label={firstOrderLabel}\n            title={firstOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_1\n                : currentInteraction.agent_2\n            }\n          />\n          <IconButton\n            title={toggleOrderTooltip}\n            onClick={changeOrder}\n            size=\"large\"\n          >\n            <FontAwesomeIcon icon={faExchangeAlt} />\n          </IconButton>\n          <TextField\n            //margin=\"dense\"\n            label={secondOrderLabel}\n            title={secondOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_2\n                : currentInteraction.agent_1\n            }\n          />\n        </>\n      )}\n    </Suspense>\n  );\n};\n\nexport default InteractionSelector;\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"style_card__FSWd1\",\"container\":\"style_container__QAI3Z\",\"horizontal\":\"style_horizontal__jRVhh\"};","import React, { useContext, useMemo, useState } from 'react';\n// A hook to track whenever some element is on screen\nimport { useInView } from 'react-intersection-observer';\n\nimport Card from '../../../components/animated-card';\nimport { CardContent, Typography } from '@mui/material';\n\nimport ViewerWithControls from '../../../components/viewer-with-controls';\n\nimport style from './style.module.css';\n\nimport { ProjectCtx } from '../../../contexts';\n\nimport Loading from '../../../components/loading';\n\nimport InteractionSelector from '../../../components/interaction-selector';\n\nimport useDefaultRepresentations from '../../../components/ngl-viewer/use-default-representations';\n\nimport { ColormakerRegistry } from 'ngl';\nimport { color as d3color, scaleLinear } from 'd3';\n\n// Define permanent options for the \"useInView\"\nconst useInViewOptions = { triggerOnce: true, rootMargin: '100px' };\n\n// Set the color of each residue in the NGL representation\n// WARNING: Grey looks better than white because the background may be white and resdiues are hard to see\n// Red goes for negative charges and blue goes for positive charges\nconst CHARGES_COLOR_PLAN = ['red', 'white', 'blue'];\n\n// Set references to find representations between different renders\nconst FIRST_AGENT_REF = 'first agent';\nconst SECOND_AGENT_REF = 'second agent';\n\nconst Electrostatic = () => {\n  // Track if the NGL viewer\n  // The status isNglVisible is returned true/false when the element is in/out the screen respectively\n  const [nglRef, isNglVisible] = useInView(useInViewOptions);\n\n  // Get the current project data\n  const { topology, interactions } = useContext(ProjectCtx);\n\n  // The interaction to be displayed\n  const [selectedInteraction, setSelectedInteraction] = useState(0);\n\n  // This is a toggle state for which interface is the 'surfaced' and which is the 'sticked'\n  const [selectedOrder, setSelectedOrder] = useState(true);\n\n  // Define the representations to be displayed in the viewer\n  const [ representations, setRepresentations ] = useState(null);\n\n  // Get the default representations\n  const defaultRepresentations = useDefaultRepresentations();\n\n  // In case there are charges, use them to create a color scale to pain the surface area\n  const chargesColorScheme = useMemo(() => {\n    if (!topology) return;\n    // Get charges from topology\n    const charges = topology.atomCharges;\n    if (!charges) return;\n    // Set the color scale according to the maximum and minimum values\n    const colorScale = scaleLinear()\n      .range(CHARGES_COLOR_PLAN)\n      .domain([-1, 0, +1]);\n    // Set the colorScheme to get each value corresponding color\n    return ColormakerRegistry.addScheme(function(params) {\n      this.atomColor = atom => {\n        // Get the atom charge\n        const charge = charges[atom.index];\n        // Calculate the interpolated rgb for this value\n        // The interpolated color comes in rbg format\n        const hexColor = d3color(colorScale(charge)).formatHex();\n        // The color interpolation returns a string like '#000000'\n        // We remove the first character ('#') and parse it to integer from hexadecimal\n        const color = parseInt(hexColor.substring(1), 16);\n        return color;\n      };\n    });\n  }, [topology]);\n\n  // Set the representations according to the selected interaction\n  // Set also the viewer focus\n  const initialFocus = useMemo(() => {\n    if (!topology || !interactions) return;\n    // Proceed to make representations for the current interaction\n    const interaction = interactions && interactions[selectedInteraction];\n    if (!interaction) return;\n\n    // Parse the interface selections to the NGL format\n    const [nglInterface1, nglInterface2] = [\n      interaction.interface_indices_1,\n      interaction.interface_indices_2,\n    ].map(interf => topology.residueIndices2Ngl(interf).rangedSelection);\n\n    // Set representation parameters for both the surfaced and the sticked interfaces\n    const surfacedParameters = {\n      type: 'surface',\n      color: chargesColorScheme ? 'custom' : 'electrostatic',\n      customScheme: chargesColorScheme\n    };\n    const stickedParameters = {\n      type: 'ball+stick',\n      color: 'element',\n    };\n\n    // Update the representations state\n    setRepresentations(previousRepresentations => {\n      // If this is the first render then set the representation with some default values\n      if (previousRepresentations === null) {\n        // Make the default representations transparent\n        defaultRepresentations.forEach(rep => {\n          rep.customScheme = chargesColorScheme;\n          rep.opacity = 0.1;\n        });\n        // Create a new representation for each interface\n        // Set the surfaced representation\n        const firstAgentInterface = {\n          name: interaction.agent_1 + ' interface',\n          selection: nglInterface1,\n          reference: FIRST_AGENT_REF,\n          ...(selectedOrder ? surfacedParameters : stickedParameters),\n        };\n        // Set the sticked representation\n        const secondAgentInterface = {\n          name: interaction.agent_2 + ' interface',\n          selection: nglInterface2,\n          reference: SECOND_AGENT_REF,\n          ...(selectedOrder ? stickedParameters : surfacedParameters),\n        };\n        // Join all representations and update the state\n        return [\n          ...defaultRepresentations,\n          firstAgentInterface,\n          secondAgentInterface,\n        ];\n      }\n      // If this is not the first render then update old representations\n      // Make no change to default or custom (added by the user) representations\n      // Only update the sticked and surface representations\n      const firstAgentInterface = previousRepresentations.find(rep => rep.reference === FIRST_AGENT_REF);\n      firstAgentInterface.name = interaction.agent_1 + ' interface';\n      firstAgentInterface.selection = nglInterface1;\n      Object.assign(firstAgentInterface, selectedOrder ? surfacedParameters : stickedParameters);\n      const secondAgentInterface = previousRepresentations.find(rep => rep.reference === SECOND_AGENT_REF);\n      secondAgentInterface.name = interaction.agent_2 + ' interface';\n      secondAgentInterface.selection = nglInterface2;\n      Object.assign(secondAgentInterface, selectedOrder ? stickedParameters : surfacedParameters);\n      // Update the state\n      return [...previousRepresentations];\n    });\n\n    // Set the focus to the whole interface\n    const wholeInterface = `(${nglInterface1} or ${nglInterface2})`;\n    const initialFocus = { comp: 0, sele: wholeInterface };\n    return initialFocus;\n  }, [\n    topology,\n    chargesColorScheme,\n    interactions,\n    defaultRepresentations,\n    selectedInteraction,\n    selectedOrder\n  ]);\n\n  // If data is loaded but there are no interactions\n  if (!interactions || interactions.length === 0)\n  return 'There are no interactions';\n\n  if (!topology || !interactions) return <Loading />;\n\n  const handleToggleOrder = () => {\n    setSelectedOrder(previous => !previous);\n  };\n\n  return (\n    <>\n      <Card>\n        <CardContent className={style.horizontal}>\n          <Typography variant=\"h6\">Interaction:</Typography>\n          <InteractionSelector\n            interactions={interactions}\n            selectedInteraction={selectedInteraction}\n            setSelectedInteraction={setSelectedInteraction}\n            selectedOrder={selectedOrder}\n            handleToggleOrder={handleToggleOrder}\n            firstOrderLabel={'Surfaced interface'}\n            firstOrderTooltip={\n              'Interface residues to be represented in electorstatic surface mode'\n            }\n            secondOrderLabel={'Sticked interface'}\n            secondOrderTooltip={\n              'Interface residues to be represented in balls and sticks mode'\n            }\n            toggleOrderTooltip={'Toggle interface representations'}\n          />\n        </CardContent>\n      </Card>\n      <Card className={style.card} ref={nglRef}>\n        {/* Render the NGL viewer when it is on screen*/}\n        {isNglVisible ? (\n          <ViewerWithControls\n            className={style.container}\n            representationsState={[ representations, setRepresentations ]}\n            requestedFrame={1}\n            initialFocus={initialFocus}\n          />\n        ) : (\n          <div style={{ height: '50vh' }} />\n        )}\n      </Card>\n    </>\n  );\n};\n\nexport default Electrostatic;\n","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n  const {\n      className,\n      raised = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    raised\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;"],"names":["KEYFRAMES","opacity","reducedMotion","transform","ANIMATION_OPTIONS","fill","easing","duration","forwardRef","_ref","ref","overrideComponent","props","containerRef","useRef","useLayoutEffect","node","current","firstElementChild","animate","index","Array","from","document","querySelectorAll","findIndex","section","animation","delay","cancel","Component","Card","_jsx","className","style","children","component","residueOptions","label","value","interactions","selectedInteraction","setSelectedInteraction","selectedResidues","setSelectedResidues","selectedOrder","handleToggleOrder","firstOrderLabel","firstOrderTooltip","secondOrderLabel","secondOrderTooltip","toggleOrderTooltip","interfaceOnly","currentInteraction","_jsxs","Suspense","fallback","Loading","Select","onChange","event","target","map","interaction","i","MenuItem","name","RadioGroup","opt","FormControlLabel","control","Radio","color","disabled","undefined","_Fragment","TextField","title","agent_1","agent_2","IconButton","onClick","changeOrder","size","FontAwesomeIcon","icon","faExchangeAlt","useInViewOptions","triggerOnce","rootMargin","CHARGES_COLOR_PLAN","FIRST_AGENT_REF","SECOND_AGENT_REF","Electrostatic","nglRef","isNglVisible","useInView","topology","useContext","ProjectCtx","useState","setSelectedOrder","representations","setRepresentations","defaultRepresentations","useDefaultRepresentations","chargesColorScheme","useMemo","charges","atomCharges","colorScale","scaleLinear","range","domain","ColormakerRegistry","addScheme","params","this","atomColor","atom","charge","hexColor","d3color","formatHex","parseInt","substring","initialFocus","nglInterface1","nglInterface2","interface_indices_1","interface_indices_2","interf","residueIndices2Ngl","rangedSelection","surfacedParameters","type","customScheme","stickedParameters","previousRepresentations","forEach","rep","firstAgentInterface","selection","reference","secondAgentInterface","find","Object","assign","comp","sele","concat","length","CardContent","Typography","variant","InteractionSelector","previous","ViewerWithControls","representationsState","requestedFrame","height","getCardUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardRoot","styled","Paper","overridesResolver","styles","root","overflow","React","inProps","useDefaultProps","raised","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","clsx","elevation","getCardContentUtilityClass","CardContentRoot","padding","paddingBottom","as"],"sourceRoot":""}