{"version":3,"file":"static/js/meta-analysis.117cba23.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/loading/style.module.css?350d","components/loading/index.js","hooks/use-batch-api/index.js","hooks/use-api/index.js","webpack://mdposit/./src/pages/statistics/nodemap/style.module.css?e459","pages/statistics/nodemap/index.js","pages/statistics/nodetable/index.js","webpack://mdposit/./src/pages/statistics/style.module.css?e818","components/simple-legend/index.js","webpack://mdposit/./src/components/histogram/style.module.css?f8b2","components/histogram/index.js","pages/statistics/timeline.js","pages/statistics/index.js","webpack://mdposit/./src/pages/meta-analysis/style.module.css?6f1d","pages/meta-analysis/index.js","hooks/use-toggle-state/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loading\":\"style_loading__Vdgbc\",\"show\":\"style_show__wIdQ5\"};","import React, { useLayoutEffect } from 'react';\nimport cn from 'classnames';\n//import { sleep, frame } from 'timing-functions';\n\nimport { CircularProgress } from '@mui/material';\n\nimport useToggleState from '../../hooks/use-toggle-state';\n\nimport style from './style.module.css';\n\nconst WAIT_DELAY = 750; // 750ms\n\n// This component is used to hide the loading indicator for a bit (just in case\n// the next content is quick enough, because we don't want a flash with the\n// indicator), then slowly display it.\n// In the best of cases this component will *never* even have to be displayed\nconst Loading = ({ wait = WAIT_DELAY }) => {\n  const [flag, toggleFlag] = useToggleState(false);\n  // This is a hook\n  useLayoutEffect(() => {\n    const timer = setTimeout(() => {\n      toggleFlag();\n    }, wait);\n    return () => clearTimeout(timer);\n\n    /*\n    let mounted = true;\n    sleep(wait) // wait for a bit\n      // this might be useful if the page is not even visible\n      .then(() => frame()) // Wait for the next animation frame\n      // After waiting, check if mounted is still true\n      .then(() => {\n        // If mounted is false it means that the loading was over before the wait ended\n        if (mounted) toggleFlag(); // This toggleFlag changes the flag from false to true\n      });\n    // In a useEffect or similar hooks, \"return\" stands for an ending function\n    // The ending function is called when the components is no longer rendered\n    return () => (mounted = false); // When useLayoutEffect is over or cancelled, set mounted to false\n    */\n  }, [toggleFlag, wait]); // useLayoutEffect is only called when the toggleFlag is called (only once)\n  // Return an animated circle\n  return (\n    <div\n      title=\"loading...\" // This tag appears when the mouse remains over the circle\n      className={cn(style.loading, { [style.show]: flag })}\n    >\n      {flag && (\n        <CircularProgress\n          variant=\"indeterminate\"\n          color=\"primary\"\n          size={50}\n          thickness={5}\n        /> // Renders the circle\n      )}\n    </div>\n  );\n};\n\nexport default Loading;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Empty response\nconst blank = {\n  loading: false,\n  payload: null,\n  error: null,\n};\n\n// Loading response\nconst loading = {\n  loading: true,\n};\n\n// Get data from the API for multiple URLs\nconst useBatchAPI = urls => {\n  // Set the 'data' state object, which is returned at the end of this function\n  const [data, setData] = useState(urls.map(url => ({ url: url, ...blank })));\n\n  // This react hook is responisble for sending the request to the API\n  // This react hook has 'url' dependencies, so it is only runned once per request\n  useEffect(() => {\n    // This is axios (https://www.npmjs.com/package/axios)\n    // Set a cancel option (token). If a request includes this cancel token in its options, the request can be cancelled\n    // In order to cancel the request, the same token must be used through axios\n    const source = axios.CancelToken.source();\n    let didCancel = false;\n    // Reset data to match in length with the urls\n    // Try to reuse old data in case any url matches\n    setData(oldData => {\n      const newData = urls.map(url => {\n        // If the url is not valid then kill it\n        // This is a workaround of the useAPI hook, but here it makes not sense\n        if (!url) throw new Error('Missing URL in batch API call');\n        // Search for this url in old data and return it in case we find it\n        const alreadySearchedResponse = oldData.find(response => response.url === url);\n        if (alreadySearchedResponse) return alreadySearchedResponse;\n        // Otherwise return the loading response\n        return loading;\n      })\n      return newData;\n    });\n    // Iterate over each url\n    urls.forEach((url, i) => {\n      // Make a request in a Promise/await way\n      axios(url, {\n        // This token allows us to further cancel the request if necessary\n        cancelToken: source.token,\n        // Send the start time so we can calculate the response time when we get the response\n        startTime: new Date(),\n        responseType: 'arraybuffer'\n      })\n        // (.then is async) If the request has succeed\n        .then(response => {\n          if (didCancel) return;\n          // Calculate the response time\n          const endTime = new Date();\n          const startTime = response.config.startTime;\n          const responseTime = endTime - startTime; // In ms\n          // Return response data\n          const responseData = {\n            url: url,\n            loading: false,\n            payload: response.data,\n            error: null,\n            time: responseTime\n          };\n          setData(previousData => {\n            const newData = [ ...previousData ]\n            newData[i] = responseData;\n            return newData;\n          });\n        })\n        // Otherwise\n        .catch(error => {\n          if (didCancel) return;\n          const responseData = {\n            url: url,\n            loading: false,\n            payload: null,\n            error: error,\n          };\n          setData(previousData => {\n            const newData = [ ...previousData ]\n            newData[i] = responseData;\n            return newData;\n          });\n        });\n    });\n\n    return () => {\n      // Cancel the request\n      source.cancel();\n      didCancel = true;\n    };\n\n    // 'useEffect' will only be called when the url changes\n  }, [urls]);\n  // If there is no url then return an empty list\n  if (!urls) return [];\n  // Data is returned here\n  return data;\n};\n\nexport default useBatchAPI;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Empty response\nconst blank = {\n  loading: false,\n  payload: null,\n  error: null,\n};\n\n// Loading response\nconst loading = {\n  loading: true,\n};\n\n\n// Default cache expiration time (e.g., 1 hour in milliseconds)\nconst DEFAULT_CACHE_EXPIRATION = 60 * 60 * 1000;\n\n// Load cache from localStorage\nconst loadCache = () => {\n  const cachedData = localStorage.getItem('apiCache');\n  return cachedData ? JSON.parse(cachedData) : {};\n};\n\n// Save cache to localStorage\nconst saveCache = (cache) => {\n  localStorage.setItem('apiCache', JSON.stringify(cache));\n};\n\n// Cache object to store API responses\nlet cache = loadCache();\n// Get data from the API\nconst useAPI = (url, cacheOptions = {}) => {\n  // Destructure options and set default values\n  const {\n    name = '',\n    cacheOn = false,\n    cacheExpiration = DEFAULT_CACHE_EXPIRATION, // Default cache expiration\n  } = cacheOptions;\n  \n  // Check cache synchronously before initializing state\n  const initialData = (() => {\n    if (cacheOn && cache[name]) {\n      const responseData = cache[name];\n      const now = Date.now();\n      const receivedTime = new Date(responseData.received).getTime()\n      // Use cached data if it hasn't expired\n      if (now - receivedTime < cacheExpiration) {\n        return responseData;\n      }\n    }\n    return blank;\n  })();\n  // Set the 'data' state object, which is returned at the end of this function\n  const [data, setData] = useState(initialData);\n\n  // This react hook is responisble for sending the request to the API\n  // This react hook has 'url' dependencies, so it is only runned once per request\n  useEffect(() => {\n    // In case there is no valid url\n    // This may be useful as a workaround to not call the API, since hooks can not be called conditionally\n    if (!url) {\n      setData(blank);\n      return;\n    }\n    // This is axios (https://www.npmjs.com/package/axios)\n    // Set a cancel option (token). If a request includes this cancel token in its options, the request can be cancelled\n    // In order to cancel the request, the same token must be used through axios\n    const source = axios.CancelToken.source();\n    let didCancel = false;\n    // Make a request in a Promise/await way\n    axios(url, {\n      // This token allows us to further cancel the request if necessary\n      cancelToken: source.token,\n      // Send the start time so we can calculate the response time when we get the response\n      startTime: new Date()\n    })\n      // (.then is async) If the request has succeed\n      .then(response => {\n        if (didCancel) return;\n        // Calculate the response time\n        const endTime = new Date();\n        const startTime = response.config.startTime;\n        const responseTime = endTime - startTime; // In ms\n        // Return response data\n        const responseData = {\n          url: url,\n          loading: false,\n          payload: response.data,\n          error: null,\n          time: responseTime,\n          received: endTime,\n        };\n        // Cache the response if caching is enabled\n        if (cacheOn) {\n          cache[name] = responseData;\n          saveCache(cache);\n        }\n        setData(responseData);\n      })\n      // Otherwise\n      .catch(error => {\n        if (didCancel) return;\n        const responseData = {\n          url: url,\n          loading: false,\n          payload: null,\n          error: error,\n        };\n        setData(responseData);\n      });\n\n    return () => {\n      // Cancel the request\n      source.cancel();\n      didCancel = true;\n    };\n\n    // 'useEffect' will only be called when the url changes\n  }, [url]);\n  // If there is no url then return the blank response\n  if (!url) return blank;\n  // Data is returned this way\n  // Data is returned only if the data.url matches the url from this request\n  // These urls do not macth each first time 'useAPI' is called\n  // 'data' is not reset each time 'useAPI' is called so the url is from the previous request\n  if (data.url === url || initialData.url === url) return data;\n  // The first time 'useAPI' is called only { loading: true } is returned\n  else return loading;\n};\n\nexport default useAPI;\n","// extracted by mini-css-extract-plugin\nexport default {\"maps\":\"style_maps__KuYqC\"};","import React, { useMemo } from \"react\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker\n} from \"react-simple-maps\";\n\n// Auxiliar functions\nimport { caluclateAverage } from '../../../utils/auxiliar-functions';\n\n// Use this to access the primary color according to the style palette\nimport { useTheme } from '@mui/material/styles';\n\n// Get the map\nimport map from './map.json';\n\n// CSS styling\nimport style from './style.module.css';\n\n// Set the distance cutoff to merge nodes together (in coordinate grades)\nconst NODE_DISTANCE_CUTOFF = 0.01;\n// Set a function to calculate distance between 2 nodes\nconst getDistance = (firstLocation, secondLocation) => {\n  const xDiff = firstLocation[0] - secondLocation[0];\n  const yDiff = firstLocation[1] - secondLocation[1];\n  return Math.sqrt( Math.pow(xDiff, 2) + Math.pow(yDiff, 2) );\n};\n// Set a function to calculate the mid point between n nodes\nconst getCentroid = (nodes) => {\n  const xMean = caluclateAverage(nodes.map(node => node.location[0]));\n  const yMean = caluclateAverage(nodes.map(node => node.location[1]));\n  return [xMean, yMean];\n};\n\n// Set the maps to be displayed\n// This in now manually hardcoded since it is a ever changing landscape\nconst MAP_CONFIGS = [\n  { rotate: [-2,-46,0], center: [0,0], scale: 1300 },\n  { rotate: [85,-30,0], center: [0,0], scale: 1300 }\n];\n\n// A map with all available nodes\nconst NodeMap = ({ nodeData, className }) => {\n  // Get the paletter primary color\n  const theme = useTheme();\n  const primary = theme.palette.primary.main;\n  // Set node representations\n  // Several nodes may be combined in a single representation to avoid overlaps\n  // DANI: Esta lógica es muy simple, si hay muchos nodos habrá que replanteársela\n  const nodeGroups = useMemo(() => {\n    if (!nodeData) return null;\n    // Group nodes together by distance\n    const _nodeGroups = [];\n    // Iterate nodes\n    for (const node of nodeData) {\n      // Find a close group\n      const closeGroup = _nodeGroups.find(group => getDistance(group.location, node.location) < NODE_DISTANCE_CUTOFF);\n      // If we just found a close group then merge this node\n      if (closeGroup) {\n        closeGroup.nodes.push(node);\n        closeGroup.location = getCentroid(closeGroup.nodes);\n        continue;\n      }\n      // Otherwise set a new group for this node\n      _nodeGroups.push({ nodes: [node], location: node.location });\n    }\n    return _nodeGroups;\n  },[nodeData]);\n\n  return (<div className={className}>\n      {MAP_CONFIGS.map((config, c) => \n      (<ComposableMap\n        key={c}\n        projection=\"geoAzimuthalEqualArea\"\n        projectionConfig={config}\n        className={style.maps}\n      >\n        <Geographies\n          geography={map}\n          fill=\"#D6D6DA\"\n          stroke=\"#FFFFFF\"\n          strokeWidth={0.5}\n        >\n          {({ geographies }) =>\n            geographies.map((geo) => (\n              <Geography key={geo.rsmKey} geography={geo} \n              style={{\n                default: { outline: \"none\" },\n                hover: { outline: \"none\" },\n                pressed: { outline: \"none\" },\n              }}/>\n            ))\n          }\n        </Geographies>\n        {nodeGroups && nodeGroups.map((group, g) => [\n          // Add a marker in the map for every node\n          <Marker key={g} coordinates={[group.location[1], group.location[0]]}>\n            <circle r={8} fill={primary} />\n          </Marker>,\n          ...group.nodes.map((node, i) => (\n            <Marker key={`${g}.${i}`} coordinates={[group.location[1], group.location[0] + 0.6 + i]}>\n              <text fontSize={\"large\"} textAnchor=\"middle\" fill={primary}>\n                {node.name}\n              </text>\n            </Marker>            \n          ))\n        ])}\n      </ComposableMap>\n    ))}\n  </div>)\n};\n\nexport default NodeMap;\n","import React, { useMemo } from \"react\";\n\n// Visual assets\nimport { DataGrid } from '@mui/x-data-grid';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport ErrorIcon from '@mui/icons-material/Error';\n\n// Hooks\nimport useBatchAPI from 'src/hooks/use-batch-api';\n\n// Get the map\nimport map from '../nodemap/map.json';\n\n// Estas dos librerías son dependencias de react-simple-maps\nimport { geoContains } from 'd3-geo';\nimport { feature } from 'topojson-client';\n\n// Flags\nimport ReactCountryFlag from \"react-country-flag\"\n\n// Convert TopoJSON to GeoJSON\nconst geoJson = feature(map, map.objects.world); \n// Set a function to gt the country from a given coordinates\n// DANI: Chapi made\nconst getCountryFromCoords = (lng, lat) => {\n  for (const country of geoJson.features)\n    if (geoContains(country, [lng, lat])) return country.id;\n  return null; // Not found\n}\n\n// Set a function to return text within a hyperlink\nconst renderHref = (nodeName, nodeUrl) => <a href={nodeUrl} target=\"_blank\" rel=\"noreferrer noopener\">{nodeName}</a>;\n\n// Set a function to return one symbol or another depending on a node status\nconst renderStatusSymbol = status => {\n  if (status === 'active') return <CheckCircleIcon style={{ color: 'green', marginTop: '0.5em' }}/>;\n  if (status === 'fallen') return <ErrorIcon style={{ color: 'red', marginTop: '0.5em' }}/>;\n  throw new Error(`Not supported status ${status}`);\n}\n\n// Set a table displaying all avilable nodes and their status and response time\n// Note that this component will only work with the global API\nconst NodeTable = ({ nodeData }) => {\n  \n    // If this is the global client then ping all nodes to check the response time\n    const pingUrls = useMemo(() => {\n        if (!nodeData) return [];\n        return nodeData.map(node => node.api_url);\n    }, [nodeData]);\n    const pingResponses = useBatchAPI(pingUrls);\n  \n    // Set the table to be displayed including ping response times\n    if (!pingResponses || pingResponses.length === 0) return;\n    // Set table columns\n    const columns = [\n        { field: 'node', headerName: 'Node name', flex: 0.4, align: 'center', headerAlign: 'center',\n        renderCell: params => renderHref(params.row.node, params.row.url) },\n        { field: 'flag', headerName: 'Country', flex: 0.15, align: 'center', headerAlign: 'center',\n            renderCell: params => params.value },\n        { field: 'status', headerName: 'Status', flex: 0.15, align: 'center', headerAlign: 'center',\n        renderCell: params => renderStatusSymbol(params.value) },\n        { field: 'ping', headerName: 'Response time', flex: 0.3, align: 'center', headerAlign: 'center' }\n    ];\n    // Set a table row for every node\n    const rows = nodeData.map(node => {\n        const ping = pingResponses.find(response => response.url === node.api_url);\n        const status = ping && ping.time ? 'active' : 'fallen';\n        const responseTime = ping && ping.time ? `${ping.time}ms` : '...';\n        // Find the corresponding country and get its flag\n        const longitud = node.location[1];\n        const latitud = node.location[0];\n        const countryId = getCountryFromCoords(longitud, latitud);\n        const countryCode = countryId.slice(0,2);\n        const flag = <ReactCountryFlag countryCode={countryCode} svg\n            style={{ width: \"2.1em\", height: \"1.6em\",\n                border: 'solid', borderWidth: \"0.1em\", borderColor: \"black\" }} />;\n        // The 'id' field is not used but it is required by the data table\n        return {\n            id: node.alias,\n            key: node.alias,\n            node: node.name,\n            url: node.api_url,\n            status: status,\n            ping: responseTime,\n            flag: flag,\n        };\n    });\n\n    // Return the data table\n    return (\n        <DataGrid\n            columns={columns}\n            rows={rows}\n            disableRowSelectionOnClick\n            hideFooter\n            key={'node table'}\n        />\n    );\n}\n\nexport default NodeTable;","// extracted by mini-css-extract-plugin\nexport default {\"horizontal\":\"style_horizontal__tSdeW\",\"piechart\":\"style_piechart__uFQkG\",\"legend\":\"style_legend__wkD76\",\"nodemap\":\"style_nodemap__vSDbk\",\"histograms\":\"style_histograms__k2z-M\",\"half\":\"style_half__GhBKj\",\"timelineChart\":\"style_timelineChart__01EXr\",\"growthChart\":\"style_growthChart__c6d22\"};","import React from 'react';\n\n// Expected input format is entires =\n//  [\n//    {\n//      label: 'hello',\n//      color: 'black',\n//    }\n//  ]\nconst SimpleLegend = ({ entries, className }) => {\n  return (\n    <div className={className}>\n      {entries.map(({ label, color }, i) => (\n        <div key={i} style={{ fontSize: '20px' }}>\n          <span\n            style={{\n              display: 'inline-block',\n              height: '1em',\n              width: '1em',\n              backgroundColor: color,\n              marginRight: '0.5em',\n              fontSize: '20px'\n            }}\n          />\n          {label}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default SimpleLegend;\n","// extracted by mini-css-extract-plugin\nexport default {\"default\":\"style_default__JeUok\",\"graph-container\":\"style_graph-container__q5I8G\"};","import React, {\n  useRef,\n  useEffect,\n  forwardRef,\n} from 'react';\nimport { noop } from 'lodash-es';\nimport {\n  select,\n  scaleLinear,\n  scaleLog,\n  axisBottom,\n  axisLeft,\n} from 'd3';\n\nimport style from './style.module.css';\n\nconst dataPlaceholder = {};\n\n// This graph has been done by adapting the example from https://d3-graph-gallery.com/graph/histogram_basic.html\n\n// Necessary for axes and axis labels\n// WARNING: Note that this is not automatic and it may require manual update when the highest value increases (left margin)\nconst margin = {\n  top: 10,\n  right: 30,\n  left: 90,\n  bottom: 60,\n};\n\n// Convert number to superscript \nfunction formatExponent(exp) {\n  const superscripts = {\n    '0': '⁰', '1': '¹', '2': '²', '3': '³', '4': '⁴',\n    '5': '⁵', '6': '⁶', '7': '⁷', '8': '⁸', '9': '⁹',\n    '-': '⁻'\n  };\n\n  return exp.toString().split('')\n    .map(char => superscripts[char] || char)\n    .join('');\n}\n\n// Set the size of the axis numbers\nconst axisNumbersFontSize = \"15px\";\nconst axisLabelsFontSize = \"24px\";\n\nconst Histogram = forwardRef(({\n  // Data containing an object with count of different values\n  data,\n  // Set the axis labels\n  xAxisLabelText,\n  yAxisLabelText,\n  // Set the color\n  color = '#69b3a2',\n  // Set the onHover function\n  onHover,\n  binMethod = 'log', // log, sturges, root, manual\n  // Manually set number of bins (optional)\n  binCount = 10,\n  // Force a classname for the overall component element\n  className,\n}, ref) => {\n  // Set a fake dataset to allow the graph to work when no data is passed\n  if (!data) data = dataPlaceholder;\n\n  // Referenced document element where d3 is rendered\n  const containerRef = useRef(null);\n  // Referenced function which allows to update the cart without having to remake it\n  const updateDataRef = useRef(noop);\n  const updateSizeRef = useRef(noop);\n  const updateXAxisLabelText = useRef(noop);\n  const updateYAxisLabelText = useRef(noop);\n  const updateColor = useRef(noop);\n  const updateOnHover = useRef(noop);\n\n  // ----------------------------------------------------------------------------------------\n\n  // This useEffect must be run only once\n  // The graph content is updated through the referenced functions\n  useEffect(() => {\n    // Set the graph main handlers\n    const graph = select(containerRef.current).append('svg');\n\n    // Set axes\n    const x = scaleLog().base(10);\n    const xAxis = graph.append(\"g\");\n    const y = scaleLinear();\n    const yAxis = graph.append(\"g\");\n\n    // Set  axis labels\n    const xAxisLabel = graph.append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", axisLabelsFontSize);\n    const yAxisLabel = graph.append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", axisLabelsFontSize);\n\n    // Set functions to update axis label texts when their specific input changes\n    // Also call them now for this first time\n    updateXAxisLabelText.current = ({ xAxisLabelText }) => {\n      xAxisLabel.text(xAxisLabelText);\n    };\n    updateYAxisLabelText.current = ({ yAxisLabelText }) => {\n      yAxisLabel.text(yAxisLabelText);\n    };\n    updateXAxisLabelText.current({ xAxisLabelText });\n    updateYAxisLabelText.current({ yAxisLabelText });\n\n    // --------------------------------------------------------------------------------------------------\n\n    // Set the updating functions\n    // These functions are called by specific useEffects declared below when an specific input changes\n\n    // Set a function to update data changes\n    updateDataRef.current = ({ data }) => {\n      if (!data || Object.keys(data).length === 0) return;\n\n      // If using automatic logarithmic binning (current approach)\n      if (binMethod === 'log') {\n        // Create exponential series of ranges of values\n        // Add to each range the sum of value counts within that range\n        const scaleCounts = {};\n        Object.entries(data).forEach(([value, count]) => {\n          const valueScale = value.toString().length - 1;\n          if (scaleCounts[valueScale]) scaleCounts[valueScale] += count;\n          else scaleCounts[valueScale] = count;\n        });\n\n        // Get minimum and maximum scales\n        const minScale = Object.keys(scaleCounts).reduce((cv, nv) => {\n          return Math.min(cv, nv);\n        }, Infinity);\n        const maxScale = Object.keys(scaleCounts).reduce((cv, nv) => {\n          return Math.max(cv, nv);\n        }, -Infinity);\n        // Create the xTicks to be used as x range as well\n        // Note that we add 1 to the last scale, so we can plot a histogram bar between the actual last scale and the next\n        const xTicks = [];\n        for (let scale = minScale; scale <= maxScale + 1; scale++) {\n          xTicks.push(10 ** scale);\n        }\n        // Set data as it is about to be passed to d3\n        const columnsData = Object.values(scaleCounts).map((count, i) => {\n          return { x0: xTicks[i], x1: xTicks[i + 1], length: count }\n        });\n\n        // Find the maximum count among scaleCounts\n        const maxCount = Object.values(scaleCounts).reduce((cv, nv) => {\n          return Math.max(cv, nv);\n        }, -Infinity);\n\n        // Set axes\n        x.domain([xTicks[0], xTicks[xTicks.length - 1]]);\n        y.domain([0, maxCount]);\n\n        // Load new data in columns\n        const newColumnsData = graph.selectAll(\"rect\").data(columnsData);\n\n        // Remove columns which are no longer necessary\n        newColumnsData.exit().remove();\n\n        // Add new columns which are now necessary according to new data\n        newColumnsData.enter().append('rect');\n\n        // Edit the final columns now that we have added and removed some\n        graph.selectAll(\"rect\")\n          .attr(\"fill\", color)\n          .append(\"svg:title\")\n          .text(onHover);\n\n        // Force a redraw\n        updateSizeRef.current();\n      }\n      else {\n        if (binMethod === 'sturges' || binMethod === 'root') {\n          const totalDataPoints = Object.values(data).reduce((cv, nv) => {\n            return cv + nv;\n          }, 0);\n          if (binMethod === 'sturges') {\n            binCount = Math.ceil(Math.log2(totalDataPoints) + 1);\n          }\n          else if (binMethod === 'root') {\n            binCount = Math.ceil(Math.sqrt(totalDataPoints));\n          }\n        }\n\n        // Manual bin count approach with equal width bins on log scale\n        // Find min and max values from data\n        const values = Object.keys(data).map(Number);\n        const minValue = Math.min(...values);\n        const maxValue = Math.max(...values);\n\n        // For equal bins in log scale, calculate bin edges using exponential distribution\n        const logMinValue = Math.log10(minValue > 0 ? minValue : 0.1); // Handle zero/negative values\n        const logMaxValue = Math.log10(maxValue);\n        const logRange = logMaxValue - logMinValue;\n        const logBinWidth = logRange / binCount;\n\n        // Create bins\n        const bins = {};\n        for (let i = 0; i < binCount; i++) {\n          bins[i] = 0;\n        }\n\n        // Create xTicks for bin edges in log space\n        const xTicks = [];\n        for (let i = 0; i <= binCount; i++) {\n          xTicks.push(Math.pow(10, logMinValue + i * logBinWidth));\n        }\n\n        // Distribute data into bins\n        Object.entries(data).forEach(([value, count]) => {\n          const numValue = Number(value);\n          if (numValue <= 0) return; // Skip non-positive values in log scale\n\n          // Find appropriate bin for this value\n          let binIndex = binCount - 1; // Default to last bin\n          for (let i = 0; i < binCount; i++) {\n            if (numValue >= xTicks[i] && numValue < xTicks[i + 1]) {\n              binIndex = i;\n              break;\n            }\n          }\n          // Special case for max value\n          if (numValue === maxValue) binIndex = binCount - 1;\n\n          bins[binIndex] += count;\n        });\n\n        // Set data for d3\n        const columnsData = Object.values(bins).map((count, i) => {\n          return { x0: xTicks[i], x1: xTicks[i + 1], length: count };\n        });\n\n        // Find the maximum count\n        const maxCount = Math.max(...Object.values(bins));\n\n        // Set axes\n        x.domain([xTicks[0], xTicks[xTicks.length - 1]]);\n        y.domain([0, maxCount]);\n\n        // Load new data in columns\n        const newColumnsData = graph.selectAll(\"rect\").data(columnsData);\n\n        // Remove columns which are no longer necessary\n        newColumnsData.exit().remove();\n\n        // Add new columns which are now necessary according to new data\n        newColumnsData.enter().append('rect');\n\n        // Edit the final columns now that we have added and removed some\n        graph.selectAll(\"rect\")\n          .attr(\"fill\", color)\n          .append(\"svg:title\")\n          .text(onHover);\n\n        // Force a redraw\n        updateSizeRef.current();\n      }\n    }\n\n    // Set a function to update columns color\n    updateColor.current = ({ color }) => {\n      graph.selectAll(\"rect\").attr(\"fill\", color);\n    };\n\n    // Set a function to update onHover\n    updateOnHover.current = ({ onHover }) => {\n      graph.selectAll(\"rect\").append(\"svg:title\").text(onHover);\n    };\n\n    // This ref allows to update the graph without having to remake the whole graph\n    updateSizeRef.current = () => {\n      // Change the graph size according to the container size\n      const { clientWidth: width, clientHeight: height } = containerRef.current;\n      graph.attr('width', width).attr('height', height);\n      // Get size of the graph body after substracting margins\n      const actualWidth = width - margin.left - margin.right;\n      const actualHeight = height - margin.top - margin.bottom;\n      // Get all current columns to count them\n      const columns = graph.selectAll(\"rect\");\n      const columnsCount = columns.nodes().length;\n      // Set axis positions\n      x.range([margin.left, margin.left + actualWidth]);\n      xAxis.attr(\"transform\", \"translate(0,\" + (margin.top + actualHeight) + \")\")\n        .call(axisBottom(x)\n          .ticks(columnsCount)\n          .tickFormat(d => {\n            // Convert to superscript exponent notation\n            if (d === 0) return '0';\n            const exp = Math.log10(d);\n            if (Number.isInteger(exp)) {\n              if (exp === 0) return '1';\n              if (exp === 1) return '10';\n              return `10${formatExponent(exp)}`;\n            }\n            return '';\n          })\n        )\n        .style(\"font-size\", axisNumbersFontSize);\n      y.range([margin.top + actualHeight, margin.top]);\n      yAxis.attr(\"transform\", \"translate(\" + margin.left + \", 0)\").call(axisLeft(y))\n        .style(\"font-size\", axisNumbersFontSize);\n      // Set axis label positions\n      const xAxisLabelMargin = 5;\n      xAxisLabel.attr(\"x\", margin.left + actualWidth / 2).attr(\"y\", height - xAxisLabelMargin);\n      const yAxisLabelMargin = 20;\n      yAxisLabel.attr(\"x\", yAxisLabelMargin).attr(\"y\", margin.top + actualHeight / 2)\n        .attr(\"transform\", `rotate(-90, ${yAxisLabelMargin}, ${margin.top + actualHeight / 2})`);\n\n      // Get all current columns and place/shape them according to data\n      columns\n        //.attr(\"x\", 1)\n        .attr(\"transform\", d => \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\")\n        .attr(\"width\", d => x(d.x1) - x(d.x0) - 1)\n        .attr(\"height\", d => height - margin.bottom - y(d.length))\n    };\n\n    // Set the redraw logic to be run every time the graph container is resized\n    window.addEventListener('resize', updateSizeRef.current);\n\n    // Cleanup function\n    return () => {\n      graph.remove();\n      window.removeEventListener('resize', updateSizeRef.current);\n    }\n  }, []);\n\n  // Handle when data changes\n  useEffect(() => {\n    updateDataRef.current({ data });\n  }, [data]);\n\n  // Handle when x axis label text changes\n  useEffect(() => {\n    updateXAxisLabelText.current({ xAxisLabelText });\n  }, [xAxisLabelText]);\n\n  // Handle when y axis label text changes\n  useEffect(() => {\n    updateYAxisLabelText.current({ yAxisLabelText });\n  }, [yAxisLabelText]);\n\n  // Handle when color changes\n  useEffect(() => {\n    updateColor.current({ color });\n  }, [color]);\n\n  // Handle when onHover changes\n  useEffect(() => {\n    updateOnHover.current({ onHover });\n  }, [onHover]);\n\n  return (\n    <div className={className ? className : style.default}>\n      <div className={style['graph-container']} ref={containerRef} />\n    </div>\n  );\n});\n\nexport default Histogram;\n","import React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { useTheme } from '@mui/material/styles';\n\n\n// Set the size of the axis numbers\nconst axisNumbersFontSize = \"14px\";\nconst axisLabelsFontSize = \"24px\";\n\nconst TimelineChart = ({ data, width = 800, height = 400, className }) => {\n  const svgRef = useRef();\n  // Get the provided theme\n  const theme = useTheme();\n  const primaryColor = theme.palette.primary.main;\n  const secondaryColor = theme.palette.primary.dark;\n\n  useEffect(() => {\n    if (!data || !data.length) return;\n\n    // Clear any existing chart\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n\n    // Set dimensions and margins\n    const margin = { top: 30, right: 90, bottom: 30, left: 90 };\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n\n    // Create SVG\n    const svg = d3.select(svgRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Parse dates and format for x-axis\n    const parseDate = d => {\n      const [year, month] = d.split('-');\n      return new Date(year, month - 1);\n    };\n    \n    // Create scales\n    const x = d3.scaleTime()\n      .domain(d3.extent(data, d => parseDate(d.date)))\n      .range([0, innerWidth]);\n\n    // Primary Y-axis scale (for projects)\n    const y1 = d3.scaleLinear()\n      .domain([0, d3.max(data, d => d.totalProjects) * 1.1]) // Add 10% padding at top\n      .range([innerHeight, 0]);\n\n    // Secondary Y-axis scale (for MDs)\n    const y2 = d3.scaleLinear()\n      .domain([0, d3.max(data, d => d.totalMds) * 1.1]) // Add 10% padding at top\n      .range([innerHeight, 0]);\n\n    // Create axes\n    const xAxis = d3.axisBottom(x)\n      .ticks(d3.timeMonth.every(6))\n      .tickFormat(d3.timeFormat(\"%b %Y\"));\n\n    const y1Axis = d3.axisLeft(y1);\n    const y2Axis = d3.axisRight(y2);\n\n    // Add X axis\n    svg.append(\"g\")\n      .attr(\"transform\", `translate(0,${innerHeight})`)\n      .call(xAxis)\n      .selectAll(\"text\")\n      .style(\"text-anchor\", \"end\")\n      .style(\"font-size\", axisNumbersFontSize)\n      .attr(\"dx\", \"-.8em\")\n      .attr(\"dy\", \".15em\")\n      .attr(\"transform\", \"rotate(-45)\");\n\n    // Add primary Y axis (projects)\n    svg.append(\"g\")\n      .style(\"font-size\", axisNumbersFontSize)\n      .call(y1Axis);\n\n    // Add secondary Y axis (MDs)\n    svg.append(\"g\")\n      .attr(\"transform\", `translate(${innerWidth}, 0)`)\n      .style(\"font-size\", axisNumbersFontSize)\n      .call(y2Axis);\n\n    // Create the line generators\n    const projectLine = d3.line()\n      .x(d => x(parseDate(d.date)))\n      .y(d => y1(d.totalProjects))\n      .curve(d3.curveMonotoneX);\n\n    const mdLine = d3.line()\n      .x(d => x(parseDate(d.date)))\n      .y(d => y2(d.totalMds))\n      .curve(d3.curveMonotoneX);\n\n    // Add the line paths\n    // Projects line (blue)\n    svg.append(\"path\")\n      .datum(data)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", secondaryColor)\n      .attr(\"stroke-width\", 3)\n      .attr(\"d\", projectLine);\n\n    // MDs line (orange)\n    svg.append(\"path\")\n      .datum(data)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", primaryColor)\n      .attr(\"stroke-width\", 3)\n      .attr(\"d\", mdLine);\n\n    // Add dots for data points - Projects\n    svg.selectAll(\".dot-projects\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"class\", \"dot-projects\")\n      .attr(\"cx\", d => x(parseDate(d.date)))\n      .attr(\"cy\", d => y1(d.totalProjects))\n      .attr(\"r\", 4)\n      .attr(\"fill\", secondaryColor);\n\n    // Add dots for data points - MDs\n    svg.selectAll(\".dot-mds\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"class\", \"dot-mds\")\n      .attr(\"cx\", d => x(parseDate(d.date)))\n      .attr(\"cy\", d => y2(d.totalMds))\n      .attr(\"r\", 4)\n      .attr(\"fill\", primaryColor);\n\n    // Add tooltip functionality\n    const tooltip = d3.select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"timeline-tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"background\", \"white\")\n      .style(\"border\", \"1px solid #ddd\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"padding\", \"8px\")\n      .style(\"font-size\", \"12px\")\n      .style(\"pointer-events\", \"none\")\n      .style(\"opacity\", 0)\n      .style(\"z-index\", 10);\n\n    // Add tooltip handlers for both types of points\n    const showTooltip = (event, d) => {\n      tooltip.transition()\n        .duration(200)\n        .style(\"opacity\", 0.9);\n      tooltip.html(`\n        <strong>Date:</strong> ${d.date}<br>\n        <strong>New Projects:</strong> ${d.newProjects}<br>\n        <strong>Total Projects:</strong> ${d.totalProjects}<br>\n        <strong>New MDs:</strong> ${d.newMds}<br>\n        <strong>Total MDs:</strong> ${d.totalMds}\n      `)\n        .style(\"left\", (event.pageX + 10) + \"px\")\n        .style(\"top\", (event.pageY - 28) + \"px\");\n    };\n\n    const hideTooltip = () => {\n      tooltip.transition()\n        .duration(500)\n        .style(\"opacity\", 0);\n    };\n\n    svg.selectAll(\".dot-projects, .dot-mds\")\n      .on(\"mouseover\", showTooltip)\n      .on(\"mouseout\", hideTooltip);\n\n    // Add axes labels\n    svg.append(\"text\")\n      .attr(\"transform\", `translate(${innerWidth / 2}, ${innerHeight + margin.bottom + 60})`)\n      .style(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"24px\")\n      .text(\"Upload Date\");\n\n    // Left Y-axis label (Projects)\n    svg.append(\"text\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .attr(\"y\", -margin.left + 5)\n      .attr(\"x\", -(innerHeight / 2))\n      .attr(\"dy\", \"1em\")\n      .style(\"text-anchor\", \"middle\")\n      .style(\"fill\", secondaryColor)\n      .style(\"font-size\", axisLabelsFontSize)\n      .text(\"Total Projects\");\n\n    // Right Y-axis label (MDs)\n    svg.append(\"text\")\n      .attr(\"transform\", \"rotate(90)\")\n      .attr(\"y\", -innerWidth - margin.right + 5)\n      .attr(\"x\", innerHeight / 2)\n      .attr(\"dy\", \"1em\")\n      .style(\"text-anchor\", \"middle\")\n      .style(\"fill\", primaryColor)\n      .style(\"font-size\", axisLabelsFontSize)\n      .text(\"Total MDs\");\n\n    // Add legend\n    const legend = svg.append(\"g\")\n      .attr(\"transform\", `translate(${innerWidth / 2 - 100}, -10)`);\n\n    // Projects legend\n    legend.append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"width\", 15)\n      .attr(\"height\", 15)\n      .attr(\"fill\", secondaryColor);\n\n    legend.append(\"text\")\n      .attr(\"x\", 20)\n      .attr(\"y\", 12)\n      .text(\"Projects\")\n      .style(\"font-size\", \"14px\");\n\n    // MDs legend\n    legend.append(\"rect\")\n      .attr(\"x\", 100)\n      .attr(\"y\", 0)\n      .attr(\"width\", 15)\n      .attr(\"height\", 15)\n      .attr(\"fill\", primaryColor);\n\n    legend.append(\"text\")\n      .attr(\"x\", 120)\n      .attr(\"y\", 12)\n      .text(\"MDs\")\n      .style(\"font-size\", \"14px\");\n\n  }, [data, width, height]);\n\n  // Cleanup function to remove tooltip when component unmounts\n  useEffect(() => {\n    return () => {\n      d3.selectAll(\".timeline-tooltip\").remove();\n    };\n  }, []);\n\n  return <svg ref={svgRef} className={className} />;\n};\n\nexport default TimelineChart;","// React logic\nimport React, { useMemo } from 'react';\n\n// Visual assets\nimport { Typography } from '@mui/material';\n\n// Import the map chart to display where nodes are (global client only)\nimport NodeMap from './nodemap';\nimport NodeTable from './nodetable';\n\n// Constants\nimport { BASE_PATH, BASE_PATH_PROJECTS, HOST_CONFIG } from '../../utils/constants';\nimport { createPalette } from '../../utils/auxiliar-functions';\n// API acces\nimport useAPI from '../../hooks/use-api';\n\nimport style from './style.module.css';\nimport { useTheme } from '@mui/material/styles';\n\nimport { PieChart } from 'react-minimal-pie-chart';\nimport SimpleLegend from '../../components/simple-legend';\nimport Histogram from '../../components/histogram';\nimport TimelineChart from './timeline';\n\n// Current data summary\nexport default () => {\n\n    // Get the provided theme\n    const theme = useTheme();\n    const primaryColor = theme.palette.primary.main;\n    const secondaryColor = theme.palette.secondary.dark;\n    \n    // Use the API to get the summary\n    const summaryUrl = `${BASE_PATH_PROJECTS}/summary`;\n    const { payload: summaryPayload, error: summaryError } = useAPI(summaryUrl);\n  \n    // Use the API to get the options\n    const optionsUrl = `${BASE_PATH_PROJECTS}/options?projection=${HOST_CONFIG.optionsField}`;\n    const { payload: optionsPayload, error: optionsError } = useAPI(optionsUrl);\n    \n    // Use the API to get the project growth data\n    const growthUrl = `${BASE_PATH_PROJECTS}/summary/growth`;\n    const { payload: growthPayload, error: growthError } = useAPI(growthUrl);\n  \n    // Prepare data for the options pie chart\n    const { optionsPieChartData, optionsLegendData } = useMemo(() => {\n        if (!HOST_CONFIG.optionsField) return {};\n        // Set the data to be represented on the pie chart\n        const options = optionsPayload &&\n            Object.entries(optionsPayload[HOST_CONFIG.optionsField]);\n        if (options) options.sort((a, b) => b[1] - a[1]);\n        const colors = options && createPalette(options.length);\n        const optionsPieChartData = options\n            ? options.map(([key, value], i) => ({\n                title: HOST_CONFIG.optionsNiceNames[key] || key,\n                value: value,\n                color: colors[i],\n            }))\n            : [{ title: 'Loading...', value: 1, color: 'lightgrey' }];\n    \n        // Set the legend\n        const summatory = options && options.reduce((current_value, [key, value]) => current_value + value, 0);\n        const optionsLegendData = options && options.map(([key, value], i) => ({\n            label: (HOST_CONFIG.optionsNiceNames[key] || key) + ' (' + (Math.round((value / summatory) * 10000 ) / 100) + ' %)',\n            color: colors[i],\n        }));\n        // Return the pie chart data\n        return { optionsPieChartData, optionsLegendData };\n    }, [optionsPayload]);\n  \n    // Use the API to get MD method options\n    const methodsUrl = `${BASE_PATH_PROJECTS}/options?projection=metadata.METHOD`;\n    const { payload: methodsPayload, error: methodsError } = useAPI(methodsUrl);\n  \n    // Prepare data for the methods pie chart\n    const { methodsPieChartData, methodsLegendData } = useMemo(() => {\n        // Remove the classical MD count since it would eclipse the rest of MD methods\n        methodsPayload && delete methodsPayload['metadata.METHOD']['Classical MD'];\n        // Remove null values as well\n        methodsPayload && delete methodsPayload['metadata.METHOD'][null];\n        // Set the data to be represented on the pie chart\n        const methods = methodsPayload && Object.entries(methodsPayload['metadata.METHOD']);\n        if (!methods || methods.length === 0) return {};\n        methods.sort((a, b) => b[1] - a[1]);\n        const colors = createPalette(methods.length);\n        const methodsPieChartData = methods.map(([key, value], i) => ({\n            title: key,\n            value: value,\n            color: colors[i],\n        }));\n        // Set the legend\n        const summatory = methods.reduce((current_value, [key, value]) => current_value + value, 0);\n        const methodsLegendData = methods.map(([key, value], i) => ({\n            label: key + ' (' + (Math.round((value / summatory) * 10000 ) / 100) + ' %)',\n            color: colors[i],\n        }));\n        // Return the pie chart data\n        return { methodsPieChartData, methodsLegendData };\n    }, [methodsPayload]);\n  \n    // Use the API to get the snapshots options\n    const snapshotsUrl = `${BASE_PATH_PROJECTS}/options?projection=mds.frames`;\n    const { payload: snapshotsPayload, error: snapshotsError } = useAPI(snapshotsUrl);\n  \n    // Use the API to get the snapshots options\n    const oldSnapshotsUrl = `${BASE_PATH_PROJECTS}/options?query={\"mds\":{\"$exists\":false}}&projection=metadata.SNAPSHOTS`;\n    const { payload: oldSnapshotsPayload, error: oldSnapshotsError } = useAPI(oldSnapshotsUrl);\n  \n    // Build the snapshots component\n    // If snapshots data is not yet downloaded then show an empty plot\n    const frameCounts = useMemo(() => {\n        // Merge both the new and the old format frame counts\n        let frameCounts = {};\n        if (snapshotsPayload) frameCounts = { ...snapshotsPayload['mds.frames'] };\n        if (oldSnapshotsPayload) {\n            Object.entries(oldSnapshotsPayload['metadata.SNAPSHOTS']).forEach(([frameCount, amount]) => {\n                let currentAmount = frameCounts[frameCount] || 0;\n                currentAmount += amount;\n                frameCounts[frameCount] = currentAmount;\n            })\n        }\n        return frameCounts\n    }, [snapshotsPayload, oldSnapshotsPayload]);\n  \n    // Use the API to get the atoms options\n    const atomsUrl = `${BASE_PATH_PROJECTS}/options?projection=metadata.SYSTATS`;\n    const { payload: atomsPayload, error: atomsError } = useAPI(atomsUrl);\n  \n    // Check if this is the global cliente\n    const isGlobal = HOST_CONFIG.global;\n\n    // Get nodes info\n    // Use the API to get the nodes info\n    const nodesUrl = isGlobal ? `${BASE_PATH}/current/nodes` : null;\n    const { payload: nodesPayload, error: nodesError } = useAPI(nodesUrl);\n  \n    // Handle possible errors by just showing a log error in the console\n    // Thus we allow the rest of the page to keep loading\n    [summaryError, optionsError, methodsError, snapshotsError, oldSnapshotsError, atomsError, nodesError, growthError].forEach(error => {\n        if (error) console.error(error.message);\n    });\n\n    return (<>\n        {isGlobal && <>\n            <Typography variant=\"h6\">Node locations</Typography>\n            <NodeMap nodeData={nodesPayload} className={style.nodemap}/>\n            <NodeTable nodeData={nodesPayload}/>\n            <br />\n        </>}\n        <Typography key={0} variant=\"h6\">Data summary</Typography>\n        Total number of projects:{' '}\n        {summaryPayload ? summaryPayload.projectsCount.toLocaleString() : 'Loading...'}\n        <br />\n        Total number of MDs:{' '}\n        {summaryPayload ? summaryPayload.mdCount.toLocaleString() : 'Loading...'}\n        <br />\n        {/*\n            DANI: Funciona. Solo lo he quitado temporalmente por un tema \"político\"\n            Total amount of MD time (μs):{' '}\n            {summaryPayload ? Math.round(summaryPayload.totalTime / 1000) : 'Loading...'}\n            <br />\n        */}\n        Total amount of MD frames:{' '}\n        {summaryPayload ? summaryPayload.totalFrames.toLocaleString() : 'Loading...'}\n        <br />\n        Total number of stored files:{' '}\n        {summaryPayload ? summaryPayload.totalFiles.toLocaleString() : 'Loading...'}\n        <br />\n        Total number of stored analyses:{' '}\n        {summaryPayload ? summaryPayload.totalAnalyses.toLocaleString() : 'Loading...'}\n        <br />\n        Total size of the uncompressed data:{' '} \n        {summaryPayload ? `${summaryPayload.storageStats.dataSizeInTB} (TB)` : 'Loading...'}\n        <br />\n        {HOST_CONFIG.optionsField && <>\n            <Typography variant=\"h6\">{`Projects per ${HOST_CONFIG.optionsLabel}`}</Typography>\n            <div className={style.horizontal}>\n                <PieChart\n                    data={optionsPieChartData}\n                    //label={({ dataEntry }) => dataEntry.value}\n                    className={style.piechart}\n                />\n                {optionsLegendData && (\n                    <SimpleLegend entries={optionsLegendData} className={style.legend} />\n                )}\n            </div>\n        </>}\n        {methodsPieChartData && <>\n            <Typography variant=\"h6\">Projects per non-equilibrium MD method</Typography>\n            <div className={style.horizontal}>\n                <PieChart\n                    data={methodsPieChartData}\n                    //label={({ dataEntry }) => dataEntry.value}\n                    className={style.piechart}\n                />\n                {methodsLegendData && (\n                    <SimpleLegend entries={methodsLegendData} className={style.legend} />\n                )}\n            </div>\n        </>}\n        <div className={style.histograms} >\n            <div className={style.half}>\n                <Typography variant=\"h6\">Snapshots per MD</Typography>\n                <Histogram\n                    data={frameCounts}\n                    xAxisLabelText={'Number of snapshots'}\n                    yAxisLabelText={'Number of MDs'}\n                    color={primaryColor}\n                    binMethod={'sturges'}\n                    onHover={d => `There are ${d.length} MDs with a number of snapshots between ${Math.floor(d.x0)} and ${Math.floor(d.x1)}`}\n                />\n            </div>\n            <div className={style.half}>\n                <Typography variant=\"h6\">System atoms per project</Typography>\n                <Histogram\n                    data={atomsPayload && atomsPayload[\"metadata.SYSTATS\"]}\n                    xAxisLabelText={'Number of atoms'}\n                    yAxisLabelText={'Number of projects'}\n                    color={secondaryColor}\n                    binMethod={'sturges'}\n                    onHover={d => `There are ${d.length} MDs with a number of atoms between ${Math.floor(d.x0)} and ${Math.floor(d.x1)}`}\n                />\n            </div>\n        </div>\n        <Typography variant=\"h6\">Projects and MDs Growth Over Time</Typography>\n        <div className={style.timelineChart}>\n            {growthPayload ? (\n                <TimelineChart \n                    data={growthPayload} \n                    className={style.growthChart}\n                />\n            ) : (\n                'Loading growth data...'\n            )}\n        </div>\n    </>);\n};","// extracted by mini-css-extract-plugin\nexport default {\"horizontal\":\"style_horizontal__Wxlxf\",\"menu\":\"style_menu__tGHGe\",\"text\":\"style_text__aAi8s\",\"paragraph\":\"style_paragraph__Tffit\",\"header\":\"style_header__YQJqa\",\"hr\":\"style_hr__dkWiz\",\"section\":\"style_section__2Kr9+\",\"summary\":\"style_summary__o-X6i\",\"space\":\"style_space__mBdIB\",\"piechart\":\"style_piechart__R-aya\",\"legend\":\"style_legend__y7PwV\"};","// React logic\nimport React, { useRef, useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\n// This allows to render markdown\nimport ReactMarkdown from 'react-markdown'\n\n// Visual assets\nimport Loading from 'src/components/loading';\nimport { MenuList, MenuItem, Typography } from '@mui/material';\n\nimport style from './style.module.css';\n\nimport { HOST_CONFIG, BASE_PATH } from 'src/utils/constants';\n\nimport YAML from 'yaml';\n\n// Set some markdown badges\n// Gallery -> https://ileriayo.github.io/markdown-badges/\nconst githubBadge = '![GitHub repository](https://badgen.net/badge/icon/github?icon=github&label)';\nconst gitlabBadge = '![GitLab repository](https://img.shields.io/badge/gitlab-%23181717.svg?style=for-the-badge&logo=gitlab&logoColor=white)';\nconst jupyterBadge = '![Jupyter Notebook](https://img.shields.io/badge/jupyter-%23FA0F00.svg?style=for-the-badge&logo=jupyter&logoColor=white)';\nconst binderBadge = '![Binder](https://mybinder.org/badge_logo.svg)';\n\n// Fet the GitHub or GitLab repository URL from the host configuration\nconst repoBaseURL = HOST_CONFIG.metaURL;\n// Set the GitHub repository base name\nconst pathSplits = repoBaseURL.split('/');\nconst repoOwner = pathSplits[pathSplits.length-2];\nconst repoName = pathSplits[pathSplits.length-1];\nconst repoBase = `${repoOwner}/${repoName}`;\n// Find out if it is github or gitlab\n// Set the URLs accordingly\nlet badge;\nlet indexUrl;\nlet jupyterUrl;\nlet binderUrl;\nif (repoBaseURL.includes('github')) {\n  // Get the proper badge to be used in the repository link\n  badge = githubBadge;\n  // Set the URL to the index file including display instructions for this page\n  indexUrl = `https://raw.githubusercontent.com/${repoBase}/refs/heads/main/index.yaml`;\n  // Set the URL to the github jupyer notebook viewer\n  jupyterUrl = `https://${repoBaseURL}/blob/main/notebooks/`;\n  // Set the base URL to the repository where the binder enviornment and the workflows are stored\n  binderUrl = `https://mybinder.org/v2/gh/${repoBase}/HEAD?labpath=notebooks%2F`;\n}\nelse if (repoBaseURL.includes('gitlab')) {\n  // Get the proper badge to be used in the repository link\n  badge = gitlabBadge;\n  // Set the URL to the index file including display instructions for this page\n  // DANI: Here I had problems with 'Cross-Origin Request Blocked'\n  indexUrl = `https://${repoBaseURL}/raw/main/index.yaml`;\n  // Set the URL to the github jupyer notebook viewer\n  jupyterUrl = `https://${repoBaseURL}/-/blob/main/notebooks/`;\n  // Set the base URL to the repository where the binder enviornment and the workflows are stored\n  binderUrl = `https://mybinder.org/v2/git/${repoBaseURL}/main?urlpath=lab/tree/`;\n}\nelse throw new Error(`Only GitHub and GitLab repositories are supported, not ${repoBaseURL}`);\n\n// Set a simpler TextLink component\nconst TextLink = ({ name, url }) => (\n  <>\n    <a href={url} target=\"_blank\" rel=\"noreferrer noopener\" >\n      {name}\n    </a>\n  </>\n);\n\nconst MetaAnalysis = () => {\n  // Get the location\n  const location = useLocation();\n\n  // Display instructions\n  const [displayIndex, setDisplayIndex] = useState(null);\n\n  // References to all documentation blocks will be stored here\n  const containerRefs = useRef();\n  const linkRefs = useRef({});\n\n  // Scroll down to the asked reference\n  useEffect(() => {\n    if (displayIndex === null) return;\n    if (displayIndex.error) return;\n    const container = containerRefs.current;\n    const refId = location.hash.slice(1);\n    const linkRef = linkRefs.current[refId];\n    container.scrollTop = linkRef.offsetTop - container.offsetTop;\n  }, [location.hash, linkRefs]);\n\n  // Fetch data just once\n  useEffect(() => {\n    // Request the GitHub index file which has the display instructions for this page\n    fetch(indexUrl)\n      .then(async response => {\n        const actualResponse = await response.text();\n        const parsedResponse = YAML.parse(actualResponse);\n        setDisplayIndex(parsedResponse);\n      })\n      .catch(error => {\n        console.error(error);\n        console.error(`Failed to download ${indexUrl}`);\n        setDisplayIndex({ error })\n      });\n  }, []);\n\n  // Wait for data to be available\n  if (displayIndex === null) return <Loading />\n  if (displayIndex.error)\n    return 'Something went wrong when downloading the page configuration. Look at the console.';\n\n  return (\n    <div className={style.horizontal}>\n      <MenuList className={style.menu}>\n        {// Iterate sections including multiple notebooks\n        displayIndex.map(section => [\n          <MenuItem key={section.id} component={Link} to={`/meta#${section.id}`}\n            style={{ whiteSpace: 'normal', fontWeight: 'bold', fontSize: 'larger' }}\n          >\n            {section.title}\n          </MenuItem>,\n          // Iterate notebooks\n          ...section.entries.map(notebook => (\n            <MenuItem key={notebook.id} component={Link} to={`/meta#${notebook.id}`}\n              style={{ whiteSpace: 'normal', fontWeight: 'normal', fontSize: 'normal' }}\n            >\n              {notebook.title}\n            </MenuItem>\n          ))\n        ])}\n      </MenuList>\n      <div className={style.text} ref={containerRefs}>\n        <Typography variant={'h5'} className={style.header}>\n          Meta-analysis\n        </Typography>\n        In this page we have prepared <span style={{ color: 'green' }}>tutorials</span>{' '}\n        and <span style={{ color: 'green' }}>use cases</span> of meta-analyses.\n        <br />\n        <br />\n        Meta-analyses are analyses which use several MDs as input. This database is specially suited for this task \n        since it is endowed with a <TextLink name={'REST API'} url={BASE_PATH + 'docs/'} />. \n        Programmatic access to the database allows to automatize data requests and thus build powerful meta-analyses.\n        The following examples are supported by <TextLink name={'Binder'} url={'https://mybinder.org/'} />, \n        which opens interactive <span style={{ color: 'green' }}>Jupyter Notebooks</span>.\n        Note that you can edit code or run the analysis online with no need to install any software.\n        Here we suggest some meta-analyses but you are very welcome to make your own ones!\n        <br />\n        <br />\n        Original notebooks and the environment setup to run the examples are available here:\n        <ReactMarkdown\n          children={`[${badge}](https://${repoBaseURL})`}\n          linkTarget=\"_blank\"\n        />\n        <hr className={style.hr} />\n        {displayIndex.map(section => (\n          <div key={section.id} id={section.id}\n            ref={r => (linkRefs.current[section.id] = r)}\n            className={style.paragraph}\n          >\n            <Typography variant={'h5'} className={style.header}>\n              {section.title}\n            </Typography>\n            {section.docs && <div key={'text'}>{section.docs}</div>}\n            {section.entries.map(notebook => (\n              <div\n                key={notebook.id} id={notebook.id}\n                ref={r => (linkRefs.current[notebook.id] = r)}\n                className={style.paragraph}\n              >\n                <Typography variant={'h6'} className={style.header}>\n                  {notebook.title}\n                </Typography>\n                {notebook.docs && <div key={'text'}>{notebook.docs}</div>}\n                <ReactMarkdown\n                  children={`[${jupyterBadge}](${jupyterUrl}${notebook.notebook})`}\n                  linkTarget=\"_blank\"\n                />\n                <ReactMarkdown\n                  children={`[${binderBadge}](${binderUrl}${notebook.notebook})`}\n                  linkTarget=\"_blank\"\n                />\n                <hr className={style.hr} />\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MetaAnalysis;\n","import { useState, useCallback } from 'react';\n\n// useToggleState is a custom hook which returns a state and a custom function to calculate the new state\nconst useToggleState = initialState => {\n  // useState is a React hook which returns a state and a function to change this state respectively\n  // The state is the initialState at the moment it is called\n  const [state, setState] = useState(!!initialState);\n  // useCallback is a React hook which returns a memoize callback\n  const toggleState = useCallback(valueOrSetter => {\n    // Set the state according to the input type\n    switch (typeof valueOrSetter) {\n      // Funtions are accepted and set as state\n      case 'function':\n        setState(valueOrSetter);\n        break;\n      // In case of booleans, numers and strings, a function that returns the opposite in boolean format is returned\n      case 'boolean':\n      case 'number':\n      case 'string':\n        setState(Boolean(valueOrSetter));\n        break;\n      // In other cases, returns a function which just change the state to the opposite of the previours state in boolean format\n      default:\n        setState(state => !state);\n    }\n  }, []);\n\n  return [state, toggleState];\n};\n\nexport default useToggleState;\n"],"names":["WAIT_DELAY","_ref","wait","flag","toggleFlag","useToggleState","useLayoutEffect","timer","setTimeout","clearTimeout","_jsx","title","className","cn","style","children","CircularProgress","variant","color","size","thickness","blank","loading","payload","error","urls","data","setData","useState","map","url","_objectSpread","useEffect","source","axios","didCancel","oldData","Error","alreadySearchedResponse","find","response","forEach","i","cancelToken","token","startTime","Date","responseType","then","responseTime","config","responseData","time","previousData","newData","catch","cancel","DEFAULT_CACHE_EXPIRATION","cache","loadCache","cachedData","localStorage","getItem","JSON","parse","cacheOptions","arguments","length","undefined","name","cacheOn","cacheExpiration","initialData","now","received","getTime","endTime","setItem","stringify","saveCache","getDistance","firstLocation","secondLocation","xDiff","yDiff","Math","sqrt","pow","getCentroid","nodes","caluclateAverage","node","location","MAP_CONFIGS","rotate","center","scale","nodeData","primary","useTheme","palette","main","nodeGroups","useMemo","_nodeGroups","closeGroup","group","push","c","_jsxs","ComposableMap","projection","projectionConfig","Geographies","geography","fill","stroke","strokeWidth","_ref2","geographies","geo","Geography","default","outline","hover","pressed","rsmKey","g","Marker","coordinates","r","fontSize","textAnchor","concat","geoJson","feature","pingUrls","api_url","pingResponses","useBatchAPI","columns","field","headerName","flex","align","headerAlign","renderCell","params","renderHref","nodeName","row","nodeUrl","href","target","rel","value","status","CheckCircleIcon","marginTop","ErrorIcon","renderStatusSymbol","rows","ping","countryCode","getCountryFromCoords","lng","lat","country","features","geoContains","id","slice","ReactCountryFlag","svg","width","height","border","borderWidth","borderColor","alias","key","DataGrid","disableRowSelectionOnClick","hideFooter","entries","label","display","backgroundColor","marginRight","dataPlaceholder","margin","axisNumbersFontSize","axisLabelsFontSize","forwardRef","ref","xAxisLabelText","yAxisLabelText","onHover","binMethod","binCount","containerRef","useRef","updateDataRef","noop","updateSizeRef","updateXAxisLabelText","updateYAxisLabelText","updateColor","updateOnHover","graph","select","current","append","x","scaleLog","base","xAxis","y","scaleLinear","yAxis","xAxisLabel","attr","yAxisLabel","text","_ref3","_ref4","Object","keys","scaleCounts","_ref5","count","valueScale","toString","minScale","reduce","cv","nv","min","Infinity","maxScale","max","xTicks","columnsData","values","x0","x1","maxCount","domain","newColumnsData","selectAll","exit","remove","enter","totalDataPoints","ceil","log2","Number","minValue","maxValue","logMinValue","log10","logBinWidth","bins","_ref6","numValue","binIndex","_ref7","_ref8","clientWidth","clientHeight","actualWidth","actualHeight","columnsCount","range","call","axisBottom","ticks","tickFormat","d","exp","isInteger","superscripts","split","char","join","formatExponent","axisLeft","window","addEventListener","removeEventListener","svgRef","theme","primaryColor","secondaryColor","dark","d3","innerWidth","innerHeight","parseDate","year","month","date","y1","totalProjects","y2","totalMds","every","y1Axis","y2Axis","projectLine","curve","mdLine","datum","tooltip","on","showTooltip","event","transition","duration","html","newProjects","newMds","pageX","pageY","hideTooltip","legend","secondary","summaryUrl","BASE_PATH_PROJECTS","summaryPayload","summaryError","useAPI","optionsUrl","HOST_CONFIG","optionsField","optionsPayload","optionsError","growthUrl","growthPayload","growthError","optionsPieChartData","optionsLegendData","options","sort","a","b","colors","createPalette","optionsNiceNames","summatory","current_value","round","methodsUrl","methodsPayload","methodsError","methodsPieChartData","methodsLegendData","methods","snapshotsUrl","snapshotsPayload","snapshotsError","oldSnapshotsUrl","oldSnapshotsPayload","oldSnapshotsError","frameCounts","frameCount","amount","currentAmount","atomsUrl","atomsPayload","atomsError","isGlobal","global","nodesUrl","BASE_PATH","nodesPayload","nodesError","console","message","_Fragment","Typography","NodeMap","NodeTable","projectsCount","toLocaleString","mdCount","totalFrames","totalFiles","totalAnalyses","storageStats","dataSizeInTB","optionsLabel","PieChart","SimpleLegend","Histogram","floor","TimelineChart","repoBaseURL","metaURL","pathSplits","repoOwner","repoName","repoBase","badge","indexUrl","jupyterUrl","binderUrl","includes","TextLink","MetaAnalysis","useLocation","displayIndex","setDisplayIndex","containerRefs","linkRefs","container","refId","hash","linkRef","scrollTop","offsetTop","fetch","async","actualResponse","parsedResponse","YAML","Loading","MenuList","section","MenuItem","component","Link","to","whiteSpace","fontWeight","notebook","ReactMarkdown","linkTarget","docs","initialState","state","setState","toggleState","useCallback","valueOrSetter","Boolean"],"sourceRoot":""}