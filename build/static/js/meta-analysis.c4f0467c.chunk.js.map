{"version":3,"file":"static/js/meta-analysis.c4f0467c.chunk.js","mappings":"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","sources":["hooks/use-batch-api/index.js","hooks/use-api/index.js","webpack://mdposit/./src/pages/statistics/nodemap/style.module.css?e459","pages/statistics/nodemap/index.js","pages/statistics/nodetable/index.js","webpack://mdposit/./src/pages/statistics/style.module.css?e818","components/simple-legend/index.js","webpack://mdposit/./src/components/histogram/style.module.css?f8b2","components/histogram/index.js","pages/statistics/timeline.js","pages/statistics/index.js","webpack://mdposit/./src/pages/meta-analysis/style.module.css?6f1d","pages/meta-analysis/index.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Empty response\nconst blank = {\n  loading: false,\n  payload: null,\n  error: null,\n};\n\n// Loading response\nconst loading = {\n  loading: true,\n};\n\n// Get data from the API for multiple URLs\nconst useBatchAPI = urls => {\n  // Set the 'data' state object, which is returned at the end of this function\n  const [data, setData] = useState(urls.map(url => ({ url: url, ...blank })));\n\n  // This react hook is responisble for sending the request to the API\n  // This react hook has 'url' dependencies, so it is only runned once per request\n  useEffect(() => {\n    // This is axios (https://www.npmjs.com/package/axios)\n    // Set a cancel option (token). If a request includes this cancel token in its options, the request can be cancelled\n    // In order to cancel the request, the same token must be used through axios\n    const source = axios.CancelToken.source();\n    let didCancel = false;\n    // Reset data to match in length with the urls\n    // Try to reuse old data in case any url matches\n    setData(oldData => {\n      const newData = urls.map(url => {\n        // If the url is not valid then kill it\n        // This is a workaround of the useAPI hook, but here it makes not sense\n        if (!url) throw new Error('Missing URL in batch API call');\n        // Search for this url in old data and return it in case we find it\n        const alreadySearchedResponse = oldData.find(response => response.url === url);\n        if (alreadySearchedResponse) return alreadySearchedResponse;\n        // Otherwise return the loading response\n        return loading;\n      })\n      return newData;\n    });\n    // Iterate over each url\n    urls.forEach((url, i) => {\n      // Make a request in a Promise/await way\n      axios(url, {\n        // This token allows us to further cancel the request if necessary\n        cancelToken: source.token,\n        // Send the start time so we can calculate the response time when we get the response\n        startTime: new Date(),\n        responseType: 'arraybuffer'\n      })\n        // (.then is async) If the request has succeed\n        .then(response => {\n          if (didCancel) return;\n          // Calculate the response time\n          const endTime = new Date();\n          const startTime = response.config.startTime;\n          const responseTime = endTime - startTime; // In ms\n          // Return response data\n          const responseData = {\n            url: url,\n            loading: false,\n            payload: response.data,\n            error: null,\n            time: responseTime\n          };\n          setData(previousData => {\n            const newData = [ ...previousData ]\n            newData[i] = responseData;\n            return newData;\n          });\n        })\n        // Otherwise\n        .catch(error => {\n          if (didCancel) return;\n          const responseData = {\n            url: url,\n            loading: false,\n            payload: null,\n            error: error,\n          };\n          setData(previousData => {\n            const newData = [ ...previousData ]\n            newData[i] = responseData;\n            return newData;\n          });\n        });\n    });\n\n    return () => {\n      // Cancel the request\n      source.cancel();\n      didCancel = true;\n    };\n\n    // 'useEffect' will only be called when the url changes\n  }, [urls]);\n  // If there is no url then return an empty list\n  if (!urls) return [];\n  // Data is returned here\n  return data;\n};\n\nexport default useBatchAPI;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Empty response\nconst blank = {\n  loading: false,\n  payload: null,\n  error: null,\n};\n\n// Loading response\nconst loading = {\n  loading: true,\n};\n\n\n// Default cache expiration time (e.g., 1 hour in milliseconds)\nconst DEFAULT_CACHE_EXPIRATION = 60 * 60 * 1000;\n\n// Load cache from localStorage\nconst loadCache = () => {\n  const cachedData = localStorage.getItem('apiCache');\n  return cachedData ? JSON.parse(cachedData) : {};\n};\n\n// Save cache to localStorage\nconst saveCache = (cache) => {\n  localStorage.setItem('apiCache', JSON.stringify(cache));\n};\n\n// Cache object to store API responses\nlet cache = loadCache();\n// Get data from the API\nconst useAPI = (url, cacheOptions = {}) => {\n  // Destructure options and set default values\n  const {\n    name = '',\n    cacheOn = false,\n    cacheExpiration = DEFAULT_CACHE_EXPIRATION, // Default cache expiration\n  } = cacheOptions;\n  \n  // Check cache synchronously before initializing state\n  const initialData = (() => {\n    if (cacheOn && cache[name]) {\n      const responseData = cache[name];\n      const now = Date.now();\n      const receivedTime = new Date(responseData.received).getTime()\n      // Use cached data if it hasn't expired\n      if (now - receivedTime < cacheExpiration) {\n        return responseData;\n      }\n    }\n    return blank;\n  })();\n  // Set the 'data' state object, which is returned at the end of this function\n  const [data, setData] = useState(initialData);\n\n  // This react hook is responisble for sending the request to the API\n  // This react hook has 'url' dependencies, so it is only runned once per request\n  useEffect(() => {\n    // In case there is no valid url\n    // This may be useful as a workaround to not call the API, since hooks can not be called conditionally\n    if (!url) {\n      setData(blank);\n      return;\n    }\n    // This is axios (https://www.npmjs.com/package/axios)\n    // Set a cancel option (token). If a request includes this cancel token in its options, the request can be cancelled\n    // In order to cancel the request, the same token must be used through axios\n    const source = axios.CancelToken.source();\n    let didCancel = false;\n    // Make a request in a Promise/await way\n    axios(url, {\n      // This token allows us to further cancel the request if necessary\n      cancelToken: source.token,\n      // Send the start time so we can calculate the response time when we get the response\n      startTime: new Date()\n    })\n      // (.then is async) If the request has succeed\n      .then(response => {\n        if (didCancel) return;\n        // Calculate the response time\n        const endTime = new Date();\n        const startTime = response.config.startTime;\n        const responseTime = endTime - startTime; // In ms\n        // Return response data\n        const responseData = {\n          url: url,\n          loading: false,\n          payload: response.data,\n          error: null,\n          time: responseTime,\n          received: endTime,\n        };\n        // Cache the response if caching is enabled\n        if (cacheOn) {\n          cache[name] = responseData;\n          saveCache(cache);\n        }\n        setData(responseData);\n      })\n      // Otherwise\n      .catch(error => {\n        if (didCancel) return;\n        const responseData = {\n          url: url,\n          loading: false,\n          payload: null,\n          error: error,\n        };\n        setData(responseData);\n      });\n\n    return () => {\n      // Cancel the request\n      source.cancel();\n      didCancel = true;\n    };\n\n    // 'useEffect' will only be called when the url changes\n  }, [url]);\n  // If there is no url then return the blank response\n  if (!url) return blank;\n  // Data is returned this way\n  // Data is returned only if the data.url matches the url from this request\n  // These urls do not macth each first time 'useAPI' is called\n  // 'data' is not reset each time 'useAPI' is called so the url is from the previous request\n  if (data.url === url || initialData.url === url) return data;\n  // The first time 'useAPI' is called only { loading: true } is returned\n  else return loading;\n};\n\nexport default useAPI;\n","// extracted by mini-css-extract-plugin\nexport default {\"maps\":\"style_maps__KuYqC\"};","import React, { useMemo } from \"react\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker\n} from \"react-simple-maps\";\n\n// Auxiliar functions\nimport { caluclateAverage } from '../../../utils/auxiliar-functions';\n\n// Use this to access the primary color according to the style palette\nimport { useTheme } from '@mui/material/styles';\n\n// Get the map\nimport map from './map.json';\n\n// CSS styling\nimport style from './style.module.css';\n\n// Set the distance cutoff to merge nodes together (in coordinate grades)\nconst NODE_DISTANCE_CUTOFF = 0.01;\n// Set a function to calculate distance between 2 nodes\nconst getDistance = (firstLocation, secondLocation) => {\n  const xDiff = firstLocation[0] - secondLocation[0];\n  const yDiff = firstLocation[1] - secondLocation[1];\n  return Math.sqrt( Math.pow(xDiff, 2) + Math.pow(yDiff, 2) );\n};\n// Set a function to calculate the mid point between n nodes\nconst getCentroid = (nodes) => {\n  const xMean = caluclateAverage(nodes.map(node => node.location[0]));\n  const yMean = caluclateAverage(nodes.map(node => node.location[1]));\n  return [xMean, yMean];\n};\n\n// Set the maps to be displayed\n// This in now manually hardcoded since it is a ever changing landscape\nconst MAP_CONFIGS = [\n  { rotate: [-2,-46,0], center: [0,0], scale: 1300 },\n  { rotate: [85,-30,0], center: [0,0], scale: 1300 }\n];\n\n// A map with all available nodes\nconst NodeMap = ({ nodeData, className }) => {\n  // Get the paletter primary color\n  const theme = useTheme();\n  const primary = theme.palette.primary.main;\n  // Set node representations\n  // Several nodes may be combined in a single representation to avoid overlaps\n  // DANI: Esta lógica es muy simple, si hay muchos nodos habrá que replanteársela\n  const nodeGroups = useMemo(() => {\n    if (!nodeData) return null;\n    // Group nodes together by distance\n    const _nodeGroups = [];\n    // Iterate nodes\n    for (const node of nodeData) {\n      // Find a close group\n      const closeGroup = _nodeGroups.find(group => getDistance(group.location, node.location) < NODE_DISTANCE_CUTOFF);\n      // If we just found a close group then merge this node\n      if (closeGroup) {\n        closeGroup.nodes.push(node);\n        closeGroup.location = getCentroid(closeGroup.nodes);\n        continue;\n      }\n      // Otherwise set a new group for this node\n      _nodeGroups.push({ nodes: [node], location: node.location });\n    }\n    return _nodeGroups;\n  },[nodeData]);\n\n  return (<div className={className}>\n      {MAP_CONFIGS.map((config, c) => \n      (<ComposableMap\n        key={c}\n        projection=\"geoAzimuthalEqualArea\"\n        projectionConfig={config}\n        className={style.maps}\n      >\n        <Geographies\n          geography={map}\n          fill=\"#D6D6DA\"\n          stroke=\"#FFFFFF\"\n          strokeWidth={0.5}\n        >\n          {({ geographies }) =>\n            geographies.map((geo) => (\n              <Geography key={geo.rsmKey} geography={geo} \n              style={{\n                default: { outline: \"none\" },\n                hover: { outline: \"none\" },\n                pressed: { outline: \"none\" },\n              }}/>\n            ))\n          }\n        </Geographies>\n        {nodeGroups && nodeGroups.map((group, g) => [\n          // Add a marker in the map for every node\n          <Marker key={g} coordinates={[group.location[1], group.location[0]]}>\n            <circle r={8} fill={primary} />\n          </Marker>,\n          ...group.nodes.map((node, i) => (\n            <Marker key={`${g}.${i}`} coordinates={[group.location[1], group.location[0] + 0.6 + i]}>\n              <text fontSize={\"large\"} textAnchor=\"middle\" fill={primary}>\n                {node.name}\n              </text>\n            </Marker>            \n          ))\n        ])}\n      </ComposableMap>\n    ))}\n  </div>)\n};\n\nexport default NodeMap;\n","import React, { useMemo } from \"react\";\n\n// Visual assets\nimport { DataGrid } from '@mui/x-data-grid';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport ErrorIcon from '@mui/icons-material/Error';\n\n// Hooks\nimport useBatchAPI from 'src/hooks/use-batch-api';\n\n// Get the map\nimport map from '../nodemap/map.json';\n\n// Estas dos librerías son dependencias de react-simple-maps\nimport { geoContains } from 'd3-geo';\nimport { feature } from 'topojson-client';\n\n// Flags\nimport ReactCountryFlag from \"react-country-flag\"\n\n// Convert TopoJSON to GeoJSON\nconst geoJson = feature(map, map.objects.world); \n// Set a function to gt the country from a given coordinates\n// DANI: Chapi made\nconst getCountryFromCoords = (lng, lat) => {\n  for (const country of geoJson.features)\n    if (geoContains(country, [lng, lat])) return country.id;\n  return null; // Not found\n}\n\n// Set a function to return text within a hyperlink\nconst renderHref = (nodeName, nodeUrl) => <a href={nodeUrl} target=\"_blank\" rel=\"noreferrer noopener\">{nodeName}</a>;\n\n// Set a function to return one symbol or another depending on a node status\nconst renderStatusSymbol = status => {\n  if (status === 'active') return <CheckCircleIcon style={{ color: 'green', marginTop: '0.5em' }}/>;\n  if (status === 'fallen') return <ErrorIcon style={{ color: 'red', marginTop: '0.5em' }}/>;\n  throw new Error(`Not supported status ${status}`);\n}\n\n// Set a table displaying all avilable nodes and their status and response time\n// Note that this component will only work with the global API\nconst NodeTable = ({ nodeData }) => {\n  \n    // If this is the global client then ping all nodes to check the response time\n    const pingUrls = useMemo(() => {\n        if (!nodeData) return [];\n        return nodeData.map(node => node.api_url);\n    }, [nodeData]);\n    const pingResponses = useBatchAPI(pingUrls);\n  \n    // Set the table to be displayed including ping response times\n    if (!pingResponses || pingResponses.length === 0) return;\n    // Set table columns\n    const columns = [\n        { field: 'node', headerName: 'Node name', flex: 0.4, align: 'center', headerAlign: 'center',\n        renderCell: params => renderHref(params.row.node, params.row.url) },\n        { field: 'flag', headerName: 'Country', flex: 0.15, align: 'center', headerAlign: 'center',\n            renderCell: params => params.value },\n        { field: 'status', headerName: 'Status', flex: 0.15, align: 'center', headerAlign: 'center',\n        renderCell: params => renderStatusSymbol(params.value) },\n        { field: 'ping', headerName: 'Response time', flex: 0.3, align: 'center', headerAlign: 'center' }\n    ];\n    // Set a table row for every node\n    const rows = nodeData.map(node => {\n        const ping = pingResponses.find(response => response.url === node.api_url);\n        const status = ping && ping.time ? 'active' : 'fallen';\n        const responseTime = ping && ping.time ? `${ping.time}ms` : '...';\n        // Find the corresponding country and get its flag\n        const longitud = node.location[1];\n        const latitud = node.location[0];\n        const countryId = getCountryFromCoords(longitud, latitud);\n        const countryCode = countryId.slice(0,2);\n        const flag = <ReactCountryFlag countryCode={countryCode} svg\n            style={{ width: \"2.1em\", height: \"1.6em\",\n                border: 'solid', borderWidth: \"0.1em\", borderColor: \"black\" }} />;\n        // The 'id' field is not used but it is required by the data table\n        return {\n            id: node.alias,\n            key: node.alias,\n            node: node.name,\n            url: node.api_url,\n            status: status,\n            ping: responseTime,\n            flag: flag,\n        };\n    });\n\n    // Return the data table\n    return (\n        <DataGrid\n            columns={columns}\n            rows={rows}\n            disableRowSelectionOnClick\n            hideFooter\n            key={'node table'}\n        />\n    );\n}\n\nexport default NodeTable;","// extracted by mini-css-extract-plugin\nexport default {\"horizontal\":\"style_horizontal__tSdeW\",\"piechart\":\"style_piechart__uFQkG\",\"legend\":\"style_legend__wkD76\",\"nodemap\":\"style_nodemap__vSDbk\",\"histograms\":\"style_histograms__k2z-M\",\"half\":\"style_half__GhBKj\",\"timelineChart\":\"style_timelineChart__01EXr\",\"growthChart\":\"style_growthChart__c6d22\"};","import React from 'react';\n\n// Expected input format is entires =\n//  [\n//    {\n//      label: 'hello',\n//      color: 'black',\n//    }\n//  ]\nconst SimpleLegend = ({ entries, className }) => {\n  return (\n    <div className={className}>\n      {entries.map(({ label, color }, i) => (\n        <div key={i} style={{ fontSize: '20px' }}>\n          <span\n            style={{\n              display: 'inline-block',\n              height: '1em',\n              width: '1em',\n              backgroundColor: color,\n              marginRight: '0.5em',\n              fontSize: '20px'\n            }}\n          />\n          {label}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default SimpleLegend;\n","// extracted by mini-css-extract-plugin\nexport default {\"default\":\"style_default__JeUok\",\"graph-container\":\"style_graph-container__q5I8G\"};","import React, {\n  useRef,\n  useEffect,\n  forwardRef,\n} from 'react';\nimport { noop } from 'lodash-es';\nimport {\n  select,\n  scaleLinear,\n  scaleLog,\n  axisBottom,\n  axisLeft,\n} from 'd3';\n\nimport style from './style.module.css';\n\nconst dataPlaceholder = {};\n\n// This graph has been done by adapting the example from https://d3-graph-gallery.com/graph/histogram_basic.html\n\n// Necessary for axes and axis labels\n// WARNING: Note that this is not automatic and it may require manual update when the highest value increases (left margin)\nconst margin = {\n  top: 10,\n  right: 30,\n  left: 90,\n  bottom: 60,\n};\n\n// Convert number to superscript \nfunction formatExponent(exp) {\n  const superscripts = {\n    '0': '⁰', '1': '¹', '2': '²', '3': '³', '4': '⁴',\n    '5': '⁵', '6': '⁶', '7': '⁷', '8': '⁸', '9': '⁹',\n    '-': '⁻'\n  };\n\n  return exp.toString().split('')\n    .map(char => superscripts[char] || char)\n    .join('');\n}\n\n// Set the size of the axis numbers\nconst axisNumbersFontSize = \"15px\";\nconst axisLabelsFontSize = \"24px\";\n\nconst Histogram = forwardRef(({\n  // Data containing an object with count of different values\n  data,\n  // Set the axis labels\n  xAxisLabelText,\n  yAxisLabelText,\n  // Set the color\n  color = '#69b3a2',\n  // Set the onHover function\n  onHover,\n  binMethod = 'log', // log, sturges, root, manual\n  // Manually set number of bins (optional)\n  binCount = 10,\n  // Force a classname for the overall component element\n  className,\n}, ref) => {\n  // Set a fake dataset to allow the graph to work when no data is passed\n  if (!data) data = dataPlaceholder;\n\n  // Referenced document element where d3 is rendered\n  const containerRef = useRef(null);\n  // Referenced function which allows to update the cart without having to remake it\n  const updateDataRef = useRef(noop);\n  const updateSizeRef = useRef(noop);\n  const updateXAxisLabelText = useRef(noop);\n  const updateYAxisLabelText = useRef(noop);\n  const updateColor = useRef(noop);\n  const updateOnHover = useRef(noop);\n\n  // ----------------------------------------------------------------------------------------\n\n  // This useEffect must be run only once\n  // The graph content is updated through the referenced functions\n  useEffect(() => {\n    // Set the graph main handlers\n    const graph = select(containerRef.current).append('svg');\n\n    // Set axes\n    const x = scaleLog().base(10);\n    const xAxis = graph.append(\"g\");\n    const y = scaleLinear();\n    const yAxis = graph.append(\"g\");\n\n    // Set  axis labels\n    const xAxisLabel = graph.append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", axisLabelsFontSize);\n    const yAxisLabel = graph.append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", axisLabelsFontSize);\n\n    // Set functions to update axis label texts when their specific input changes\n    // Also call them now for this first time\n    updateXAxisLabelText.current = ({ xAxisLabelText }) => {\n      xAxisLabel.text(xAxisLabelText);\n    };\n    updateYAxisLabelText.current = ({ yAxisLabelText }) => {\n      yAxisLabel.text(yAxisLabelText);\n    };\n    updateXAxisLabelText.current({ xAxisLabelText });\n    updateYAxisLabelText.current({ yAxisLabelText });\n\n    // --------------------------------------------------------------------------------------------------\n\n    // Set the updating functions\n    // These functions are called by specific useEffects declared below when an specific input changes\n\n    // Set a function to update data changes\n    updateDataRef.current = ({ data }) => {\n      if (!data || Object.keys(data).length === 0) return;\n\n      // If using automatic logarithmic binning (current approach)\n      if (binMethod === 'log') {\n        // Create exponential series of ranges of values\n        // Add to each range the sum of value counts within that range\n        const scaleCounts = {};\n        Object.entries(data).forEach(([value, count]) => {\n          const valueScale = value.toString().length - 1;\n          if (scaleCounts[valueScale]) scaleCounts[valueScale] += count;\n          else scaleCounts[valueScale] = count;\n        });\n\n        // Get minimum and maximum scales\n        const minScale = Object.keys(scaleCounts).reduce((cv, nv) => {\n          return Math.min(cv, nv);\n        }, Infinity);\n        const maxScale = Object.keys(scaleCounts).reduce((cv, nv) => {\n          return Math.max(cv, nv);\n        }, -Infinity);\n        // Create the xTicks to be used as x range as well\n        // Note that we add 1 to the last scale, so we can plot a histogram bar between the actual last scale and the next\n        const xTicks = [];\n        for (let scale = minScale; scale <= maxScale + 1; scale++) {\n          xTicks.push(10 ** scale);\n        }\n        // Set data as it is about to be passed to d3\n        const columnsData = Object.values(scaleCounts).map((count, i) => {\n          return { x0: xTicks[i], x1: xTicks[i + 1], length: count }\n        });\n\n        // Find the maximum count among scaleCounts\n        const maxCount = Object.values(scaleCounts).reduce((cv, nv) => {\n          return Math.max(cv, nv);\n        }, -Infinity);\n\n        // Set axes\n        x.domain([xTicks[0], xTicks[xTicks.length - 1]]);\n        y.domain([0, maxCount]);\n\n        // Load new data in columns\n        const newColumnsData = graph.selectAll(\"rect\").data(columnsData);\n\n        // Remove columns which are no longer necessary\n        newColumnsData.exit().remove();\n\n        // Add new columns which are now necessary according to new data\n        newColumnsData.enter().append('rect');\n\n        // Edit the final columns now that we have added and removed some\n        graph.selectAll(\"rect\")\n          .attr(\"fill\", color)\n          .append(\"svg:title\")\n          .text(onHover);\n\n        // Force a redraw\n        updateSizeRef.current();\n      }\n      else {\n        if (binMethod === 'sturges' || binMethod === 'root') {\n          const totalDataPoints = Object.values(data).reduce((cv, nv) => {\n            return cv + nv;\n          }, 0);\n          if (binMethod === 'sturges') {\n            binCount = Math.ceil(Math.log2(totalDataPoints) + 1);\n          }\n          else if (binMethod === 'root') {\n            binCount = Math.ceil(Math.sqrt(totalDataPoints));\n          }\n        }\n\n        // Manual bin count approach with equal width bins on log scale\n        // Find min and max values from data\n        const values = Object.keys(data).map(Number);\n        const minValue = Math.min(...values);\n        const maxValue = Math.max(...values);\n\n        // For equal bins in log scale, calculate bin edges using exponential distribution\n        const logMinValue = Math.log10(minValue > 0 ? minValue : 0.1); // Handle zero/negative values\n        const logMaxValue = Math.log10(maxValue);\n        const logRange = logMaxValue - logMinValue;\n        const logBinWidth = logRange / binCount;\n\n        // Create bins\n        const bins = {};\n        for (let i = 0; i < binCount; i++) {\n          bins[i] = 0;\n        }\n\n        // Create xTicks for bin edges in log space\n        const xTicks = [];\n        for (let i = 0; i <= binCount; i++) {\n          xTicks.push(Math.pow(10, logMinValue + i * logBinWidth));\n        }\n\n        // Distribute data into bins\n        Object.entries(data).forEach(([value, count]) => {\n          const numValue = Number(value);\n          if (numValue <= 0) return; // Skip non-positive values in log scale\n\n          // Find appropriate bin for this value\n          let binIndex = binCount - 1; // Default to last bin\n          for (let i = 0; i < binCount; i++) {\n            if (numValue >= xTicks[i] && numValue < xTicks[i + 1]) {\n              binIndex = i;\n              break;\n            }\n          }\n          // Special case for max value\n          if (numValue === maxValue) binIndex = binCount - 1;\n\n          bins[binIndex] += count;\n        });\n\n        // Set data for d3\n        const columnsData = Object.values(bins).map((count, i) => {\n          return { x0: xTicks[i], x1: xTicks[i + 1], length: count };\n        });\n\n        // Find the maximum count\n        const maxCount = Math.max(...Object.values(bins));\n\n        // Set axes\n        x.domain([xTicks[0], xTicks[xTicks.length - 1]]);\n        y.domain([0, maxCount]);\n\n        // Load new data in columns\n        const newColumnsData = graph.selectAll(\"rect\").data(columnsData);\n\n        // Remove columns which are no longer necessary\n        newColumnsData.exit().remove();\n\n        // Add new columns which are now necessary according to new data\n        newColumnsData.enter().append('rect');\n\n        // Edit the final columns now that we have added and removed some\n        graph.selectAll(\"rect\")\n          .attr(\"fill\", color)\n          .append(\"svg:title\")\n          .text(onHover);\n\n        // Force a redraw\n        updateSizeRef.current();\n      }\n    }\n\n    // Set a function to update columns color\n    updateColor.current = ({ color }) => {\n      graph.selectAll(\"rect\").attr(\"fill\", color);\n    };\n\n    // Set a function to update onHover\n    updateOnHover.current = ({ onHover }) => {\n      graph.selectAll(\"rect\").append(\"svg:title\").text(onHover);\n    };\n\n    // This ref allows to update the graph without having to remake the whole graph\n    updateSizeRef.current = () => {\n      // Change the graph size according to the container size\n      const { clientWidth: width, clientHeight: height } = containerRef.current;\n      graph.attr('width', width).attr('height', height);\n      // Get size of the graph body after substracting margins\n      const actualWidth = width - margin.left - margin.right;\n      const actualHeight = height - margin.top - margin.bottom;\n      // Get all current columns to count them\n      const columns = graph.selectAll(\"rect\");\n      const columnsCount = columns.nodes().length;\n      // Set axis positions\n      x.range([margin.left, margin.left + actualWidth]);\n      xAxis.attr(\"transform\", \"translate(0,\" + (margin.top + actualHeight) + \")\")\n        .call(axisBottom(x)\n          .ticks(columnsCount)\n          .tickFormat(d => {\n            // Convert to superscript exponent notation\n            if (d === 0) return '0';\n            const exp = Math.log10(d);\n            if (Number.isInteger(exp)) {\n              if (exp === 0) return '1';\n              if (exp === 1) return '10';\n              return `10${formatExponent(exp)}`;\n            }\n            return '';\n          })\n        )\n        .style(\"font-size\", axisNumbersFontSize);\n      y.range([margin.top + actualHeight, margin.top]);\n      yAxis.attr(\"transform\", \"translate(\" + margin.left + \", 0)\").call(axisLeft(y))\n        .style(\"font-size\", axisNumbersFontSize);\n      // Set axis label positions\n      const xAxisLabelMargin = 5;\n      xAxisLabel.attr(\"x\", margin.left + actualWidth / 2).attr(\"y\", height - xAxisLabelMargin);\n      const yAxisLabelMargin = 20;\n      yAxisLabel.attr(\"x\", yAxisLabelMargin).attr(\"y\", margin.top + actualHeight / 2)\n        .attr(\"transform\", `rotate(-90, ${yAxisLabelMargin}, ${margin.top + actualHeight / 2})`);\n\n      // Get all current columns and place/shape them according to data\n      columns\n        //.attr(\"x\", 1)\n        .attr(\"transform\", d => \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\")\n        .attr(\"width\", d => x(d.x1) - x(d.x0) - 1)\n        .attr(\"height\", d => height - margin.bottom - y(d.length))\n    };\n\n    // Set the redraw logic to be run every time the graph container is resized\n    window.addEventListener('resize', updateSizeRef.current);\n\n    // Cleanup function\n    return () => {\n      graph.remove();\n      window.removeEventListener('resize', updateSizeRef.current);\n    }\n  }, []);\n\n  // Handle when data changes\n  useEffect(() => {\n    updateDataRef.current({ data });\n  }, [data]);\n\n  // Handle when x axis label text changes\n  useEffect(() => {\n    updateXAxisLabelText.current({ xAxisLabelText });\n  }, [xAxisLabelText]);\n\n  // Handle when y axis label text changes\n  useEffect(() => {\n    updateYAxisLabelText.current({ yAxisLabelText });\n  }, [yAxisLabelText]);\n\n  // Handle when color changes\n  useEffect(() => {\n    updateColor.current({ color });\n  }, [color]);\n\n  // Handle when onHover changes\n  useEffect(() => {\n    updateOnHover.current({ onHover });\n  }, [onHover]);\n\n  return (\n    <div className={className ? className : style.default}>\n      <div className={style['graph-container']} ref={containerRef} />\n    </div>\n  );\n});\n\nexport default Histogram;\n","import React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { useTheme } from '@mui/material/styles';\n\n\n// Set the size of the axis numbers\nconst axisNumbersFontSize = \"14px\";\nconst axisLabelsFontSize = \"24px\";\n\nconst TimelineChart = ({ data, width = 800, height = 400, className }) => {\n  const svgRef = useRef();\n  // Get the provided theme\n  const theme = useTheme();\n  const primaryColor = theme.palette.primary.main;\n  const secondaryColor = theme.palette.primary.dark;\n\n  useEffect(() => {\n    if (!data || !data.length) return;\n\n    // Clear any existing chart\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n\n    // Set dimensions and margins\n    const margin = { top: 30, right: 90, bottom: 30, left: 90 };\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n\n    // Create SVG\n    const svg = d3.select(svgRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Parse dates and format for x-axis\n    const parseDate = d => {\n      const [year, month] = d.split('-');\n      return new Date(year, month - 1);\n    };\n    \n    // Create scales\n    const x = d3.scaleTime()\n      .domain(d3.extent(data, d => parseDate(d.date)))\n      .range([0, innerWidth]);\n\n    // Primary Y-axis scale (for projects)\n    const y1 = d3.scaleLinear()\n      .domain([0, d3.max(data, d => d.totalProjects) * 1.1]) // Add 10% padding at top\n      .range([innerHeight, 0]);\n\n    // Secondary Y-axis scale (for MDs)\n    const y2 = d3.scaleLinear()\n      .domain([0, d3.max(data, d => d.totalMds) * 1.1]) // Add 10% padding at top\n      .range([innerHeight, 0]);\n\n    // Create axes\n    const xAxis = d3.axisBottom(x)\n      .ticks(d3.timeMonth.every(6))\n      .tickFormat(d3.timeFormat(\"%b %Y\"));\n\n    const y1Axis = d3.axisLeft(y1);\n    const y2Axis = d3.axisRight(y2);\n\n    // Add X axis\n    svg.append(\"g\")\n      .attr(\"transform\", `translate(0,${innerHeight})`)\n      .call(xAxis)\n      .selectAll(\"text\")\n      .style(\"text-anchor\", \"end\")\n      .style(\"font-size\", axisNumbersFontSize)\n      .attr(\"dx\", \"-.8em\")\n      .attr(\"dy\", \".15em\")\n      .attr(\"transform\", \"rotate(-45)\");\n\n    // Add primary Y axis (projects)\n    svg.append(\"g\")\n      .style(\"font-size\", axisNumbersFontSize)\n      .call(y1Axis);\n\n    // Add secondary Y axis (MDs)\n    svg.append(\"g\")\n      .attr(\"transform\", `translate(${innerWidth}, 0)`)\n      .style(\"font-size\", axisNumbersFontSize)\n      .call(y2Axis);\n\n    // Create the line generators\n    const projectLine = d3.line()\n      .x(d => x(parseDate(d.date)))\n      .y(d => y1(d.totalProjects))\n      .curve(d3.curveMonotoneX);\n\n    const mdLine = d3.line()\n      .x(d => x(parseDate(d.date)))\n      .y(d => y2(d.totalMds))\n      .curve(d3.curveMonotoneX);\n\n    // Add the line paths\n    // Projects line (blue)\n    svg.append(\"path\")\n      .datum(data)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", secondaryColor)\n      .attr(\"stroke-width\", 3)\n      .attr(\"d\", projectLine);\n\n    // MDs line (orange)\n    svg.append(\"path\")\n      .datum(data)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", primaryColor)\n      .attr(\"stroke-width\", 3)\n      .attr(\"d\", mdLine);\n\n    // Add dots for data points - Projects\n    svg.selectAll(\".dot-projects\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"class\", \"dot-projects\")\n      .attr(\"cx\", d => x(parseDate(d.date)))\n      .attr(\"cy\", d => y1(d.totalProjects))\n      .attr(\"r\", 4)\n      .attr(\"fill\", secondaryColor);\n\n    // Add dots for data points - MDs\n    svg.selectAll(\".dot-mds\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"class\", \"dot-mds\")\n      .attr(\"cx\", d => x(parseDate(d.date)))\n      .attr(\"cy\", d => y2(d.totalMds))\n      .attr(\"r\", 4)\n      .attr(\"fill\", primaryColor);\n\n    // Add tooltip functionality\n    const tooltip = d3.select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"timeline-tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"background\", \"white\")\n      .style(\"border\", \"1px solid #ddd\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"padding\", \"8px\")\n      .style(\"font-size\", \"12px\")\n      .style(\"pointer-events\", \"none\")\n      .style(\"opacity\", 0)\n      .style(\"z-index\", 10);\n\n    // Add tooltip handlers for both types of points\n    const showTooltip = (event, d) => {\n      tooltip.transition()\n        .duration(200)\n        .style(\"opacity\", 0.9);\n      tooltip.html(`\n        <strong>Date:</strong> ${d.date}<br>\n        <strong>New Projects:</strong> ${d.newProjects}<br>\n        <strong>Total Projects:</strong> ${d.totalProjects}<br>\n        <strong>New MDs:</strong> ${d.newMds}<br>\n        <strong>Total MDs:</strong> ${d.totalMds}\n      `)\n        .style(\"left\", (event.pageX + 10) + \"px\")\n        .style(\"top\", (event.pageY - 28) + \"px\");\n    };\n\n    const hideTooltip = () => {\n      tooltip.transition()\n        .duration(500)\n        .style(\"opacity\", 0);\n    };\n\n    svg.selectAll(\".dot-projects, .dot-mds\")\n      .on(\"mouseover\", showTooltip)\n      .on(\"mouseout\", hideTooltip);\n\n    // Add axes labels\n    svg.append(\"text\")\n      .attr(\"transform\", `translate(${innerWidth / 2}, ${innerHeight + margin.bottom + 60})`)\n      .style(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"24px\")\n      .text(\"Upload Date\");\n\n    // Left Y-axis label (Projects)\n    svg.append(\"text\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .attr(\"y\", -margin.left + 5)\n      .attr(\"x\", -(innerHeight / 2))\n      .attr(\"dy\", \"1em\")\n      .style(\"text-anchor\", \"middle\")\n      .style(\"fill\", secondaryColor)\n      .style(\"font-size\", axisLabelsFontSize)\n      .text(\"Total Projects\");\n\n    // Right Y-axis label (MDs)\n    svg.append(\"text\")\n      .attr(\"transform\", \"rotate(90)\")\n      .attr(\"y\", -innerWidth - margin.right + 5)\n      .attr(\"x\", innerHeight / 2)\n      .attr(\"dy\", \"1em\")\n      .style(\"text-anchor\", \"middle\")\n      .style(\"fill\", primaryColor)\n      .style(\"font-size\", axisLabelsFontSize)\n      .text(\"Total MDs\");\n\n    // Add legend\n    const legend = svg.append(\"g\")\n      .attr(\"transform\", `translate(${innerWidth / 2 - 100}, -10)`);\n\n    // Projects legend\n    legend.append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"width\", 15)\n      .attr(\"height\", 15)\n      .attr(\"fill\", secondaryColor);\n\n    legend.append(\"text\")\n      .attr(\"x\", 20)\n      .attr(\"y\", 12)\n      .text(\"Projects\")\n      .style(\"font-size\", \"14px\");\n\n    // MDs legend\n    legend.append(\"rect\")\n      .attr(\"x\", 100)\n      .attr(\"y\", 0)\n      .attr(\"width\", 15)\n      .attr(\"height\", 15)\n      .attr(\"fill\", primaryColor);\n\n    legend.append(\"text\")\n      .attr(\"x\", 120)\n      .attr(\"y\", 12)\n      .text(\"MDs\")\n      .style(\"font-size\", \"14px\");\n\n  }, [data, width, height]);\n\n  // Cleanup function to remove tooltip when component unmounts\n  useEffect(() => {\n    return () => {\n      d3.selectAll(\".timeline-tooltip\").remove();\n    };\n  }, []);\n\n  return <svg ref={svgRef} className={className} />;\n};\n\nexport default TimelineChart;","// React logic\nimport React, { useMemo } from 'react';\n\n// Visual assets\nimport { Typography } from '@mui/material';\n\n// Import the map chart to display where nodes are (global client only)\nimport NodeMap from './nodemap';\nimport NodeTable from './nodetable';\n\n// Constants\nimport { BASE_PATH, BASE_PATH_PROJECTS, HOST_CONFIG } from '../../utils/constants';\nimport { createPalette } from '../../utils/auxiliar-functions';\n// API acces\nimport useAPI from '../../hooks/use-api';\n\nimport style from './style.module.css';\nimport { useTheme } from '@mui/material/styles';\n\nimport { PieChart } from 'react-minimal-pie-chart';\nimport SimpleLegend from '../../components/simple-legend';\nimport Histogram from '../../components/histogram';\nimport TimelineChart from './timeline';\n\n// Current data summary\nexport default () => {\n\n    // Get the provided theme\n    const theme = useTheme();\n    const primaryColor = theme.palette.primary.main;\n    const secondaryColor = theme.palette.secondary.dark;\n    \n    // Use the API to get the summary\n    const summaryUrl = `${BASE_PATH_PROJECTS}/summary`;\n    const { payload: summaryPayload, error: summaryError } = useAPI(summaryUrl);\n  \n    // Use the API to get the options\n    const optionsUrl = `${BASE_PATH_PROJECTS}/options?projection=${HOST_CONFIG.optionsField}`;\n    const { payload: optionsPayload, error: optionsError } = useAPI(optionsUrl);\n    \n    // Use the API to get the project growth data\n    const growthUrl = `${BASE_PATH_PROJECTS}/summary/growth`;\n    const { payload: growthPayload, error: growthError } = useAPI(growthUrl);\n  \n    // Prepare data for the options pie chart\n    const { optionsPieChartData, optionsLegendData } = useMemo(() => {\n        if (!HOST_CONFIG.optionsField) return {};\n        // Set the data to be represented on the pie chart\n        const options = optionsPayload &&\n            Object.entries(optionsPayload[HOST_CONFIG.optionsField]);\n        if (options) options.sort((a, b) => b[1] - a[1]);\n        const colors = options && createPalette(options.length);\n        const optionsPieChartData = options\n            ? options.map(([key, value], i) => ({\n                title: HOST_CONFIG.optionsNiceNames[key] || key,\n                value: value,\n                color: colors[i],\n            }))\n            : [{ title: 'Loading...', value: 1, color: 'lightgrey' }];\n    \n        // Set the legend\n        const summatory = options && options.reduce((current_value, [key, value]) => current_value + value, 0);\n        const optionsLegendData = options && options.map(([key, value], i) => ({\n            label: (HOST_CONFIG.optionsNiceNames[key] || key) + ' (' + (Math.round((value / summatory) * 10000 ) / 100) + ' %)',\n            color: colors[i],\n        }));\n        // Return the pie chart data\n        return { optionsPieChartData, optionsLegendData };\n    }, [optionsPayload]);\n  \n    // Use the API to get MD method options\n    const methodsUrl = `${BASE_PATH_PROJECTS}/options?projection=metadata.METHOD`;\n    const { payload: methodsPayload, error: methodsError } = useAPI(methodsUrl);\n  \n    // Prepare data for the methods pie chart\n    const { methodsPieChartData, methodsLegendData } = useMemo(() => {\n        // Remove the classical MD count since it would eclipse the rest of MD methods\n        methodsPayload && delete methodsPayload['metadata.METHOD']['Classical MD'];\n        // Remove null values as well\n        methodsPayload && delete methodsPayload['metadata.METHOD'][null];\n        // Set the data to be represented on the pie chart\n        const methods = methodsPayload && Object.entries(methodsPayload['metadata.METHOD']);\n        if (!methods || methods.length === 0) return {};\n        methods.sort((a, b) => b[1] - a[1]);\n        const colors = createPalette(methods.length);\n        const methodsPieChartData = methods.map(([key, value], i) => ({\n            title: key,\n            value: value,\n            color: colors[i],\n        }));\n        // Set the legend\n        const summatory = methods.reduce((current_value, [key, value]) => current_value + value, 0);\n        const methodsLegendData = methods.map(([key, value], i) => ({\n            label: key + ' (' + (Math.round((value / summatory) * 10000 ) / 100) + ' %)',\n            color: colors[i],\n        }));\n        // Return the pie chart data\n        return { methodsPieChartData, methodsLegendData };\n    }, [methodsPayload]);\n  \n    // Use the API to get the snapshots options\n    const snapshotsUrl = `${BASE_PATH_PROJECTS}/options?projection=mds.frames`;\n    const { payload: snapshotsPayload, error: snapshotsError } = useAPI(snapshotsUrl);\n  \n    // Use the API to get the snapshots options\n    const oldSnapshotsUrl = `${BASE_PATH_PROJECTS}/options?query={\"mds\":{\"$exists\":false}}&projection=metadata.SNAPSHOTS`;\n    const { payload: oldSnapshotsPayload, error: oldSnapshotsError } = useAPI(oldSnapshotsUrl);\n  \n    // Build the snapshots component\n    // If snapshots data is not yet downloaded then show an empty plot\n    const frameCounts = useMemo(() => {\n        // Merge both the new and the old format frame counts\n        let frameCounts = {};\n        if (snapshotsPayload) frameCounts = { ...snapshotsPayload['mds.frames'] };\n        if (oldSnapshotsPayload) {\n            Object.entries(oldSnapshotsPayload['metadata.SNAPSHOTS']).forEach(([frameCount, amount]) => {\n                let currentAmount = frameCounts[frameCount] || 0;\n                currentAmount += amount;\n                frameCounts[frameCount] = currentAmount;\n            })\n        }\n        return frameCounts\n    }, [snapshotsPayload, oldSnapshotsPayload]);\n  \n    // Use the API to get the atoms options\n    const atomsUrl = `${BASE_PATH_PROJECTS}/options?projection=metadata.SYSTATS`;\n    const { payload: atomsPayload, error: atomsError } = useAPI(atomsUrl);\n  \n    // Check if this is the global cliente\n    const isGlobal = HOST_CONFIG.global;\n\n    // Get nodes info\n    // Use the API to get the nodes info\n    const nodesUrl = isGlobal ? `${BASE_PATH}/current/nodes` : null;\n    const { payload: nodesPayload, error: nodesError } = useAPI(nodesUrl);\n  \n    // Handle possible errors by just showing a log error in the console\n    // Thus we allow the rest of the page to keep loading\n    [summaryError, optionsError, methodsError, snapshotsError, oldSnapshotsError, atomsError, nodesError, growthError].forEach(error => {\n        if (error) console.error(error.message);\n    });\n\n    return (<>\n        {isGlobal && <>\n            <Typography variant=\"h6\">Node locations</Typography>\n            <NodeMap nodeData={nodesPayload} className={style.nodemap}/>\n            <NodeTable nodeData={nodesPayload}/>\n            <br />\n        </>}\n        <Typography key={0} variant=\"h6\">Data summary</Typography>\n        Total number of projects:{' '}\n        {summaryPayload ? summaryPayload.projectsCount.toLocaleString() : 'Loading...'}\n        <br />\n        Total number of MDs:{' '}\n        {summaryPayload ? summaryPayload.mdCount.toLocaleString() : 'Loading...'}\n        <br />\n        {/*\n            DANI: Funciona. Solo lo he quitado temporalmente por un tema \"político\"\n            Total amount of MD time (μs):{' '}\n            {summaryPayload ? Math.round(summaryPayload.totalTime / 1000) : 'Loading...'}\n            <br />\n        */}\n        Total amount of MD frames:{' '}\n        {summaryPayload ? summaryPayload.totalFrames.toLocaleString() : 'Loading...'}\n        <br />\n        Total number of stored files:{' '}\n        {summaryPayload ? summaryPayload.totalFiles.toLocaleString() : 'Loading...'}\n        <br />\n        Total number of stored analyses:{' '}\n        {summaryPayload ? summaryPayload.totalAnalyses.toLocaleString() : 'Loading...'}\n        <br />\n        Total size of the uncompressed data:{' '} \n        {summaryPayload ? `${summaryPayload.storageStats.dataSizeInTB} (TB)` : 'Loading...'}\n        <br />\n        {HOST_CONFIG.optionsField && <>\n            <Typography variant=\"h6\">{`Projects per ${HOST_CONFIG.optionsLabel}`}</Typography>\n            <div className={style.horizontal}>\n                <PieChart\n                    data={optionsPieChartData}\n                    //label={({ dataEntry }) => dataEntry.value}\n                    className={style.piechart}\n                />\n                {optionsLegendData && (\n                    <SimpleLegend entries={optionsLegendData} className={style.legend} />\n                )}\n            </div>\n        </>}\n        {methodsPieChartData && <>\n            <Typography variant=\"h6\">Projects per non-equilibrium MD method</Typography>\n            <div className={style.horizontal}>\n                <PieChart\n                    data={methodsPieChartData}\n                    //label={({ dataEntry }) => dataEntry.value}\n                    className={style.piechart}\n                />\n                {methodsLegendData && (\n                    <SimpleLegend entries={methodsLegendData} className={style.legend} />\n                )}\n            </div>\n        </>}\n        <div className={style.histograms} >\n            <div className={style.half}>\n                <Typography variant=\"h6\">Snapshots per MD</Typography>\n                <Histogram\n                    data={frameCounts}\n                    xAxisLabelText={'Number of snapshots'}\n                    yAxisLabelText={'Number of MDs'}\n                    color={primaryColor}\n                    binMethod={'sturges'}\n                    onHover={d => `There are ${d.length} MDs with a number of snapshots between ${Math.floor(d.x0)} and ${Math.floor(d.x1)}`}\n                />\n            </div>\n            <div className={style.half}>\n                <Typography variant=\"h6\">System atoms per project</Typography>\n                <Histogram\n                    data={atomsPayload && atomsPayload[\"metadata.SYSTATS\"]}\n                    xAxisLabelText={'Number of atoms'}\n                    yAxisLabelText={'Number of projects'}\n                    color={secondaryColor}\n                    binMethod={'sturges'}\n                    onHover={d => `There are ${d.length} MDs with a number of atoms between ${Math.floor(d.x0)} and ${Math.floor(d.x1)}`}\n                />\n            </div>\n        </div>\n        <Typography variant=\"h6\">Projects and MDs Growth Over Time</Typography>\n        <div className={style.timelineChart}>\n            {growthPayload ? (\n                <TimelineChart \n                    data={growthPayload} \n                    className={style.growthChart}\n                />\n            ) : (\n                'Loading growth data...'\n            )}\n        </div>\n    </>);\n};","// extracted by mini-css-extract-plugin\nexport default {\"horizontal\":\"style_horizontal__Wxlxf\",\"menu\":\"style_menu__tGHGe\",\"text\":\"style_text__aAi8s\",\"paragraph\":\"style_paragraph__Tffit\",\"header\":\"style_header__YQJqa\",\"hr\":\"style_hr__dkWiz\",\"section\":\"style_section__2Kr9+\",\"summary\":\"style_summary__o-X6i\",\"space\":\"style_space__mBdIB\",\"piechart\":\"style_piechart__R-aya\",\"legend\":\"style_legend__y7PwV\"};","// React logic\nimport React, { useRef, useEffect, createRef } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\n// This allows to render markdown\nimport ReactMarkdown from 'react-markdown'\n\n// Visual assets\nimport { MenuList, MenuItem, Typography } from '@mui/material';\n\nimport style from './style.module.css';\n\nimport { BASE_PATH } from '../../utils/constants';\n\n\n// Set the GitHub repository name\nconst githubRepo = 'mmb-irb/MDDB-meta'\n// Set the URL to the github repo which sources the binder\nconst githubRepoBaseUrl = 'https://github.com/' + githubRepo\n// Set the URL to the github jupyer notebook viewer\nconst githubJupyterViewer = githubRepoBaseUrl + '/blob/main/notebooks/';\n// Set the base URL to the repository where the binder enviornment and the workflows are stored\nconst binderRepoBaseUrl = `https://mybinder.org/v2/gh/${githubRepo}/HEAD?labpath=notebooks%2F`;\n\n// Set some markdown badges\nconst githubBadge = '![GitHub repository](https://badgen.net/badge/icon/github?icon=github&label)';\nconst jupyterBadge = '![Jupyter Notebook](https://img.shields.io/badge/jupyter-%23FA0F00.svg?style=for-the-badge&logo=jupyter&logoColor=white)';\nconst binderBadge = '![Binder](https://mybinder.org/badge_logo.svg)';\n\n// Set the available analyses, their introduction and the name of the notebook in the binder repository\n// Include also an id for further reference. Note that this id may be visible in the URL\nconst availableAnalyses = [\n  {\n    id: 'tutorials',\n    title: 'Tutorials',\n    isSection : true,\n  },\n  {\n    id: 'browsing',\n    title: 'Browsing projects',\n    docs:(\n      <>\n        This tutorial shows an example of how to browse among the different entries (projects). \n        Each project contains metadata such as names of the authors, parameters of the simulation, etc.\n      </>\n    ),\n    notebook: 'browse_tutorial.ipynb'\n  },\n  {\n    id: 'projects',\n    title: 'Mining project data',\n    docs:(\n      <>\n        This tutorial shows an example of how to mine data from a specific project. \n        The project is the main entry in the database and it contains mostly metadata, \n        but it is also an index of additional data which may be requested as well.\n      </>\n    ),\n    notebook: 'project_tutorial.ipynb'\n  },\n  {\n    id: 'trajectory',\n    title: 'Visualizing trajectory data',\n    docs:(\n      <>\n        This tutorial shows an example of how to download structure and trajectory data \n        from a specific project. Then data is loaded into a molecular viewer and displayed.\n      </>\n    ),\n    notebook: 'trajectory_tutorial.ipynb'\n  },\n  {\n    id: 'precalculated',\n    title: 'Pre-calculated analyses',\n    isSection : true,\n  },\n  {\n    id: 'rmsd',\n    title: 'RMSD analysis',\n    docs:(\n      <>\n        In this example we reproduce the pre-calculated root mean squared deviation analysis (RMSD) performed by the data processing workflow.\n      </>\n    ),\n    notebook: 'rmsd_analysis.ipynb'\n  },\n  {\n    id: 'rmsf',\n    title: 'Fluctuation analysis',\n    docs:(\n      <>\n        In this example we reproduce the pre-calculated atom fluctuation analysis (RMSF) performed by the data processing workflow.\n      </>\n    ),\n    notebook: 'rmsf_analysis.ipynb'\n  },\n  {\n    id: 'rgyr',\n    title: 'Radius of gyration analysis',\n    docs:(\n      <>\n        In this example we reproduce the pre-calculated radius of gyrations analysis (RGYR) performed by the data processing workflow.\n      </>\n    ),\n    notebook: 'rgyr_analysis.ipynb'\n  },\n  {\n    id: 'usecases',\n    title: 'Meta-analysis use cases',\n    isSection : true,\n  },\n  {\n    id: 'protein_ligands',\n    title: 'Protein-ligands interaction analysis',\n    docs:(\n      <>\n        In this example we intend to analyze simulations of ACE2 protein with different ligands (drugs).\n        We aim to compare, for each ligand, how both electrostatic and Van de Waals energies change.\n        For this test we are using 78 atomistic MD trajectories from D. E. Shaw already loaded in the MDDB database.\n      </>\n    ),\n    notebook: 'ace2_ligands_analysis.ipynb'\n  },\n  {\n    id: 'protein_protein',\n    title: 'Protein-protein interaction analysis',\n    docs:(\n      <>\n        In this example we intend to analyze the interaction between human angiotensin converting enzyme 2 (ACE2) \n        and the SARS-CoV-2 spike RBD domain. We want to compare, for the N501Y mutation, how electrostatic energies, \n        Van der Waals energies and hydrogen bonds change on this residue and its surrounding residues.\n        <br />\n        <br />\n        For this test we will use RBD-ACE2 atomistic MD trajectories already loaded in the MDDB database. \n        Specifically, we will use a group of simulations from Mary Hongying Cheng including different varaints of the virus.\n      </>\n    ),\n    notebook: 'ace2_rbd_interaction_analysis.ipynb'\n  },\n  {\n    id: 'protein_nucleic',\n    title: 'Protein-nucleic acid interaction analysis',\n    docs:(\n      <>\n        In this example we intend to analyze the interaction between the SARS-CoV-2 polymerase complex and a fragment of RNA. \n        We want to find and visualize the aminoacid with the highest electrostatic and Van der Waals energies and thus the one \n        which is carrying the interaction.\n        <br />\n        <br />\n        For this test we will use Polymerase atomistic MD trajectories already loaded in the MDDB database from \n        different groups.\n      </>\n    ),\n    notebook: 'polymerase_analysis.ipynb'\n  }\n];\n\n// Set a simpler TextLink component\nconst TextLink = ({ name, url }) => (\n  <>\n    <a href={url} target=\"_blank\" rel=\"noreferrer noopener\" >\n      {name}\n    </a>\n  </>\n);\n\nconst MetaAnalysis = () => {\n  // Get the location\n  const location = useLocation();\n\n  // References to all documentation blocks will be stored here\n  const containerRefs = useRef();\n  const analysisRefs = useRef(Array(availableAnalyses.length).fill(createRef()));\n\n  // Scroll down to the asked reference\n  useEffect(() => {\n    const container = containerRefs.current;\n    for (const ref of analysisRefs.current) {\n      if (location.hash !== '#' + ref.id) continue;\n      //window.scrollTo(0, container.offsetTop);\n      container.scrollTop = ref.offsetTop - container.offsetTop;\n      break;\n    }\n  }, [location.hash]);\n\n  return (\n    <div className={style.horizontal}>\n      <MenuList className={style.menu}>\n        {availableAnalyses.map((analysis, index) => (\n          <MenuItem\n            key={index}\n            component={Link}\n            to={`/meta#${analysis.id}`}\n            style={{\n              whiteSpace: 'normal',\n              fontWeight: analysis.isSection ? 'bold' : 'normal',\n              fontSize: analysis.isSection ? 'larger' : 'normal'\n            }}\n          >\n            {analysis.title}\n          </MenuItem>\n        ))}\n      </MenuList>\n      <div className={style.text} ref={containerRefs}>\n        <Typography variant={'h5'} className={style.header}>\n          Meta-analysis\n        </Typography>\n        In this page we have prepared <span style={{ color: 'green' }}>tutorials</span>{' '}\n        and <span style={{ color: 'green' }}>use cases</span> of meta-analyses.\n        <br />\n        <br />\n        Meta-analyses are analyses which use several MDs as input. This database is specially suited for this task \n        since it is endowed with a <TextLink name={'REST API'} url={BASE_PATH + 'docs/'} />. \n        Programmatic access to the database allows to automatize data requests and thus build powerful meta-analyses.\n        The following examples are supported by <TextLink name={'Binder'} url={'https://mybinder.org/'} />, \n        which opens interactive <span style={{ color: 'green' }}>Jupyter Notebooks</span>.\n        Note that you can edit code or run the analysis online with no need to install any software.\n        Here we suggest some meta-analyses but you are very welcome to make your own ones!\n        <br />\n        <br />\n        Original notebooks and the environment setup to run the examples are available here:\n        <ReactMarkdown\n          children={`[${githubBadge}](${githubRepoBaseUrl})`}\n          linkTarget=\"_blank\"\n        />\n        <hr className={style.hr} />\n        {availableAnalyses.map((analysis, index) => (\n          <div\n            key={index}\n            id={analysis.id}\n            ref={r => (analysisRefs.current[index] = r)}\n            className={style.paragraph}\n          >\n            <Typography variant={analysis.isSection ? 'h5' : 'h6'} className={style.header}>\n              {analysis.title}\n            </Typography>\n            {!analysis.isSection && <>\n              <div key={'text'}>{analysis.docs}</div>\n              <ReactMarkdown\n                children={`[${jupyterBadge}](${githubJupyterViewer}${analysis.notebook})`}\n                linkTarget=\"_blank\"\n              />\n              <ReactMarkdown\n                children={`[${binderBadge}](${binderRepoBaseUrl}${analysis.notebook})`}\n                linkTarget=\"_blank\"\n              />\n            </>}\n            <hr className={style.hr} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MetaAnalysis;\n"],"names":["blank","loading","payload","error","urls","data","setData","useState","map","url","_objectSpread","useEffect","source","axios","didCancel","oldData","Error","alreadySearchedResponse","find","response","forEach","i","cancelToken","token","startTime","Date","responseType","then","responseTime","config","responseData","time","previousData","newData","catch","cancel","DEFAULT_CACHE_EXPIRATION","cache","loadCache","cachedData","localStorage","getItem","JSON","parse","cacheOptions","arguments","length","undefined","name","cacheOn","cacheExpiration","initialData","now","received","getTime","endTime","setItem","stringify","saveCache","getDistance","firstLocation","secondLocation","xDiff","yDiff","Math","sqrt","pow","getCentroid","nodes","caluclateAverage","node","location","MAP_CONFIGS","rotate","center","scale","_ref","nodeData","className","primary","useTheme","palette","main","nodeGroups","useMemo","_nodeGroups","closeGroup","group","push","_jsx","children","c","_jsxs","ComposableMap","projection","projectionConfig","style","Geographies","geography","fill","stroke","strokeWidth","_ref2","geographies","geo","Geography","default","outline","hover","pressed","rsmKey","g","Marker","coordinates","r","fontSize","textAnchor","concat","geoJson","feature","pingUrls","api_url","pingResponses","useBatchAPI","columns","field","headerName","flex","align","headerAlign","renderCell","params","renderHref","nodeName","row","nodeUrl","href","target","rel","value","status","CheckCircleIcon","color","marginTop","ErrorIcon","renderStatusSymbol","rows","ping","countryCode","getCountryFromCoords","lng","lat","country","features","geoContains","id","slice","flag","ReactCountryFlag","svg","width","height","border","borderWidth","borderColor","alias","key","DataGrid","disableRowSelectionOnClick","hideFooter","entries","label","display","backgroundColor","marginRight","dataPlaceholder","margin","axisNumbersFontSize","axisLabelsFontSize","forwardRef","ref","xAxisLabelText","yAxisLabelText","onHover","binMethod","binCount","containerRef","useRef","updateDataRef","noop","updateSizeRef","updateXAxisLabelText","updateYAxisLabelText","updateColor","updateOnHover","graph","select","current","append","x","scaleLog","base","xAxis","y","scaleLinear","yAxis","xAxisLabel","attr","yAxisLabel","text","_ref3","_ref4","Object","keys","scaleCounts","_ref5","count","valueScale","toString","minScale","reduce","cv","nv","min","Infinity","maxScale","max","xTicks","columnsData","values","x0","x1","maxCount","domain","newColumnsData","selectAll","exit","remove","enter","totalDataPoints","ceil","log2","Number","minValue","maxValue","logMinValue","log10","logBinWidth","bins","_ref6","numValue","binIndex","_ref7","_ref8","clientWidth","clientHeight","actualWidth","actualHeight","columnsCount","range","call","axisBottom","ticks","tickFormat","d","exp","isInteger","superscripts","split","char","join","formatExponent","axisLeft","window","addEventListener","removeEventListener","svgRef","theme","primaryColor","secondaryColor","dark","d3","innerWidth","innerHeight","parseDate","year","month","date","y1","totalProjects","y2","totalMds","every","y1Axis","y2Axis","projectLine","curve","mdLine","datum","tooltip","on","showTooltip","event","transition","duration","html","newProjects","newMds","pageX","pageY","hideTooltip","legend","secondary","summaryUrl","BASE_PATH_PROJECTS","summaryPayload","summaryError","useAPI","optionsUrl","HOST_CONFIG","optionsField","optionsPayload","optionsError","growthUrl","growthPayload","growthError","optionsPieChartData","optionsLegendData","options","sort","a","b","colors","createPalette","title","optionsNiceNames","summatory","current_value","round","methodsUrl","methodsPayload","methodsError","methodsPieChartData","methodsLegendData","methods","snapshotsUrl","snapshotsPayload","snapshotsError","oldSnapshotsUrl","oldSnapshotsPayload","oldSnapshotsError","frameCounts","frameCount","amount","currentAmount","atomsUrl","atomsPayload","atomsError","isGlobal","global","nodesUrl","BASE_PATH","nodesPayload","nodesError","console","message","_Fragment","Typography","variant","NodeMap","NodeTable","projectsCount","toLocaleString","mdCount","totalFrames","totalFiles","totalAnalyses","storageStats","dataSizeInTB","optionsLabel","PieChart","SimpleLegend","Histogram","floor","TimelineChart","githubRepo","githubRepoBaseUrl","githubJupyterViewer","binderRepoBaseUrl","availableAnalyses","isSection","docs","notebook","TextLink","MetaAnalysis","useLocation","containerRefs","analysisRefs","Array","createRef","container","hash","scrollTop","offsetTop","MenuList","analysis","index","MenuItem","component","Link","to","whiteSpace","fontWeight","ReactMarkdown","linkTarget"],"sourceRoot":""}