{"version":3,"file":"static/js/project-menu.ac2937ae.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/menu/project-menu/style.module.css?db9d","components/menu/project-menu/index.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"overcome-parent\":\"style_overcome-parent__zNf99\",\"tab-link\":\"style_tab-link__mgboH\",\"tab-drop\":\"style_tab-drop__jb8lI\",\"analyses\":\"style_analyses__rCjjS\",\"disabled\":\"style_disabled__xZTQR\",\"popper\":\"style_popper__StyIN\"};","import React, { useState, useContext, useCallback } from 'react';\n\nimport {\n  CardContent,\n  Popper,\n  Grow,\n  Paper,\n  ClickAwayListener,\n  MenuList,\n  MenuItem,\n  Tab,\n  Tabs,\n  Typography,\n  AppBar,\n} from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport { Link } from 'react-router-dom';\n\n// Load the project contexts\nimport { ProjectCtx } from '../../../contexts';\n\nimport { NICE_NAMES } from '../../../utils/constants';\nimport style from './style.module.css';\n\n// Set the configuration of the tabs to be displayed in the menu\n// Each tab must have 'dir' or 'drops'. Never both, never none.\n// Tabs with 'dir' link the user directly on click\n// Tabs with 'drops' display a menu with multiple links on click\nconst tabs = [\n  { dir: 'overview' },\n  { dir: 'trajectory' },\n  {\n    name: 'Analyses',\n    drops: [\n      {\n        name: 'Quality control',\n        analyses: [\n          'rmsds',\n          'rmsd-perres',\n          'rmsd-pairwise',\n          'rgyr',\n          'fluctuation',\n          'pca',\n          'sasa',\n        ],\n      },\n      {\n        name: 'Interactions',\n        analyses: [\n          'dist-perres',\n          'electrostatic',\n          'hbonds',\n          'energies',\n        ],\n      },\n      {\n        name: 'Bibliography',\n        analyses: [\n          'epitopes',\n          'mutations',\n        ],\n      },\n      {\n        name: 'Other',\n        analyses: [\n          'pockets',\n          'populations',\n          'markov'\n        ],\n      },\n    ],\n  },\n  { dir: 'files' },\n];\n\n// Render the menu of the project (i.e. the inferior header)\n// It only appears when the user is inside a project\nconst ProjectMenu = ({ accessionAndMdNumber, subPage }) => {\n  // Get the current project metadata\n  // WARNING: context may be missing in the first renders\n  const { directions } = useContext(ProjectCtx) || { directions: {} };\n\n  // Set which menu is opened\n  const [openMenu, setOpenMenu] = useState(-1);\n  // Set a standarized format state for the popover to work properly\n  const [element, setElement] = useState(null);\n\n  // Set a function used to check if we are in a specific local url\n  const currentLocation = window.location.hash;\n  const isCurrent = useCallback(url => '#' + url === currentLocation, [\n    currentLocation,\n  ]);\n\n  // Open the specified menu\n  // If the specified menu is the already open menu, then close it\n  const handleClick = (key, event) => {\n    if (key !== openMenu) setOpenMenu(key);\n    else setOpenMenu(-1);\n\n    setElement(event.currentTarget);\n  };\n\n  // Close the menu\n  const handleClose = (key = openMenu) => {\n    if (key === openMenu) {\n      setOpenMenu(-1);\n      setElement(null);\n    }\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n      setOpenMenu(-1);\n    }\n  }\n\n  // Get the provided theme\n  const theme = useTheme();\n  const primaryColor = theme.palette.primary.main;\n  const secondaryColor = theme.palette.secondary.main;\n\n  // Set the style of the current selected tab\n  const currentTabStyle = {\n    color: secondaryColor,\n    backgroundColor: primaryColor,\n  };\n\n  // Check if a string is found in the specified (by the 'index') dropTab links\n  // If it is, return the same string. If it is not, return undefined\n  const inDrop = (value, index) => {\n    for (const drop of tabs[index].drops)\n      if (drop.analyses.includes(value)) return value;\n    return undefined;\n  };\n\n  // Return each of the menu tabs\n  return (\n    <AppBar position=\"sticky\" className={style['overcome-parent']}>\n      <Tabs\n        value={subPage}\n        indicatorColor=\"secondary\"\n        textColor=\"secondary\"\n        variant=\"scrollable\"\n        scrollButtons=\"auto\"\n      >\n        {// Tabs\n        tabs.map((tab, index) =>\n          tab.dir ? (\n            // Tabs which link the user directly\n            <Tab\n              key={index}\n              component={Link}\n              to={`/id/${accessionAndMdNumber}/${tab.dir}`}\n              label={NICE_NAMES.get(tab.dir)}\n              value={tab.dir}\n              className={style['tab-link']}\n              onClick={() => handleClose()}\n            />\n          ) : (\n            // Tabs which drop a menu with multiple links\n            // The drop list is defined further, out of the 'Tabs' component\n            <Tab\n              key={index}\n              label={tab.name}\n              value={inDrop(subPage, index)}\n              className={style['tab-link']}\n              onClick={event => handleClick(index, event)}\n            />\n          ),\n        )}\n      </Tabs>\n\n      {// The drop lists\n      tabs.map(\n        (tab, index) =>\n          tab.drops && (\n            <Popper\n              key={'popper' + index}\n              open={openMenu === index}\n              anchorEl={element}\n              transition\n              placement={'bottom'}\n              className={style.popper}\n            >\n              {({ TransitionProps }) => (\n                <Grow\n                  {...TransitionProps}\n                  style={{ transformOrigin: 'center top' }}\n                >\n                  <Paper className={style['tab-drop']}>\n                    <ClickAwayListener onClickAway={() => handleClose(index)}>\n                      <CardContent className={style.analyses}>\n                        {tab.drops.map((drop, d) => {\n                          // Discard analyses whose direction is not even declared since they are not to be shown\n                          const displayableAnalyses = drop.analyses.filter(analysis => directions[analysis] !== undefined);\n                          if (displayableAnalyses.length === 0) return;\n                          return <div key={d}>\n                            <Typography variant=\"h6\">{drop.name}</Typography>\n                            <MenuList\n                              autoFocusItem={openMenu === index}\n                              onKeyDown={handleListKeyDown}\n                            >\n                              {displayableAnalyses.map(analysis => {\n                                // Check if this direction is available\n                                const available = directions[analysis];\n                                // Otherwise set a new button for the direction\n                                // Set the name of the button\n                                const name = NICE_NAMES.get(analysis);\n                                // Set a disabled button if the direction is not available\n                                if (available === false) return (\n                                  <MenuItem key={analysis} className={style.disabled}>\n                                    {name}\n                                  </MenuItem> );\n                                // Set the button direction\n                                const buttonDirection = `/id/${accessionAndMdNumber}/${analysis}`;\n                                return (<MenuItem\n                                    key={analysis}\n                                    onClick={() => handleClose(index)}\n                                    component={Link}\n                                    to={buttonDirection}\n                                    // If this is the current tab the use a different style\n                                    style={(isCurrent(buttonDirection) && currentTabStyle) || undefined}\n                                  >\n                                    {name}\n                                  </MenuItem>\n                                )}\n                              )}\n                            </MenuList>\n                          </div>\n                          }\n                        )}\n                      </CardContent>\n                    </ClickAwayListener>\n                  </Paper>\n                </Grow>\n              )}\n            </Popper>\n          ),\n      )}\n    </AppBar>\n  );\n};\n\nexport default ProjectMenu;\n","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;"],"names":["tabs","dir","name","drops","analyses","_ref","accessionAndMdNumber","subPage","directions","useContext","ProjectCtx","openMenu","setOpenMenu","useState","element","setElement","currentLocation","window","location","hash","isCurrent","useCallback","url","handleClose","arguments","length","undefined","handleListKeyDown","event","key","preventDefault","theme","useTheme","primaryColor","palette","primary","main","currentTabStyle","color","secondary","backgroundColor","inDrop","value","index","drop","includes","_jsxs","AppBar","position","className","style","children","_jsx","Tabs","indicatorColor","textColor","variant","scrollButtons","map","tab","Tab","component","Link","to","concat","label","NICE_NAMES","get","onClick","handleClick","currentTarget","Popper","open","anchorEl","transition","placement","_ref2","TransitionProps","Grow","transformOrigin","Paper","ClickAwayListener","onClickAway","CardContent","d","displayableAnalyses","filter","analysis","Typography","MenuList","autoFocusItem","onKeyDown","available","MenuItem","buttonDirection","getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","overridesResolver","props","styles","root","padding","paddingBottom","React","inProps","ref","useDefaultProps","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","as","clsx"],"sourceRoot":""}