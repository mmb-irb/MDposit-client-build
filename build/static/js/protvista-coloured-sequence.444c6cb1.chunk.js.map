{"version":3,"file":"static/js/protvista-coloured-sequence.444c6cb1.chunk.js","mappings":"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","sources":["../node_modules/protvista-coloured-sequence/src/protvista-coloured-sequence.js","../node_modules/protvista-sequence/src/protvista-sequence.js"],"sourcesContent":["import { select, scaleLinear } from \"d3\";\n\nimport ProtVistaSequence from \"protvista-sequence\";\nimport { ColorScaleParser, String2Object } from \"protvista-utils\";\n\nimport hydroInterfaceScale from \"./hydrophobicity-interface-scale.json\";\nimport hydroOctanoleScale from \"./hydrophobicity-octanol-scale.json\";\nimport hydroScale from \"./hydrophobicity-scale.json\";\nimport isoelectricPointScale from \"./isoelectric-point-scale.json\";\n\nconst supportedScales = [\n  \"hydrophobicity-interface-scale\",\n  \"hydrophobicity-octanol-scale\",\n  \"hydrophobicity-scale\",\n  \"isoelectric-point-scale\"\n];\n\nconst defaultScale = {\n  domain: [-2, 2],\n  range: [\"#ffdd00\", \"#0000FF\"]\n};\n\nconst MIN_BASE_SIZE = 8;\n\nclass ProtVistaColouredSequence extends ProtVistaSequence {\n  static get observedAttributes() {\n    return ProtVistaSequence.observedAttributes.concat(\n      \"scale\", // One of the supported scales. Ora custom scale given in the following format. e.g. A:0.5,M:-3,P:3\n      \"color_range\" // Color values per point to define a colorScale. Default: #ffdd00:-2,#0000FF:2\n    );\n  }\n\n  _createSequence() {\n    this.svg = select(this)\n      .append(\"div\")\n      .attr(\"class\", \"\")\n      .append(\"svg\")\n      .attr(\"id\", \"\")\n      .attr(\"width\", this.width)\n      .attr(\"height\", this._height);\n\n    this.uniqueID = Math.random()\n      .toString(36)\n      .substring(7);\n\n    this.gradient = this.svg\n      .append(\"defs\")\n      .append(\"linearGradient\")\n      .attr(\"id\", `scale-gradient-${this.uniqueID}`);\n\n    this.seq_g = this.svg.append(\"g\").attr(\"class\", \"background\");\n    this.seq_greadient = this.svg\n      .append(\"rect\")\n      .attr(\"class\", \"seq-gradient\")\n      .style(\"pointer-events\", \"none\");\n\n    this._getCharSize();\n\n    this.trackHighlighter.appendHighlightTo(this.svg);\n    this.refresh();\n  }\n\n  getScaleFromAttribute() {\n    let scale = null;\n    if (supportedScales.indexOf(this._scale) >= 0) {\n      switch (this._scale) {\n        case \"hydrophobicity-scale\":\n          return hydroScale;\n        case \"hydrophobicity-interface-scale\":\n          return hydroInterfaceScale;\n        case \"isoelectric-point-scale\":\n          return isoelectricPointScale;\n        case \"hydrophobicity-octanol-scale\":\n          return hydroOctanoleScale;\n        default:\n          return null;\n      }\n    }\n    if (\n      /([ILFVMPWHTEQCYASNDRGK]:-?\\d+\\.?\\d*)(,[ILFVMPWHTEQCYASNDRGK]:-?\\d+\\.?\\d*)*/.test(\n        this._scale\n      )\n    ) {\n      try {\n        scale = String2Object(this._scale, {\n          keyFormatter: x => x.toUpperCase(),\n          valueFormatter: x => parseFloat(x)\n        });\n      } catch (error) {\n        console.error(`Couldn't parse the given scale ${this._scale}`, error);\n      }\n    }\n    return scale;\n  }\n\n  refresh() {\n    if (this.seq_g) {\n      const scale = this.getScaleFromAttribute();\n      if (scale === null) {\n        console.error(\"The attribute scale is not valid.\");\n        return;\n      }\n      const colorScale = scaleLinear();\n      this.colorScale = defaultScale;\n      if (this._color_range) {\n        this.colorScale = ColorScaleParser(this._color_range);\n      }\n      colorScale.domain(this.colorScale.domain).range(this.colorScale.range);\n\n      const ftWidth = this.getSingleBaseWidth();\n      const first = Math.round(Math.max(0, this._displaystart - 2));\n      const last = Math.round(\n        Math.min(this.sequence.length, this._displayend + 1)\n      );\n      const bases = this.sequence\n        .slice(first, last)\n        .split(\"\")\n        .map((aa, i) => {\n          // use 0 if the base is not in the given scale\n          const value = aa.toUpperCase() in scale ? scale[aa.toUpperCase()] : 0;\n          return {\n            start: 1 + first + i,\n            end: 1 + first + i,\n            aa,\n            value,\n            colour: colorScale(value)\n          };\n        });\n\n      this.residues = this.seq_g\n        .selectAll(\"rect.base_bg\")\n        .data(ftWidth < MIN_BASE_SIZE ? [] : bases, d => d.start);\n\n      this.residues\n        .enter()\n        .append(\"rect\")\n        .attr(\"class\", \"base_bg feature\")\n        .attr(\"data-base\", ({ aa }) => aa)\n        .attr(\"data-pos\", ({ start }) => start)\n        .attr(\"height\", this._height)\n        .merge(this.residues)\n        .attr(\"width\", ftWidth)\n        .attr(\"fill\", ({ colour }) => colour)\n        .attr(\"x\", ({ start }) => this.getXFromSeqPosition(start))\n        .call(this.bindEvents, this);\n\n      this.residues.exit().remove();\n\n      const stops = this.gradient\n        .selectAll(\"stop\")\n        .data(this.sequence.split(\"\"));\n      stops\n        .enter()\n        .append(\"stop\")\n        .merge(stops)\n        .attr(\"offset\", (_, pos) => (pos + 0.5) / this.sequence.length)\n        .attr(\"stop-color\", base => {\n          return colorScale(\n            base.toUpperCase() in scale ? scale[base.toUpperCase()] : 0 // if the base is not in the given scale\n          );\n        });\n      this.gradient.exit().remove();\n\n      this.seq_greadient\n        .attr(\"x\", this.getXFromSeqPosition(1))\n        .attr(\"y\", 0)\n        .attr(\"height\", this._height)\n        .attr(\n          \"width\",\n          this.getXFromSeqPosition(this.sequence.length) -\n            this.getXFromSeqPosition(0)\n        )\n        .style(\"opacity\", ftWidth < MIN_BASE_SIZE ? 1 : MIN_BASE_SIZE / ftWidth)\n        .attr(\"fill\", `url(#scale-gradient-${this.uniqueID})`);\n\n      this._updateHighlight();\n    }\n  }\n}\n\nexport default ProtVistaColouredSequence;\n","import { axisBottom, select } from \"d3\";\n\nimport ProtvistaZoomable from \"protvista-zoomable\";\n\nconst DEFAULT_NUMBER_OF_TICKS = 3;\n\nclass ProtVistaSequence extends ProtvistaZoomable {\n  connectedCallback() {\n    super.connectedCallback();\n    this.sequence = this.getAttribute(\"sequence\");\n    const ticks = this.getAttribute(\"numberofticks\");\n    this.numberOfTicks = Number.isInteger(parseInt(ticks, 10))\n      ? ticks\n      : DEFAULT_NUMBER_OF_TICKS;\n    if (this.sequence) {\n      this._createSequence();\n    }\n    this.addEventListener(\"load\", (e) => {\n      this.data = e.detail.payload;\n    });\n  }\n\n  static get observedAttributes() {\n    return ProtvistaZoomable.observedAttributes.concat(\n      \"highlightstart\",\n      \"highlightend\"\n    );\n  }\n\n  get data() {\n    return this.sequence;\n  }\n\n  set data(data) {\n    if (typeof data === \"string\") this.sequence = data;\n    else if (\"sequence\" in data) this.sequence = data.sequence;\n    if (this.sequence && !super.svg) {\n      this._createSequence();\n    } else {\n      this.refresh();\n    }\n  }\n\n  _getCharSize() {\n    if (!this.seq_g) return;\n    const xratio = 0.8;\n    const yratio = 1.6;\n    const node = this.seq_g.select(\"text.base\").node();\n    if (node) {\n      this.chWidth = node.getBBox().width * xratio;\n      this.chHeight = node.getBBox().height * yratio;\n    } else {\n      // Add a dummy node to measure the width\n      const tempNode = this.seq_g\n        .append(\"text\")\n        .attr(\"class\", \"base\")\n        .text(\"T\");\n      this.chWidth = tempNode.node().getBBox().width * xratio;\n      this.chHeight = tempNode.node().getBBox().height * yratio;\n      tempNode.remove();\n    }\n  }\n\n  _createSequence() {\n    select(this).selectAll(\"div\").remove();\n    super.svg = select(this)\n      .append(\"div\")\n      .attr(\"class\", \"\")\n      .append(\"svg\")\n      .attr(\"id\", \"\")\n      .attr(\"width\", this.width)\n      .attr(\"height\", this._height);\n\n    this.seq_bg = super.svg.append(\"g\").attr(\"class\", \"background\");\n\n    this.axis = super.svg.append(\"g\").attr(\"class\", \"x axis\");\n\n    this.seq_g = super.svg\n      .append(\"g\")\n      .attr(\"class\", \"sequence\")\n      .attr(\"transform\", `translate(0,${0.75 * this._height})`);\n\n    this.trackHighlighter.appendHighlightTo(this.svg);\n    this.refresh();\n  }\n\n  refresh() {\n    this._getCharSize();\n    if (this.axis) {\n      const ftWidth = this.getSingleBaseWidth();\n      const space = ftWidth - this.chWidth;\n      const half = ftWidth / 2;\n      const first = Math.round(Math.max(0, this._displaystart - 2));\n      const last = Math.round(\n        Math.min(this.sequence.length, this._displayend + 1)\n      );\n      const bases =\n        space < 0\n          ? []\n          : this.sequence\n              .slice(first, last)\n              .split(\"\")\n              .map((aa, i) => {\n                return { start: 1 + first + i, end: 1 + first + i, aa };\n              });\n\n      // only add axis if there is room\n      if (this.height > this.chHeight) {\n        this.xAxis = axisBottom(this.xScale)\n          .tickFormat((d) => (Number.isInteger(d) ? d : \"\"))\n          .ticks(this.numberOfTicks, \"s\");\n        this.axis.call(this.xAxis);\n      }\n\n      this.axis.attr(\"transform\", `translate(${this.margin.left + half},0)`);\n      this.axis.select(\".domain\").remove();\n      this.axis.selectAll(\".tick line\").remove();\n\n      this.bases = this.seq_g\n        .selectAll(\"text.base\")\n        .data(bases, (d) => d.start);\n      this.bases\n        .enter()\n        .append(\"text\")\n        .attr(\"class\", \"base\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", (d) => this.getXFromSeqPosition(d.start) + half)\n        .text((d) => d.aa)\n        .style(\"pointer-events\", \"none\")\n        .style(\"font-family\", \"monospace\");\n\n      this.bases.exit().remove();\n\n      this.bases.attr(\"x\", (d) => this.getXFromSeqPosition(d.start) + half);\n\n      this.background = this.seq_bg\n        .selectAll(\"rect.base_bg\")\n        .data(bases, (d) => d.start);\n      this.background\n        .enter()\n        .append(\"rect\")\n        .attr(\"class\", \"base_bg feature\")\n        .attr(\"height\", this._height)\n        .merge(this.background)\n        .attr(\"width\", ftWidth)\n        .attr(\"fill\", (d) => {\n          return Math.round(d.start) % 2 ? \"#ccc\" : \"#eee\";\n        })\n        .attr(\"x\", (d) => this.getXFromSeqPosition(d.start))\n        .call(this.bindEvents, this);\n      this.background.exit().remove();\n\n      this.seq_g.style(\"opacity\", Math.min(1, space));\n      this.background.style(\"opacity\", Math.min(1, space));\n\n      this._updateHighlight();\n    }\n  }\n\n  _updateHighlight() {\n    this.trackHighlighter.updateHighlight();\n  }\n}\n\nexport default ProtVistaSequence;\n"],"names":["supportedScales","defaultScale","domain","range","ProtVistaColouredSequence","ProtVistaSequence","observedAttributes","concat","_createSequence","this","svg","select","append","attr","width","_height","uniqueID","Math","random","toString","substring","gradient","seq_g","seq_greadient","style","_getCharSize","trackHighlighter","appendHighlightTo","refresh","getScaleFromAttribute","scale","indexOf","_scale","hydroScale","hydroInterfaceScale","isoelectricPointScale","hydroOctanoleScale","test","String2Object","keyFormatter","x","toUpperCase","valueFormatter","parseFloat","error","console","colorScale","scaleLinear","_color_range","ColorScaleParser","ftWidth","getSingleBaseWidth","first","round","max","_displaystart","last","min","sequence","length","_displayend","bases","slice","split","map","aa","i","value","start","end","colour","residues","selectAll","data","d","enter","_ref","_ref2","merge","_ref3","_ref4","getXFromSeqPosition","call","bindEvents","exit","remove","stops","_","pos","base","_updateHighlight","ProtvistaZoomable","connectedCallback","super","getAttribute","ticks","numberOfTicks","Number","isInteger","parseInt","addEventListener","e","detail","payload","node","chWidth","getBBox","chHeight","height","tempNode","text","seq_bg","axis","space","half","xAxis","axisBottom","xScale","tickFormat","margin","left","background","updateHighlight"],"sourceRoot":""}