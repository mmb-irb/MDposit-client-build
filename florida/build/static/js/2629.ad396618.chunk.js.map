{"version":3,"file":"static/js/2629.ad396618.chunk.js","mappings":"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","sources":["../node_modules/chroma-js/src/utils/limit.js","../node_modules/chroma-js/src/utils/clip_rgb.js","../node_modules/chroma-js/src/utils/type.js","../node_modules/chroma-js/src/utils/unpack.js","../node_modules/chroma-js/src/utils/last.js","../node_modules/chroma-js/src/utils/index.js","../node_modules/chroma-js/src/io/input.js","../node_modules/chroma-js/src/Color.js","../node_modules/chroma-js/src/chroma.js","../node_modules/chroma-js/src/version.js","../node_modules/chroma-js/src/colors/w3cx11.js","../node_modules/chroma-js/src/io/hex/hex2rgb.js","../node_modules/chroma-js/src/io/hex/rgb2hex.js","../node_modules/chroma-js/src/io/named/index.js","../node_modules/chroma-js/src/ops/alpha.js","../node_modules/chroma-js/src/ops/clipped.js","../node_modules/chroma-js/src/io/lab/lab-constants.js","../node_modules/chroma-js/src/io/lab/lab2rgb.js","../node_modules/chroma-js/src/io/lab/rgb2lab.js","../node_modules/chroma-js/src/io/lab/index.js","../node_modules/chroma-js/src/ops/darken.js","../node_modules/chroma-js/src/ops/get.js","../node_modules/chroma-js/src/ops/luminance.js","../node_modules/chroma-js/src/interpolator/index.js","../node_modules/chroma-js/src/generator/mix.js","../node_modules/chroma-js/src/ops/mix.js","../node_modules/chroma-js/src/ops/premultiply.js","../node_modules/chroma-js/src/io/lch/lch2lab.js","../node_modules/chroma-js/src/io/lch/lch2rgb.js","../node_modules/chroma-js/src/io/lch/hcl2rgb.js","../node_modules/chroma-js/src/io/lch/lab2lch.js","../node_modules/chroma-js/src/io/lch/rgb2lch.js","../node_modules/chroma-js/src/io/lch/index.js","../node_modules/chroma-js/src/ops/saturate.js","../node_modules/chroma-js/src/ops/set.js","../node_modules/chroma-js/src/ops/shade.js","../node_modules/chroma-js/src/interpolator/rgb.js","../node_modules/chroma-js/src/interpolator/lrgb.js","../node_modules/chroma-js/src/interpolator/lab.js","../node_modules/chroma-js/src/interpolator/_hsx.js","../node_modules/chroma-js/src/interpolator/lch.js","../node_modules/chroma-js/src/io/num/num2rgb.js","../node_modules/chroma-js/src/io/num/rgb2num.js","../node_modules/chroma-js/src/io/num/index.js","../node_modules/chroma-js/src/interpolator/num.js","../node_modules/chroma-js/src/io/hcg/hcg2rgb.js","../node_modules/chroma-js/src/io/hcg/rgb2hcg.js","../node_modules/chroma-js/src/io/hcg/index.js","../node_modules/chroma-js/src/interpolator/hcg.js","../node_modules/chroma-js/src/io/hsi/hsi2rgb.js","../node_modules/chroma-js/src/io/hsi/rgb2hsi.js","../node_modules/chroma-js/src/io/hsi/index.js","../node_modules/chroma-js/src/interpolator/hsi.js","../node_modules/chroma-js/src/io/hsl/hsl2rgb.js","../node_modules/chroma-js/src/io/hsl/rgb2hsl.js","../node_modules/chroma-js/src/io/hsl/index.js","../node_modules/chroma-js/src/interpolator/hsl.js","../node_modules/chroma-js/src/io/hsv/hsv2rgb.js","../node_modules/chroma-js/src/io/hsv/rgb2hsv.js","../node_modules/chroma-js/src/io/hsv/index.js","../node_modules/chroma-js/src/interpolator/hsv.js","../node_modules/chroma-js/src/utils/multiply-matrices.js","../node_modules/chroma-js/src/io/oklab/oklab2rgb.js","../node_modules/chroma-js/src/io/oklab/rgb2oklab.js","../node_modules/chroma-js/src/io/oklab/index.js","../node_modules/chroma-js/src/interpolator/oklab.js","../node_modules/chroma-js/src/interpolator/oklch.js","../node_modules/chroma-js/src/generator/average.js","../node_modules/chroma-js/src/generator/scale.js","../node_modules/chroma-js/src/generator/bezier.js","../node_modules/chroma-js/src/io/rgb/index.js","../node_modules/chroma-js/src/generator/blend.js","../node_modules/chroma-js/src/generator/cubehelix.js","../node_modules/chroma-js/src/generator/random.js","../node_modules/chroma-js/src/utils/analyze.js","../node_modules/chroma-js/src/utils/contrast.js","../node_modules/chroma-js/src/utils/contrastAPCA.js","../node_modules/chroma-js/src/utils/delta-e.js","../node_modules/chroma-js/src/utils/valid.js","../node_modules/chroma-js/src/utils/scales.js","../node_modules/chroma-js/src/colors/colorbrewer.js","../node_modules/chroma-js/src/io/cmyk/cmyk2rgb.js","../node_modules/chroma-js/src/io/cmyk/rgb2cmyk.js","../node_modules/chroma-js/src/io/cmyk/index.js","../node_modules/chroma-js/src/io/css/hsl2css.js","../node_modules/chroma-js/src/io/css/lab2css.js","../node_modules/chroma-js/src/io/css/lch2css.js","../node_modules/chroma-js/src/io/css/oklab2css.js","../node_modules/chroma-js/src/io/oklch/rgb2oklch.js","../node_modules/chroma-js/src/io/css/oklch2css.js","../node_modules/chroma-js/src/io/css/rgb2css.js","../node_modules/chroma-js/src/io/oklch/oklch2rgb.js","../node_modules/chroma-js/src/io/css/css2rgb.js","../node_modules/chroma-js/src/io/css/index.js","../node_modules/chroma-js/src/io/gl/index.js","../node_modules/chroma-js/src/io/hex/index.js","../node_modules/chroma-js/src/io/temp/temperature2rgb.js","../node_modules/chroma-js/src/io/temp/rgb2temperature.js","../node_modules/chroma-js/src/io/temp/index.js","../node_modules/chroma-js/src/io/oklch/index.js","../node_modules/chroma-js/index.js","../node_modules/chroma-js/src/utils/distance.js"],"sourcesContent":["const { min, max } = Math;\n\nexport default (x, low = 0, high = 1) => {\n    return min(max(low, x), high);\n};\n","import limit from './limit.js';\n\nexport default (rgb) => {\n    rgb._clipped = false;\n    rgb._unclipped = rgb.slice(0);\n    for (let i = 0; i <= 3; i++) {\n        if (i < 3) {\n            if (rgb[i] < 0 || rgb[i] > 255) rgb._clipped = true;\n            rgb[i] = limit(rgb[i], 0, 255);\n        } else if (i === 3) {\n            rgb[i] = limit(rgb[i], 0, 1);\n        }\n    }\n    return rgb;\n};\n","// ported from jQuery's $.type\nconst classToType = {};\nfor (let name of [\n    'Boolean',\n    'Number',\n    'String',\n    'Function',\n    'Array',\n    'Date',\n    'RegExp',\n    'Undefined',\n    'Null'\n]) {\n    classToType[`[object ${name}]`] = name.toLowerCase();\n}\nexport default function (obj) {\n    return classToType[Object.prototype.toString.call(obj)] || 'object';\n}\n","import type from './type.js';\n\nexport default (args, keyOrder = null) => {\n    // if called with more than 3 arguments, we return the arguments\n    if (args.length >= 3) return Array.prototype.slice.call(args);\n    // with less than 3 args we check if first arg is object\n    // and use the keyOrder string to extract and sort properties\n    if (type(args[0]) == 'object' && keyOrder) {\n        return keyOrder\n            .split('')\n            .filter((k) => args[0][k] !== undefined)\n            .map((k) => args[0][k]);\n    }\n    // otherwise we just return the first argument\n    // (which we suppose is an array of args)\n    return args[0].slice(0);\n};\n","import type from './type.js';\n\nexport default (args) => {\n    if (args.length < 2) return null;\n    const l = args.length - 1;\n    if (type(args[l]) == 'string') return args[l].toLowerCase();\n    return null;\n};\n","const { PI, min, max } = Math;\n\nconst rnd2 = (a) => Math.round(a * 100) / 100;\nconst rnd3 = (a) => Math.round(a * 100) / 100;\n\nexport { default as clip_rgb } from './clip_rgb.js';\nexport { default as limit } from './limit.js';\nexport { default as type } from './type.js';\nexport { default as unpack } from './unpack.js';\nexport { default as last } from './last.js';\n\nconst TWOPI = PI * 2;\nconst PITHIRD = PI / 3;\nconst DEG2RAD = PI / 180;\nconst RAD2DEG = 180 / PI;\n\n/**\n * Reverse the first three elements of an array\n *\n * @param {any[]} arr\n * @returns {any[]}\n */\nfunction reverse3(arr) {\n    return [...arr.slice(0, 3).reverse(), ...arr.slice(3)];\n}\n\nexport { PI, TWOPI, PITHIRD, DEG2RAD, RAD2DEG, min, max, rnd2, rnd3, reverse3 };\n","export default {\n    format: {},\n    autodetect: []\n};\n","import { last, clip_rgb, type } from './utils/index.js';\nimport _input from './io/input.js';\n\nclass Color {\n    constructor(...args) {\n        const me = this;\n        if (\n            type(args[0]) === 'object' &&\n            args[0].constructor &&\n            args[0].constructor === this.constructor\n        ) {\n            // the argument is already a Color instance\n            return args[0];\n        }\n        // last argument could be the mode\n        let mode = last(args);\n        let autodetect = false;\n        if (!mode) {\n            autodetect = true;\n\n            if (!_input.sorted) {\n                _input.autodetect = _input.autodetect.sort((a, b) => b.p - a.p);\n                _input.sorted = true;\n            }\n\n            // auto-detect format\n            for (let chk of _input.autodetect) {\n                mode = chk.test(...args);\n                if (mode) break;\n            }\n        }\n        if (_input.format[mode]) {\n            const rgb = _input.format[mode].apply(\n                null,\n                autodetect ? args : args.slice(0, -1)\n            );\n            me._rgb = clip_rgb(rgb);\n        } else {\n            throw new Error('unknown format: ' + args);\n        }\n        // add alpha channel\n        if (me._rgb.length === 3) me._rgb.push(1);\n    }\n    toString() {\n        if (type(this.hex) == 'function') return this.hex();\n        return `[${this._rgb.join(',')}]`;\n    }\n}\nexport default Color;\n","import Color from './Color.js';\nimport { version } from './version.js';\n\nconst chroma = (...args) => {\n    return new Color(...args);\n};\n\nchroma.version = version;\n\nexport default chroma;\n","// this gets updated automatically\nexport const version = '3.1.2';\n","/**\n\tX11 color names\n\n\thttp://www.w3.org/TR/css3-color/#svg-color\n*/\n\nconst w3cx11 = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgreen: '#006400',\n    darkgrey: '#a9a9a9',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    gold: '#ffd700',\n    goldenrod: '#daa520',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    grey: '#808080',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    laserlemon: '#ffff54',\n    lavender: '#e6e6fa',\n    lavenderblush: '#fff0f5',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrod: '#fafad2',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightgrey: '#d3d3d3',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    maroon2: '#7f0000',\n    maroon3: '#b03060',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370db',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#db7093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    purple2: '#7f007f',\n    purple3: '#a020f0',\n    rebeccapurple: '#663399',\n    red: '#ff0000',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32'\n};\n\nexport default w3cx11;\n","const RE_HEX = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\nconst RE_HEXA = /^#?([A-Fa-f0-9]{8}|[A-Fa-f0-9]{4})$/;\n\nconst hex2rgb = (hex) => {\n    if (hex.match(RE_HEX)) {\n        // remove optional leading #\n        if (hex.length === 4 || hex.length === 7) {\n            hex = hex.substr(1);\n        }\n        // expand short-notation to full six-digit\n        if (hex.length === 3) {\n            hex = hex.split('');\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n        const u = parseInt(hex, 16);\n        const r = u >> 16;\n        const g = (u >> 8) & 0xff;\n        const b = u & 0xff;\n        return [r, g, b, 1];\n    }\n\n    // match rgba hex format, eg #FF000077\n    if (hex.match(RE_HEXA)) {\n        if (hex.length === 5 || hex.length === 9) {\n            // remove optional leading #\n            hex = hex.substr(1);\n        }\n        // expand short-notation to full eight-digit\n        if (hex.length === 4) {\n            hex = hex.split('');\n            hex =\n                hex[0] +\n                hex[0] +\n                hex[1] +\n                hex[1] +\n                hex[2] +\n                hex[2] +\n                hex[3] +\n                hex[3];\n        }\n        const u = parseInt(hex, 16);\n        const r = (u >> 24) & 0xff;\n        const g = (u >> 16) & 0xff;\n        const b = (u >> 8) & 0xff;\n        const a = Math.round(((u & 0xff) / 0xff) * 100) / 100;\n        return [r, g, b, a];\n    }\n\n    // we used to check for css colors here\n    // if _input.css? and rgb = _input.css hex\n    //     return rgb\n\n    throw new Error(`unknown hex color: ${hex}`);\n};\n\nexport default hex2rgb;\n","import { unpack, last } from '../../utils/index.js';\nconst { round } = Math;\n\nconst rgb2hex = (...args) => {\n    let [r, g, b, a] = unpack(args, 'rgba');\n    let mode = last(args) || 'auto';\n    if (a === undefined) a = 1;\n    if (mode === 'auto') {\n        mode = a < 1 ? 'rgba' : 'rgb';\n    }\n    r = round(r);\n    g = round(g);\n    b = round(b);\n    const u = (r << 16) | (g << 8) | b;\n    let str = '000000' + u.toString(16); //#.toUpperCase();\n    str = str.substr(str.length - 6);\n    let hxa = '0' + round(a * 255).toString(16);\n    hxa = hxa.substr(hxa.length - 2);\n    switch (mode.toLowerCase()) {\n        case 'rgba':\n            return `#${str}${hxa}`;\n        case 'argb':\n            return `#${hxa}${str}`;\n        default:\n            return `#${str}`;\n    }\n};\n\nexport default rgb2hex;\n","import Color from '../../Color.js';\nimport input from '../input.js';\nimport { type } from '../../utils/index.js';\n\nimport w3cx11 from '../../colors/w3cx11.js';\nimport hex2rgb from '../hex/hex2rgb.js';\nimport rgb2hex from '../hex/rgb2hex.js';\n\nColor.prototype.name = function () {\n    const hex = rgb2hex(this._rgb, 'rgb');\n    for (let n of Object.keys(w3cx11)) {\n        if (w3cx11[n] === hex) return n.toLowerCase();\n    }\n    return hex;\n};\n\ninput.format.named = (name) => {\n    name = name.toLowerCase();\n    if (w3cx11[name]) return hex2rgb(w3cx11[name]);\n    throw new Error('unknown color name: ' + name);\n};\n\ninput.autodetect.push({\n    p: 5,\n    test: (h, ...rest) => {\n        if (!rest.length && type(h) === 'string' && w3cx11[h.toLowerCase()]) {\n            return 'named';\n        }\n    }\n});\n","import Color from '../Color.js';\nimport { type } from '../utils/index.js';\n\nColor.prototype.alpha = function (a, mutate = false) {\n    if (a !== undefined && type(a) === 'number') {\n        if (mutate) {\n            this._rgb[3] = a;\n            return this;\n        }\n        return new Color([this._rgb[0], this._rgb[1], this._rgb[2], a], 'rgb');\n    }\n    return this._rgb[3];\n};\n","import Color from '../Color.js';\n\nColor.prototype.clipped = function () {\n    return this._rgb._clipped || false;\n};\n","const labConstants = {\n    // Corresponds roughly to RGB brighter/darker\n    Kn: 18,\n\n    // D65 standard referent\n    labWhitePoint: 'd65',\n    Xn: 0.95047,\n    Yn: 1,\n    Zn: 1.08883,\n\n    t0: 0.137931034, // 4 / 29\n    t1: 0.206896552, // 6 / 29\n    t2: 0.12841855, // 3 * t1 * t1\n    t3: 0.008856452, // t1 * t1 * t1,\n\n    kE: 216.0 / 24389.0,\n    kKE: 8.0,\n    kK: 24389.0 / 27.0,\n\n    RefWhiteRGB: {\n        // sRGB\n        X: 0.95047,\n        Y: 1,\n        Z: 1.08883\n    },\n\n    MtxRGB2XYZ: {\n        m00: 0.4124564390896922,\n        m01: 0.21267285140562253,\n        m02: 0.0193338955823293,\n        m10: 0.357576077643909,\n        m11: 0.715152155287818,\n        m12: 0.11919202588130297,\n        m20: 0.18043748326639894,\n        m21: 0.07217499330655958,\n        m22: 0.9503040785363679\n    },\n\n    MtxXYZ2RGB: {\n        m00: 3.2404541621141045,\n        m01: -0.9692660305051868,\n        m02: 0.055643430959114726,\n        m10: -1.5371385127977166,\n        m11: 1.8760108454466942,\n        m12: -0.2040259135167538,\n        m20: -0.498531409556016,\n        m21: 0.041556017530349834,\n        m22: 1.0572251882231791\n    },\n\n    // used in rgb2xyz\n    As: 0.9414285350000001,\n    Bs: 1.040417467,\n    Cs: 1.089532651,\n\n    MtxAdaptMa: {\n        m00: 0.8951,\n        m01: -0.7502,\n        m02: 0.0389,\n        m10: 0.2664,\n        m11: 1.7135,\n        m12: -0.0685,\n        m20: -0.1614,\n        m21: 0.0367,\n        m22: 1.0296\n    },\n\n    MtxAdaptMaI: {\n        m00: 0.9869929054667123,\n        m01: 0.43230526972339456,\n        m02: -0.008528664575177328,\n        m10: -0.14705425642099013,\n        m11: 0.5183602715367776,\n        m12: 0.04004282165408487,\n        m20: 0.15996265166373125,\n        m21: 0.0492912282128556,\n        m22: 0.9684866957875502\n    }\n};\n\nexport default labConstants;\n\n// taken from https://de.mathworks.com/help/images/ref/whitepoint.html\nconst ILLUMINANTS = new Map([\n    // ASTM E308-01\n    ['a', [1.0985, 0.35585]],\n    // Wyszecki & Stiles, p. 769\n    ['b', [1.0985, 0.35585]],\n    // C ASTM E308-01\n    ['c', [0.98074, 1.18232]],\n    // D50 (ASTM E308-01)\n    ['d50', [0.96422, 0.82521]],\n    // D55 (ASTM E308-01)\n    ['d55', [0.95682, 0.92149]],\n    // D65 (ASTM E308-01)\n    ['d65', [0.95047, 1.08883]],\n    // E (ASTM E308-01)\n    ['e', [1, 1, 1]],\n    // F2 (ASTM E308-01)\n    ['f2', [0.99186, 0.67393]],\n    // F7 (ASTM E308-01)\n    ['f7', [0.95041, 1.08747]],\n    // F11 (ASTM E308-01)\n    ['f11', [1.00962, 0.6435]],\n    ['icc', [0.96422, 0.82521]]\n]);\n\nexport function setLabWhitePoint(name) {\n    const ill = ILLUMINANTS.get(String(name).toLowerCase());\n    if (!ill) {\n        throw new Error('unknown Lab illuminant ' + name);\n    }\n    labConstants.labWhitePoint = name;\n    labConstants.Xn = ill[0];\n    labConstants.Zn = ill[1];\n}\n\nexport function getLabWhitePoint() {\n    return labConstants.labWhitePoint;\n}\n","import LAB_CONSTANTS from './lab-constants.js';\nimport { unpack } from '../../utils/index.js';\n\n/*\n * L* [0..100]\n * a [-100..100]\n * b [-100..100]\n */\nconst lab2rgb = (...args) => {\n    args = unpack(args, 'lab');\n    const [L, a, b] = args;\n    const [x, y, z] = lab2xyz(L, a, b);\n    const [r, g, b_] = xyz2rgb(x, y, z);\n    return [r, g, b_, args.length > 3 ? args[3] : 1];\n};\n\nconst lab2xyz = (L, a, b) => {\n    const { kE, kK, kKE, Xn, Yn, Zn } = LAB_CONSTANTS;\n\n    const fy = (L + 16.0) / 116.0;\n    const fx = 0.002 * a + fy;\n    const fz = fy - 0.005 * b;\n\n    const fx3 = fx * fx * fx;\n    const fz3 = fz * fz * fz;\n\n    const xr = fx3 > kE ? fx3 : (116.0 * fx - 16.0) / kK;\n    const yr = L > kKE ? Math.pow((L + 16.0) / 116.0, 3.0) : L / kK;\n    const zr = fz3 > kE ? fz3 : (116.0 * fz - 16.0) / kK;\n\n    const x = xr * Xn;\n    const y = yr * Yn;\n    const z = zr * Zn;\n\n    return [x, y, z];\n};\n\nconst compand = (linear) => {\n    /* sRGB */\n    const sign = Math.sign(linear);\n    linear = Math.abs(linear);\n    return (\n        (linear <= 0.0031308\n            ? linear * 12.92\n            : 1.055 * Math.pow(linear, 1.0 / 2.4) - 0.055) * sign\n    );\n};\n\nconst xyz2rgb = (x, y, z) => {\n    const { MtxAdaptMa, MtxAdaptMaI, MtxXYZ2RGB, RefWhiteRGB, Xn, Yn, Zn } =\n        LAB_CONSTANTS;\n\n    const As = Xn * MtxAdaptMa.m00 + Yn * MtxAdaptMa.m10 + Zn * MtxAdaptMa.m20;\n    const Bs = Xn * MtxAdaptMa.m01 + Yn * MtxAdaptMa.m11 + Zn * MtxAdaptMa.m21;\n    const Cs = Xn * MtxAdaptMa.m02 + Yn * MtxAdaptMa.m12 + Zn * MtxAdaptMa.m22;\n\n    const Ad =\n        RefWhiteRGB.X * MtxAdaptMa.m00 +\n        RefWhiteRGB.Y * MtxAdaptMa.m10 +\n        RefWhiteRGB.Z * MtxAdaptMa.m20;\n    const Bd =\n        RefWhiteRGB.X * MtxAdaptMa.m01 +\n        RefWhiteRGB.Y * MtxAdaptMa.m11 +\n        RefWhiteRGB.Z * MtxAdaptMa.m21;\n    const Cd =\n        RefWhiteRGB.X * MtxAdaptMa.m02 +\n        RefWhiteRGB.Y * MtxAdaptMa.m12 +\n        RefWhiteRGB.Z * MtxAdaptMa.m22;\n\n    const X1 =\n        (x * MtxAdaptMa.m00 + y * MtxAdaptMa.m10 + z * MtxAdaptMa.m20) *\n        (Ad / As);\n    const Y1 =\n        (x * MtxAdaptMa.m01 + y * MtxAdaptMa.m11 + z * MtxAdaptMa.m21) *\n        (Bd / Bs);\n    const Z1 =\n        (x * MtxAdaptMa.m02 + y * MtxAdaptMa.m12 + z * MtxAdaptMa.m22) *\n        (Cd / Cs);\n\n    const X2 =\n        X1 * MtxAdaptMaI.m00 + Y1 * MtxAdaptMaI.m10 + Z1 * MtxAdaptMaI.m20;\n    const Y2 =\n        X1 * MtxAdaptMaI.m01 + Y1 * MtxAdaptMaI.m11 + Z1 * MtxAdaptMaI.m21;\n    const Z2 =\n        X1 * MtxAdaptMaI.m02 + Y1 * MtxAdaptMaI.m12 + Z1 * MtxAdaptMaI.m22;\n\n    const r = compand(\n        X2 * MtxXYZ2RGB.m00 + Y2 * MtxXYZ2RGB.m10 + Z2 * MtxXYZ2RGB.m20\n    );\n    const g = compand(\n        X2 * MtxXYZ2RGB.m01 + Y2 * MtxXYZ2RGB.m11 + Z2 * MtxXYZ2RGB.m21\n    );\n    const b = compand(\n        X2 * MtxXYZ2RGB.m02 + Y2 * MtxXYZ2RGB.m12 + Z2 * MtxXYZ2RGB.m22\n    );\n\n    return [r * 255, g * 255, b * 255];\n};\n\nexport default lab2rgb;\nexport { xyz2rgb };\n","import LAB_CONSTANTS from './lab-constants.js';\nimport { unpack } from '../../utils/index.js';\n\nconst rgb2lab = (...args) => {\n    const [r, g, b, ...rest] = unpack(args, 'rgb');\n    const [x, y, z] = rgb2xyz(r, g, b);\n    const [L, a, b_] = xyz2lab(x, y, z);\n    return [L, a, b_, ...(rest.length > 0 && rest[0] < 1 ? [rest[0]] : [])];\n};\n\nfunction xyz2lab(x, y, z) {\n    const { Xn, Yn, Zn, kE, kK } = LAB_CONSTANTS;\n    const xr = x / Xn;\n    const yr = y / Yn;\n    const zr = z / Zn;\n\n    const fx = xr > kE ? Math.pow(xr, 1.0 / 3.0) : (kK * xr + 16.0) / 116.0;\n    const fy = yr > kE ? Math.pow(yr, 1.0 / 3.0) : (kK * yr + 16.0) / 116.0;\n    const fz = zr > kE ? Math.pow(zr, 1.0 / 3.0) : (kK * zr + 16.0) / 116.0;\n\n    return [116.0 * fy - 16.0, 500.0 * (fx - fy), 200.0 * (fy - fz)];\n}\n\nfunction gammaAdjustSRGB(companded) {\n    const sign = Math.sign(companded);\n    companded = Math.abs(companded);\n    const linear =\n        companded <= 0.04045\n            ? companded / 12.92\n            : Math.pow((companded + 0.055) / 1.055, 2.4);\n    return linear * sign;\n}\n\nconst rgb2xyz = (r, g, b) => {\n    // normalize and gamma adjust\n    r = gammaAdjustSRGB(r / 255);\n    g = gammaAdjustSRGB(g / 255);\n    b = gammaAdjustSRGB(b / 255);\n\n    const { MtxRGB2XYZ, MtxAdaptMa, MtxAdaptMaI, Xn, Yn, Zn, As, Bs, Cs } =\n        LAB_CONSTANTS;\n\n    let x = r * MtxRGB2XYZ.m00 + g * MtxRGB2XYZ.m10 + b * MtxRGB2XYZ.m20;\n    let y = r * MtxRGB2XYZ.m01 + g * MtxRGB2XYZ.m11 + b * MtxRGB2XYZ.m21;\n    let z = r * MtxRGB2XYZ.m02 + g * MtxRGB2XYZ.m12 + b * MtxRGB2XYZ.m22;\n\n    const Ad = Xn * MtxAdaptMa.m00 + Yn * MtxAdaptMa.m10 + Zn * MtxAdaptMa.m20;\n    const Bd = Xn * MtxAdaptMa.m01 + Yn * MtxAdaptMa.m11 + Zn * MtxAdaptMa.m21;\n    const Cd = Xn * MtxAdaptMa.m02 + Yn * MtxAdaptMa.m12 + Zn * MtxAdaptMa.m22;\n\n    let X = x * MtxAdaptMa.m00 + y * MtxAdaptMa.m10 + z * MtxAdaptMa.m20;\n    let Y = x * MtxAdaptMa.m01 + y * MtxAdaptMa.m11 + z * MtxAdaptMa.m21;\n    let Z = x * MtxAdaptMa.m02 + y * MtxAdaptMa.m12 + z * MtxAdaptMa.m22;\n\n    X *= Ad / As;\n    Y *= Bd / Bs;\n    Z *= Cd / Cs;\n\n    x = X * MtxAdaptMaI.m00 + Y * MtxAdaptMaI.m10 + Z * MtxAdaptMaI.m20;\n    y = X * MtxAdaptMaI.m01 + Y * MtxAdaptMaI.m11 + Z * MtxAdaptMaI.m21;\n    z = X * MtxAdaptMaI.m02 + Y * MtxAdaptMaI.m12 + Z * MtxAdaptMaI.m22;\n\n    return [x, y, z];\n};\n\nexport default rgb2lab;\nexport { rgb2xyz };\n","import { unpack, type } from '../../utils/index.js';\nimport chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport lab2rgb from './lab2rgb.js';\nimport rgb2lab from './rgb2lab.js';\nimport { getLabWhitePoint, setLabWhitePoint } from './lab-constants.js';\n\nColor.prototype.lab = function () {\n    return rgb2lab(this._rgb);\n};\n\nconst lab = (...args) => new Color(...args, 'lab');\nObject.assign(chroma, { lab, getLabWhitePoint, setLabWhitePoint });\n\ninput.format.lab = lab2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'lab');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'lab';\n        }\n    }\n});\n\nexport { lab, getLabWhitePoint, setLabWhitePoint };\n","import '../io/lab/index.js';\nimport Color from '../Color.js';\nimport LAB_CONSTANTS from '../io/lab/lab-constants.js';\n\nColor.prototype.darken = function (amount = 1) {\n    const me = this;\n    const lab = me.lab();\n    lab[0] -= LAB_CONSTANTS.Kn * amount;\n    return new Color(lab, 'lab').alpha(me.alpha(), true);\n};\n\nColor.prototype.brighten = function (amount = 1) {\n    return this.darken(-amount);\n};\n\nColor.prototype.darker = Color.prototype.darken;\nColor.prototype.brighter = Color.prototype.brighten;\n","import Color from '../Color.js';\n\nColor.prototype.get = function (mc) {\n    const [mode, channel] = mc.split('.');\n    const src = this[mode]();\n    if (channel) {\n        const i = mode.indexOf(channel) - (mode.substr(0, 2) === 'ok' ? 2 : 0);\n        if (i > -1) return src[i];\n        throw new Error(`unknown channel ${channel} in mode ${mode}`);\n    } else {\n        return src;\n    }\n};\n","import Color from '../Color.js';\nimport { type } from '../utils/index.js';\nconst { pow } = Math;\n\nconst EPS = 1e-7;\nconst MAX_ITER = 20;\n\nColor.prototype.luminance = function (lum, mode = 'rgb') {\n    if (lum !== undefined && type(lum) === 'number') {\n        if (lum === 0) {\n            // return pure black\n            return new Color([0, 0, 0, this._rgb[3]], 'rgb');\n        }\n        if (lum === 1) {\n            // return pure white\n            return new Color([255, 255, 255, this._rgb[3]], 'rgb');\n        }\n        // compute new color using...\n        let cur_lum = this.luminance();\n        let max_iter = MAX_ITER;\n\n        const test = (low, high) => {\n            const mid = low.interpolate(high, 0.5, mode);\n            const lm = mid.luminance();\n            if (Math.abs(lum - lm) < EPS || !max_iter--) {\n                // close enough\n                return mid;\n            }\n            return lm > lum ? test(low, mid) : test(mid, high);\n        };\n\n        const rgb = (\n            cur_lum > lum\n                ? test(new Color([0, 0, 0]), this)\n                : test(this, new Color([255, 255, 255]))\n        ).rgb();\n        return new Color([...rgb, this._rgb[3]]);\n    }\n    return rgb2luminance(...this._rgb.slice(0, 3));\n};\n\nconst rgb2luminance = (r, g, b) => {\n    // relative luminance\n    // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n    r = luminance_x(r);\n    g = luminance_x(g);\n    b = luminance_x(b);\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n};\n\nconst luminance_x = (x) => {\n    x /= 255;\n    return x <= 0.03928 ? x / 12.92 : pow((x + 0.055) / 1.055, 2.4);\n};\n","export default {};\n","import Color from '../Color.js';\nimport { type } from '../utils/index.js';\nimport interpolator from '../interpolator/index.js';\n\nexport default (col1, col2, f = 0.5, ...rest) => {\n    let mode = rest[0] || 'lrgb';\n    if (!interpolator[mode] && !rest.length) {\n        // fall back to the first supported mode\n        mode = Object.keys(interpolator)[0];\n    }\n    if (!interpolator[mode]) {\n        throw new Error(`interpolation mode ${mode} is not defined`);\n    }\n    if (type(col1) !== 'object') col1 = new Color(col1);\n    if (type(col2) !== 'object') col2 = new Color(col2);\n    return interpolator[mode](col1, col2, f).alpha(\n        col1.alpha() + f * (col2.alpha() - col1.alpha())\n    );\n};\n","import Color from '../Color.js';\nimport mix from '../generator/mix.js';\n\nColor.prototype.mix = Color.prototype.interpolate = function (\n    col2,\n    f = 0.5,\n    ...rest\n) {\n    return mix(this, col2, f, ...rest);\n};\n","import Color from '../Color.js';\n\nColor.prototype.premultiply = function (mutate = false) {\n    const rgb = this._rgb;\n    const a = rgb[3];\n    if (mutate) {\n        this._rgb = [rgb[0] * a, rgb[1] * a, rgb[2] * a, a];\n        return this;\n    } else {\n        return new Color([rgb[0] * a, rgb[1] * a, rgb[2] * a, a], 'rgb');\n    }\n};\n","import { unpack, DEG2RAD } from '../../utils/index.js';\nconst { sin, cos } = Math;\n\nconst lch2lab = (...args) => {\n    /*\n    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\n    These formulas were invented by David Dalrymple to obtain maximum contrast without going\n    out of gamut if the parameters are in the range 0-1.\n\n    A saturation multiplier was added by Gregor Aisch\n    */\n    let [l, c, h] = unpack(args, 'lch');\n    if (isNaN(h)) h = 0;\n    h = h * DEG2RAD;\n    return [l, cos(h) * c, sin(h) * c];\n};\n\nexport default lch2lab;\n","import { unpack } from '../../utils/index.js';\nimport lch2lab from './lch2lab.js';\nimport lab2rgb from '../lab/lab2rgb.js';\n\nconst lch2rgb = (...args) => {\n    args = unpack(args, 'lch');\n    const [l, c, h] = args;\n    const [L, a, b_] = lch2lab(l, c, h);\n    const [r, g, b] = lab2rgb(L, a, b_);\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n};\n\nexport default lch2rgb;\n","import { unpack, reverse3 } from '../../utils/index.js';\nimport lch2rgb from './lch2rgb.js';\n\nconst hcl2rgb = (...args) => {\n    const hcl = reverse3(unpack(args, 'hcl'));\n    return lch2rgb(...hcl);\n};\n\nexport default hcl2rgb;\n","import { unpack, RAD2DEG } from '../../utils/index.js';\nconst { sqrt, atan2, round } = Math;\n\nconst lab2lch = (...args) => {\n    const [l, a, b] = unpack(args, 'lab');\n    const c = sqrt(a * a + b * b);\n    let h = (atan2(b, a) * RAD2DEG + 360) % 360;\n    if (round(c * 10000) === 0) h = Number.NaN;\n    return [l, c, h];\n};\n\nexport default lab2lch;\n","import { unpack } from '../../utils/index.js';\nimport rgb2lab from '../lab/rgb2lab.js';\nimport lab2lch from './lab2lch.js';\n\nconst rgb2lch = (...args) => {\n    const [r, g, b, ...rest] = unpack(args, 'rgb');\n    const [l, a, b_] = rgb2lab(r, g, b);\n    const [L, c, h] = lab2lch(l, a, b_);\n    return [L, c, h, ...(rest.length > 0 && rest[0] < 1 ? [rest[0]] : [])];\n};\n\nexport default rgb2lch;\n","import { unpack, type, reverse3 } from '../../utils/index.js';\nimport chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport lch2rgb from './lch2rgb.js';\nimport hcl2rgb from './hcl2rgb.js';\nimport rgb2lch from './rgb2lch.js';\n\nColor.prototype.lch = function () {\n    return rgb2lch(this._rgb);\n};\nColor.prototype.hcl = function () {\n    return reverse3(rgb2lch(this._rgb));\n};\n\nconst lch = (...args) => new Color(...args, 'lch');\nconst hcl = (...args) => new Color(...args, 'hcl');\n\nObject.assign(chroma, { lch, hcl });\n\ninput.format.lch = lch2rgb;\ninput.format.hcl = hcl2rgb;\n['lch', 'hcl'].forEach((m) =>\n    input.autodetect.push({\n        p: 2,\n        test: (...args) => {\n            args = unpack(args, m);\n            if (type(args) === 'array' && args.length === 3) {\n                return m;\n            }\n        }\n    })\n);\n\nexport { lch, hcl };\n","import '../io/lch/index.js';\nimport Color from '../Color.js';\nimport LAB_CONSTANTS from '../io/lab/lab-constants.js';\n\nColor.prototype.saturate = function (amount = 1) {\n    const me = this;\n    const lch = me.lch();\n    lch[1] += LAB_CONSTANTS.Kn * amount;\n    if (lch[1] < 0) lch[1] = 0;\n    return new Color(lch, 'lch').alpha(me.alpha(), true);\n};\n\nColor.prototype.desaturate = function (amount = 1) {\n    return this.saturate(-amount);\n};\n","import Color from '../Color.js';\nimport { type } from '../utils/index.js';\n\nColor.prototype.set = function (mc, value, mutate = false) {\n    const [mode, channel] = mc.split('.');\n    const src = this[mode]();\n    if (channel) {\n        const i = mode.indexOf(channel) - (mode.substr(0, 2) === 'ok' ? 2 : 0);\n        if (i > -1) {\n            if (type(value) == 'string') {\n                switch (value.charAt(0)) {\n                    case '+':\n                        src[i] += +value;\n                        break;\n                    case '-':\n                        src[i] += +value;\n                        break;\n                    case '*':\n                        src[i] *= +value.substr(1);\n                        break;\n                    case '/':\n                        src[i] /= +value.substr(1);\n                        break;\n                    default:\n                        src[i] = +value;\n                }\n            } else if (type(value) === 'number') {\n                src[i] = value;\n            } else {\n                throw new Error(`unsupported value for Color.set`);\n            }\n            const out = new Color(src, mode);\n            if (mutate) {\n                this._rgb = out._rgb;\n                return this;\n            }\n            return out;\n        }\n        throw new Error(`unknown channel ${channel} in mode ${mode}`);\n    } else {\n        return src;\n    }\n};\n","import '../io/lab/index.js';\nimport Color from '../Color.js';\nimport mix from '../generator/mix.js';\n\nColor.prototype.tint = function (f = 0.5, ...rest) {\n    return mix(this, 'white', f, ...rest);\n};\n\nColor.prototype.shade = function (f = 0.5, ...rest) {\n    return mix(this, 'black', f, ...rest);\n};\n","import Color from '../Color.js';\nimport index from './index.js';\n\nconst rgb = (col1, col2, f) => {\n    const xyz0 = col1._rgb;\n    const xyz1 = col2._rgb;\n    return new Color(\n        xyz0[0] + f * (xyz1[0] - xyz0[0]),\n        xyz0[1] + f * (xyz1[1] - xyz0[1]),\n        xyz0[2] + f * (xyz1[2] - xyz0[2]),\n        'rgb'\n    );\n};\n\n// register interpolator\nindex.rgb = rgb;\n\nexport default rgb;\n","import Color from '../Color.js';\nconst { sqrt, pow } = Math;\nimport index from './index.js';\n\nconst lrgb = (col1, col2, f) => {\n    const [x1, y1, z1] = col1._rgb;\n    const [x2, y2, z2] = col2._rgb;\n    return new Color(\n        sqrt(pow(x1, 2) * (1 - f) + pow(x2, 2) * f),\n        sqrt(pow(y1, 2) * (1 - f) + pow(y2, 2) * f),\n        sqrt(pow(z1, 2) * (1 - f) + pow(z2, 2) * f),\n        'rgb'\n    );\n};\n\n// register interpolator\nindex.lrgb = lrgb;\n\nexport default lrgb;\n","import '../io/lab/index.js';\nimport index from './index.js';\nimport Color from '../Color.js';\n\nconst lab = (col1, col2, f) => {\n    const xyz0 = col1.lab();\n    const xyz1 = col2.lab();\n    return new Color(\n        xyz0[0] + f * (xyz1[0] - xyz0[0]),\n        xyz0[1] + f * (xyz1[1] - xyz0[1]),\n        xyz0[2] + f * (xyz1[2] - xyz0[2]),\n        'lab'\n    );\n};\n\n// register interpolator\nindex.lab = lab;\n\nexport default lab;\n","import Color from '../Color.js';\n\nexport default (col1, col2, f, m) => {\n    let xyz0, xyz1;\n    if (m === 'hsl') {\n        xyz0 = col1.hsl();\n        xyz1 = col2.hsl();\n    } else if (m === 'hsv') {\n        xyz0 = col1.hsv();\n        xyz1 = col2.hsv();\n    } else if (m === 'hcg') {\n        xyz0 = col1.hcg();\n        xyz1 = col2.hcg();\n    } else if (m === 'hsi') {\n        xyz0 = col1.hsi();\n        xyz1 = col2.hsi();\n    } else if (m === 'lch' || m === 'hcl') {\n        m = 'hcl';\n        xyz0 = col1.hcl();\n        xyz1 = col2.hcl();\n    } else if (m === 'oklch') {\n        xyz0 = col1.oklch().reverse();\n        xyz1 = col2.oklch().reverse();\n    }\n\n    let hue0, hue1, sat0, sat1, lbv0, lbv1;\n    if (m.substr(0, 1) === 'h' || m === 'oklch') {\n        [hue0, sat0, lbv0] = xyz0;\n        [hue1, sat1, lbv1] = xyz1;\n    }\n\n    let sat, hue, lbv, dh;\n\n    if (!isNaN(hue0) && !isNaN(hue1)) {\n        // both colors have hue\n        if (hue1 > hue0 && hue1 - hue0 > 180) {\n            dh = hue1 - (hue0 + 360);\n        } else if (hue1 < hue0 && hue0 - hue1 > 180) {\n            dh = hue1 + 360 - hue0;\n        } else {\n            dh = hue1 - hue0;\n        }\n        hue = hue0 + f * dh;\n    } else if (!isNaN(hue0)) {\n        hue = hue0;\n        if ((lbv1 == 1 || lbv1 == 0) && m != 'hsv') sat = sat0;\n    } else if (!isNaN(hue1)) {\n        hue = hue1;\n        if ((lbv0 == 1 || lbv0 == 0) && m != 'hsv') sat = sat1;\n    } else {\n        hue = Number.NaN;\n    }\n\n    if (sat === undefined) sat = sat0 + f * (sat1 - sat0);\n    lbv = lbv0 + f * (lbv1 - lbv0);\n    return m === 'oklch'\n        ? new Color([lbv, sat, hue], m)\n        : new Color([hue, sat, lbv], m);\n};\n","import '../io/lch/index.js';\nimport interpolate_hsx from './_hsx.js';\nimport index from './index.js';\n\nconst lch = (col1, col2, f) => {\n    return interpolate_hsx(col1, col2, f, 'lch');\n};\n\n// register interpolator\nindex.lch = lch;\nindex.hcl = lch;\n\nexport default lch;\n","import { type } from '../../utils/index.js';\n\nconst num2rgb = (num) => {\n    if (type(num) == 'number' && num >= 0 && num <= 0xffffff) {\n        const r = num >> 16;\n        const g = (num >> 8) & 0xff;\n        const b = num & 0xff;\n        return [r, g, b, 1];\n    }\n    throw new Error('unknown num color: ' + num);\n};\n\nexport default num2rgb;\n","import { unpack } from '../../utils/index.js';\n\nconst rgb2num = (...args) => {\n    const [r, g, b] = unpack(args, 'rgb');\n    return (r << 16) + (g << 8) + b;\n};\n\nexport default rgb2num;\n","import chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport { type } from '../../utils/index.js';\nimport num2rgb from './num2rgb.js';\nimport rgb2num from './rgb2num.js';\n\nColor.prototype.num = function () {\n    return rgb2num(this._rgb);\n};\n\nconst num = (...args) => new Color(...args, 'num');\n\nObject.assign(chroma, { num });\n\ninput.format.num = num2rgb;\n\ninput.autodetect.push({\n    p: 5,\n    test: (...args) => {\n        if (\n            args.length === 1 &&\n            type(args[0]) === 'number' &&\n            args[0] >= 0 &&\n            args[0] <= 0xffffff\n        ) {\n            return 'num';\n        }\n    }\n});\n\nexport { num };\n","import '../io/num/index.js';\nimport index from './index.js';\n\nimport Color from '../Color.js';\n\nconst num = (col1, col2, f) => {\n    const c1 = col1.num();\n    const c2 = col2.num();\n    return new Color(c1 + f * (c2 - c1), 'num');\n};\n\n// register interpolator\nindex.num = num;\n\nexport default num;\n","import { unpack } from '../../utils/index.js';\nconst { floor } = Math;\n\n/*\n * this is basically just HSV with some minor tweaks\n *\n * hue.. [0..360]\n * chroma .. [0..1]\n * grayness .. [0..1]\n */\n\nconst hcg2rgb = (...args) => {\n    args = unpack(args, 'hcg');\n    let [h, c, _g] = args;\n    let r, g, b;\n    _g = _g * 255;\n    const _c = c * 255;\n    if (c === 0) {\n        r = g = b = _g;\n    } else {\n        if (h === 360) h = 0;\n        if (h > 360) h -= 360;\n        if (h < 0) h += 360;\n        h /= 60;\n        const i = floor(h);\n        const f = h - i;\n        const p = _g * (1 - c);\n        const q = p + _c * (1 - f);\n        const t = p + _c * f;\n        const v = p + _c;\n        switch (i) {\n            case 0:\n                [r, g, b] = [v, t, p];\n                break;\n            case 1:\n                [r, g, b] = [q, v, p];\n                break;\n            case 2:\n                [r, g, b] = [p, v, t];\n                break;\n            case 3:\n                [r, g, b] = [p, q, v];\n                break;\n            case 4:\n                [r, g, b] = [t, p, v];\n                break;\n            case 5:\n                [r, g, b] = [v, p, q];\n                break;\n        }\n    }\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n};\n\nexport default hcg2rgb;\n","import { unpack, max, min } from '../../utils/index.js';\n\nconst rgb2hcg = (...args) => {\n    const [r, g, b] = unpack(args, 'rgb');\n    const minRgb = min(r, g, b);\n    const maxRgb = max(r, g, b);\n    const delta = maxRgb - minRgb;\n    const c = (delta * 100) / 255;\n    const _g = (minRgb / (255 - delta)) * 100;\n    let h;\n    if (delta === 0) {\n        h = Number.NaN;\n    } else {\n        if (r === maxRgb) h = (g - b) / delta;\n        if (g === maxRgb) h = 2 + (b - r) / delta;\n        if (b === maxRgb) h = 4 + (r - g) / delta;\n        h *= 60;\n        if (h < 0) h += 360;\n    }\n    return [h, c, _g];\n};\n\nexport default rgb2hcg;\n","import { unpack, type } from '../../utils/index.js';\nimport chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport hcg2rgb from './hcg2rgb.js';\nimport rgb2hcg from './rgb2hcg.js';\n\nColor.prototype.hcg = function () {\n    return rgb2hcg(this._rgb);\n};\n\nconst hcg = (...args) => new Color(...args, 'hcg');\nchroma.hcg = hcg;\n\ninput.format.hcg = hcg2rgb;\n\ninput.autodetect.push({\n    p: 1,\n    test: (...args) => {\n        args = unpack(args, 'hcg');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'hcg';\n        }\n    }\n});\n\nexport { hcg };\n","import '../io/hcg/index.js';\nimport interpolate_hsx from './_hsx.js';\nimport index from './index.js';\n\nconst hcg = (col1, col2, f) => {\n    return interpolate_hsx(col1, col2, f, 'hcg');\n};\n\n// register interpolator\nindex.hcg = hcg;\n\nexport default hcg;\n","import { unpack, limit, TWOPI, PITHIRD } from '../../utils/index.js';\nconst { cos } = Math;\n\n/*\n * hue [0..360]\n * saturation [0..1]\n * intensity [0..1]\n */\nconst hsi2rgb = (...args) => {\n    /*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\n    */\n    args = unpack(args, 'hsi');\n    let [h, s, i] = args;\n    let r, g, b;\n\n    if (isNaN(h)) h = 0;\n    if (isNaN(s)) s = 0;\n    // normalize hue\n    if (h > 360) h -= 360;\n    if (h < 0) h += 360;\n    h /= 360;\n    if (h < 1 / 3) {\n        b = (1 - s) / 3;\n        r = (1 + (s * cos(TWOPI * h)) / cos(PITHIRD - TWOPI * h)) / 3;\n        g = 1 - (b + r);\n    } else if (h < 2 / 3) {\n        h -= 1 / 3;\n        r = (1 - s) / 3;\n        g = (1 + (s * cos(TWOPI * h)) / cos(PITHIRD - TWOPI * h)) / 3;\n        b = 1 - (r + g);\n    } else {\n        h -= 2 / 3;\n        g = (1 - s) / 3;\n        b = (1 + (s * cos(TWOPI * h)) / cos(PITHIRD - TWOPI * h)) / 3;\n        r = 1 - (g + b);\n    }\n    r = limit(i * r * 3);\n    g = limit(i * g * 3);\n    b = limit(i * b * 3);\n    return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];\n};\n\nexport default hsi2rgb;\n","import { unpack, TWOPI } from '../../utils/index.js';\nconst { min, sqrt, acos } = Math;\n\nconst rgb2hsi = (...args) => {\n    /*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp\n    */\n    let [r, g, b] = unpack(args, 'rgb');\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    let h;\n    const min_ = min(r, g, b);\n    const i = (r + g + b) / 3;\n    const s = i > 0 ? 1 - min_ / i : 0;\n    if (s === 0) {\n        h = NaN;\n    } else {\n        h = (r - g + (r - b)) / 2;\n        h /= sqrt((r - g) * (r - g) + (r - b) * (g - b));\n        h = acos(h);\n        if (b > g) {\n            h = TWOPI - h;\n        }\n        h /= TWOPI;\n    }\n    return [h * 360, s, i];\n};\n\nexport default rgb2hsi;\n","import { unpack, type } from '../../utils/index.js';\nimport chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport hsi2rgb from './hsi2rgb.js';\nimport rgb2hsi from './rgb2hsi.js';\n\nColor.prototype.hsi = function () {\n    return rgb2hsi(this._rgb);\n};\n\nconst hsi = (...args) => new Color(...args, 'hsi');\nchroma.hsi = hsi;\n\ninput.format.hsi = hsi2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'hsi');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'hsi';\n        }\n    }\n});\n\nexport { hsi };\n","import '../io/hsi/index.js';\nimport interpolate_hsx from './_hsx.js';\nimport index from './index.js';\n\nconst hsi = (col1, col2, f) => {\n    return interpolate_hsx(col1, col2, f, 'hsi');\n};\n\n// register interpolator\nindex.hsi = hsi;\n\nexport default hsi;\n","import { unpack } from '../../utils/index.js';\n\nconst hsl2rgb = (...args) => {\n    args = unpack(args, 'hsl');\n    const [h, s, l] = args;\n    let r, g, b;\n    if (s === 0) {\n        r = g = b = l * 255;\n    } else {\n        const t3 = [0, 0, 0];\n        const c = [0, 0, 0];\n        const t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const t1 = 2 * l - t2;\n        const h_ = h / 360;\n        t3[0] = h_ + 1 / 3;\n        t3[1] = h_;\n        t3[2] = h_ - 1 / 3;\n        for (let i = 0; i < 3; i++) {\n            if (t3[i] < 0) t3[i] += 1;\n            if (t3[i] > 1) t3[i] -= 1;\n            if (6 * t3[i] < 1) c[i] = t1 + (t2 - t1) * 6 * t3[i];\n            else if (2 * t3[i] < 1) c[i] = t2;\n            else if (3 * t3[i] < 2) c[i] = t1 + (t2 - t1) * (2 / 3 - t3[i]) * 6;\n            else c[i] = t1;\n        }\n        [r, g, b] = [c[0] * 255, c[1] * 255, c[2] * 255];\n    }\n    if (args.length > 3) {\n        // keep alpha channel\n        return [r, g, b, args[3]];\n    }\n    return [r, g, b, 1];\n};\n\nexport default hsl2rgb;\n","import { unpack, min, max } from '../../utils/index.js';\n\n/*\n * supported arguments:\n * - rgb2hsl(r,g,b)\n * - rgb2hsl(r,g,b,a)\n * - rgb2hsl([r,g,b])\n * - rgb2hsl([r,g,b,a])\n * - rgb2hsl({r,g,b,a})\n */\nconst rgb2hsl = (...args) => {\n    args = unpack(args, 'rgba');\n    let [r, g, b] = args;\n\n    r /= 255;\n    g /= 255;\n    b /= 255;\n\n    const minRgb = min(r, g, b);\n    const maxRgb = max(r, g, b);\n\n    const l = (maxRgb + minRgb) / 2;\n    let s, h;\n\n    if (maxRgb === minRgb) {\n        s = 0;\n        h = Number.NaN;\n    } else {\n        s =\n            l < 0.5\n                ? (maxRgb - minRgb) / (maxRgb + minRgb)\n                : (maxRgb - minRgb) / (2 - maxRgb - minRgb);\n    }\n\n    if (r == maxRgb) h = (g - b) / (maxRgb - minRgb);\n    else if (g == maxRgb) h = 2 + (b - r) / (maxRgb - minRgb);\n    else if (b == maxRgb) h = 4 + (r - g) / (maxRgb - minRgb);\n\n    h *= 60;\n    if (h < 0) h += 360;\n    if (args.length > 3 && args[3] !== undefined) return [h, s, l, args[3]];\n    return [h, s, l];\n};\n\nexport default rgb2hsl;\n","import { unpack, type } from '../../utils/index.js';\nimport chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport hsl2rgb from './hsl2rgb.js';\nimport rgb2hsl from './rgb2hsl.js';\n\nColor.prototype.hsl = function () {\n    return rgb2hsl(this._rgb);\n};\n\nconst hsl = (...args) => new Color(...args, 'hsl');\nchroma.hsl = hsl;\n\ninput.format.hsl = hsl2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'hsl');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'hsl';\n        }\n    }\n});\n\nexport { hsl };\n","import '../io/hsl/index.js';\nimport interpolate_hsx from './_hsx.js';\nimport index from './index.js';\n\nconst hsl = (col1, col2, f) => {\n    return interpolate_hsx(col1, col2, f, 'hsl');\n};\n\n// register interpolator\nindex.hsl = hsl;\n\nexport default hsl;\n","import { unpack } from '../../utils/index.js';\nconst { floor } = Math;\n\nconst hsv2rgb = (...args) => {\n    args = unpack(args, 'hsv');\n    let [h, s, v] = args;\n    let r, g, b;\n    v *= 255;\n    if (s === 0) {\n        r = g = b = v;\n    } else {\n        if (h === 360) h = 0;\n        if (h > 360) h -= 360;\n        if (h < 0) h += 360;\n        h /= 60;\n\n        const i = floor(h);\n        const f = h - i;\n        const p = v * (1 - s);\n        const q = v * (1 - s * f);\n        const t = v * (1 - s * (1 - f));\n\n        switch (i) {\n            case 0:\n                [r, g, b] = [v, t, p];\n                break;\n            case 1:\n                [r, g, b] = [q, v, p];\n                break;\n            case 2:\n                [r, g, b] = [p, v, t];\n                break;\n            case 3:\n                [r, g, b] = [p, q, v];\n                break;\n            case 4:\n                [r, g, b] = [t, p, v];\n                break;\n            case 5:\n                [r, g, b] = [v, p, q];\n                break;\n        }\n    }\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n};\n\nexport default hsv2rgb;\n","import { unpack } from '../../utils/index.js';\nconst { min, max } = Math;\n\n/*\n * supported arguments:\n * - rgb2hsv(r,g,b)\n * - rgb2hsv([r,g,b])\n * - rgb2hsv({r,g,b})\n */\nconst rgb2hsl = (...args) => {\n    args = unpack(args, 'rgb');\n    let [r, g, b] = args;\n    const min_ = min(r, g, b);\n    const max_ = max(r, g, b);\n    const delta = max_ - min_;\n    let h, s, v;\n    v = max_ / 255.0;\n    if (max_ === 0) {\n        h = Number.NaN;\n        s = 0;\n    } else {\n        s = delta / max_;\n        if (r === max_) h = (g - b) / delta;\n        if (g === max_) h = 2 + (b - r) / delta;\n        if (b === max_) h = 4 + (r - g) / delta;\n        h *= 60;\n        if (h < 0) h += 360;\n    }\n    return [h, s, v];\n};\n\nexport default rgb2hsl;\n","import { unpack, type } from '../../utils/index.js';\nimport chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport hsv2rgb from './hsv2rgb.js';\nimport rgb2hsv from './rgb2hsv.js';\n\nColor.prototype.hsv = function () {\n    return rgb2hsv(this._rgb);\n};\n\nconst hsv = (...args) => new Color(...args, 'hsv');\nchroma.hsv = hsv;\n\ninput.format.hsv = hsv2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'hsv');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'hsv';\n        }\n    }\n});\n\nexport { hsv };\n","import '../io/hsv/index.js';\nimport interpolate_hsx from './_hsx.js';\nimport index from './index.js';\n\nconst hsv = (col1, col2, f) => {\n    return interpolate_hsx(col1, col2, f, 'hsv');\n};\n\n// register interpolator\nindex.hsv = hsv;\n\nexport default hsv;\n","// from https://www.w3.org/TR/css-color-4/multiply-matrices.js\nexport default function multiplyMatrices(A, B) {\n    let m = A.length;\n\n    if (!Array.isArray(A[0])) {\n        // A is vector, convert to [[a, b, c, ...]]\n        A = [A];\n    }\n\n    if (!Array.isArray(B[0])) {\n        // B is vector, convert to [[a], [b], [c], ...]]\n        B = B.map((x) => [x]);\n    }\n\n    let p = B[0].length;\n    let B_cols = B[0].map((_, i) => B.map((x) => x[i])); // transpose B\n    let product = A.map((row) =>\n        B_cols.map((col) => {\n            if (!Array.isArray(row)) {\n                return col.reduce((a, c) => a + c * row, 0);\n            }\n\n            return row.reduce((a, c, i) => a + c * (col[i] || 0), 0);\n        })\n    );\n\n    if (m === 1) {\n        product = product[0]; // Avoid [[a, b, c, ...]]\n    }\n\n    if (p === 1) {\n        return product.map((x) => x[0]); // Avoid [[a], [b], [c], ...]]\n    }\n\n    return product;\n}\n","import { unpack } from '../../utils/index.js';\nimport multiplyMatrices from '../../utils/multiply-matrices.js';\nimport { xyz2rgb } from '../lab/lab2rgb.js';\n\nconst oklab2rgb = (...args) => {\n    args = unpack(args, 'lab');\n    const [L, a, b, ...rest] = args;\n    const [X, Y, Z] = OKLab_to_XYZ([L, a, b]);\n    const [r, g, b_] = xyz2rgb(X, Y, Z);\n    return [r, g, b_, ...(rest.length > 0 && rest[0] < 1 ? [rest[0]] : [])];\n};\n\n// from https://www.w3.org/TR/css-color-4/#color-conversion-code\nfunction OKLab_to_XYZ(OKLab) {\n    // Given OKLab, convert to XYZ relative to D65\n    var LMStoXYZ = [\n        [1.2268798758459243, -0.5578149944602171, 0.2813910456659647],\n        [-0.0405757452148008, 1.112286803280317, -0.0717110580655164],\n        [-0.0763729366746601, -0.4214933324022432, 1.5869240198367816]\n    ];\n    var OKLabtoLMS = [\n        [1.0, 0.3963377773761749, 0.2158037573099136],\n        [1.0, -0.1055613458156586, -0.0638541728258133],\n        [1.0, -0.0894841775298119, -1.2914855480194092]\n    ];\n\n    var LMSnl = multiplyMatrices(OKLabtoLMS, OKLab);\n    return multiplyMatrices(\n        LMStoXYZ,\n        LMSnl.map((c) => c ** 3)\n    );\n}\n\nexport default oklab2rgb;\n","import { unpack } from '../../utils/index.js';\nimport multiplyMatrices from '../../utils/multiply-matrices.js';\nimport { rgb2xyz } from '../lab/rgb2lab.js';\n\nconst rgb2oklab = (...args) => {\n    const [r, g, b, ...rest] = unpack(args, 'rgb');\n    const xyz = rgb2xyz(r, g, b);\n    const oklab = XYZ_to_OKLab(xyz);\n    return [...oklab, ...(rest.length > 0 && rest[0] < 1 ? [rest[0]] : [])];\n};\n\n// from https://www.w3.org/TR/css-color-4/#color-conversion-code\nfunction XYZ_to_OKLab(XYZ) {\n    // Given XYZ relative to D65, convert to OKLab\n    const XYZtoLMS = [\n        [0.819022437996703, 0.3619062600528904, -0.1288737815209879],\n        [0.0329836539323885, 0.9292868615863434, 0.0361446663506424],\n        [0.0481771893596242, 0.2642395317527308, 0.6335478284694309]\n    ];\n    const LMStoOKLab = [\n        [0.210454268309314, 0.7936177747023054, -0.0040720430116193],\n        [1.9779985324311684, -2.4285922420485799, 0.450593709617411],\n        [0.0259040424655478, 0.7827717124575296, -0.8086757549230774]\n    ];\n\n    const LMS = multiplyMatrices(XYZtoLMS, XYZ);\n    // JavaScript Math.cbrt returns a sign-matched cube root\n    // beware if porting to other languages\n    // especially if tempted to use a general power function\n    return multiplyMatrices(\n        LMStoOKLab,\n        LMS.map((c) => Math.cbrt(c))\n    );\n    // L in range [0,1]. For use in CSS, multiply by 100 and add a percent\n}\n\nexport default rgb2oklab;\n","import { unpack, type } from '../../utils/index.js';\nimport chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport oklab2rgb from './oklab2rgb.js';\nimport rgb2oklab from './rgb2oklab.js';\n\nColor.prototype.oklab = function () {\n    return rgb2oklab(this._rgb);\n};\n\nconst oklab = (...args) => new Color(...args, 'oklab');\nObject.assign(chroma, { oklab });\n\ninput.format.oklab = oklab2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'oklab');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'oklab';\n        }\n    }\n});\n\nexport { oklab };\n","import '../io/oklab/index.js';\nimport index from './index.js';\nimport Color from '../Color.js';\n\nconst oklab = (col1, col2, f) => {\n    const xyz0 = col1.oklab();\n    const xyz1 = col2.oklab();\n    return new Color(\n        xyz0[0] + f * (xyz1[0] - xyz0[0]),\n        xyz0[1] + f * (xyz1[1] - xyz0[1]),\n        xyz0[2] + f * (xyz1[2] - xyz0[2]),\n        'oklab'\n    );\n};\n\n// register interpolator\nindex.oklab = oklab;\n\nexport default oklab;\n","import '../io/lch/index.js';\nimport interpolate_hsx from './_hsx.js';\nimport index from './index.js';\n\nconst oklch = (col1, col2, f) => {\n    return interpolate_hsx(col1, col2, f, 'oklch');\n};\n\n// register interpolator\nindex.oklch = oklch;\n\nexport default oklch;\n","import Color from '../Color.js';\nimport { clip_rgb } from '../utils/index.js';\n\nconst { pow, sqrt, PI, cos, sin, atan2 } = Math;\n\nexport default (colors, mode = 'lrgb', weights = null) => {\n    const l = colors.length;\n    if (!weights) weights = Array.from(new Array(l)).map(() => 1);\n    // normalize weights\n    const k =\n        l /\n        weights.reduce(function (a, b) {\n            return a + b;\n        });\n    weights.forEach((w, i) => {\n        weights[i] *= k;\n    });\n    // convert colors to Color objects\n    colors = colors.map((c) => new Color(c));\n    if (mode === 'lrgb') {\n        return _average_lrgb(colors, weights);\n    }\n    const first = colors.shift();\n    const xyz = first.get(mode);\n    const cnt = [];\n    let dx = 0;\n    let dy = 0;\n    // initial color\n    for (let i = 0; i < xyz.length; i++) {\n        xyz[i] = (xyz[i] || 0) * weights[0];\n        cnt.push(isNaN(xyz[i]) ? 0 : weights[0]);\n        if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {\n            const A = (xyz[i] / 180) * PI;\n            dx += cos(A) * weights[0];\n            dy += sin(A) * weights[0];\n        }\n    }\n\n    let alpha = first.alpha() * weights[0];\n    colors.forEach((c, ci) => {\n        const xyz2 = c.get(mode);\n        alpha += c.alpha() * weights[ci + 1];\n        for (let i = 0; i < xyz.length; i++) {\n            if (!isNaN(xyz2[i])) {\n                cnt[i] += weights[ci + 1];\n                if (mode.charAt(i) === 'h') {\n                    const A = (xyz2[i] / 180) * PI;\n                    dx += cos(A) * weights[ci + 1];\n                    dy += sin(A) * weights[ci + 1];\n                } else {\n                    xyz[i] += xyz2[i] * weights[ci + 1];\n                }\n            }\n        }\n    });\n\n    for (let i = 0; i < xyz.length; i++) {\n        if (mode.charAt(i) === 'h') {\n            let A = (atan2(dy / cnt[i], dx / cnt[i]) / PI) * 180;\n            while (A < 0) A += 360;\n            while (A >= 360) A -= 360;\n            xyz[i] = A;\n        } else {\n            xyz[i] = xyz[i] / cnt[i];\n        }\n    }\n    alpha /= l;\n    return new Color(xyz, mode).alpha(alpha > 0.99999 ? 1 : alpha, true);\n};\n\nconst _average_lrgb = (colors, weights) => {\n    const l = colors.length;\n    const xyz = [0, 0, 0, 0];\n    for (let i = 0; i < colors.length; i++) {\n        const col = colors[i];\n        const f = weights[i] / l;\n        const rgb = col._rgb;\n        xyz[0] += pow(rgb[0], 2) * f;\n        xyz[1] += pow(rgb[1], 2) * f;\n        xyz[2] += pow(rgb[2], 2) * f;\n        xyz[3] += rgb[3] * f;\n    }\n    xyz[0] = sqrt(xyz[0]);\n    xyz[1] = sqrt(xyz[1]);\n    xyz[2] = sqrt(xyz[2]);\n    if (xyz[3] > 0.9999999) xyz[3] = 1;\n    return new Color(clip_rgb(xyz));\n};\n","// minimal multi-purpose interface\n\n// @requires utils color analyze\nimport chroma from '../chroma.js';\nimport { limit, type } from '../utils/index.js';\n\nconst { pow } = Math;\n\nexport default function (colors) {\n    // constructor\n    let _mode = 'rgb';\n    let _nacol = chroma('#ccc');\n    let _spread = 0;\n    // const _fixed = false;\n    let _domain = [0, 1];\n    let _pos = [];\n    let _padding = [0, 0];\n    let _classes = false;\n    let _colors = [];\n    let _out = false;\n    let _min = 0;\n    let _max = 1;\n    let _correctLightness = false;\n    let _colorCache = {};\n    let _useCache = true;\n    let _gamma = 1;\n\n    // private methods\n\n    const setColors = function (colors) {\n        colors = colors || ['#fff', '#000'];\n        if (\n            colors &&\n            type(colors) === 'string' &&\n            chroma.brewer &&\n            chroma.brewer[colors.toLowerCase()]\n        ) {\n            colors = chroma.brewer[colors.toLowerCase()];\n        }\n        if (type(colors) === 'array') {\n            // handle single color\n            if (colors.length === 1) {\n                colors = [colors[0], colors[0]];\n            }\n            // make a copy of the colors\n            colors = colors.slice(0);\n            // convert to chroma classes\n            for (let c = 0; c < colors.length; c++) {\n                colors[c] = chroma(colors[c]);\n            }\n            // auto-fill color position\n            _pos.length = 0;\n            for (let c = 0; c < colors.length; c++) {\n                _pos.push(c / (colors.length - 1));\n            }\n        }\n        resetCache();\n        return (_colors = colors);\n    };\n\n    const getClass = function (value) {\n        if (_classes != null) {\n            const n = _classes.length - 1;\n            let i = 0;\n            while (i < n && value >= _classes[i]) {\n                i++;\n            }\n            return i - 1;\n        }\n        return 0;\n    };\n\n    let tMapLightness = (t) => t;\n    let tMapDomain = (t) => t;\n\n    // const classifyValue = function(value) {\n    //     let val = value;\n    //     if (_classes.length > 2) {\n    //         const n = _classes.length-1;\n    //         const i = getClass(value);\n    //         const minc = _classes[0] + ((_classes[1]-_classes[0]) * (0 + (_spread * 0.5)));  // center of 1st class\n    //         const maxc = _classes[n-1] + ((_classes[n]-_classes[n-1]) * (1 - (_spread * 0.5)));  // center of last class\n    //         val = _min + ((((_classes[i] + ((_classes[i+1] - _classes[i]) * 0.5)) - minc) / (maxc-minc)) * (_max - _min));\n    //     }\n    //     return val;\n    // };\n\n    const getColor = function (val, bypassMap) {\n        let col, t;\n        if (bypassMap == null) {\n            bypassMap = false;\n        }\n        if (isNaN(val) || val === null) {\n            return _nacol;\n        }\n        if (!bypassMap) {\n            if (_classes && _classes.length > 2) {\n                // find the class\n                const c = getClass(val);\n                t = c / (_classes.length - 2);\n            } else if (_max !== _min) {\n                // just interpolate between min/max\n                t = (val - _min) / (_max - _min);\n            } else {\n                t = 1;\n            }\n        } else {\n            t = val;\n        }\n\n        // domain map\n        t = tMapDomain(t);\n\n        if (!bypassMap) {\n            t = tMapLightness(t); // lightness correction\n        }\n\n        if (_gamma !== 1) {\n            t = pow(t, _gamma);\n        }\n\n        t = _padding[0] + t * (1 - _padding[0] - _padding[1]);\n\n        t = limit(t, 0, 1);\n\n        const k = Math.floor(t * 10000);\n\n        if (_useCache && _colorCache[k]) {\n            col = _colorCache[k];\n        } else {\n            if (type(_colors) === 'array') {\n                //for i in [0.._pos.length-1]\n                for (let i = 0; i < _pos.length; i++) {\n                    const p = _pos[i];\n                    if (t <= p) {\n                        col = _colors[i];\n                        break;\n                    }\n                    if (t >= p && i === _pos.length - 1) {\n                        col = _colors[i];\n                        break;\n                    }\n                    if (t > p && t < _pos[i + 1]) {\n                        t = (t - p) / (_pos[i + 1] - p);\n                        col = chroma.interpolate(\n                            _colors[i],\n                            _colors[i + 1],\n                            t,\n                            _mode\n                        );\n                        break;\n                    }\n                }\n            } else if (type(_colors) === 'function') {\n                col = _colors(t);\n            }\n            if (_useCache) {\n                _colorCache[k] = col;\n            }\n        }\n        return col;\n    };\n\n    var resetCache = () => (_colorCache = {});\n\n    setColors(colors);\n\n    // public interface\n\n    const f = function (v) {\n        const c = chroma(getColor(v));\n        if (_out && c[_out]) {\n            return c[_out]();\n        } else {\n            return c;\n        }\n    };\n\n    f.classes = function (classes) {\n        if (classes != null) {\n            if (type(classes) === 'array') {\n                _classes = classes;\n                _domain = [classes[0], classes[classes.length - 1]];\n            } else {\n                const d = chroma.analyze(_domain);\n                if (classes === 0) {\n                    _classes = [d.min, d.max];\n                } else {\n                    _classes = chroma.limits(d, 'e', classes);\n                }\n            }\n            return f;\n        }\n        return _classes;\n    };\n\n    f.domain = function (domain) {\n        if (!arguments.length) {\n            return _domain;\n        }\n        _min = domain[0];\n        _max = domain[domain.length - 1];\n        _pos = [];\n        const k = _colors.length;\n        if (domain.length === k && _min !== _max) {\n            // update positions\n            for (let d of Array.from(domain)) {\n                _pos.push((d - _min) / (_max - _min));\n            }\n        } else {\n            for (let c = 0; c < k; c++) {\n                _pos.push(c / (k - 1));\n            }\n            if (domain.length > 2) {\n                // set domain map\n                const tOut = domain.map((d, i) => i / (domain.length - 1));\n                const tBreaks = domain.map((d) => (d - _min) / (_max - _min));\n                if (!tBreaks.every((val, i) => tOut[i] === val)) {\n                    tMapDomain = (t) => {\n                        if (t <= 0 || t >= 1) return t;\n                        let i = 0;\n                        while (t >= tBreaks[i + 1]) i++;\n                        const f =\n                            (t - tBreaks[i]) / (tBreaks[i + 1] - tBreaks[i]);\n                        const out = tOut[i] + f * (tOut[i + 1] - tOut[i]);\n                        return out;\n                    };\n                }\n            }\n        }\n        _domain = [_min, _max];\n        return f;\n    };\n\n    f.mode = function (_m) {\n        if (!arguments.length) {\n            return _mode;\n        }\n        _mode = _m;\n        resetCache();\n        return f;\n    };\n\n    f.range = function (colors, _pos) {\n        setColors(colors, _pos);\n        return f;\n    };\n\n    f.out = function (_o) {\n        _out = _o;\n        return f;\n    };\n\n    f.spread = function (val) {\n        if (!arguments.length) {\n            return _spread;\n        }\n        _spread = val;\n        return f;\n    };\n\n    f.correctLightness = function (v) {\n        if (v == null) {\n            v = true;\n        }\n        _correctLightness = v;\n        resetCache();\n        if (_correctLightness) {\n            tMapLightness = function (t) {\n                const L0 = getColor(0, true).lab()[0];\n                const L1 = getColor(1, true).lab()[0];\n                const pol = L0 > L1;\n                let L_actual = getColor(t, true).lab()[0];\n                const L_ideal = L0 + (L1 - L0) * t;\n                let L_diff = L_actual - L_ideal;\n                let t0 = 0;\n                let t1 = 1;\n                let max_iter = 20;\n                while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {\n                    (function () {\n                        if (pol) {\n                            L_diff *= -1;\n                        }\n                        if (L_diff < 0) {\n                            t0 = t;\n                            t += (t1 - t) * 0.5;\n                        } else {\n                            t1 = t;\n                            t += (t0 - t) * 0.5;\n                        }\n                        L_actual = getColor(t, true).lab()[0];\n                        return (L_diff = L_actual - L_ideal);\n                    })();\n                }\n                return t;\n            };\n        } else {\n            tMapLightness = (t) => t;\n        }\n        return f;\n    };\n\n    f.padding = function (p) {\n        if (p != null) {\n            if (type(p) === 'number') {\n                p = [p, p];\n            }\n            _padding = p;\n            return f;\n        } else {\n            return _padding;\n        }\n    };\n\n    f.colors = function (numColors, out) {\n        // If no arguments are given, return the original colors that were provided\n        if (arguments.length < 2) {\n            out = 'hex';\n        }\n        let result = [];\n\n        if (arguments.length === 0) {\n            result = _colors.slice(0);\n        } else if (numColors === 1) {\n            result = [f(0.5)];\n        } else if (numColors > 1) {\n            const dm = _domain[0];\n            const dd = _domain[1] - dm;\n            result = __range__(0, numColors, false).map((i) =>\n                f(dm + (i / (numColors - 1)) * dd)\n            );\n        } else {\n            // returns all colors based on the defined classes\n            colors = [];\n            let samples = [];\n            if (_classes && _classes.length > 2) {\n                for (\n                    let i = 1, end = _classes.length, asc = 1 <= end;\n                    asc ? i < end : i > end;\n                    asc ? i++ : i--\n                ) {\n                    samples.push((_classes[i - 1] + _classes[i]) * 0.5);\n                }\n            } else {\n                samples = _domain;\n            }\n            result = samples.map((v) => f(v));\n        }\n\n        if (chroma[out]) {\n            result = result.map((c) => c[out]());\n        }\n        return result;\n    };\n\n    f.cache = function (c) {\n        if (c != null) {\n            _useCache = c;\n            return f;\n        } else {\n            return _useCache;\n        }\n    };\n\n    f.gamma = function (g) {\n        if (g != null) {\n            _gamma = g;\n            return f;\n        } else {\n            return _gamma;\n        }\n    };\n\n    f.nodata = function (d) {\n        if (d != null) {\n            _nacol = chroma(d);\n            return f;\n        } else {\n            return _nacol;\n        }\n    };\n\n    return f;\n}\n\nfunction __range__(left, right, inclusive) {\n    let range = [];\n    let ascending = left < right;\n    let end = !inclusive ? right : ascending ? right + 1 : right - 1;\n    for (let i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {\n        range.push(i);\n    }\n    return range;\n}\n","//\n// interpolates between a set of colors uzing a bezier spline\n//\n\n// @requires utils lab\nimport Color from '../Color.js';\nimport '../io/lab/index.js';\nimport scale from './scale.js';\n\n// nth row of the pascal triangle\nconst binom_row = function (n) {\n    let row = [1, 1];\n    for (let i = 1; i < n; i++) {\n        let newrow = [1];\n        for (let j = 1; j <= row.length; j++) {\n            newrow[j] = (row[j] || 0) + row[j - 1];\n        }\n        row = newrow;\n    }\n    return row;\n};\n\nconst bezier = function (colors) {\n    let I, lab0, lab1, lab2;\n    colors = colors.map((c) => new Color(c));\n    if (colors.length === 2) {\n        // linear interpolation\n        [lab0, lab1] = colors.map((c) => c.lab());\n        I = function (t) {\n            const lab = [0, 1, 2].map((i) => lab0[i] + t * (lab1[i] - lab0[i]));\n            return new Color(lab, 'lab');\n        };\n    } else if (colors.length === 3) {\n        // quadratic bezier interpolation\n        [lab0, lab1, lab2] = colors.map((c) => c.lab());\n        I = function (t) {\n            const lab = [0, 1, 2].map(\n                (i) =>\n                    (1 - t) * (1 - t) * lab0[i] +\n                    2 * (1 - t) * t * lab1[i] +\n                    t * t * lab2[i]\n            );\n            return new Color(lab, 'lab');\n        };\n    } else if (colors.length === 4) {\n        // cubic bezier interpolation\n        let lab3;\n        [lab0, lab1, lab2, lab3] = colors.map((c) => c.lab());\n        I = function (t) {\n            const lab = [0, 1, 2].map(\n                (i) =>\n                    (1 - t) * (1 - t) * (1 - t) * lab0[i] +\n                    3 * (1 - t) * (1 - t) * t * lab1[i] +\n                    3 * (1 - t) * t * t * lab2[i] +\n                    t * t * t * lab3[i]\n            );\n            return new Color(lab, 'lab');\n        };\n    } else if (colors.length >= 5) {\n        // general case (degree n bezier)\n        let labs, row, n;\n        labs = colors.map((c) => c.lab());\n        n = colors.length - 1;\n        row = binom_row(n);\n        I = function (t) {\n            const u = 1 - t;\n            const lab = [0, 1, 2].map((i) =>\n                labs.reduce(\n                    (sum, el, j) =>\n                        sum + row[j] * u ** (n - j) * t ** j * el[i],\n                    0\n                )\n            );\n            return new Color(lab, 'lab');\n        };\n    } else {\n        throw new RangeError('No point in running bezier with only one color.');\n    }\n    return I;\n};\n\nexport default (colors) => {\n    const f = bezier(colors);\n    f.scale = () => scale(f);\n    return f;\n};\n","import chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport { unpack, type } from '../../utils/index.js';\nconst { round } = Math;\n\nColor.prototype.rgb = function (rnd = true) {\n    if (rnd === false) return this._rgb.slice(0, 3);\n    return this._rgb.slice(0, 3).map(round);\n};\n\nColor.prototype.rgba = function (rnd = true) {\n    return this._rgb.slice(0, 4).map((v, i) => {\n        return i < 3 ? (rnd === false ? v : round(v)) : v;\n    });\n};\n\nconst rgb = (...args) => new Color(...args, 'rgb');\nObject.assign(chroma, { rgb });\n\ninput.format.rgb = (...args) => {\n    const rgba = unpack(args, 'rgba');\n    if (rgba[3] === undefined) rgba[3] = 1;\n    return rgba;\n};\n\ninput.autodetect.push({\n    p: 3,\n    test: (...args) => {\n        args = unpack(args, 'rgba');\n        if (\n            type(args) === 'array' &&\n            (args.length === 3 ||\n                (args.length === 4 &&\n                    type(args[3]) == 'number' &&\n                    args[3] >= 0 &&\n                    args[3] <= 1))\n        ) {\n            return 'rgb';\n        }\n    }\n});\n\nexport { rgb };\n","/*\n * interpolates between a set of colors uzing a bezier spline\n * blend mode formulas taken from https://web.archive.org/web/20180110014946/http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/\n */\n\nimport '../io/rgb/index.js';\nimport chroma from '../chroma.js';\n\nconst blend = (bottom, top, mode) => {\n    if (!blend[mode]) {\n        throw new Error('unknown blend mode ' + mode);\n    }\n    return blend[mode](bottom, top);\n};\n\nconst blend_f = (f) => (bottom, top) => {\n    const c0 = chroma(top).rgb();\n    const c1 = chroma(bottom).rgb();\n    return chroma.rgb(f(c0, c1));\n};\n\nconst each = (f) => (c0, c1) => {\n    const out = [];\n    out[0] = f(c0[0], c1[0]);\n    out[1] = f(c0[1], c1[1]);\n    out[2] = f(c0[2], c1[2]);\n    return out;\n};\n\nconst normal = (a) => a;\nconst multiply = (a, b) => (a * b) / 255;\nconst darken = (a, b) => (a > b ? b : a);\nconst lighten = (a, b) => (a > b ? a : b);\nconst screen = (a, b) => 255 * (1 - (1 - a / 255) * (1 - b / 255));\nconst overlay = (a, b) =>\n    b < 128 ? (2 * a * b) / 255 : 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));\nconst burn = (a, b) => 255 * (1 - (1 - b / 255) / (a / 255));\nconst dodge = (a, b) => {\n    if (a === 255) return 255;\n    a = (255 * (b / 255)) / (1 - a / 255);\n    return a > 255 ? 255 : a;\n};\n\n// # add = (a,b) ->\n// #     if (a + b > 255) then 255 else a + b\n\nblend.normal = blend_f(each(normal));\nblend.multiply = blend_f(each(multiply));\nblend.screen = blend_f(each(screen));\nblend.overlay = blend_f(each(overlay));\nblend.darken = blend_f(each(darken));\nblend.lighten = blend_f(each(lighten));\nblend.dodge = blend_f(each(dodge));\nblend.burn = blend_f(each(burn));\n// blend.add = blend_f(each(add));\n\nexport default blend;\n","// cubehelix interpolation\n// based on D.A. Green \"A colour scheme for the display of astronomical intensity images\"\n// http://astron-soc.in/bulletin/11June/289392011.pdf\nimport { type, clip_rgb, TWOPI } from '../utils/index.js';\nimport chroma from '../chroma.js';\nconst { pow, sin, cos } = Math;\n\nexport default function (\n    start = 300,\n    rotations = -1.5,\n    hue = 1,\n    gamma = 1,\n    lightness = [0, 1]\n) {\n    let dh = 0,\n        dl;\n    if (type(lightness) === 'array') {\n        dl = lightness[1] - lightness[0];\n    } else {\n        dl = 0;\n        lightness = [lightness, lightness];\n    }\n    const f = function (fract) {\n        const a = TWOPI * ((start + 120) / 360 + rotations * fract);\n        const l = pow(lightness[0] + dl * fract, gamma);\n        const h = dh !== 0 ? hue[0] + fract * dh : hue;\n        const amp = (h * l * (1 - l)) / 2;\n        const cos_a = cos(a);\n        const sin_a = sin(a);\n        const r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);\n        const g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);\n        const b = l + amp * (+1.97294 * cos_a);\n        return chroma(clip_rgb([r * 255, g * 255, b * 255, 1]));\n    };\n    f.start = function (s) {\n        if (s == null) {\n            return start;\n        }\n        start = s;\n        return f;\n    };\n    f.rotations = function (r) {\n        if (r == null) {\n            return rotations;\n        }\n        rotations = r;\n        return f;\n    };\n    f.gamma = function (g) {\n        if (g == null) {\n            return gamma;\n        }\n        gamma = g;\n        return f;\n    };\n    f.hue = function (h) {\n        if (h == null) {\n            return hue;\n        }\n        hue = h;\n        if (type(hue) === 'array') {\n            dh = hue[1] - hue[0];\n            if (dh === 0) {\n                hue = hue[1];\n            }\n        } else {\n            dh = 0;\n        }\n        return f;\n    };\n    f.lightness = function (h) {\n        if (h == null) {\n            return lightness;\n        }\n        if (type(h) === 'array') {\n            lightness = h;\n            dl = h[1] - h[0];\n        } else {\n            lightness = [h, h];\n            dl = 0;\n        }\n        return f;\n    };\n    f.scale = () => chroma.scale(f);\n    f.hue(hue);\n    return f;\n}\n","import Color from '../Color.js';\nconst digits = '0123456789abcdef';\n\nconst { floor, random } = Math;\n\nexport default () => {\n    let code = '#';\n    for (let i = 0; i < 6; i++) {\n        code += digits.charAt(floor(random() * 16));\n    }\n    return new Color(code, 'hex');\n};\n","import type from './type.js';\n\nconst { log, pow, floor, abs } = Math;\n\nexport function analyze(data, key = null) {\n    const r = {\n        min: Number.MAX_VALUE,\n        max: Number.MAX_VALUE * -1,\n        sum: 0,\n        values: [],\n        count: 0\n    };\n    if (type(data) === 'object') {\n        data = Object.values(data);\n    }\n    data.forEach((val) => {\n        if (key && type(val) === 'object') val = val[key];\n        if (val !== undefined && val !== null && !isNaN(val)) {\n            r.values.push(val);\n            r.sum += val;\n            if (val < r.min) r.min = val;\n            if (val > r.max) r.max = val;\n            r.count += 1;\n        }\n    });\n\n    r.domain = [r.min, r.max];\n\n    r.limits = (mode, num) => limits(r, mode, num);\n\n    return r;\n}\n\nexport function limits(data, mode = 'equal', num = 7) {\n    if (type(data) == 'array') {\n        data = analyze(data);\n    }\n    const { min, max } = data;\n    const values = data.values.sort((a, b) => a - b);\n\n    if (num === 1) {\n        return [min, max];\n    }\n\n    const limits = [];\n\n    if (mode.substr(0, 1) === 'c') {\n        // continuous\n        limits.push(min);\n        limits.push(max);\n    }\n\n    if (mode.substr(0, 1) === 'e') {\n        // equal interval\n        limits.push(min);\n        for (let i = 1; i < num; i++) {\n            limits.push(min + (i / num) * (max - min));\n        }\n        limits.push(max);\n    } else if (mode.substr(0, 1) === 'l') {\n        // log scale\n        if (min <= 0) {\n            throw new Error(\n                'Logarithmic scales are only possible for values > 0'\n            );\n        }\n        const min_log = Math.LOG10E * log(min);\n        const max_log = Math.LOG10E * log(max);\n        limits.push(min);\n        for (let i = 1; i < num; i++) {\n            limits.push(pow(10, min_log + (i / num) * (max_log - min_log)));\n        }\n        limits.push(max);\n    } else if (mode.substr(0, 1) === 'q') {\n        // quantile scale\n        limits.push(min);\n        for (let i = 1; i < num; i++) {\n            const p = ((values.length - 1) * i) / num;\n            const pb = floor(p);\n            if (pb === p) {\n                limits.push(values[pb]);\n            } else {\n                // p > pb\n                const pr = p - pb;\n                limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);\n            }\n        }\n        limits.push(max);\n    } else if (mode.substr(0, 1) === 'k') {\n        // k-means clustering\n        /*\n        implementation based on\n        http://code.google.com/p/figue/source/browse/trunk/figue.js#336\n        simplified for 1-d input values\n        */\n        let cluster;\n        const n = values.length;\n        const assignments = new Array(n);\n        const clusterSizes = new Array(num);\n        let repeat = true;\n        let nb_iters = 0;\n        let centroids = null;\n\n        // get seed values\n        centroids = [];\n        centroids.push(min);\n        for (let i = 1; i < num; i++) {\n            centroids.push(min + (i / num) * (max - min));\n        }\n        centroids.push(max);\n\n        while (repeat) {\n            // assignment step\n            for (let j = 0; j < num; j++) {\n                clusterSizes[j] = 0;\n            }\n            for (let i = 0; i < n; i++) {\n                const value = values[i];\n                let mindist = Number.MAX_VALUE;\n                let best;\n                for (let j = 0; j < num; j++) {\n                    const dist = abs(centroids[j] - value);\n                    if (dist < mindist) {\n                        mindist = dist;\n                        best = j;\n                    }\n                    clusterSizes[best]++;\n                    assignments[i] = best;\n                }\n            }\n\n            // update centroids step\n            const newCentroids = new Array(num);\n            for (let j = 0; j < num; j++) {\n                newCentroids[j] = null;\n            }\n            for (let i = 0; i < n; i++) {\n                cluster = assignments[i];\n                if (newCentroids[cluster] === null) {\n                    newCentroids[cluster] = values[i];\n                } else {\n                    newCentroids[cluster] += values[i];\n                }\n            }\n            for (let j = 0; j < num; j++) {\n                newCentroids[j] *= 1 / clusterSizes[j];\n            }\n\n            // check convergence\n            repeat = false;\n            for (let j = 0; j < num; j++) {\n                if (newCentroids[j] !== centroids[j]) {\n                    repeat = true;\n                    break;\n                }\n            }\n\n            centroids = newCentroids;\n            nb_iters++;\n\n            if (nb_iters > 200) {\n                repeat = false;\n            }\n        }\n\n        // finished k-means clustering\n        // the next part is borrowed from gabrielflor.it\n        const kClusters = {};\n        for (let j = 0; j < num; j++) {\n            kClusters[j] = [];\n        }\n        for (let i = 0; i < n; i++) {\n            cluster = assignments[i];\n            kClusters[cluster].push(values[i]);\n        }\n        let tmpKMeansBreaks = [];\n        for (let j = 0; j < num; j++) {\n            tmpKMeansBreaks.push(kClusters[j][0]);\n            tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);\n        }\n        tmpKMeansBreaks = tmpKMeansBreaks.sort((a, b) => a - b);\n        limits.push(tmpKMeansBreaks[0]);\n        for (let i = 1; i < tmpKMeansBreaks.length; i += 2) {\n            const v = tmpKMeansBreaks[i];\n            if (!isNaN(v) && limits.indexOf(v) === -1) {\n                limits.push(v);\n            }\n        }\n    }\n    return limits;\n}\n","import Color from '../Color.js';\nimport '../ops/luminance.js';\n\nexport default (a, b) => {\n    // WCAG contrast ratio\n    // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n    a = new Color(a);\n    b = new Color(b);\n    const l1 = a.luminance();\n    const l2 = b.luminance();\n    return l1 > l2 ? (l1 + 0.05) / (l2 + 0.05) : (l2 + 0.05) / (l1 + 0.05);\n};\n","import Color from '../Color.js';\nimport mix from '../generator/mix.js';\n\n/**\n * @license\n *\n * The APCA contrast prediction algorithm is based of the formulas published\n * in the APCA-1.0.98G specification by Myndex. The specification is available at:\n * https://raw.githubusercontent.com/Myndex/apca-w3/master/images/APCAw3_0.1.17_APCA0.0.98G.svg\n *\n * Note that the APCA implementation is still beta, so please update to\n * future versions of chroma.js when they become available.\n *\n * You can read more about the APCA Readability Criterion at\n * https://readtech.org/ARC/\n */\n\n// constants\nconst W_offset = 0.027;\nconst P_in = 0.0005;\nconst P_out = 0.1;\nconst R_scale = 1.14;\nconst B_threshold = 0.022;\nconst B_exp = 1.414;\n\nexport default (text, bg) => {\n    // parse input colors\n    text = new Color(text);\n    bg = new Color(bg);\n    // if text color has alpha, blend against background\n    if (text.alpha() < 1) {\n        text = mix(bg, text, text.alpha(), 'rgb');\n    }\n    const l_text = lum(...text.rgb());\n    const l_bg = lum(...bg.rgb());\n\n    // soft clamp black levels\n    const Y_text =\n        l_text >= B_threshold\n            ? l_text\n            : l_text + Math.pow(B_threshold - l_text, B_exp);\n    const Y_bg =\n        l_bg >= B_threshold ? l_bg : l_bg + Math.pow(B_threshold - l_bg, B_exp);\n\n    // normal polarity (dark text on light background)\n    const S_norm = Math.pow(Y_bg, 0.56) - Math.pow(Y_text, 0.57);\n    // reverse polarity (light text on dark background)\n    const S_rev = Math.pow(Y_bg, 0.65) - Math.pow(Y_text, 0.62);\n    // clamp noise then scale\n    const C =\n        Math.abs(Y_bg - Y_text) < P_in\n            ? 0\n            : Y_text < Y_bg\n              ? S_norm * R_scale\n              : S_rev * R_scale;\n    // clamp minimum contrast then offset\n    const S_apc = Math.abs(C) < P_out ? 0 : C > 0 ? C - W_offset : C + W_offset;\n    // scale to 100\n    return S_apc * 100;\n};\n\nfunction lum(r, g, b) {\n    return (\n        0.2126729 * Math.pow(r / 255, 2.4) +\n        0.7151522 * Math.pow(g / 255, 2.4) +\n        0.072175 * Math.pow(b / 255, 2.4)\n    );\n}\n","import Color from '../Color.js';\nconst { sqrt, pow, min, max, atan2, abs, cos, sin, exp, PI } = Math;\n\nexport default function (a, b, Kl = 1, Kc = 1, Kh = 1) {\n    // Delta E (CIE 2000)\n    // see http://www.brucelindbloom.com/index.html?Eqn_DeltaE_CIE2000.html\n    var rad2deg = function (rad) {\n        return (360 * rad) / (2 * PI);\n    };\n    var deg2rad = function (deg) {\n        return (2 * PI * deg) / 360;\n    };\n    a = new Color(a);\n    b = new Color(b);\n    const [L1, a1, b1] = Array.from(a.lab());\n    const [L2, a2, b2] = Array.from(b.lab());\n    const avgL = (L1 + L2) / 2;\n    const C1 = sqrt(pow(a1, 2) + pow(b1, 2));\n    const C2 = sqrt(pow(a2, 2) + pow(b2, 2));\n    const avgC = (C1 + C2) / 2;\n    const G = 0.5 * (1 - sqrt(pow(avgC, 7) / (pow(avgC, 7) + pow(25, 7))));\n    const a1p = a1 * (1 + G);\n    const a2p = a2 * (1 + G);\n    const C1p = sqrt(pow(a1p, 2) + pow(b1, 2));\n    const C2p = sqrt(pow(a2p, 2) + pow(b2, 2));\n    const avgCp = (C1p + C2p) / 2;\n    const arctan1 = rad2deg(atan2(b1, a1p));\n    const arctan2 = rad2deg(atan2(b2, a2p));\n    const h1p = arctan1 >= 0 ? arctan1 : arctan1 + 360;\n    const h2p = arctan2 >= 0 ? arctan2 : arctan2 + 360;\n    const avgHp =\n        abs(h1p - h2p) > 180 ? (h1p + h2p + 360) / 2 : (h1p + h2p) / 2;\n    const T =\n        1 -\n        0.17 * cos(deg2rad(avgHp - 30)) +\n        0.24 * cos(deg2rad(2 * avgHp)) +\n        0.32 * cos(deg2rad(3 * avgHp + 6)) -\n        0.2 * cos(deg2rad(4 * avgHp - 63));\n    let deltaHp = h2p - h1p;\n    deltaHp =\n        abs(deltaHp) <= 180\n            ? deltaHp\n            : h2p <= h1p\n              ? deltaHp + 360\n              : deltaHp - 360;\n    deltaHp = 2 * sqrt(C1p * C2p) * sin(deg2rad(deltaHp) / 2);\n    const deltaL = L2 - L1;\n    const deltaCp = C2p - C1p;\n    const sl = 1 + (0.015 * pow(avgL - 50, 2)) / sqrt(20 + pow(avgL - 50, 2));\n    const sc = 1 + 0.045 * avgCp;\n    const sh = 1 + 0.015 * avgCp * T;\n    const deltaTheta = 30 * exp(-pow((avgHp - 275) / 25, 2));\n    const Rc = 2 * sqrt(pow(avgCp, 7) / (pow(avgCp, 7) + pow(25, 7)));\n    const Rt = -Rc * sin(2 * deg2rad(deltaTheta));\n    const result = sqrt(\n        pow(deltaL / (Kl * sl), 2) +\n            pow(deltaCp / (Kc * sc), 2) +\n            pow(deltaHp / (Kh * sh), 2) +\n            Rt * (deltaCp / (Kc * sc)) * (deltaHp / (Kh * sh))\n    );\n    return max(0, min(100, result));\n}\n","import Color from '../Color.js';\n\nexport default (...args) => {\n    try {\n        new Color(...args);\n        return true;\n        // eslint-disable-next-line\n    } catch (e) {\n        return false;\n    }\n};\n","// some pre-defined color scales:\nimport chroma from '../chroma.js';\nimport '../io/hsl/index.js';\nimport scale from '../generator/scale.js';\n\nexport default {\n    cool() {\n        return scale([chroma.hsl(180, 1, 0.9), chroma.hsl(250, 0.7, 0.4)]);\n    },\n    hot() {\n        return scale(['#000', '#f00', '#ff0', '#fff'], [0, 0.25, 0.75, 1]).mode(\n            'rgb'\n        );\n    }\n};\n","/**\n    ColorBrewer colors for chroma.js\n\n    Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The\n    Pennsylvania State University.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software distributed\n    under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n    CONDITIONS OF ANY KIND, either express or implied. See the License for the\n    specific language governing permissions and limitations under the License.\n*/\n\nconst colorbrewer = {\n    // sequential\n    OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],\n    PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],\n    BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],\n    Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],\n    BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],\n    YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],\n    YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],\n    Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],\n    RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],\n    Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],\n    YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],\n    Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],\n    GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],\n    Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],\n    YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],\n    PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],\n    Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],\n    PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],\n    Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],\n\n    // diverging\n    Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],\n    RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],\n    RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],\n    PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],\n    PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],\n    RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],\n    BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],\n    RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],\n    PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],\n\n    // qualitative\n    Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],\n    Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],\n    Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],\n    Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],\n    Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],\n    Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],\n    Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],\n    Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']\n};\n\nconst colorbrewerTypes = Object.keys(colorbrewer);\nconst typeMap = new Map(colorbrewerTypes.map((key) => [key.toLowerCase(), key]));\n\n// use Proxy to allow case-insensitive access to palettes\nconst colorbrewerProxy =\n    typeof Proxy === 'function'\n        ? new Proxy(colorbrewer, {\n              get(target, prop) {\n                  const lower = prop.toLowerCase();\n                  if (typeMap.has(lower)) {\n                      return target[typeMap.get(lower)];\n                  }\n              },\n              getOwnPropertyNames() {\n                  return Object.getOwnPropertyNames(colorbrewerTypes);\n              }\n          })\n        : colorbrewer;\n\nexport default colorbrewerProxy;\n","import { unpack } from '../../utils/index.js';\n\nconst cmyk2rgb = (...args) => {\n    args = unpack(args, 'cmyk');\n    const [c, m, y, k] = args;\n    const alpha = args.length > 4 ? args[4] : 1;\n    if (k === 1) return [0, 0, 0, alpha];\n    return [\n        c >= 1 ? 0 : 255 * (1 - c) * (1 - k), // r\n        m >= 1 ? 0 : 255 * (1 - m) * (1 - k), // g\n        y >= 1 ? 0 : 255 * (1 - y) * (1 - k), // b\n        alpha\n    ];\n};\n\nexport default cmyk2rgb;\n","import { unpack } from '../../utils/index.js';\nconst { max } = Math;\n\nconst rgb2cmyk = (...args) => {\n    let [r, g, b] = unpack(args, 'rgb');\n    r = r / 255;\n    g = g / 255;\n    b = b / 255;\n    const k = 1 - max(r, max(g, b));\n    const f = k < 1 ? 1 / (1 - k) : 0;\n    const c = (1 - r - k) * f;\n    const m = (1 - g - k) * f;\n    const y = (1 - b - k) * f;\n    return [c, m, y, k];\n};\n\nexport default rgb2cmyk;\n","import chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport { unpack, type } from '../../utils/index.js';\nimport cmyk2rgb from './cmyk2rgb.js';\nimport rgb2cmyk from './rgb2cmyk.js';\n\nColor.prototype.cmyk = function () {\n    return rgb2cmyk(this._rgb);\n};\n\nconst cmyk = (...args) => new Color(...args, 'cmyk');\nObject.assign(chroma, { cmyk });\n\ninput.format.cmyk = cmyk2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'cmyk');\n        if (type(args) === 'array' && args.length === 4) {\n            return 'cmyk';\n        }\n    }\n});\n\nexport { cmyk };\n","import { unpack, last, rnd2 } from '../../utils/index.js';\n\n/*\n * supported arguments:\n * - hsl2css(h,s,l)\n * - hsl2css(h,s,l,a)\n * - hsl2css([h,s,l], mode)\n * - hsl2css([h,s,l,a], mode)\n * - hsl2css({h,s,l,a}, mode)\n */\nconst hsl2css = (...args) => {\n    const hsla = unpack(args, 'hsla');\n    let mode = last(args) || 'lsa';\n    hsla[0] = rnd2(hsla[0] || 0) + 'deg';\n    hsla[1] = rnd2(hsla[1] * 100) + '%';\n    hsla[2] = rnd2(hsla[2] * 100) + '%';\n    if (mode === 'hsla' || (hsla.length > 3 && hsla[3] < 1)) {\n        hsla[3] = '/ ' + (hsla.length > 3 ? hsla[3] : 1);\n        mode = 'hsla';\n    } else {\n        hsla.length = 3;\n    }\n    return `${mode.substr(0, 3)}(${hsla.join(' ')})`;\n};\n\nexport default hsl2css;\n","import { unpack, last, rnd2 } from '../../utils/index.js';\n\n/*\n * supported arguments:\n * - lab2css(l,a,b)\n * - lab2css(l,a,b,alpha)\n * - lab2css([l,a,b], mode)\n * - lab2css([l,a,b,alpha], mode)\n */\nconst lab2css = (...args) => {\n    const laba = unpack(args, 'lab');\n    let mode = last(args) || 'lab';\n    laba[0] = rnd2(laba[0]) + '%';\n    laba[1] = rnd2(laba[1]);\n    laba[2] = rnd2(laba[2]);\n    if (mode === 'laba' || (laba.length > 3 && laba[3] < 1)) {\n        laba[3] = '/ ' + (laba.length > 3 ? laba[3] : 1);\n    } else {\n        laba.length = 3;\n    }\n    return `lab(${laba.join(' ')})`;\n};\n\nexport default lab2css;\n","import { unpack, last, rnd2 } from '../../utils/index.js';\n\n/*\n * supported arguments:\n * - lab2css(l,a,b)\n * - lab2css(l,a,b,alpha)\n * - lab2css([l,a,b], mode)\n * - lab2css([l,a,b,alpha], mode)\n */\nconst lch2css = (...args) => {\n    const lcha = unpack(args, 'lch');\n    let mode = last(args) || 'lab';\n    lcha[0] = rnd2(lcha[0]) + '%';\n    lcha[1] = rnd2(lcha[1]);\n    lcha[2] = isNaN(lcha[2]) ? 'none' : rnd2(lcha[2]) + 'deg'; // add deg unit to hue\n    if (mode === 'lcha' || (lcha.length > 3 && lcha[3] < 1)) {\n        lcha[3] = '/ ' + (lcha.length > 3 ? lcha[3] : 1);\n    } else {\n        lcha.length = 3;\n    }\n    return `lch(${lcha.join(' ')})`;\n};\n\nexport default lch2css;\n","import { unpack, rnd2, rnd3 } from '../../utils/index.js';\n\nconst oklab2css = (...args) => {\n    const laba = unpack(args, 'lab');\n    laba[0] = rnd2(laba[0] * 100) + '%';\n    laba[1] = rnd3(laba[1]);\n    laba[2] = rnd3(laba[2]);\n    if (laba.length > 3 && laba[3] < 1) {\n        laba[3] = '/ ' + (laba.length > 3 ? laba[3] : 1);\n    } else {\n        laba.length = 3;\n    }\n    return `oklab(${laba.join(' ')})`;\n};\n\nexport default oklab2css;\n","import { unpack } from '../../utils/index.js';\nimport rgb2oklab from '../oklab/rgb2oklab.js';\nimport lab2lch from '../lch/lab2lch.js';\n\nconst rgb2oklch = (...args) => {\n    const [r, g, b, ...rest] = unpack(args, 'rgb');\n    const [l, a, b_] = rgb2oklab(r, g, b);\n    const [L, c, h] = lab2lch(l, a, b_);\n    return [L, c, h, ...(rest.length > 0 && rest[0] < 1 ? [rest[0]] : [])];\n};\n\nexport default rgb2oklch;\n","import { unpack, rnd2, rnd3 } from '../../utils/index.js';\n\nconst oklch2css = (...args) => {\n    const lcha = unpack(args, 'lch');\n    lcha[0] = rnd2(lcha[0] * 100) + '%';\n    lcha[1] = rnd3(lcha[1]);\n    lcha[2] = isNaN(lcha[2]) ? 'none' : rnd2(lcha[2]) + 'deg'; // add deg unit to hue\n    if (lcha.length > 3 && lcha[3] < 1) {\n        lcha[3] = '/ ' + (lcha.length > 3 ? lcha[3] : 1);\n    } else {\n        lcha.length = 3;\n    }\n    return `oklch(${lcha.join(' ')})`;\n};\n\nexport default oklch2css;\n","import { unpack, last } from '../../utils/index.js';\nimport hsl2css from './hsl2css.js';\nimport rgb2hsl from '../hsl/rgb2hsl.js';\nimport lab2css from './lab2css.js';\nimport rgb2lab from '../lab/rgb2lab.js';\nimport lch2css from './lch2css.js';\nimport rgb2lch from '../lch/rgb2lch.js';\nimport rgb2oklab from '../oklab/rgb2oklab.js';\nimport oklab2css from './oklab2css.js';\nimport rgb2oklch from '../oklch/rgb2oklch.js';\nimport oklch2css from './oklch2css.js';\nimport { getLabWhitePoint, setLabWhitePoint } from '../lab/lab-constants.js';\nconst { round } = Math;\n\n/*\n * supported arguments:\n * - rgb2css(r,g,b)\n * - rgb2css(r,g,b,a)\n * - rgb2css([r,g,b], mode)\n * - rgb2css([r,g,b,a], mode)\n * - rgb2css({r,g,b,a}, mode)\n */\nconst rgb2css = (...args) => {\n    const rgba = unpack(args, 'rgba');\n    let mode = last(args) || 'rgb';\n    if (mode.substr(0, 3) === 'hsl') {\n        return hsl2css(rgb2hsl(rgba), mode);\n    }\n    if (mode.substr(0, 3) === 'lab') {\n        // change to D50 lab whitepoint since this is what W3C is using for CSS Lab colors\n        const prevWhitePoint = getLabWhitePoint();\n        setLabWhitePoint('d50');\n        const cssColor = lab2css(rgb2lab(rgba), mode);\n        setLabWhitePoint(prevWhitePoint);\n        return cssColor;\n    }\n    if (mode.substr(0, 3) === 'lch') {\n        // change to D50 lab whitepoint since this is what W3C is using for CSS Lab colors\n        const prevWhitePoint = getLabWhitePoint();\n        setLabWhitePoint('d50');\n        const cssColor = lch2css(rgb2lch(rgba), mode);\n        setLabWhitePoint(prevWhitePoint);\n        return cssColor;\n    }\n    if (mode.substr(0, 5) === 'oklab') {\n        return oklab2css(rgb2oklab(rgba));\n    }\n    if (mode.substr(0, 5) === 'oklch') {\n        return oklch2css(rgb2oklch(rgba));\n    }\n    rgba[0] = round(rgba[0]);\n    rgba[1] = round(rgba[1]);\n    rgba[2] = round(rgba[2]);\n    if (mode === 'rgba' || (rgba.length > 3 && rgba[3] < 1)) {\n        rgba[3] = '/ ' + (rgba.length > 3 ? rgba[3] : 1);\n        mode = 'rgba';\n    }\n    return `${mode.substr(0, 3)}(${rgba.slice(0, mode === 'rgb' ? 3 : 4).join(' ')})`;\n};\n\nexport default rgb2css;\n","import { unpack } from '../../utils/index.js';\nimport lch2lab from '../lch/lch2lab.js';\nimport oklab2rgb from '../oklab/oklab2rgb.js';\n\nconst oklch2rgb = (...args) => {\n    args = unpack(args, 'lch');\n    const [l, c, h, ...rest] = args;\n    const [L, a, b_] = lch2lab(l, c, h);\n    const [r, g, b] = oklab2rgb(L, a, b_);\n    return [r, g, b, ...(rest.length > 0 && rest[0] < 1 ? [rest[0]] : [])];\n};\n\nexport default oklch2rgb;\n","import hsl2rgb from '../hsl/hsl2rgb.js';\nimport lab2rgb from '../lab/lab2rgb.js';\nimport lch2rgb from '../lch/lch2rgb.js';\nimport oklab2rgb from '../oklab/oklab2rgb.js';\nimport oklch2rgb from '../oklch/oklch2rgb.js';\nimport input from '../input.js';\nimport limit from '../../utils/limit.js';\nimport { getLabWhitePoint, setLabWhitePoint } from '../lab/lab-constants.js';\n\nconst INT_OR_PCT = /((?:-?\\d+)|(?:-?\\d+(?:\\.\\d+)?)%|none)/.source;\nconst FLOAT_OR_PCT = /((?:-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)%?)|none)/.source;\nconst PCT = /((?:-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)%)|none)/.source;\nconst RE_S = /\\s*/.source;\nconst SEP = /\\s+/.source;\nconst COMMA = /\\s*,\\s*/.source;\nconst ANLGE = /((?:-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:deg)?)|none)/.source;\nconst ALPHA = /\\s*(?:\\/\\s*((?:[01]|[01]?\\.\\d+)|\\d+(?:\\.\\d+)?%))?/.source;\n\n// e.g. rgb(250 20 0), rgb(100% 50% 20%), rgb(100% 50% 20% / 0.5)\nconst RE_RGB = new RegExp(\n    '^rgba?\\\\(' +\n        RE_S +\n        [INT_OR_PCT, INT_OR_PCT, INT_OR_PCT].join(SEP) +\n        ALPHA +\n        '\\\\)$'\n);\nconst RE_RGB_LEGACY = new RegExp(\n    '^rgb\\\\(' +\n        RE_S +\n        [INT_OR_PCT, INT_OR_PCT, INT_OR_PCT].join(COMMA) +\n        RE_S +\n        '\\\\)$'\n);\nconst RE_RGBA_LEGACY = new RegExp(\n    '^rgba\\\\(' +\n        RE_S +\n        [INT_OR_PCT, INT_OR_PCT, INT_OR_PCT, FLOAT_OR_PCT].join(COMMA) +\n        RE_S +\n        '\\\\)$'\n);\n\nconst RE_HSL = new RegExp(\n    '^hsla?\\\\(' + RE_S + [ANLGE, PCT, PCT].join(SEP) + ALPHA + '\\\\)$'\n);\nconst RE_HSL_LEGACY = new RegExp(\n    '^hsl?\\\\(' + RE_S + [ANLGE, PCT, PCT].join(COMMA) + RE_S + '\\\\)$'\n);\nconst RE_HSLA_LEGACY =\n    /^hsla\\(\\s*(-?\\d+(?:\\.\\d+)?),\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\n\nconst RE_LAB = new RegExp(\n    '^lab\\\\(' +\n        RE_S +\n        [FLOAT_OR_PCT, FLOAT_OR_PCT, FLOAT_OR_PCT].join(SEP) +\n        ALPHA +\n        '\\\\)$'\n);\nconst RE_LCH = new RegExp(\n    '^lch\\\\(' +\n        RE_S +\n        [FLOAT_OR_PCT, FLOAT_OR_PCT, ANLGE].join(SEP) +\n        ALPHA +\n        '\\\\)$'\n);\nconst RE_OKLAB = new RegExp(\n    '^oklab\\\\(' +\n        RE_S +\n        [FLOAT_OR_PCT, FLOAT_OR_PCT, FLOAT_OR_PCT].join(SEP) +\n        ALPHA +\n        '\\\\)$'\n);\nconst RE_OKLCH = new RegExp(\n    '^oklch\\\\(' +\n        RE_S +\n        [FLOAT_OR_PCT, FLOAT_OR_PCT, ANLGE].join(SEP) +\n        ALPHA +\n        '\\\\)$'\n);\n\nconst { round } = Math;\n\nconst roundRGB = (rgb) => {\n    return rgb.map((v, i) => (i <= 2 ? limit(round(v), 0, 255) : v));\n};\n\nconst percentToAbsolute = (pct, min = 0, max = 100, signed = false) => {\n    if (typeof pct === 'string' && pct.endsWith('%')) {\n        pct = parseFloat(pct.substring(0, pct.length - 1)) / 100;\n        if (signed) {\n            // signed percentages are in the range -100% to 100%\n            pct = min + (pct + 1) * 0.5 * (max - min);\n        } else {\n            pct = min + pct * (max - min);\n        }\n    }\n    return +pct;\n};\n\nconst noneToValue = (v, noneValue) => {\n    return v === 'none' ? noneValue : v;\n};\n\nconst css2rgb = (css) => {\n    css = css.toLowerCase().trim();\n\n    if (css === 'transparent') {\n        return [0, 0, 0, 0];\n    }\n\n    let m;\n\n    if (input.format.named) {\n        try {\n            return input.format.named(css);\n            // eslint-disable-next-line\n        } catch (e) {}\n    }\n\n    // rgb(250 20 0) or rgb(250,20,0)\n    if ((m = css.match(RE_RGB)) || (m = css.match(RE_RGB_LEGACY))) {\n        let rgb = m.slice(1, 4);\n        for (let i = 0; i < 3; i++) {\n            rgb[i] = +percentToAbsolute(noneToValue(rgb[i], 0), 0, 255);\n        }\n        rgb = roundRGB(rgb);\n        const alpha = m[4] !== undefined ? +percentToAbsolute(m[4], 0, 1) : 1;\n        rgb[3] = alpha; // default alpha\n        return rgb;\n    }\n\n    // rgba(250,20,0,0.4)\n    if ((m = css.match(RE_RGBA_LEGACY))) {\n        const rgb = m.slice(1, 5);\n        for (let i = 0; i < 4; i++) {\n            rgb[i] = +percentToAbsolute(rgb[i], 0, 255);\n        }\n        return rgb;\n    }\n\n    // hsl(0,100%,50%)\n    if ((m = css.match(RE_HSL)) || (m = css.match(RE_HSL_LEGACY))) {\n        const hsl = m.slice(1, 4);\n        hsl[0] = +noneToValue(hsl[0].replace('deg', ''), 0);\n        hsl[1] = +percentToAbsolute(noneToValue(hsl[1], 0), 0, 100) * 0.01;\n        hsl[2] = +percentToAbsolute(noneToValue(hsl[2], 0), 0, 100) * 0.01;\n        const rgb = roundRGB(hsl2rgb(hsl));\n        const alpha = m[4] !== undefined ? +percentToAbsolute(m[4], 0, 1) : 1;\n        rgb[3] = alpha;\n        return rgb;\n    }\n\n    // hsla(0,100%,50%,0.5)\n    if ((m = css.match(RE_HSLA_LEGACY))) {\n        const hsl = m.slice(1, 4);\n        hsl[1] *= 0.01;\n        hsl[2] *= 0.01;\n        const rgb = hsl2rgb(hsl);\n        for (let i = 0; i < 3; i++) {\n            rgb[i] = round(rgb[i]);\n        }\n        rgb[3] = +m[4]; // default alpha = 1\n        return rgb;\n    }\n\n    if ((m = css.match(RE_LAB))) {\n        const lab = m.slice(1, 4);\n        lab[0] = percentToAbsolute(noneToValue(lab[0], 0), 0, 100);\n        lab[1] = percentToAbsolute(noneToValue(lab[1], 0), -125, 125, true);\n        lab[2] = percentToAbsolute(noneToValue(lab[2], 0), -125, 125, true);\n        // convert to D50 Lab whitepoint\n        const wp = getLabWhitePoint();\n        setLabWhitePoint('d50');\n        const rgb = roundRGB(lab2rgb(lab));\n        // convert back to original Lab whitepoint\n        setLabWhitePoint(wp);\n        const alpha = m[4] !== undefined ? +percentToAbsolute(m[4], 0, 1) : 1;\n        rgb[3] = alpha;\n        return rgb;\n    }\n\n    if ((m = css.match(RE_LCH))) {\n        const lch = m.slice(1, 4);\n        lch[0] = percentToAbsolute(lch[0], 0, 100);\n        lch[1] = percentToAbsolute(noneToValue(lch[1], 0), 0, 150, false);\n        lch[2] = +noneToValue(lch[2].replace('deg', ''), 0);\n        // convert to D50 Lab whitepoint\n        const wp = getLabWhitePoint();\n        setLabWhitePoint('d50');\n        const rgb = roundRGB(lch2rgb(lch));\n        // convert back to original Lab whitepoint\n        setLabWhitePoint(wp);\n        const alpha = m[4] !== undefined ? +percentToAbsolute(m[4], 0, 1) : 1;\n        rgb[3] = alpha;\n        return rgb;\n    }\n\n    if ((m = css.match(RE_OKLAB))) {\n        const oklab = m.slice(1, 4);\n        oklab[0] = percentToAbsolute(noneToValue(oklab[0], 0), 0, 1);\n        oklab[1] = percentToAbsolute(noneToValue(oklab[1], 0), -0.4, 0.4, true);\n        oklab[2] = percentToAbsolute(noneToValue(oklab[2], 0), -0.4, 0.4, true);\n        const rgb = roundRGB(oklab2rgb(oklab));\n        const alpha = m[4] !== undefined ? +percentToAbsolute(m[4], 0, 1) : 1;\n        rgb[3] = alpha;\n        return rgb;\n    }\n\n    if ((m = css.match(RE_OKLCH))) {\n        const oklch = m.slice(1, 4);\n        oklch[0] = percentToAbsolute(noneToValue(oklch[0], 0), 0, 1);\n        oklch[1] = percentToAbsolute(noneToValue(oklch[1], 0), 0, 0.4, false);\n        oklch[2] = +noneToValue(oklch[2].replace('deg', ''), 0);\n        const rgb = roundRGB(oklch2rgb(oklch));\n        const alpha = m[4] !== undefined ? +percentToAbsolute(m[4], 0, 1) : 1;\n        rgb[3] = alpha;\n        return rgb;\n    }\n};\n\ncss2rgb.test = (s) => {\n    return (\n        // modern\n        RE_RGB.test(s) ||\n        RE_HSL.test(s) ||\n        RE_LAB.test(s) ||\n        RE_LCH.test(s) ||\n        RE_OKLAB.test(s) ||\n        RE_OKLCH.test(s) ||\n        // legacy\n        RE_RGB_LEGACY.test(s) ||\n        RE_RGBA_LEGACY.test(s) ||\n        RE_HSL_LEGACY.test(s) ||\n        RE_HSLA_LEGACY.test(s) ||\n        s === 'transparent'\n    );\n};\n\nexport default css2rgb;\n","import chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport { type } from '../../utils/index.js';\n\nimport rgb2css from './rgb2css.js';\nimport css2rgb from './css2rgb.js';\n\nColor.prototype.css = function (mode) {\n    return rgb2css(this._rgb, mode);\n};\n\nconst css = (...args) => new Color(...args, 'css');\nchroma.css = css;\n\ninput.format.css = css2rgb;\n\ninput.autodetect.push({\n    p: 5,\n    test: (h, ...rest) => {\n        if (!rest.length && type(h) === 'string' && css2rgb.test(h)) {\n            return 'css';\n        }\n    }\n});\n\nexport { css };\n","import Color from '../../Color.js';\nimport chroma from '../../chroma.js';\nimport input from '../input.js';\nimport { unpack } from '../../utils/index.js';\n\ninput.format.gl = (...args) => {\n    const rgb = unpack(args, 'rgba');\n    rgb[0] *= 255;\n    rgb[1] *= 255;\n    rgb[2] *= 255;\n    return rgb;\n};\n\nconst gl = (...args) => new Color(...args, 'gl');\nchroma.gl = gl;\n\nColor.prototype.gl = function () {\n    const rgb = this._rgb;\n    return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];\n};\n\nexport { gl };\n","import Color from '../../Color.js';\nimport chroma from '../../chroma.js';\nimport { type } from '../../utils/index.js';\nimport input from '../input.js';\nimport hex2rgb from './hex2rgb.js';\nimport rgb2hex from './rgb2hex.js';\n\nColor.prototype.hex = function (mode) {\n    return rgb2hex(this._rgb, mode);\n};\n\nconst hex = (...args) => new Color(...args, 'hex');\nchroma.hex = hex;\n\ninput.format.hex = hex2rgb;\ninput.autodetect.push({\n    p: 4,\n    test: (h, ...rest) => {\n        if (\n            !rest.length &&\n            type(h) === 'string' &&\n            [3, 4, 5, 6, 7, 8, 9].indexOf(h.length) >= 0\n        ) {\n            return 'hex';\n        }\n    }\n});\n\nexport { hex };\n","/*\n * Based on implementation by Neil Bartlett\n * https://github.com/neilbartlett/color-temperature\n */\n\nconst { log } = Math;\n\nconst temperature2rgb = (kelvin) => {\n    const temp = kelvin / 100;\n    let r, g, b;\n    if (temp < 66) {\n        r = 255;\n        g =\n            temp < 6\n                ? 0\n                : -155.25485562709179 -\n                  0.44596950469579133 * (g = temp - 2) +\n                  104.49216199393888 * log(g);\n        b =\n            temp < 20\n                ? 0\n                : -254.76935184120902 +\n                  0.8274096064007395 * (b = temp - 10) +\n                  115.67994401066147 * log(b);\n    } else {\n        r =\n            351.97690566805693 +\n            0.114206453784165 * (r = temp - 55) -\n            40.25366309332127 * log(r);\n        g =\n            325.4494125711974 +\n            0.07943456536662342 * (g = temp - 50) -\n            28.0852963507957 * log(g);\n        b = 255;\n    }\n    return [r, g, b, 1];\n};\n\nexport default temperature2rgb;\n","/*\n * Based on implementation by Neil Bartlett\n * https://github.com/neilbartlett/color-temperature\n **/\n\nimport temperature2rgb from './temperature2rgb.js';\nimport { unpack } from '../../utils/index.js';\nconst { round } = Math;\n\nconst rgb2temperature = (...args) => {\n    const rgb = unpack(args, 'rgb');\n    const r = rgb[0],\n        b = rgb[2];\n    let minTemp = 1000;\n    let maxTemp = 40000;\n    const eps = 0.4;\n    let temp;\n    while (maxTemp - minTemp > eps) {\n        temp = (maxTemp + minTemp) * 0.5;\n        const rgb = temperature2rgb(temp);\n        if (rgb[2] / rgb[0] >= b / r) {\n            maxTemp = temp;\n        } else {\n            minTemp = temp;\n        }\n    }\n    return round(temp);\n};\n\nexport default rgb2temperature;\n","import chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport temperature2rgb from './temperature2rgb.js';\nimport rgb2temperature from './rgb2temperature.js';\n\nColor.prototype.temp =\n    Color.prototype.kelvin =\n    Color.prototype.temperature =\n        function () {\n            return rgb2temperature(this._rgb);\n        };\n\nconst temp = (...args) => new Color(...args, 'temp');\nObject.assign(chroma, { temp, kelvin: temp, temperature: temp });\n\ninput.format.temp =\n    input.format.kelvin =\n    input.format.temperature =\n        temperature2rgb;\n\nexport { temp, temp as kelvin, temp as temperature };\n","import { unpack, type } from '../../utils/index.js';\nimport chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport oklch2rgb from './oklch2rgb.js';\nimport rgb2oklch from './rgb2oklch.js';\n\nColor.prototype.oklch = function () {\n    return rgb2oklch(this._rgb);\n};\n\nconst oklch = (...args) => new Color(...args, 'oklch');\nObject.assign(chroma, { oklch });\n\ninput.format.oklch = oklch2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'oklch');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'oklch';\n        }\n    }\n});\n\nexport { oklch };\n","// feel free to comment out anything to rollup\n// a smaller chroma.js bundle\nimport chroma from './src/chroma.js';\n\n// io --> convert colors\nimport './src/io/named/index.js';\n\n// operators --> modify existing Colors\nimport './src/ops/alpha.js';\nimport './src/ops/clipped.js';\nimport './src/ops/darken.js';\nimport './src/ops/get.js';\nimport './src/ops/luminance.js';\nimport './src/ops/mix.js';\nimport './src/ops/premultiply.js';\nimport './src/ops/saturate.js';\nimport './src/ops/set.js';\nimport './src/ops/shade.js';\n\n// interpolators\nimport './src/interpolator/rgb.js';\nimport './src/interpolator/lrgb.js';\nimport './src/interpolator/lab.js';\nimport './src/interpolator/lch.js';\nimport './src/interpolator/num.js';\nimport './src/interpolator/hcg.js';\nimport './src/interpolator/hsi.js';\nimport './src/interpolator/hsl.js';\nimport './src/interpolator/hsv.js';\nimport './src/interpolator/oklab.js';\nimport './src/interpolator/oklch.js';\n\n// generators -- > create new colors\nimport average from './src/generator/average.js';\nimport bezier from './src/generator/bezier.js';\nimport blend from './src/generator/blend.js';\nimport cubehelix from './src/generator/cubehelix.js';\nimport mix from './src/generator/mix.js';\nimport random from './src/generator/random.js';\nimport scale from './src/generator/scale.js';\n\n// other utility methods\nimport { analyze } from './src/utils/analyze.js';\nimport contrast from './src/utils/contrast.js';\nimport contrastAPCA from './src/utils/contrastAPCA.js';\nimport deltaE from './src/utils/delta-e.js';\nimport distance from './src/utils/distance.js';\nimport { limits } from './src/utils/analyze.js';\nimport valid from './src/utils/valid.js';\nimport input from './src/io/input.js';\n\n// scale\nimport scales from './src/utils/scales.js';\n\n// colors\nimport colors from './src/colors/w3cx11.js';\nimport brewer from './src/colors/colorbrewer.js';\nimport Color from './src/Color.js';\n\nObject.assign(chroma, {\n    analyze,\n    average,\n    bezier,\n    blend,\n    brewer,\n    Color,\n    colors,\n    contrast,\n    contrastAPCA,\n    cubehelix,\n    deltaE,\n    distance,\n    input,\n    interpolate: mix,\n    limits,\n    mix,\n    random,\n    scale,\n    scales,\n    valid\n});\n\nexport default chroma;\n\nexport {\n    analyze,\n    average,\n    bezier,\n    blend,\n    brewer,\n    Color,\n    colors,\n    contrast,\n    contrastAPCA,\n    cubehelix,\n    deltaE,\n    distance,\n    input,\n    limits,\n    mix,\n    mix as interpolate,\n    random,\n    scale,\n    scales,\n    valid\n};\n\nexport * from './src/io/cmyk/index.js';\nexport * from './src/io/css/index.js';\nexport * from './src/io/gl/index.js';\nexport * from './src/io/hcg/index.js';\nexport * from './src/io/hex/index.js';\nexport * from './src/io/hsi/index.js';\nexport * from './src/io/hsl/index.js';\nexport * from './src/io/hsv/index.js';\nexport * from './src/io/lab/index.js';\nexport * from './src/io/lch/index.js';\nexport * from './src/io/num/index.js';\nexport * from './src/io/rgb/index.js';\nexport * from './src/io/temp/index.js';\nexport * from './src/io/oklab/index.js';\nexport * from './src/io/oklch/index.js';\n","import Color from '../Color.js';\n\n// simple Euclidean distance\nexport default function (a, b, mode = 'lab') {\n    // Delta E (CIE 1976)\n    // see http://www.brucelindbloom.com/index.html?Equations.html\n    a = new Color(a);\n    b = new Color(b);\n    const l1 = a.get(mode);\n    const l2 = b.get(mode);\n    let sum_sq = 0;\n    for (let i in l1) {\n        const d = (l1[i] || 0) - (l2[i] || 0);\n        sum_sq += d * d;\n    }\n    return Math.sqrt(sum_sq);\n}\n"],"names":["min","max","Math","x","high","arguments","length","undefined","rgb","_clipped","_unclipped","slice","i","limit","classToType","name","toLowerCase","obj","Object","prototype","toString","call","args","keyOrder","Array","type","split","filter","k","map","l","PI","rnd2","a","round","rnd3","TWOPI","PITHIRD","DEG2RAD","RAD2DEG","reverse3","arr","reverse","format","autodetect","constructor","me","this","_len","_key","mode","last","_input","sorted","sort","b","p","chk","test","Error","apply","_rgb","clip_rgb","push","hex","join","chroma","Color","version","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","laserlemon","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrod","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","maroon2","maroon3","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","purple2","purple3","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","RE_HEX","RE_HEXA","match","substr","u","parseInt","r","g","unpack","str","hxa","rgb2hex","n","keys","w3cx11","input","named","hex2rgb","h","alpha","mutate","clipped","labConstants","Kn","labWhitePoint","Xn","Yn","Zn","t0","t1","t2","t3","kE","kKE","kK","RefWhiteRGB","X","Y","Z","MtxRGB2XYZ","m00","m01","m02","m10","m11","m12","m20","m21","m22","MtxXYZ2RGB","As","Bs","Cs","MtxAdaptMa","MtxAdaptMaI","ILLUMINANTS","Map","setLabWhitePoint","ill","get","String","getLabWhitePoint","lab2xyz","L","LAB_CONSTANTS","fy","fx","fz","fx3","fz3","pow","compand","linear","sign","abs","xyz2rgb","y","z","Ad","Bd","Cd","X1","Y1","Z1","X2","Y2","Z2","b_","gammaAdjustSRGB","companded","rgb2xyz","rest","xr","yr","zr","xyz2lab","lab","rgb2lab","assign","lab2rgb","_len2","_key2","darken","amount","brighten","darker","brighter","mc","channel","src","indexOf","luminance","lum","cur_lum","max_iter","low","mid","interpolate","lm","rgb2luminance","luminance_x","col1","col2","f","interpolator","mix","premultiply","sin","cos","c","isNaN","lch2lab","hcl","lch2rgb","sqrt","atan2","Number","NaN","lab2lch","lch","rgb2lch","hcl2rgb","forEach","m","_len3","_key3","saturate","desaturate","set","value","charAt","out","tint","shade","xyz0","xyz1","index","lrgb","x1","y1","z1","x2","y2","z2","hue0","hue1","sat0","sat1","lbv0","lbv1","sat","hue","lbv","dh","hsl","hsv","hcg","hsi","oklch","interpolate_hsx","num","rgb2num","num2rgb","c1","c2","floor","_g","_c","q","t","v","minRgb","maxRgb","delta","rgb2hcg","hcg2rgb","s","acos","min_","rgb2hsi","hsi2rgb","h_","rgb2hsl","hsl2rgb","max_","rgb2hsv","hsv2rgb","multiplyMatrices","A","B","isArray","B_cols","_","product","row","col","reduce","OKLab","LMStoXYZ","LMSnl","OKLab_to_XYZ","XYZ","LMStoOKLab","LMS","cbrt","XYZ_to_OKLab","oklab","rgb2oklab","oklab2rgb","_average_lrgb","colors","weights","xyz","_mode","_nacol","_spread","_domain","_pos","_padding","_classes","_colors","_out","_min","_max","_correctLightness","_colorCache","_useCache","_gamma","setColors","brewer","resetCache","tMapLightness","tMapDomain","getColor","val","bypassMap","getClass","classes","d","analyze","limits","domain","from","tOut","tBreaks","every","_m","range","_o","spread","correctLightness","L0","L1","pol","L_actual","L_ideal","L_diff","padding","numColors","result","dm","dd","left","right","inclusive","ascending","end","__range__","samples","asc","cache","gamma","nodata","rgba","rnd","blend","bottom","top","blend_f","c0","each","normal","multiply","screen","overlay","lighten","dodge","burn","random","log","data","key","MAX_VALUE","sum","values","count","min_log","LOG10E","max_log","pb","pr","cluster","assignments","clusterSizes","repeat","nb_iters","centroids","j","best","mindist","dist","newCentroids","kClusters","tmpKMeansBreaks","B_threshold","exp","cool","scale","hot","colorbrewer","OrRd","PuBu","BuPu","Oranges","BuGn","YlOrBr","YlGn","Reds","RdPu","Greens","YlGnBu","Purples","GnBu","Greys","YlOrRd","PuRd","Blues","PuBuGn","Viridis","Spectral","RdYlGn","RdBu","PiYG","PRGn","RdYlBu","BrBG","RdGy","PuOr","Set2","Accent","Set1","Set3","Dark2","Paired","Pastel2","Pastel1","colorbrewerTypes","typeMap","Proxy","target","prop","lower","has","getOwnPropertyNames","cmyk","rgb2cmyk","cmyk2rgb","hsla","laba","lcha","hsl2css","prevWhitePoint","cssColor","lab2css","lch2css","oklab2css","oklch2css","rgb2oklch","INT_OR_PCT","source","FLOAT_OR_PCT","PCT","RE_S","SEP","COMMA","ANLGE","ALPHA","RE_RGB","RegExp","RE_RGB_LEGACY","RE_RGBA_LEGACY","RE_HSL","RE_HSL_LEGACY","RE_HSLA_LEGACY","RE_LAB","RE_LCH","RE_OKLAB","RE_OKLCH","roundRGB","percentToAbsolute","pct","signed","endsWith","parseFloat","substring","noneToValue","noneValue","css2rgb","css","trim","e","replace","wp","oklch2rgb","rgb2css","gl","kelvin","temp","minTemp","maxTemp","temperature2rgb","temperature","rgb2temperature","average","w","first","shift","cnt","dx","dy","ci","xyz2","bezier","I","lab0","lab1","lab2","lab3","RangeError","labs","newrow","binom_row","el","contrast","l1","l2","contrastAPCA","text","bg","l_text","l_bg","Y_text","Y_bg","S_norm","S_rev","C","cubehelix","dl","start","rotations","lightness","fract","amp","cos_a","sin_a","deltaE","Kl","Kc","Kh","rad2deg","rad","deg2rad","deg","a1","b1","L2","a2","b2","avgL","avgC","G","a1p","a2p","C1p","C2p","avgCp","arctan1","arctan2","h1p","h2p","avgHp","T","deltaHp","deltaL","deltaCp","sl","sc","sh","deltaTheta","Rt","distance","sum_sq","code","scales","valid"],"sourceRoot":""}