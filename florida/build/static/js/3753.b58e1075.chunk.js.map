{"version":3,"file":"static/js/3753.b58e1075.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/interaction-selector/style.module.css?5392","components/interaction-selector/index.js","components/ngl-viewer/use-default-representations/index.js","pages/accession/rmsd-pairwise/index.js","webpack://mdposit/./src/components/viewer-spawner/style.module.css?df6e","components/viewer-spawner/index.js","webpack://mdposit/./src/pages/accession/rmsd-pairwise/style.module.css?bc81"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"horizontal\":\"style_horizontal__2DIWx\",\"horizontal-margined\":\"style_horizontal-margined__e9fQR\"};","import React, { Suspense } from 'react';\n\nimport {\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Select,\n  MenuItem,\n  TextField,\n  IconButton,\n} from '@mui/material';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport Loading from '../loading';\n\nimport style from './style.module.css';\n\nconst residueOptions = [\n  { label: 'All residues', value: 'residue_indices' },\n  { label: 'Interface residues', value: 'interface_indices' },\n];\n\n// Render a panel which allows to select the desired interaction\n// If the user selects a new interaction then the 'setSelectedInteraction' is set as its index\n// Interactions have the following structure:\n// { name: string, label: string, ... }\n// The 'label' field will replace the 'name' in the selector labels if exists\n// When 'selectedResidues' is passed, render also tools to select interaction residues\n// Residue options are 'all' or 'interface' residues\n// DANI: La guinda sería un 'custom' en las opciones de residuos\n// DANI: La idea sería desplegar dos residue selectors, uno para cada interaction agent\nconst InteractionSelector = ({\n  interactions,\n  selectedInteraction,\n  setSelectedInteraction,\n  selectedResidues,\n  setSelectedResidues,\n  selectedOrder,\n  handleToggleOrder,\n  firstOrderLabel, // The label to be represented over the first order rectangle\n  firstOrderTooltip, // The tooltip to be shown for the first order rectangle\n  secondOrderLabel, // The label to be represented over the second order rectangle\n  secondOrderTooltip, // The tooltip to be shown for the second order rectangle\n  toggleOrderTooltip, // The tooltip to be shown for the toggle order button\n  interfaceOnly = false, // Set if the 'All residues' button is enabled\n}) => {\n  const changeInteraction = event => {\n    setSelectedInteraction(event.target.value);\n  };\n\n  const changeResidues = event => {\n    setSelectedResidues(event.target.value);\n  };\n\n  const changeOrder = () => {\n    handleToggleOrder();\n  };\n\n  const currentInteraction = interactions[selectedInteraction];\n\n  // Render\n  return (\n    <Suspense fallback={<Loading />}>\n      <Select\n        value={selectedInteraction}\n        onChange={changeInteraction}\n        className={style['horizontal-margined']}\n      >\n        {interactions.map((interaction, i) => (\n          <MenuItem key={i} value={i} disabled={interaction.failed}>\n            {interaction.label || interaction.name}\n          </MenuItem>\n        ))}\n      </Select>\n      {selectedResidues && (\n        <RadioGroup\n          value={selectedResidues}\n          onChange={changeResidues}\n          className={style.horizontal}\n        >\n          {residueOptions.map((opt, i) => (\n            <FormControlLabel\n              key={i}\n              value={opt.value}\n              control={<Radio color=\"primary\" />}\n              label={opt.label}\n              disabled={opt.label === 'All residues' && interfaceOnly}\n            />\n          ))}\n        </RadioGroup>\n      )}\n      {selectedOrder !== undefined && (\n        <>\n          <TextField\n            //margin=\"dense\"\n            label={firstOrderLabel}\n            title={firstOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_1\n                : currentInteraction.agent_2\n            }\n          />\n          <IconButton\n            title={toggleOrderTooltip}\n            onClick={changeOrder}\n            size=\"large\"\n          >\n            <FontAwesomeIcon icon={faExchangeAlt} />\n          </IconButton>\n          <TextField\n            //margin=\"dense\"\n            label={secondOrderLabel}\n            title={secondOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_2\n                : currentInteraction.agent_1\n            }\n          />\n        </>\n      )}\n    </Suspense>\n  );\n};\n\nexport default InteractionSelector;\n","// React logic\nimport { useMemo, useContext } from 'react';\n\nimport { ProjectCtx, PdbCtx } from '../../../contexts';\n\nimport { nglSelection2residueIndices, nglSelectionExists } from '../../../utils/topology-manager';\n\n// Use this hook to get the memoized NGL default representations\nconst useDefaultRepresentations = () => {\n  // Get the current project metadata and chains\n  const { chains, metadata, topology } = useContext(ProjectCtx);\n  // Get current structure\n  const { file: structure } = useContext(PdbCtx);\n  //console.log(structure.residueMap.get(0).isCg());\n  // Set the chains to be represented in the NGL viewer by default\n  // WARNING: This is experimental and may have some bugs\n  const defaultRepresentations = useMemo(() => {\n    if (!topology) return [];\n    const reps = [];\n    const ligands = metadata && metadata.LIGANDS;\n    if (metadata && chains) {\n      const chainnames = metadata.CHAINNAMES;\n      // Represent each protein chain\n      if (chainnames) {\n        for (const chain of chains) {\n          const name = chainnames[chain];\n          reps.push({\n            name: name ? name + ' (Chain ' + chain + ')' : 'Chain ' + chain,\n            selection: ':' + chain,\n          });\n        }\n      }\n      // If chainnames are not defined then set a general representation\n      else {\n        const generalRepresentations = [\n          { name: 'Protein', selection: 'protein' },\n          { name: 'Nucleic acids', selection: 'nucleic' }\n        ]\n        // Add the representation only if it contains any atom\n        generalRepresentations.forEach(rep => {\n          const exists = nglSelectionExists(rep.selection, structure);\n          if (exists) reps.push(rep);\n        });\n      }\n\n      // Represent the mebrane if exist\n      /*\n          if (metadata.MEMBRANE !== 'No')\n              reps.push({\n              selection: '(not polymer or hetero) and not (water or ion)',\n              name: metadata.MEMBRANE,\n              type: 'licorice',\n              opacity: 0.5,\n              });\n          */\n      // Represent all chains which are not in the 'chains' and 'ligands' list in licorice\n      topology.chainNames.forEach(chain => {\n        // Check if the chain is in the protein chains\n        const isProtein = chains.indexOf(chain) !== -1;\n        if (isProtein) return;\n        // Check if the chain is full ligand\n        // DANI: No se ha probado\n        const topologyChain = topology.getChainByName(chain);\n        const isLigand = topologyChain.residues.every(residue => residue.referenceType === 'ligand');\n        // If there is any coincidence then skip this chainname\n        if (isLigand) return;\n        // Get the chain name according to metadata, if available\n        const name = (chainnames && chainnames[chain]) || chain;\n        reps.push({\n          name: name,\n          selection: ':' + chain,\n          type: 'licorice',\n          color: 'purple',\n          opacity: 0.5,\n        });\n      });\n    }\n    // If there is no metadata/chains then set up a defualt generic representation\n    else {\n      reps.push({ name: 'Main structure' });\n    }\n\n    // Display ligands\n    if (ligands) {\n      for (const ligand of ligands) {\n        // New system: ligands are pubchem ids\n        if (typeof ligand === 'string') {\n          // Get ligand reisude indcies\n          const ligandResidueIndices = topology.getReferenceResidueIndices(ligand);\n          if (!ligandResidueIndices || ligandResidueIndices.length === 0) continue;\n          // Transform the residue indices to a NGL selection\n          const { rangedSelection: nglSelection } = topology.residueIndices2Ngl(ligandResidueIndices);\n          // Add the representation\n          reps.push({\n            name: ligand,\n            selection: nglSelection,\n            type: 'ball+stick',\n            color: 'element'\n          });\n        }\n        // Old system: ligands are objects which may have a ngl selection\n        else{\n          if (!ligand.ngl) continue;\n          reps.push({\n            name: ligand.name,\n            selection: ligand.ngl,\n            type: 'licorice',\n          });\n        }\n        \n      }\n    }\n\n    // Add a representation for ions in spacefill in case there are residues with 1 atom\n    const singleAtomIndices = []\n    topology.residueAtomIndices.forEach(atomIndices => {\n      if (atomIndices.length > 1) return;\n      singleAtomIndices.push(atomIndices[0]);\n    })\n    if (singleAtomIndices.length > 0) {\n      const singleAtomSelection = '@' + singleAtomIndices.join(',');\n      reps.push({\n        name: 'Ions',\n        selection: singleAtomSelection,\n        type: 'spacefill',\n        color: 'element',\n      });\n    }\n\n    // Represent \"Other\" residues in low opacity grey licorice\n    // Get all residues which are not already included on any previous section\n    // Get also all residues which are represented as cartoon but are not protein or nucleic acid\n    // i.e. residues which would not be represented by now\n    const representedResidues = [];\n    reps.forEach(rep => {\n      const isCartoon = rep.type === undefined || rep.type === 'cartoon';\n      const residues = nglSelection2residueIndices(\n        rep.selection,\n        isCartoon,\n        structure,\n      );\n      representedResidues.push(...residues);\n    });\n    const residuesCount = topology.residueCount;\n    const nonRepresentedResidues = [];\n    for (let i = 0; i < residuesCount; i++) {\n      if (representedResidues.indexOf(i) === -1) nonRepresentedResidues.push(i);\n    }\n    if (nonRepresentedResidues.length > 0) {\n      const {\n        rangedSelection: otherSelection,\n      } = topology.residueIndices2Ngl(nonRepresentedResidues);\n      reps.push({\n        name: 'Other',\n        selection: otherSelection,\n        type: 'licorice',\n        color: 'grey',\n        opacity: 0.3,\n      });\n    }\n\n    return reps;\n  }, [chains, metadata, topology, structure]);\n\n  return defaultRepresentations;\n};\n\nexport default useDefaultRepresentations;\n","import React, { useContext, useState, useMemo, useRef } from 'react';\n\nimport { CardContent, Chip, Typography } from '@mui/material';\n\nimport useAPI from '../../../hooks/use-api';\n\nimport Card from '../../../components/animated-card';\nimport Loading from '../../../components/loading';\nimport ViewerSpawner from '../../../components/viewer-spawner';\nimport useDefaultRepresentations from '../../../components/ngl-viewer/use-default-representations';\n\nimport { ProjectCtx } from '../../../contexts';\n\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\n\nimport style from './style.module.css';\n\nimport InteractionSelector from '../../../components/interaction-selector';\nimport Heatmap from '../../../components/heatmap';\n\n// Keep constant representation references to keep them between renders\nconst REPRESENTATION_REFERENCES = {\n  base: ['First frame', 'Second frame'],\n  interface: ['First frame interface', 'Second frame interface']\n}\n\n// Set the representation colors\nconst REPRESENTATION_COLORS = {\n  base: ['red', 'blue'],\n  interface: [\n    ['orange', 'yellow'], // Agent 1\n    ['purple', 'green'], // Agent 2\n  ] \n}\n\nconst RmsdPairwise = () => {\n  // Get the current project data\n  const {\n    accessionAndMdNumber,\n    metadata,\n    interactions: defaultInteractions,\n    topology: topologyManager,\n  } = useContext(ProjectCtx);\n\n  // Set a ref to the ngl which allows access to the ngl viewer exposed methods\n  const viewerRef = useRef(null);\n  // Get the default representations\n  const defaultRepresentations = useDefaultRepresentations();\n  // The selected frames\n  const [selectedFramePair, setSelectedFramePair] = useState(null);\n  // The interaction to be displayed\n  const [selectedInteraction, setSelectedInteraction] = useState(0);\n  // Get analysis data from the API\n  const url = `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/rmsd-pairwise/`;\n  const { loading, payload, error } = useAPI(url);\n  // Set the available interactions\n  const interactions = useMemo(() => {\n    if (!defaultInteractions) return [{ name: 'Overall' }];\n    // Label all metadata interactions with the 'interface residues' ending\n    defaultInteractions.forEach(interaction => {\n      interaction.label = interaction.name + ' (interface residues)';\n    });\n    const interactions = [{ name: 'Overall' }, ...defaultInteractions];\n    return interactions;\n  }, [defaultInteractions]);\n  // Process analysis data for the heatmap\n  const { rmsds, AxesValues } = useMemo(() => {\n    // Return if the payload is not ready\n    if (!payload) return {};\n    // Get the selected interaction\n    const interaction = interactions[selectedInteraction];\n    // Get the data whose name matches the interaction name\n    const data = payload.data.find(dataset => dataset.name === interaction.name);\n    if (!data) throw new Error(`Dataset for interaction \"${interaction.name}\" not found`);\n    // Get the rmsds values\n    const rmsds = data.rmsds;\n    // Calculate the step\n    // DANI: Esto no es del todo correcto pero hace que los números de frames siempre cuadren\n    const dataLength = rmsds.length;\n    const AxesStep = Math.floor(metadata.mdFrames / (dataLength - 1));\n    // DANI: Esto es lo correcto\n    // DANI: En algunos análisis antiguos las frames no cuadran y hay que rehacerlos\n    //const xAxesStep = payload.step;\n    // Calculate the frames labels\n    // These values are used for BOTH axes\n    const AxesValues = Array(dataLength)\n      .fill(undefined)\n      .map((v, i) => i * AxesStep);\n    return { rmsds, AxesValues };\n  }, [payload, metadata, interactions, selectedInteraction]);\n\n  // Set the component state\n  const [components, setComponents] = useState(null);\n\n  // Set the components value\n  useMemo(() => {\n    // If there is no selected pair then set the components as null\n    if (!selectedFramePair) return setComponents(null);\n    // If a frame pair is selected then set the components or update them accordingly\n    setComponents(previousComponents => {\n      // If there are no previous components then set them from scratch\n      if (previousComponents === null) {\n        return selectedFramePair.map((frame, index) => ({\n          name: `Frame ${index === 0 ? 'A' : 'B'}`,\n          frame: frame\n        }));\n      }\n      // If components already exists then just update them\n      selectedFramePair.forEach((frame, index) => {\n        const previousComponent = previousComponents[index];\n        previousComponent.name = `Frame ${index === 0 ? 'A' : 'B'}`;\n        previousComponent.frame = frame;\n      });\n      return [...previousComponents];\n    });\n  }, [selectedFramePair]);\n\n  // Set the component state\n  const [representations, setRepresentations] = useState(null);\n\n  // Set the viewer representations\n  useMemo(() => {\n    // If there are no components then clear the representations and stop here\n    if (!components) return setRepresentations(null);\n    // Get the selected interaction\n    const interaction = interactions[selectedInteraction];\n    // Get also the number of the interacting agents\n    const agents = [\n      { name: interaction.agent_1, interface: interaction.interface_indices_1 },\n      { name: interaction.agent_2, interface: interaction.interface_indices_2 }\n    ];\n    // Setup every representation or update the already existing ones\n    setRepresentations(previousRepresentations => {\n      // Set a list to keep updated representations\n      const newRepresentations = [];\n      // Find out if there is a selected interaction\n      const currentInteraction = selectedInteraction > 0;\n      // Find out if there was a selected interaction in the previous representations\n      const previousInteraction = !!(previousRepresentations && previousRepresentations.find(\n        rep => rep.reference && rep.reference.includes(REPRESENTATION_REFERENCES.interface[0])));\n      // Check if there was interactions in the previous\n      // If there were no previous representations then set the default values\n      if (previousRepresentations === null) {\n        components.forEach((component, index) => {\n          // Set the overall representations\n          // In case there is no interaction selected this would be opaque\n          // In case there is an interaction selected this would be transparent (just a reference)\n          defaultRepresentations.forEach(representation => {\n            const newRepresentation = { ...representation };\n            newRepresentation.name = `${component.name} - ${representation.name}`;\n            newRepresentation.color = REPRESENTATION_COLORS.base[index];\n            newRepresentation.component = component.name;\n            newRepresentation.reference = `${REPRESENTATION_REFERENCES.base[index]} - ${representation.name}`;\n            if (currentInteraction) {\n              newRepresentation.name += ' reference';\n              newRepresentation.opacity = 0.1;\n            }\n            newRepresentations.push(newRepresentation);\n          });\n        });\n      }\n      // If representations already exist then update them\n      else {\n        components.forEach((component, index) => {\n          // Iterate the default representations\n          defaultRepresentations.forEach(representation => {\n            // Find the previous corresponding representation\n            const reference = `${REPRESENTATION_REFERENCES.base[index]} - ${representation.name}`;\n            const previousRepresentation = previousRepresentations.find(rep => rep.reference === reference);\n            if (!previousRepresentation) throw new Error(`No previous representation with reference ${reference}`);\n            // Update the representation name and component\n            const previousComponentName = previousRepresentation.name.split(' - ')[0];\n            previousRepresentation.name = previousRepresentation.name.replace(previousComponentName, component.name);\n            previousRepresentation.component = component.name;\n            // Add or remove the 'reference' tail from the name and update the opacity\n            // If we passed from no selected interaction to selected interaction\n            if (currentInteraction && !previousInteraction) {\n              previousRepresentation.name += ' reference';\n              previousRepresentation.opacity = 0.1;\n            }\n            // If we passed from selected interaction to no selected interaction\n            if (!currentInteraction && previousInteraction) {\n              previousRepresentation.name = previousRepresentation.name.replace(' reference', '');\n              previousRepresentation.opacity = 1;\n            }\n            newRepresentations.push(previousRepresentation);\n          });\n        });\n      }\n      // Set interfaces representations, each with different colors\n      if (currentInteraction) {\n        // If we did not have a selected interaction then setup representations with default values\n        if (previousInteraction === false) {\n          components.forEach((component, index) => {\n            agents.forEach((agent, agentIndex) => {\n              // Get the interaction interface, if it exists, in NGL format\n              // The default interaction (Overall) has no interface\n              const selection = agent.interface && topologyManager.residueIndices2Ngl(agent.interface);\n              // Set the new representation\n              newRepresentations.push({\n                name: `${component.name} - ${agent.name} interface`,\n                color: REPRESENTATION_COLORS.interface[index][agentIndex],\n                selection: selection.rangedSelection,\n                type: 'licorice',\n                component: component.name,\n                reference: `${REPRESENTATION_REFERENCES.interface[index]} - ${agent.name}`\n              });\n            });\n          });\n        }\n        // Otherwise update the already existing representations\n        else {\n          components.forEach((component, index) => {\n            agents.forEach(agent => {\n              // Get the interaction interface, if it exists, in NGL format\n              // The default interaction (Overall) has no interface\n              const selection = agent.interface && topologyManager.residueIndices2Ngl(agent.interface);\n              // Find the previous representation for interface 1\n              const reference = `${REPRESENTATION_REFERENCES.interface[index]} - ${agent.name}`;\n              const previousRepresentation = previousRepresentations.find(\n                rep => rep.reference === reference\n              );\n              // Update its name, selection and component\n              previousRepresentation.name = `${component.name} - ${agent.name} interface`;\n              previousRepresentation.selection = selection.rangedSelection;\n              previousRepresentation.component = component.name;\n              newRepresentations.push(previousRepresentation);\n            });\n          });\n        }\n      }\n      // Add previous custom representations (added by the user)\n      previousRepresentations && previousRepresentations.filter(rep => rep.custom)\n        .forEach(representation => {\n          // Update the component to target the first component\n          representation.component = components[0].name;\n          newRepresentations.push(representation);\n        });\n      // Update the representations state\n      return newRepresentations;\n    });\n  }, [\n    components,\n    topologyManager,\n    interactions,\n    selectedInteraction,\n    defaultRepresentations,\n  ]);\n\n  // Render loading or error messages according with the API response\n  if (loading) return <Loading />;\n  else if (error) return error.toString();\n  else if (!payload) return 'Something bad happened';\n\n  // Render\n  return (\n    <>\n      <Card>\n        <CardContent className={style.horizontal}>\n          <Typography variant=\"h6\">Residues selection:</Typography>\n          <InteractionSelector\n            interactions={interactions}\n            selectedInteraction={selectedInteraction}\n            setSelectedInteraction={setSelectedInteraction}\n          />\n          {selectedFramePair && (\n            <div>\n              {components && components.map((component, c) => (\n                <Chip key={c} label={'Frame ' + component.frame}\n                  style={{\n                    margin: '0.2em',\n                    backgroundColor: c === 0 ? 'red' : 'blue',\n                  }}\n                />\n              ))}\n              {selectedInteraction > 0 && components && components.map((component, c) => {\n                  // Get the interacting agents\n                  const interaction = interactions[selectedInteraction];\n                  const agents = [ interaction.agent_1, interaction.agent_2 ];\n                  // Generate a chip for every agent\n                  return agents.map((agent, a) => (\n                    <Chip key={a} label={'Frame ' + component.frame + ' - ' + agent}\n                      style={{\n                        margin: '0.2em',\n                        backgroundColor: a === 0\n                          ? c === 0\n                            ? 'orange'\n                            : 'purple'\n                          : c === 0\n                            ? 'yellow'\n                            : 'green',\n                      }}\n                    />\n                  ));\n                }\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      <Card className={style.margined} id=\"heatmap\">\n        <CardContent>\n          <Heatmap\n            inputData={{\n              data: rmsds,\n              xLabels: AxesValues,\n              yLabels: AxesValues,\n            }}\n            onTooltip={({ value, xAxisValue, yAxisValue }) =>\n              `${xAxisValue} - ${yAxisValue}\\n${Math.round(value * 100) / 100} Å`\n            }\n            onClick={({ xAxisValue, yAxisValue }) =>\n              setSelectedFramePair([xAxisValue, yAxisValue])\n            }\n            legendTitle={'RMSD (Å)'}\n            maxColor={'red'}\n            minColor={'blue'}\n            xTitle={'Frames'}\n            yTitle={'Frames'}\n          />\n        </CardContent>\n      </Card>\n      <ViewerSpawner\n        // Set a viewer if there is selected frames\n        newViewer={components\n          ? {\n              componentsState: [components, setComponents],\n              representationsState: [representations, setRepresentations],\n              selRef: selectedFramePair,\n              viewerRef: viewerRef\n            }\n          : null\n        }\n        // If the nailed/closed viewer is the current viewer then reset the 'selected'\n        onNail={viewer =>\n          setSelectedFramePair(previous => {\n            if (viewer.selRef === previous) return null;\n            else return previous;\n          })\n        }\n        onClose={viewer =>\n          setSelectedFramePair(previous => {\n            if (viewer.selRef === previous) return null;\n            else return previous;\n          })\n        }\n      />\n    </>\n  );\n};\n\nexport default RmsdPairwise;\n","// extracted by mini-css-extract-plugin\nexport default {\"rnd\":\"style_rnd__Txifm\",\"floating-card\":\"style_floating-card__HHpby\"};","import React, { lazy, Suspense, useRef, useState } from 'react';\n\n// Rnd is the resizable and draggable system where the ngl viewer is placed\nimport { Rnd } from 'react-rnd';\n\nimport Card from '../animated-card';\n\nimport style from './style.module.css';\n\nconst ViewerWithControls = lazy(() =>\n  import(\n    /* webpackChunkName: 'viewer-with-controls' */ '../viewer-with-controls'\n  ),\n);\n\n// Minimal ngl window height\nconst MIN_NGL_DIMENSION = 150;\n\n// Counter to get always the maximum zIndex\n// This is useful to set a new or currently dragged/resized ngl window over the others\nlet maxZ = 0;\nconst nextZ = () => {\n  maxZ += 1;\n  return maxZ;\n};\n\n// This function spawns all the NGL viewers needed\n// i.e. one viewer with the requested 'props' and all previous viewers which have been nailed\nconst ViewerSpawner = ({ newViewer, nailing = true, onNail, onClose }) => {\n  // Store here all nailed NGL viewers\n  const [nailedViewers, setNailedViewers] = useState([]);\n\n  // Set the viewers as the nailed viewers and the new viewer\n  const viewers = [...nailedViewers];\n\n  // Keep listed all arrays which have been used (i.e. ngl viewers which have been nailed or closed)\n  const usedIds = useRef([]);\n\n  if (newViewer) {\n    // Find a new suitable Id that meet 2 conditions:\n    // - There is never 2 viewers with the same id, so we avoid errors\n    // - If we pick diferent frames in the graph without nailing anything, the current viewer has always the same id\n    // (This way the current viewer does not appear in the origin position every time)\n    const getNewId = () => {\n      let id = 0;\n      while (id < 999) {\n        if (usedIds.current.indexOf(id) === -1) return id;\n        id += 1;\n      }\n      console.error('Maximum number of viewers reached');\n    };\n\n    // Set a unique id for this props based in the last nailed viewer\n    newViewer.id = getNewId();\n    newViewer.close = () => {\n      if (nailing) {\n        setNailedViewers(nailed => {\n          const newNailed = [...nailed];\n          const index = nailed.indexOf(newViewer);\n          if (index !== -1) newNailed.splice(index, 1);\n          return newNailed;\n        });\n      }\n      if (onClose) onClose(newViewer);\n      usedIds.current.push(newViewer.id);\n    };\n    // If the nailer function is passed, add the logic for the viewer to be nailed further\n    if (nailing)\n      newViewer.nail = () => {\n        setNailedViewers(nailed => [...nailed, newViewer]);\n        if (onNail) onNail(newViewer);\n        usedIds.current.push(newViewer.id);\n      };\n    // Add the current viewer to the viewers list\n    viewers.push(newViewer);\n  }\n\n  // Render a viewer for each prop. Use the 'selected' parameter as unique id\n  return viewers.map(viewer => <NGLViewerInDND key={viewer.id} {...viewer} />);\n};\n\n// This component render a small NGL viewer\n// It is called when user clicks in a point in the projections component\n// Also it is called by the generic analysis page\nconst NGLViewerInDND = props => {\n  // Set a reference for the viewer\n  // If a reference is passed among the viewer arguments then use it instead\n  const viewerRef = props.viewerRef || useRef(null);\n\n  // Set the default position and size\n  const [place, setPlace] = useState(() => {\n    // Set an extra margin\n    const MARGIN = 20;\n    // Get the screen pixel sizes and vertical scroll position\n    const { innerWidth, innerHeight, scrollY } = window;\n    // The spawned elements are parented to the 'main' element, not to the 'body'\n    // We have to take this in count, since the header adds an extra offset in vertical position\n    const offsetHeight = document.querySelector('main').offsetTop;\n    // Set a reasonable dimension for the ngl window\n    const dimension = Math.max(\n      Math.min(innerWidth / 4, innerHeight / 4),\n      MIN_NGL_DIMENSION,\n    );\n    const reasonableHeight = 1.5 * dimension;\n    const reasonableWidth = 2 * dimension;\n    return {\n      // WARNING: If you set the width as 'auto' the window stays very wide when exiting fullscreen\n      width: reasonableWidth, // Let the Rnd logic set the width automatically\n      height: reasonableHeight, // Reasonable height\n      x: 0, // Left border\n      y: innerHeight - offsetHeight - reasonableHeight - MARGIN + scrollY, // Bottom border\n    };\n  });\n\n  return (\n    // Rnd is the draggable and resizable system where the ngl viewer is placed\n    <Rnd\n      position={{ x: place.x, y: place.y }}\n      size={{ width: place.width, height: place.height }}\n      // Update the zIndex to make this window the first visible\n      style={{ zIndex: nextZ() }}\n      className={style.rnd}\n      data-rnd\n      // Limits where the window can be dragged/resized to\n      // WARNING: bounds=\"main\" is problematic since the window may appear out of bounds\n      // WARNING: Then when it is moved for the first time it jumps inside the bonds, not elegant\n      bounds=\"window\"\n      // Prevent the mouse to drag/resize the window when it is over specific elements\n      cancel=\"canvas, [data-popover], #preventDragSize, .prevent-drag\"\n      // On drag/resize starts we do not change anything, but use the hook to re-render this component\n      // The Z Index is updated and the selected window becomes the first in the z axis automatically\n      // WARNING: Drag functions are also called when you just click (e.g. clicking buttons)\n      onDragStart={() => {\n        setPlace({ ...place });\n      }}\n      onResizeStart={() => {\n        setPlace({ ...place });\n      }}\n      onDragStop={(e, d) => {\n        // Use this to reject some bugged event calls: e.g. the frames number selector\n        if (e.layerX === 0 && e.layerY === 0) return;\n        // We re-render only if the new position does not equal the old position\n        if (place.x !== d.x || place.y !== d.y)\n          setPlace({\n            ...place,\n            x: d.x,\n            y: d.y,\n          });\n      }}\n      // Re-adapt the viewer and update the position/size when the window is resized\n      onResize={() => viewerRef.current && viewerRef.current.autoResize()}\n      onResizeStop={(e, direction, ref, delta, position) => {\n        setPlace({\n          width: ref.style.width,\n          height: ref.style.height,\n          ...position,\n        });\n        // if (!viewerRef.current) return;\n        // viewerRef.current.autoResize();\n        // viewerRef.current.autoResize.flush();\n      }}\n    >\n      <Card className={style['floating-card']} elevation={4}>\n        <Suspense fallback={null}>\n          <ViewerWithControls\n            className={style['floating-card']}\n            ref={viewerRef}\n            startsPlaying={false}\n            {...props}\n          />\n        </Suspense>\n      </Card>\n    </Rnd>\n  );\n};\n\nexport default ViewerSpawner;\n","// extracted by mini-css-extract-plugin\nexport default {\"widest\":\"style_widest__hZ7sO\",\"margined\":\"style_margined__GphyO\",\"margined-bottom\":\"style_margined-bottom__KpiYO\",\"horizontal\":\"style_horizontal__1xLer\"};"],"names":["residueOptions","label","value","_ref","interactions","selectedInteraction","setSelectedInteraction","selectedResidues","setSelectedResidues","selectedOrder","handleToggleOrder","firstOrderLabel","firstOrderTooltip","secondOrderLabel","secondOrderTooltip","toggleOrderTooltip","interfaceOnly","currentInteraction","_jsxs","Suspense","fallback","_jsx","Loading","children","Select","onChange","event","target","className","style","map","interaction","i","MenuItem","disabled","failed","name","RadioGroup","opt","FormControlLabel","control","Radio","color","undefined","_Fragment","TextField","title","agent_1","agent_2","IconButton","onClick","changeOrder","size","FontAwesomeIcon","icon","faExchangeAlt","useDefaultRepresentations","chains","metadata","topology","useContext","ProjectCtx","file","structure","PdbCtx","useMemo","reps","ligands","LIGANDS","chainnames","CHAINNAMES","chain","push","selection","forEach","rep","nglSelectionExists","chainNames","indexOf","getChainByName","residues","every","residue","referenceType","type","opacity","ligand","ligandResidueIndices","getReferenceResidueIndices","length","rangedSelection","nglSelection","residueIndices2Ngl","ngl","singleAtomIndices","residueAtomIndices","atomIndices","singleAtomSelection","join","representedResidues","isCartoon","nglSelection2residueIndices","residuesCount","residueCount","nonRepresentedResidues","otherSelection","REPRESENTATION_REFERENCES","REPRESENTATION_COLORS","base","interface","RmsdPairwise","accessionAndMdNumber","defaultInteractions","topologyManager","viewerRef","useRef","defaultRepresentations","selectedFramePair","setSelectedFramePair","useState","url","BASE_PATH_PROJECTS","loading","payload","error","useAPI","rmsds","AxesValues","data","find","dataset","Error","dataLength","AxesStep","Math","floor","mdFrames","Array","fill","v","components","setComponents","previousComponents","frame","index","previousComponent","representations","setRepresentations","agents","interface_indices_1","interface_indices_2","previousRepresentations","newRepresentations","previousInteraction","reference","includes","component","representation","newRepresentation","previousRepresentation","previousComponentName","split","replace","agent","agentIndex","filter","custom","toString","Card","CardContent","horizontal","Typography","variant","InteractionSelector","c","Chip","margin","backgroundColor","a","margined","id","Heatmap","inputData","xLabels","yLabels","onTooltip","xAxisValue","yAxisValue","round","_ref2","legendTitle","maxColor","minColor","xTitle","yTitle","ViewerSpawner","newViewer","componentsState","representationsState","selRef","onNail","viewer","previous","onClose","ViewerWithControls","lazy","maxZ","NGLViewerInDND","props","place","setPlace","innerWidth","innerHeight","scrollY","window","offsetHeight","document","querySelector","offsetTop","dimension","max","min","reasonableHeight","width","height","x","y","Rnd","position","zIndex","bounds","cancel","onDragStart","onResizeStart","onDragStop","e","d","layerX","layerY","onResize","current","autoResize","onResizeStop","direction","ref","delta","elevation","startsPlaying","nailing","nailedViewers","setNailedViewers","viewers","usedIds","getNewId","console","close","nailed","newNailed","splice","nail"],"sourceRoot":""}