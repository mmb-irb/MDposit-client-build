{"version":3,"file":"static/js/6618.dcb979da.chunk.js","mappings":"+IAEA,MA2BA,EA3B6BA,CAACC,EAAaC,KACzC,IAAKD,EAAYE,OACf,MAAM,8MAIR,IAAIC,EAaJ,OAXEA,EADyB,IAAvBH,EAAYE,OACGF,EAAY,GAAK,EACF,IAAvBA,EAAYE,OACP,GAAAE,OAAMJ,EAAY,GAAK,EAAC,SAAAI,OAAQJ,EAAY,GAAK,GAE9CA,EAAYK,QAC3B,CAACC,EAAKC,EAAYC,EAACC,KAAA,IAAE,OAAEP,GAAQO,EAAA,SAAAL,OAC1BE,GAAGF,OAAGE,EAAM,IAAM,IAAEF,OAAGI,IAAMN,EAAS,EAAI,OAAS,GAAE,KAAAE,OAAIG,EAC1D,EAAC,GACL,IAGE,+BAANH,OACEJ,EAAYE,OAAS,EAAI,IAAM,GAAE,KAAAE,OAC/BD,EAAc,qBAAAC,QAAoBM,EAAAA,EAAAA,GACtB,IAAdT,EACA,GACD,2B,mCCNH,QAXA,SAAkBU,EAAOC,GAKvB,IAJA,IAAIC,GAAS,EACTX,EAAkB,MAATS,EAAgB,EAAIA,EAAMT,OACnCY,EAASC,MAAMb,KAEVW,EAAQX,GACfY,EAAOD,GAASD,EAASD,EAAME,GAAQA,EAAOF,GAEhD,OAAOG,CACT,C,mCCOA,QAFcC,MAAMC,O,gFCjBhBC,EAAiBC,EAAAA,EAAKC,SACtBC,EAAYC,KAAKC,ICkBrB,QDTA,SAAqBC,GACnB,IAAIC,EAAOH,KAAKE,GAChB,OAAO,SAASE,EAAQC,GAGtB,GAFAD,GAASE,EAAAA,EAAAA,GAASF,IAClBC,EAAyB,MAAbA,EAAoB,EAAIN,GAAUQ,EAAAA,EAAAA,GAAUF,GAAY,OACnDT,EAAeQ,GAAS,CAGvC,IAAII,IAAQC,EAAAA,EAAAA,GAASL,GAAU,KAAKM,MAAM,KACtCC,EAAQR,EAAKK,EAAK,GAAK,MAAQA,EAAK,GAAKH,IAG7C,SADAG,IAAQC,EAAAA,EAAAA,GAASE,GAAS,KAAKD,MAAM,MACvB,GAAK,MAAQF,EAAK,GAAKH,GACvC,CACA,OAAOF,EAAKC,EACd,CACF,CCTYQ,CAAY,Q,iDCYxB,QAPA,SAAmBD,GACjB,IAAIlB,GAASoB,EAAAA,EAAAA,GAASF,GAClBG,EAAYrB,EAAS,EAEzB,OAAOA,IAAWA,EAAUqB,EAAYrB,EAASqB,EAAYrB,EAAU,CACzE,C,kFCxBIsB,EAAcC,EAAAA,EAASA,EAAAA,EAAOC,eAAYC,EAC1CC,EAAiBJ,EAAcA,EAAYN,cAAWS,EA0B1D,QAhBA,SAASE,EAAaT,GAEpB,GAAoB,iBAATA,EACT,OAAOA,EAET,IAAIhB,EAAAA,EAAAA,GAAQgB,GAEV,OAAOU,EAAAA,EAAAA,GAASV,EAAOS,GAAgB,GAEzC,IAAIE,EAAAA,EAAAA,GAASX,GACX,OAAOQ,EAAiBA,EAAeI,KAAKZ,GAAS,GAEvD,IAAIlB,EAAUkB,EAAQ,GACtB,MAAkB,KAAVlB,GAAkB,EAAIkB,IAAU,IAAa,KAAOlB,CAC9D,ECPA,QAJA,SAAkBkB,GAChB,OAAgB,MAATA,EAAgB,GAAKS,EAAaT,EAC3C,C","sources":["pages/accession/pca/plain-text-explanation/index.js","../node_modules/lodash-es/_arrayMap.js","../node_modules/lodash-es/isArray.js","../node_modules/lodash-es/_createRound.js","../node_modules/lodash-es/round.js","../node_modules/lodash-es/toInteger.js","../node_modules/lodash-es/_baseToString.js","../node_modules/lodash-es/toString.js"],"sourcesContent":["import { round } from 'lodash-es';\n\nconst plainTextExplanation = (projections, explanation) => {\n  if (!projections.length) {\n    return `No projection selected, please select one or multiple projections to\n    visualise its or their related data. Only the darker blue bars correspond to\n    projections for which data has been calculated.`;\n  }\n  let projectionText;\n  if (projections.length === 1) {\n    projectionText = projections[0] + 1;\n  } else if (projections.length === 2) {\n    projectionText = `${projections[0] + 1} and ${projections[1] + 1}`;\n  } else {\n    projectionText = projections.reduce(\n      (acc, projection, i, { length }) =>\n        `${acc}${acc ? ',' : ''}${i === length - 1 ? ' and' : ''} ${projection +\n          1}`,\n      '',\n    );\n  }\n  return `Selected principal component${\n    projections.length > 1 ? 's' : ''\n  } ${projectionText}, accounting for ${round(\n    explanation * 100,\n    1,\n  )}% of explained variance`;\n};\n\nexport default plainTextExplanation;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nexport default arrayMap;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","import root from './_root.js';\nimport toInteger from './toInteger.js';\nimport toNumber from './toNumber.js';\nimport toString from './toString.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsFinite = root.isFinite,\n    nativeMin = Math.min;\n\n/**\n * Creates a function like `_.round`.\n *\n * @private\n * @param {string} methodName The name of the `Math` method to use when rounding.\n * @returns {Function} Returns the new round function.\n */\nfunction createRound(methodName) {\n  var func = Math[methodName];\n  return function(number, precision) {\n    number = toNumber(number);\n    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n    if (precision && nativeIsFinite(number)) {\n      // Shift with exponential notation to avoid floating-point issues.\n      // See [MDN](https://mdn.io/round#Examples) for more details.\n      var pair = (toString(number) + 'e').split('e'),\n          value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n      pair = (toString(value) + 'e').split('e');\n      return +(pair[0] + 'e' + (+pair[1] - precision));\n    }\n    return func(number);\n  };\n}\n\nexport default createRound;\n","import createRound from './_createRound.js';\n\n/**\n * Computes `number` rounded to `precision`.\n *\n * @static\n * @memberOf _\n * @since 3.10.0\n * @category Math\n * @param {number} number The number to round.\n * @param {number} [precision=0] The precision to round to.\n * @returns {number} Returns the rounded number.\n * @example\n *\n * _.round(4.006);\n * // => 4\n *\n * _.round(4.006, 2);\n * // => 4.01\n *\n * _.round(4060, -2);\n * // => 4100\n */\nvar round = createRound('round');\n\nexport default round;\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n","import Symbol from './_Symbol.js';\nimport arrayMap from './_arrayMap.js';\nimport isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default baseToString;\n","import baseToString from './_baseToString.js';\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nexport default toString;\n"],"names":["plainTextExplanation","projections","explanation","length","projectionText","concat","reduce","acc","projection","i","_ref","round","array","iteratee","index","result","Array","isArray","nativeIsFinite","root","isFinite","nativeMin","Math","min","methodName","func","number","precision","toNumber","toInteger","pair","toString","split","value","createRound","toFinite","remainder","symbolProto","Symbol","prototype","undefined","symbolToString","baseToString","arrayMap","isSymbol","call"],"sourceRoot":""}