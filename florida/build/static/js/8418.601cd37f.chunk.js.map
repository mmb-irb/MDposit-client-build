{"version":3,"file":"static/js/8418.601cd37f.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/animated-card/style.module.css?d4d9","components/animated-card/index.js","webpack://mdposit/./src/components/viewer-spawner/style.module.css?df6e","components/viewer-spawner/index.js","utils/statistics/index.js","../node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@mui/material/internal/svg-icons/CheckBox.js","../node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@mui/material/Checkbox/checkboxClasses.js","../node_modules/@mui/material/Checkbox/Checkbox.js","pages/accession/lipid-order/index.js","webpack://mdposit/./src/pages/accession/lipid-order/style.module.css?abb6"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__M9GCG\"};","import React, { useLayoutEffect, useRef, forwardRef } from 'react';\nimport { Card } from '@mui/material';\n\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nconst KEYFRAMES = { opacity: [0, 1] };\n\nif (!reducedMotion()) {\n  KEYFRAMES.transform = ['translateY(50px)', 'translateY(0)'];\n}\n\nconst ANIMATION_OPTIONS = {\n  fill: 'both',\n  easing: 'cubic-bezier(0, .99, .56, 1.1)',\n  duration: 500,\n};\n\n// Make the card appear and slide softly from down to up when the page is loaded\nconst AnimatedCard = forwardRef(({ overrideComponent, ...props }, ref) => {\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const node = containerRef.current && containerRef.current.firstElementChild;\n    if (!(node && node.animate)) return;\n\n    const index = Array.from(\n      document.querySelectorAll('main section'),\n    ).findIndex(section => node === section);\n\n    const animation = node.animate(KEYFRAMES, {\n      ...ANIMATION_OPTIONS,\n      delay: index * 150,\n    });\n\n    return () => animation.cancel();\n  }, []);\n\n  const Component = overrideComponent ? 'section' : Card;\n\n  return (\n    <div ref={containerRef} className={style.container}>\n      <Component component=\"section\" {...props} ref={ref} />\n    </div>\n  );\n});\n\nexport default AnimatedCard;\n","// extracted by mini-css-extract-plugin\nexport default {\"rnd\":\"style_rnd__Txifm\",\"floating-card\":\"style_floating-card__HHpby\"};","import React, { lazy, Suspense, useRef, useState } from 'react';\n\n// Rnd is the resizable and draggable system where the ngl viewer is placed\nimport { Rnd } from 'react-rnd';\n\nimport Card from '../animated-card';\n\nimport style from './style.module.css';\n\nconst ViewerWithControls = lazy(() =>\n  import(\n    /* webpackChunkName: 'viewer-with-controls' */ '../viewer-with-controls'\n  ),\n);\n\n// Minimal ngl window height\nconst MIN_NGL_DIMENSION = 150;\n\n// Counter to get always the maximum zIndex\n// This is useful to set a new or currently dragged/resized ngl window over the others\nlet maxZ = 0;\nconst nextZ = () => {\n  maxZ += 1;\n  return maxZ;\n};\n\n// This function spawns all the NGL viewers needed\n// i.e. one viewer with the requested 'props' and all previous viewers which have been nailed\nconst ViewerSpawner = ({ newViewer, nailing = true, onNail, onClose }) => {\n  // Store here all nailed NGL viewers\n  const [nailedViewers, setNailedViewers] = useState([]);\n\n  // Set the viewers as the nailed viewers and the new viewer\n  const viewers = [...nailedViewers];\n\n  // Keep listed all arrays which have been used (i.e. ngl viewers which have been nailed or closed)\n  const usedIds = useRef([]);\n\n  if (newViewer) {\n    // Find a new suitable Id that meet 2 conditions:\n    // - There is never 2 viewers with the same id, so we avoid errors\n    // - If we pick diferent frames in the graph without nailing anything, the current viewer has always the same id\n    // (This way the current viewer does not appear in the origin position every time)\n    const getNewId = () => {\n      let id = 0;\n      while (id < 999) {\n        if (usedIds.current.indexOf(id) === -1) return id;\n        id += 1;\n      }\n      console.error('Maximum number of viewers reached');\n    };\n\n    // Set a unique id for this props based in the last nailed viewer\n    newViewer.id = getNewId();\n    newViewer.close = () => {\n      if (nailing) {\n        setNailedViewers(nailed => {\n          const newNailed = [...nailed];\n          const index = nailed.indexOf(newViewer);\n          if (index !== -1) newNailed.splice(index, 1);\n          return newNailed;\n        });\n      }\n      if (onClose) onClose(newViewer);\n      usedIds.current.push(newViewer.id);\n    };\n    // If the nailer function is passed, add the logic for the viewer to be nailed further\n    if (nailing)\n      newViewer.nail = () => {\n        setNailedViewers(nailed => [...nailed, newViewer]);\n        if (onNail) onNail(newViewer);\n        usedIds.current.push(newViewer.id);\n      };\n    // Add the current viewer to the viewers list\n    viewers.push(newViewer);\n  }\n\n  // Render a viewer for each prop. Use the 'selected' parameter as unique id\n  return viewers.map(viewer => <NGLViewerInDND key={viewer.id} {...viewer} />);\n};\n\n// This component render a small NGL viewer\n// It is called when user clicks in a point in the projections component\n// Also it is called by the generic analysis page\nconst NGLViewerInDND = props => {\n  // Set a reference for the viewer\n  // If a reference is passed among the viewer arguments then use it instead\n  const viewerRef = props.viewerRef || useRef(null);\n\n  // Set the default position and size\n  const [place, setPlace] = useState(() => {\n    // Set an extra margin\n    const MARGIN = 20;\n    // Get the screen pixel sizes and vertical scroll position\n    const { innerWidth, innerHeight, scrollY } = window;\n    // The spawned elements are parented to the 'main' element, not to the 'body'\n    // We have to take this in count, since the header adds an extra offset in vertical position\n    const offsetHeight = document.querySelector('main').offsetTop;\n    // Set a reasonable dimension for the ngl window\n    const dimension = Math.max(\n      Math.min(innerWidth / 4, innerHeight / 4),\n      MIN_NGL_DIMENSION,\n    );\n    const reasonableHeight = 1.5 * dimension;\n    const reasonableWidth = 2 * dimension;\n    return {\n      // WARNING: If you set the width as 'auto' the window stays very wide when exiting fullscreen\n      width: reasonableWidth, // Let the Rnd logic set the width automatically\n      height: reasonableHeight, // Reasonable height\n      x: 0, // Left border\n      y: innerHeight - offsetHeight - reasonableHeight - MARGIN + scrollY, // Bottom border\n    };\n  });\n\n  return (\n    // Rnd is the draggable and resizable system where the ngl viewer is placed\n    <Rnd\n      position={{ x: place.x, y: place.y }}\n      size={{ width: place.width, height: place.height }}\n      // Update the zIndex to make this window the first visible\n      style={{ zIndex: nextZ() }}\n      className={style.rnd}\n      data-rnd\n      // Limits where the window can be dragged/resized to\n      // WARNING: bounds=\"main\" is problematic since the window may appear out of bounds\n      // WARNING: Then when it is moved for the first time it jumps inside the bonds, not elegant\n      bounds=\"window\"\n      // Prevent the mouse to drag/resize the window when it is over specific elements\n      cancel=\"canvas, [data-popover], #preventDragSize, .prevent-drag\"\n      // On drag/resize starts we do not change anything, but use the hook to re-render this component\n      // The Z Index is updated and the selected window becomes the first in the z axis automatically\n      // WARNING: Drag functions are also called when you just click (e.g. clicking buttons)\n      onDragStart={() => {\n        setPlace({ ...place });\n      }}\n      onResizeStart={() => {\n        setPlace({ ...place });\n      }}\n      onDragStop={(e, d) => {\n        // Use this to reject some bugged event calls: e.g. the frames number selector\n        if (e.layerX === 0 && e.layerY === 0) return;\n        // We re-render only if the new position does not equal the old position\n        if (place.x !== d.x || place.y !== d.y)\n          setPlace({\n            ...place,\n            x: d.x,\n            y: d.y,\n          });\n      }}\n      // Re-adapt the viewer and update the position/size when the window is resized\n      onResize={() => viewerRef.current && viewerRef.current.autoResize()}\n      onResizeStop={(e, direction, ref, delta, position) => {\n        setPlace({\n          width: ref.style.width,\n          height: ref.style.height,\n          ...position,\n        });\n        // if (!viewerRef.current) return;\n        // viewerRef.current.autoResize();\n        // viewerRef.current.autoResize.flush();\n      }}\n    >\n      <Card className={style['floating-card']} elevation={4}>\n        <Suspense fallback={null}>\n          <ViewerWithControls\n            className={style['floating-card']}\n            ref={viewerRef}\n            startsPlaying={false}\n            {...props}\n          />\n        </Suspense>\n      </Card>\n    </Rnd>\n  );\n};\n\nexport default ViewerSpawner;\n","// Statistics\n// Provide some usual statistics functions\n\n// Set a function which returns just the average\nexport const getMean = data => {\n  if (!data) return;\n  const sum = data.reduce((pv, cv) => pv + cv, 0);\n  const n = data.length;\n  return sum / n;\n};\n\n// Set a function which returns the average and standard deviation from a numeric array\nexport const getMeanAndStdv = data => {\n  if (!data) return;\n  const sum = data.reduce((pv, cv) => pv + cv, 0);\n  const n = data.length;\n  const mean = sum / n;\n  const stdv = Math.sqrt(\n    data.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n,\n  );\n  return { mean, stdv };\n};\n","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCheckboxUtilityClass(slot) {\n  return generateUtilityClass('MuiCheckbox', slot);\n}\nconst checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium']);\nexport default checkboxClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checkedIcon\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport checkboxClasses, { getCheckboxUtilityClass } from './checkboxClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    indeterminate,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`, `size${capitalize(size)}`]\n  };\n  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\nconst CheckboxRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiCheckbox',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.indeterminate && styles.indeterminate, styles[`size${capitalize(ownerState.size)}`], ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  color: (theme.vars || theme).palette.text.secondary\n}, !ownerState.disableRipple && {\n  '&:hover': {\n    backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  }\n}, ownerState.color !== 'default' && {\n  [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {\n    color: (theme.vars || theme).palette[ownerState.color].main\n  },\n  [`&.${checkboxClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  }\n}));\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(CheckBoxIcon, {});\nconst defaultIcon = /*#__PURE__*/_jsx(CheckBoxOutlineBlankIcon, {});\nconst defaultIndeterminateIcon = /*#__PURE__*/_jsx(IndeterminateCheckBoxIcon, {});\nconst Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(inProps, ref) {\n  var _icon$props$fontSize, _indeterminateIcon$pr;\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCheckbox'\n  });\n  const {\n      checkedIcon = defaultCheckedIcon,\n      color = 'primary',\n      icon: iconProp = defaultIcon,\n      indeterminate = false,\n      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,\n      inputProps,\n      size = 'medium',\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const icon = indeterminate ? indeterminateIconProp : iconProp;\n  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n  const ownerState = _extends({}, props, {\n    color,\n    indeterminate,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CheckboxRoot, _extends({\n    type: \"checkbox\",\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size\n    }),\n    ownerState: ownerState,\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other, {\n    classes: classes\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckBoxIcon />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <CheckBoxOutlineBlankIcon />\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate: PropTypes.bool,\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateCheckBoxIcon />\n   */\n  indeterminateIcon: PropTypes.node,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense checkbox styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Checkbox;","import React, { lazy, Suspense, useState, useContext, useMemo, useEffect, useRef } from 'react';\n\nimport {\n  CardContent,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  FormControlLabel,\n  Checkbox,\n  Tabs,\n  Tab,\n  Typography,\n} from '@mui/material';\n\nimport Card from '../../../components/animated-card';\nimport ViewerSpawner from '../../../components/viewer-spawner';\nimport Loading from '../../../components/loading';\n\nimport useAPI from '../../../hooks/use-api';\nimport { ProjectCtx } from '../../../contexts';\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\nimport { getMeanAndStdv } from '../../../utils/statistics';\n\nimport style from './style.module.css';\n\nconst Graph = lazy(() =>\n  import(/* webpackChunkName: 'graph' */ '../../../components/graph'),\n);\n\nconst colors = ['black', 'red', 'orange', 'yellow', 'green', 'blue', 'purple'];\n\nconst LipidOrder = () => {\n  const { accession, accessionAndMdNumber} = useContext(ProjectCtx);\n  // Send a request to the API with the url of the specific analysis\n  const {\n    loading,\n    payload,\n    error,\n  } = useAPI(`${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/lipid-order/`);\n  // Get the membrane map\n  const {\n    loading: memMapLoading,\n    payload: memMapPayload,\n    error: memMapError,\n} = useAPI(`${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/mem-map/`);\n\n  // Add state for selected lipid type\n  const [selectedLipid, setSelectedLipid] = useState(null);\n  const [display, setDisplay] = useState({});\n  const [xSelected, setXSelected] = useState(null);\n  const [representations, setRepresentations] = useState(null);\n  const [flipY, setFlipY] = useState(false);\n  const [showStdDev, setShowStdDev] = useState(true);\n  const lipidResname = useRef(null);\n\n  // Get available lipid types for tabs\n  const lipidTypes = useMemo(() => {\n    if (!payload) return [];\n    return Object.keys(payload.data);\n  }, [payload]);\n\n  // Set initial selected lipid when data loads\n  useMemo(() => {\n    if (lipidTypes.length && !selectedLipid) {\n      setSelectedLipid(lipidTypes[0]);\n    }\n  }, [lipidTypes, selectedLipid]);\n\n  const orderParameters = useMemo(() => {\n    if (!payload || !selectedLipid || !memMapPayload || !memMapPayload.references) return {};\n    \n    const orderParams = {};\n    const defaultDisplay = {};\n    lipidResname.current = memMapPayload.references[selectedLipid].resname;\n\n    const chains = payload.data[selectedLipid];\n    Object.entries(chains).forEach(([chainId, chainData]) => {\n      const name = `${lipidResname.current} tail ${parseInt(chainId) + 1}`;\n      const dataset = {\n        data: chainData.avg.map(v => flipY ? -v : v),\n        areaStdDev: chainData.std,\n        labels: chainData.atoms,\n        color: colors[parseInt(chainId) % colors.length],\n      };\n      const { mean: average, stdv: stddev } = getMeanAndStdv(dataset.data);\n      dataset.average = average;\n      dataset.stddev = stddev;\n      orderParams[name] = dataset;\n      defaultDisplay[name] = true;\n    });\n\n    setDisplay(defaultDisplay);\n    return orderParams;\n  }, [payload, selectedLipid, flipY, memMapPayload]);\n\n  const maxStd = useMemo(() => {\n    if (!orderParameters || !display) return 0;\n    return Math.max(\n      ...Object.entries(orderParameters)\n        .filter(([key]) => display[key])\n        .map(([_, data]) => Math.max(...(data.areaStdDev || [])))\n    );\n  }, [orderParameters, display]);\n\n  // Define representations when data changes\n  useEffect(() => {\n    if (!display || !orderParameters) return;\n    const reps = [{\n      'name': lipidResname.current,\n      'type': 'licorice',\n      'color': 'orange',\n      'opacity': 0.5,\n      'selection': `${lipidResname.current}`,\n    }];\n\n    if (xSelected !== null) {\n      // Iterate through orderParameters[selectedLipid] dictionary keys\n      Object.keys(orderParameters).forEach((tail, index) => {\n        console.log('tail'.tail)\n        const atomName = orderParameters[tail].labels[xSelected];\n        if (!atomName) return;\n        reps.push({\n        'name': `${atomName}`,\n        'type': 'ball+stick',\n        'color': colors[index % colors.length],\n        'opacity': 0.9,\n        'selection': `${lipidResname.current} and .${atomName}`,\n        'other': { radius: 0.3 },\n        'show': display[tail],\n        });\n      });\n    }\n    setRepresentations(reps);\n  }, [selectedLipid, xSelected, display]);\n\n  // Create marks for graph highlighting\n  const marks = useMemo(() => {\n    return xSelected !== null ? [{\n      x: xSelected,\n      attr: { fill: '#c8c8c8' },\n    }] : [];\n  }, [xSelected]);\n\n  if (loading) return <Loading />;\n  if (error) return error.toString();\n  if (!payload || !memMapPayload) return 'Something bad happened with Lipid Order analysis';\n\n  const cents = num => Math.round(num * 100) / 100;\n\n  return (\n    <Suspense fallback={<Loading />}>\n      <Card className={style.card}>\n        <CardContent>\n          <Tabs\n            value={selectedLipid}\n            variant=\"fullWidth\"\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            onChange={(event, value) => {\n              setSelectedLipid(value);\n            }}\n            className={style['margined-bottom']}\n          >\n            {lipidTypes.map((lipid) => (\n              <Tab\n                key={lipid}\n                value={lipid}\n                label={\n                  <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n                    <span >\n                      {memMapPayload?.references?.[lipid]?.resname || lipid}\n                    </span>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {/* Add your subtitle here */}\n                      {memMapPayload?.references?.[lipid]?.lipidmaps.name || 'Lipid'}\n                    </Typography>\n                  </div>\n                }\n              />\n            ))}\n          </Tabs>\n          <Table padding=\"checkbox\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Lipid</TableCell>\n                <TableCell>Mean Order Parameter</TableCell>\n                <TableCell>Standard Deviation</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {Object.entries(orderParameters).map(([key, data], i) => (\n                <TableRow key={key}>\n                  <TableCell>\n                    <FormControlLabel\n                      onChange={() =>\n                        setDisplay(previous => ({\n                          ...previous,\n                          [key]: !previous[key],\n                        }))\n                      }\n                      control={\n                        <Checkbox\n                          checked={display[key]}\n                          style={{ color: data.color }}\n                        />\n                      }\n                      label={key}\n                    />\n                  </TableCell>\n                  <TableCell>{cents(data.average)}</TableCell>\n                  <TableCell>{cents(data.stddev)}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          \n        </CardContent>\n      </Card>\n      <Card className={style.card}>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={flipY}\n            onChange={(e) => setFlipY(e.target.checked)}\n          />\n        }\n        label=\"Invert Y-axis values\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={showStdDev}\n            onChange={(e) => setShowStdDev(e.target.checked)}\n          />\n        }\n        label=\"Show standard deviation\"\n      />\n      <CardContent>\n        <Graph\n          yData={orderParameters}\n          xAxisLabel=\"Carbon Position\"\n          yAxisLabel=\"Order Parameter\"\n          type=\"line\"\n          selfLegend={false}\n          dataDisplay={display}\n          labelsOnHover={true}\n          xTooltip={(_, xIndex) => `Position ${xIndex + 1}`}\n          onSelect={setXSelected}\n          marks={marks}\n          areaStdDev={showStdDev}\n          yPadding={showStdDev ? maxStd : 0}\n        />\n      </CardContent>\n      </Card>\n      <ViewerSpawner\n        newViewer={\n          typeof xSelected === 'number'\n            ? {\n              accession: accession,\n              xSelection: xSelected,\n              representationsState: [representations, setRepresentations]\n            }\n            : null\n        }\n        onNail={viewer =>\n          setXSelected(previous => {\n            if (viewer.xSelection === previous) return null;\n            else return previous;\n          })\n        }\n        onClose={viewer =>\n          setXSelected(previous => {\n            if (viewer.xSelection === previous) return null;\n            else return previous;\n          })\n        }\n      />\n    </Suspense>\n  );\n};\n\nexport default LipidOrder;\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"style_card__Tu+j+\",\"margined-bottom\":\"style_margined-bottom__WM5Gb\"};"],"names":["KEYFRAMES","opacity","reducedMotion","transform","ANIMATION_OPTIONS","fill","easing","duration","forwardRef","_ref","ref","overrideComponent","props","containerRef","useRef","useLayoutEffect","node","current","firstElementChild","animate","index","Array","from","document","querySelectorAll","findIndex","section","animation","delay","cancel","Component","Card","_jsx","className","style","children","component","ViewerWithControls","lazy","maxZ","NGLViewerInDND","viewerRef","place","setPlace","useState","innerWidth","innerHeight","scrollY","window","offsetHeight","querySelector","offsetTop","dimension","Math","max","min","reasonableHeight","width","height","x","y","Rnd","position","size","zIndex","bounds","onDragStart","onResizeStart","onDragStop","e","d","layerX","layerY","onResize","autoResize","onResizeStop","direction","delta","elevation","Suspense","fallback","startsPlaying","newViewer","nailing","onNail","onClose","nailedViewers","setNailedViewers","viewers","usedIds","getNewId","id","indexOf","console","error","close","nailed","newNailed","splice","push","nail","map","viewer","getMean","data","reduce","pv","cv","length","getMeanAndStdv","sum","n","mean","stdv","sqrt","pow","a","b","createSvgIcon","getCheckboxUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CheckboxRoot","styled","SwitchBase","shouldForwardProp","prop","rootShouldForwardProp","name","overridesResolver","styles","ownerState","root","indeterminate","capitalize","color","theme","_extends","vars","palette","text","secondary","disableRipple","backgroundColor","action","activeChannel","mainChannel","hoverOpacity","alpha","active","main","checkboxClasses","checked","disabled","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","React","inProps","_icon$props$fontSize","_indeterminateIcon$pr","useDefaultProps","checkedIcon","icon","iconProp","indeterminateIcon","indeterminateIconProp","inputProps","other","_objectWithoutPropertiesLoose","classes","slots","composedClasses","composeClasses","useUtilityClasses","type","fontSize","clsx","Graph","colors","LipidOrder","accession","accessionAndMdNumber","useContext","ProjectCtx","loading","payload","useAPI","BASE_PATH_PROJECTS","memMapLoading","memMapPayload","memMapError","selectedLipid","setSelectedLipid","display","setDisplay","xSelected","setXSelected","representations","setRepresentations","flipY","setFlipY","showStdDev","setShowStdDev","lipidResname","lipidTypes","useMemo","Object","keys","orderParameters","references","orderParams","defaultDisplay","resname","chains","entries","forEach","chainId","chainData","parseInt","dataset","avg","v","areaStdDev","std","labels","atoms","average","stddev","maxStd","filter","_ref2","key","_ref3","_","useEffect","reps","tail","log","atomName","radius","marks","attr","Loading","toString","cents","num","round","_jsxs","card","CardContent","Tabs","value","variant","indicatorColor","textColor","onChange","event","lipid","_memMapPayload$refere","_memMapPayload$refere2","_memMapPayload$refere3","_memMapPayload$refere4","Tab","label","flexDirection","alignItems","Typography","lipidmaps","Table","padding","TableHead","TableRow","TableCell","TableBody","_ref4","i","FormControlLabel","previous","control","Checkbox","target","yData","xAxisLabel","yAxisLabel","selfLegend","dataDisplay","labelsOnHover","xTooltip","xIndex","onSelect","yPadding","ViewerSpawner","xSelection","representationsState"],"sourceRoot":""}