{"version":3,"file":"static/js/5851.cfed5faa.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/animated-card/style.module.css?d4d9","components/animated-card/index.js","webpack://mdposit/./src/components/interaction-selector/style.module.css?5392","components/interaction-selector/index.js","components/ngl-viewer/use-default-representations/index.js","webpack://mdposit/./src/components/viewer-spawner/style.module.css?df6e","components/viewer-spawner/index.js","webpack://mdposit/./src/components/legend/style.module.css?c59e","components/legend/index.js","pages/accession/energies/index.js","../node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@mui/material/internal/svg-icons/CheckBox.js","../node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@mui/material/Checkbox/checkboxClasses.js","../node_modules/@mui/material/Checkbox/Checkbox.js","webpack://mdposit/./src/pages/accession/energies/style.module.css?bb76"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__M9GCG\"};","import React, { useLayoutEffect, useRef, forwardRef } from 'react';\nimport { Card } from '@mui/material';\n\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nconst KEYFRAMES = { opacity: [0, 1] };\n\nif (!reducedMotion()) {\n  KEYFRAMES.transform = ['translateY(50px)', 'translateY(0)'];\n}\n\nconst ANIMATION_OPTIONS = {\n  fill: 'both',\n  easing: 'cubic-bezier(0, .99, .56, 1.1)',\n  duration: 500,\n};\n\n// Make the card appear and slide softly from down to up when the page is loaded\nconst AnimatedCard = forwardRef(({ overrideComponent, ...props }, ref) => {\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const node = containerRef.current && containerRef.current.firstElementChild;\n    if (!(node && node.animate)) return;\n\n    const index = Array.from(\n      document.querySelectorAll('main section'),\n    ).findIndex(section => node === section);\n\n    const animation = node.animate(KEYFRAMES, {\n      ...ANIMATION_OPTIONS,\n      delay: index * 150,\n    });\n\n    return () => animation.cancel();\n  }, []);\n\n  const Component = overrideComponent ? 'section' : Card;\n\n  return (\n    <div ref={containerRef} className={style.container}>\n      <Component component=\"section\" {...props} ref={ref} />\n    </div>\n  );\n});\n\nexport default AnimatedCard;\n","// extracted by mini-css-extract-plugin\nexport default {\"horizontal\":\"style_horizontal__2DIWx\",\"horizontal-margined\":\"style_horizontal-margined__e9fQR\"};","import React, { Suspense } from 'react';\n\nimport {\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Select,\n  MenuItem,\n  TextField,\n  IconButton,\n} from '@mui/material';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport Loading from '../loading';\n\nimport style from './style.module.css';\n\nconst residueOptions = [\n  { label: 'All residues', value: 'residue_indices' },\n  { label: 'Interface residues', value: 'interface_indices' },\n];\n\n// Render a panel which allows to select the desired interaction\n// If the user selects a new interaction then the 'setSelectedInteraction' is set as its index\n// Interactions have the following structure:\n// { name: string, label: string, ... }\n// The 'label' field will replace the 'name' in the selector labels if exists\n// When 'selectedResidues' is passed, render also tools to select interaction residues\n// Residue options are 'all' or 'interface' residues\n// DANI: La guinda sería un 'custom' en las opciones de residuos\n// DANI: La idea sería desplegar dos residue selectors, uno para cada interaction agent\nconst InteractionSelector = ({\n  interactions,\n  selectedInteraction,\n  setSelectedInteraction,\n  selectedResidues,\n  setSelectedResidues,\n  selectedOrder,\n  handleToggleOrder,\n  firstOrderLabel, // The label to be represented over the first order rectangle\n  firstOrderTooltip, // The tooltip to be shown for the first order rectangle\n  secondOrderLabel, // The label to be represented over the second order rectangle\n  secondOrderTooltip, // The tooltip to be shown for the second order rectangle\n  toggleOrderTooltip, // The tooltip to be shown for the toggle order button\n  interfaceOnly = false, // Set if the 'All residues' button is enabled\n}) => {\n  const changeInteraction = event => {\n    setSelectedInteraction(event.target.value);\n  };\n\n  const changeResidues = event => {\n    setSelectedResidues(event.target.value);\n  };\n\n  const changeOrder = () => {\n    handleToggleOrder();\n  };\n\n  const currentInteraction = interactions[selectedInteraction];\n\n  // Render\n  return (\n    <Suspense fallback={<Loading />}>\n      <Select\n        value={selectedInteraction}\n        onChange={changeInteraction}\n        className={style['horizontal-margined']}\n      >\n        {interactions.map((interaction, i) => (\n          <MenuItem key={i} value={i}>\n            {interaction.label || interaction.name}\n          </MenuItem>\n        ))}\n      </Select>\n      {selectedResidues && (\n        <RadioGroup\n          value={selectedResidues}\n          onChange={changeResidues}\n          className={style.horizontal}\n        >\n          {residueOptions.map((opt, i) => (\n            <FormControlLabel\n              key={i}\n              value={opt.value}\n              control={<Radio color=\"primary\" />}\n              label={opt.label}\n              disabled={opt.label === 'All residues' && interfaceOnly}\n            />\n          ))}\n        </RadioGroup>\n      )}\n      {selectedOrder !== undefined && (\n        <>\n          <TextField\n            //margin=\"dense\"\n            label={firstOrderLabel}\n            title={firstOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_1\n                : currentInteraction.agent_2\n            }\n          />\n          <IconButton\n            title={toggleOrderTooltip}\n            onClick={changeOrder}\n            size=\"large\"\n          >\n            <FontAwesomeIcon icon={faExchangeAlt} />\n          </IconButton>\n          <TextField\n            //margin=\"dense\"\n            label={secondOrderLabel}\n            title={secondOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_2\n                : currentInteraction.agent_1\n            }\n          />\n        </>\n      )}\n    </Suspense>\n  );\n};\n\nexport default InteractionSelector;\n","// React logic\nimport { useMemo, useContext } from 'react';\n\nimport { ProjectCtx, PdbCtx } from '../../../contexts';\n\nimport { nglSelection2residueIndices, nglSelectionExists } from '../../../utils/topology-manager';\n\n// Use this hook to get the memoized NGL default representations\nconst useDefaultRepresentations = () => {\n  // Get the current project metadata and chains\n  const { chains, metadata, topology } = useContext(ProjectCtx);\n  // Get current structure\n  const { file: structure } = useContext(PdbCtx);\n  //console.log(structure.residueMap.get(0).isCg());\n  // Set the chains to be represented in the NGL viewer by default\n  // WARNING: This is experimental and may have some bugs\n  const defaultRepresentations = useMemo(() => {\n    if (!topology) return [];\n    const reps = [];\n    const ligands = metadata && metadata.LIGANDS;\n    if (metadata && chains) {\n      const chainnames = metadata.CHAINNAMES;\n      // Represent each protein chain\n      if (chainnames) {\n        for (const chain of chains) {\n          const name = chainnames[chain];\n          reps.push({\n            name: name ? name + ' (Chain ' + chain + ')' : 'Chain ' + chain,\n            selection: ':' + chain,\n          });\n        }\n      }\n      // If chainnames are not defined then set a general representation\n      else {\n        const generalRepresentations = [\n          { name: 'Protein', selection: 'protein' },\n          { name: 'Nucleic acids', selection: 'nucleic' }\n        ]\n        // Add the representation only if it contains any atom\n        generalRepresentations.forEach(rep => {\n          const exists = nglSelectionExists(rep.selection, structure);\n          if (exists) reps.push(rep);\n        });\n      }\n\n      // Represent the mebrane if exist\n      /*\n          if (metadata.MEMBRANE !== 'No')\n              reps.push({\n              selection: '(not polymer or hetero) and not (water or ion)',\n              name: metadata.MEMBRANE,\n              type: 'licorice',\n              opacity: 0.5,\n              });\n          */\n      // Represent all chains which are not in the 'chains' and 'ligands' list in licorice\n      topology.chainNames.forEach(chain => {\n        // Check if the chain is in the protein chains\n        const isProtein = chains.indexOf(chain) !== -1;\n        if (isProtein) return;\n        // Check if the chain is full ligand\n        // DANI: No se ha probado\n        const topologyChain = topology.getChainByName(chain);\n        const isLigand = topologyChain.residues.every(residue => residue.referenceType === 'ligand');\n        // If there is any coincidence then skip this chainname\n        if (isLigand) return;\n        // Get the chain name according to metadata, if available\n        const name = (chainnames && chainnames[chain]) || chain;\n        reps.push({\n          name: name,\n          selection: ':' + chain,\n          type: 'licorice',\n          color: 'purple',\n          opacity: 0.5,\n        });\n      });\n    }\n    // If there is no metadata/chains then set up a defualt generic representation\n    else {\n      reps.push({ name: 'Main structure' });\n    }\n\n    // Display ligands\n    if (ligands) {\n      for (const ligand of ligands) {\n        // New system: ligands are pubchem ids\n        if (typeof ligand === 'string') {\n          // Get ligand reisude indcies\n          const ligandResidueIndices = topology.getReferenceResidueIndices(ligand);\n          if (!ligandResidueIndices || ligandResidueIndices.length === 0) continue;\n          // Transform the residue indices to a NGL selection\n          const { rangedSelection: nglSelection } = topology.residueIndices2Ngl(ligandResidueIndices);\n          // Add the representation\n          reps.push({\n            name: ligand,\n            selection: nglSelection,\n            type: 'ball+stick',\n            color: 'element'\n          });\n        }\n        // Old system: ligands are objects which may have a ngl selection\n        else{\n          if (!ligand.ngl) continue;\n          reps.push({\n            name: ligand.name,\n            selection: ligand.ngl,\n            type: 'licorice',\n          });\n        }\n        \n      }\n    }\n\n    // Add a representation for ions in spacefill in case there are residues with 1 atom\n    const singleAtomIndices = []\n    topology.residueAtomIndices.forEach(atomIndices => {\n      if (atomIndices.length > 1) return;\n      singleAtomIndices.push(atomIndices[0]);\n    })\n    if (singleAtomIndices.length > 0) {\n      const singleAtomSelection = '@' + singleAtomIndices.join(',');\n      reps.push({\n        name: 'Ions',\n        selection: singleAtomSelection,\n        type: 'spacefill',\n        color: 'element',\n      });\n    }\n\n    // Represent \"Other\" residues in low opacity grey licorice\n    // Get all residues which are not already included on any previous section\n    // Get also all residues which are represented as cartoon but are not protein or nucleic acid\n    // i.e. residues which would not be represented by now\n    const representedResidues = [];\n    reps.forEach(rep => {\n      const isCartoon = rep.type === undefined || rep.type === 'cartoon';\n      const residues = nglSelection2residueIndices(\n        rep.selection,\n        isCartoon,\n        structure,\n      );\n      representedResidues.push(...residues);\n    });\n    const residuesCount = topology.residueCount;\n    const nonRepresentedResidues = [];\n    for (let i = 0; i < residuesCount; i++) {\n      if (representedResidues.indexOf(i) === -1) nonRepresentedResidues.push(i);\n    }\n    if (nonRepresentedResidues.length > 0) {\n      const {\n        rangedSelection: otherSelection,\n      } = topology.residueIndices2Ngl(nonRepresentedResidues);\n      reps.push({\n        name: 'Other',\n        selection: otherSelection,\n        type: 'licorice',\n        color: 'grey',\n        opacity: 0.3,\n      });\n    }\n\n    return reps;\n  }, [chains, metadata, topology, structure]);\n\n  return defaultRepresentations;\n};\n\nexport default useDefaultRepresentations;\n","// extracted by mini-css-extract-plugin\nexport default {\"rnd\":\"style_rnd__Txifm\",\"floating-card\":\"style_floating-card__HHpby\"};","import React, { lazy, Suspense, useRef, useState } from 'react';\n\n// Rnd is the resizable and draggable system where the ngl viewer is placed\nimport { Rnd } from 'react-rnd';\n\nimport Card from '../animated-card';\n\nimport style from './style.module.css';\n\nconst ViewerWithControls = lazy(() =>\n  import(\n    /* webpackChunkName: 'viewer-with-controls' */ '../viewer-with-controls'\n  ),\n);\n\n// Minimal ngl window height\nconst MIN_NGL_DIMENSION = 150;\n\n// Counter to get always the maximum zIndex\n// This is useful to set a new or currently dragged/resized ngl window over the others\nlet maxZ = 0;\nconst nextZ = () => {\n  maxZ += 1;\n  return maxZ;\n};\n\n// This function spawns all the NGL viewers needed\n// i.e. one viewer with the requested 'props' and all previous viewers which have been nailed\nconst ViewerSpawner = ({ newViewer, nailing = true, onNail, onClose }) => {\n  // Store here all nailed NGL viewers\n  const [nailedViewers, setNailedViewers] = useState([]);\n\n  // Set the viewers as the nailed viewers and the new viewer\n  const viewers = [...nailedViewers];\n\n  // Keep listed all arrays which have been used (i.e. ngl viewers which have been nailed or closed)\n  const usedIds = useRef([]);\n\n  if (newViewer) {\n    // Find a new suitable Id that meet 2 conditions:\n    // - There is never 2 viewers with the same id, so we avoid errors\n    // - If we pick diferent frames in the graph without nailing anything, the current viewer has always the same id\n    // (This way the current viewer does not appear in the origin position every time)\n    const getNewId = () => {\n      let id = 0;\n      while (id < 999) {\n        if (usedIds.current.indexOf(id) === -1) return id;\n        id += 1;\n      }\n      console.error('Maximum number of viewers reached');\n    };\n\n    // Set a unique id for this props based in the last nailed viewer\n    newViewer.id = getNewId();\n    newViewer.close = () => {\n      if (nailing) {\n        setNailedViewers(nailed => {\n          const newNailed = [...nailed];\n          const index = nailed.indexOf(newViewer);\n          if (index !== -1) newNailed.splice(index, 1);\n          return newNailed;\n        });\n      }\n      if (onClose) onClose(newViewer);\n      usedIds.current.push(newViewer.id);\n    };\n    // If the nailer function is passed, add the logic for the viewer to be nailed further\n    if (nailing)\n      newViewer.nail = () => {\n        setNailedViewers(nailed => [...nailed, newViewer]);\n        if (onNail) onNail(newViewer);\n        usedIds.current.push(newViewer.id);\n      };\n    // Add the current viewer to the viewers list\n    viewers.push(newViewer);\n  }\n\n  // Render a viewer for each prop. Use the 'selected' parameter as unique id\n  return viewers.map(viewer => <NGLViewerInDND key={viewer.id} {...viewer} />);\n};\n\n// This component render a small NGL viewer\n// It is called when user clicks in a point in the projections component\n// Also it is called by the generic analysis page\nconst NGLViewerInDND = props => {\n  // Set a reference for the viewer\n  // If a reference is passed among the viewer arguments then use it instead\n  const viewerRef = props.viewerRef || useRef(null);\n\n  // Set the default position and size\n  const [place, setPlace] = useState(() => {\n    // Set an extra margin\n    const MARGIN = 20;\n    // Get the screen pixel sizes and vertical scroll position\n    const { innerWidth, innerHeight, scrollY } = window;\n    // The spawned elements are parented to the 'main' element, not to the 'body'\n    // We have to take this in count, since the header adds an extra offset in vertical position\n    const offsetHeight = document.querySelector('main').offsetTop;\n    // Set a reasonable dimension for the ngl window\n    const dimension = Math.max(\n      Math.min(innerWidth / 4, innerHeight / 4),\n      MIN_NGL_DIMENSION,\n    );\n    const reasonableHeight = 1.5 * dimension;\n    const reasonableWidth = 2 * dimension;\n    return {\n      // WARNING: If you set the width as 'auto' the window stays very wide when exiting fullscreen\n      width: reasonableWidth, // Let the Rnd logic set the width automatically\n      height: reasonableHeight, // Reasonable height\n      x: 0, // Left border\n      y: innerHeight - offsetHeight - reasonableHeight - MARGIN + scrollY, // Bottom border\n    };\n  });\n\n  return (\n    // Rnd is the draggable and resizable system where the ngl viewer is placed\n    <Rnd\n      position={{ x: place.x, y: place.y }}\n      size={{ width: place.width, height: place.height }}\n      // Update the zIndex to make this window the first visible\n      style={{ zIndex: nextZ() }}\n      className={style.rnd}\n      data-rnd\n      // Limits where the window can be dragged/resized to\n      // WARNING: bounds=\"main\" is problematic since the window may appear out of bounds\n      // WARNING: Then when it is moved for the first time it jumps inside the bonds, not elegant\n      bounds=\"window\"\n      // Prevent the mouse to drag/resize the window when it is over specific elements\n      cancel=\"canvas, [data-popover], #preventDragSize, .prevent-drag\"\n      // On drag/resize starts we do not change anything, but use the hook to re-render this component\n      // The Z Index is updated and the selected window becomes the first in the z axis automatically\n      // WARNING: Drag functions are also called when you just click (e.g. clicking buttons)\n      onDragStart={() => {\n        setPlace({ ...place });\n      }}\n      onResizeStart={() => {\n        setPlace({ ...place });\n      }}\n      onDragStop={(e, d) => {\n        // Use this to reject some bugged event calls: e.g. the frames number selector\n        if (e.layerX === 0 && e.layerY === 0) return;\n        // We re-render only if the new position does not equal the old position\n        if (place.x !== d.x || place.y !== d.y)\n          setPlace({\n            ...place,\n            x: d.x,\n            y: d.y,\n          });\n      }}\n      // Re-adapt the viewer and update the position/size when the window is resized\n      onResize={() => viewerRef.current && viewerRef.current.autoResize()}\n      onResizeStop={(e, direction, ref, delta, position) => {\n        setPlace({\n          width: ref.style.width,\n          height: ref.style.height,\n          ...position,\n        });\n        // if (!viewerRef.current) return;\n        // viewerRef.current.autoResize();\n        // viewerRef.current.autoResize.flush();\n      }}\n    >\n      <Card className={style['floating-card']} elevation={4}>\n        <Suspense fallback={null}>\n          <ViewerWithControls\n            className={style['floating-card']}\n            ref={viewerRef}\n            startsPlaying={false}\n            {...props}\n          />\n        </Suspense>\n      </Card>\n    </Rnd>\n  );\n};\n\nexport default ViewerSpawner;\n","// extracted by mini-css-extract-plugin\nexport default {\"graph-legend\":\"style_graph-legend__TA-gh\",\"precision\":\"style_precision__pJJFp\"};","import React from 'react';\n\nimport { FormControlLabel, Checkbox } from '@mui/material';\n\nimport style from './style.module.css';\n\n// Expected input format is entires =\n//  [\n//    {\n//      name: 'entry name',\n//      color: 'black',\n//      check: true,\n//    }\n//  ]\nconst Legend = ({ entries, onChange, onMouseOver, onMouseOut }) => {\n  return (\n    <div className={style['graph-legend']}>\n      {entries.map(({ name, color, check }) => (\n        <FormControlLabel\n          data-key={name}\n          key={name}\n          onChange={p => onChange(p.target.dataset.key)}\n          onMouseOver={onMouseOver}\n          onMouseOut={onMouseOut}\n          control={\n            <Checkbox\n              checked={check}\n              style={{ color: color || 'black' }}\n              inputProps={{ 'data-key': name }}\n            />\n          }\n          label={name}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Legend;\n","import React, { lazy, Suspense, useState, useContext, useMemo } from 'react';\n\nimport { CardContent, Typography, TextField } from '@mui/material';\n\nimport Card from '../../../components/animated-card';\nimport ViewerSpawner from '../../../components/viewer-spawner';\nimport useDefaultRepresentations from '../../../components/ngl-viewer/use-default-representations';\nimport Loading from '../../../components/loading';\n\nimport useAPI from '../../../hooks/use-api';\n\nimport { ProjectCtx } from '../../../contexts';\n\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\n\nimport Legend from '../../../components/legend';\n\nimport InteractionSelector from '../../../components/interaction-selector';\n\nimport style from './style.module.css';\n\nconst Graph = lazy(() =>\n  import(/* webpackChunkName: 'graph' */ '../../../components/graph'),\n);\n\n// Set references to find representations between different renders\nconst GUEST_REFERENCE = 'guest';\n\n// Return the rounded summatory\nconst getSum = values => {\n  const sum = values.reduce((a, b) => a + b, 0);\n  const rounded = Math.round(sum * 10000) / 10000;\n  return rounded;\n};\n\nconst Energies = () => {\n  // Get the current project data\n  const { accessionAndMdNumber, topology: topologyManager, interactions } = useContext(\n    ProjectCtx,\n  );\n\n  // Get the default representations\n  const defaultRepresentations = useDefaultRepresentations();\n\n  // Send a request to the API with the url of the energies analysis\n  const { loading, payload, error } = useAPI(\n    `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/energies/`,\n  );\n\n  // The interaction to be displayed\n  const [selectedInteraction, setSelectedInteraction] = useState(0);\n\n  // This is a toggle state for which agent data is shown\n  const [selectedOrder, setSelectedOrder] = useState(true);\n\n  // Track when one point in the graph is selected\n  const [selected, setSelected] = useState(null);\n\n  // Set which data is displayed: all, start, end or any combination of them\n  const [display, setDisplay] = useState({ all: true, start: true, end: true });\n\n  // Define the representations to be displayed in the viewer\n  const [ representations, setRepresentations ] = useState(null);\n\n  const {\n    data,\n    dataError,\n    strongBondMarks,\n    esData,\n    vdwData,\n    bothData,\n    xTooltip,\n  } = useMemo(() => {\n    // Return if the payload is not ready\n    if (!payload || !topologyManager) return {};\n\n    let data;\n    let guestSelection;\n\n    // Get the selected interaction\n    const interaction = interactions[selectedInteraction];\n\n    const agent = selectedOrder ? 'agent1' : 'agent2';\n\n    // Get the data whose name matches the interaction name\n    const dataset = payload.data.find(dataset => {\n      return dataset.name === interaction.name;\n    });\n    let dataError;\n    if (!dataset) {\n      dataError = `Dataset for the interaction \"${interaction.name}\" not found`;\n      return { data: null, dataError };\n    }\n    data = dataset[agent];\n    if (!data) {\n      dataError = `Data for the interaction \"${interaction.name}\" not found`;\n      return { data: null, dataError };\n    }\n    // Set the guest NGL selection\n    const guestInterfaceResidues = selectedOrder\n      ? interaction.interface_indices_2\n      : interaction.interface_indices_1;\n    const {\n      rangedSelection: rangedInterfaceResiduesSelection,\n    } = topologyManager.residueIndices2Ngl(guestInterfaceResidues);\n    guestSelection = rangedInterfaceResiduesSelection;\n\n    // Set the tags to be displayed on each graph x axis\n    data.xTags = [];\n    const hostResidues = selectedOrder\n      ? interaction.residue_indices_1\n      : interaction.residue_indices_2;\n    hostResidues.forEach(residueIndex => {\n      const residue = topologyManager.getResidueByIndex(residueIndex);\n      data.xTags.push(residue.standardLabel);\n    });\n\n    // Set the viewer representations\n    setRepresentations(previousRepresentations => {\n      // If this is the first render then set the default values\n      if (previousRepresentations === null) return [\n        ...defaultRepresentations,\n        {\n          selection: guestSelection,\n          name: 'Guest elements',\n          type: 'spacefill',\n          color: 'element',\n          opacity: 0.3,\n          other: { radius: 0.6 },\n          reference: GUEST_REFERENCE\n        }\n      ];\n      // Otherwise just update the guest representation\n      const previousGuest = previousRepresentations.find(rep => rep.reference === GUEST_REFERENCE);\n      previousGuest.selection = guestSelection;\n      return [...previousRepresentations];\n    });\n\n    // In case of strong bonds, find the implicated residues and their position in the x axis\n    // They will be marked in the graph\n    const strongBonds = interaction['strong_bonds'];\n    const strongBondAtoms = [].concat.apply([], strongBonds);\n    const strongBondResidues = strongBondAtoms.map(atomIndex =>\n      topologyManager.getAtomByIndex(atomIndex).residue.standardLabel,\n    );\n    const strongBondMarks = [];\n    strongBondResidues.forEach(residue => {\n      const xPosition = data.xTags.indexOf(residue);\n      if (xPosition !== -1)\n        strongBondMarks.push({\n          x: xPosition,\n          attr: {\n            fill: 'orange',\n            opacity: 0.5,\n          },\n        });\n    });\n\n    // Set the dataset for each graph\n    const esData = {\n      esi: { data: data.ies, color: 'red' },\n      esf: { data: data.fes, color: 'blue' },\n      es: { data: data.es, color: 'black' },\n    };\n    const vdwData = {\n      vdwi: { data: data.ivdw, color: 'red' },\n      vdwf: { data: data.fvdw, color: 'blue' },\n      vdw: { data: data.vdw, color: 'black' },\n    };\n    const bothData = {\n      bothi: {\n        data: data.iboth,\n        color: 'red',\n      },\n      bothf: { data: data.fboth, color: 'blue' },\n      both: { data: data.both, color: 'black' },\n    };\n\n    // Set the tooltip generator for the graph hover\n    const xTooltip = (_, xIndex) =>\n      'residue ' + ((data.xTags && data.xTags[xIndex]) || xIndex);\n\n    return {\n      data,\n      dataError,\n      strongBondMarks,\n      esData,\n      vdwData,\n      bothData,\n      xTooltip,\n    };\n  }, [\n    payload,\n    selectedInteraction,\n    selectedOrder,\n    topologyManager,\n    interactions,\n    defaultRepresentations,\n  ]);\n\n  // Memoize the marks\n  const marks = useMemo(() => {\n    if (selected === null) return strongBondMarks;\n    const selectedMark = {\n      x: selected,\n      attr: { fill: '#c8c8c8' },\n    };\n    return [selectedMark, ...strongBondMarks];\n  }, [selected, strongBondMarks]);\n\n  // Memoize the display parameters for each graph\n  const { esDisplay, vdwDisplay, bothDisplay } = useMemo(() => {\n    const esDisplay = {\n      esi: display.start,\n      esf: display.end,\n      es: display.all,\n    };\n    const vdwDisplay = {\n      vdwi: display.start,\n      vdwf: display.end,\n      vdw: display.all,\n    };\n    const bothDisplay = {\n      bothi: display.start,\n      bothf: display.end,\n      both: display.all,\n    };\n    return { esDisplay, vdwDisplay, bothDisplay };\n  }, [display]);\n\n  // Set the selected residue indices (only one index with the current implmementation)\n  const selectedResidueIndices = useMemo(() => {\n    if (selected === null) return null;\n    // Get the selected interaction\n    const interaction = interactions[selectedInteraction];\n    const hostResidues = selectedOrder\n      ? interaction.residue_indices_1\n      : interaction.residue_indices_2;\n    const index = hostResidues[selected];\n    return [index];\n  }, [selected, interactions, selectedInteraction, selectedOrder]);\n\n  // Render loading or error messages according with the API response\n  if (loading) return <Loading />;\n  else if (error) return error.toString();\n  else if (!payload) return 'Something bad happened';\n\n  if (!topologyManager) return <Loading />;\n\n  // Check if there is only 1 residue\n  const singleResidue = data && data.es.length === 1;\n\n  const handleResidueSelection = xIndex => {\n    setSelected(xIndex);\n  };\n\n  const handleToggleOrder = () => {\n    setSelectedOrder(previous => !previous);\n    setSelected(null);\n  };\n\n  // Render\n  return (\n    <Suspense fallback={<Loading />}>\n      <Card className={style.card}>\n        <CardContent className={style.horizontal}>\n          <Typography variant=\"h6\">Interaction:</Typography>\n          <InteractionSelector\n            interactions={interactions}\n            selectedInteraction={selectedInteraction}\n            setSelectedInteraction={setSelectedInteraction}\n            selectedOrder={selectedOrder}\n            handleToggleOrder={handleToggleOrder}\n            firstOrderLabel={'Guest'}\n            firstOrderTooltip={'Interactor whose energies are to be shown'}\n            secondOrderLabel={'Host'}\n            secondOrderTooltip={'Interactor with the opposite energies'}\n            toggleOrderTooltip={'Toggle interactors'}\n          />\n        </CardContent>\n        {dataError || !data ? null : (\n          <CardContent>\n            <legend>Overall energies summatory</legend>\n            <div>\n              <TextField\n                className={style['text-field']}\n                label=\"Electrostatic\"\n                title=\"Sum electorstatic value along the whole trajectory\"\n                value={getSum(data.es) + ' kcal/mol'}\n              />\n              <TextField\n                className={style['text-field']}\n                label=\"Electrostatic Initial\"\n                title=\"Sum electorstatic value along the first 20% trajectory frames\"\n                value={getSum(data.ies) + ' kcal/mol'}\n              />\n              <TextField\n                className={style['text-field']}\n                label=\"Electrostatic Final\"\n                title=\"Sum electorstatic value along the last 20% trajectory frames\"\n                value={getSum(data.fes) + ' kcal/mol'}\n              />\n            </div>\n            <div>\n              <TextField\n                className={style['text-field']}\n                label=\"Van der Waals\"\n                title=\"Sum Van der Waals value along the whole trajectory\"\n                value={getSum(data.vdw) + ' kcal/mol'}\n              />\n              <TextField\n                className={style['text-field']}\n                label=\"Van der Waals Initial\"\n                title=\"Sum Van der Waals value along the first 20% trajectory frames\"\n                value={getSum(data.ivdw) + ' kcal/mol'}\n              />\n              <TextField\n                className={style['text-field']}\n                label=\"Van der Waals Final\"\n                title=\"Sum Van der Waals value along the last 20% trajectory frames\"\n                value={getSum(data.fvdw) + ' kcal/mol'}\n              />\n            </div>\n            <div>\n              <TextField\n                className={style['text-field']}\n                label=\"Electrostatic + Van der Waals\"\n                title=\"Sum electorstatic + Van der Waals value along the whole trajectory\"\n                value={getSum(data.both) + ' kcal/mol'}\n              />\n              <TextField\n                className={style['text-field']}\n                label=\"Electrostatic + Van der Waals Initial\"\n                title=\"Sum electorstatic + Van der Waals value along the first 20% trajectory frames\"\n                value={getSum(data.iboth) + ' kcal/mol'}\n              />\n              <TextField\n                className={style['text-field']}\n                label=\"Electrostatic + Van der Waals Final\"\n                title=\"Sum electorstatic + Van der Waals value along the last 20% trajectory frames\"\n                value={getSum(data.fboth) + ' kcal/mol'}\n              />\n            </div>\n          </CardContent>\n        )}\n        {dataError || singleResidue ? (\n          <CardContent>\n            <Typography variant=\"h6\">\n              {dataError ? dataError : 'The host has only 1 residue'}\n            </Typography>\n          </CardContent>\n        ) : (\n          <CardContent>\n            <Graph\n              yData={esData}\n              xAxisValues={data.xTags}\n              xTooltip={xTooltip}\n              title={'Electrostatic'}\n              xScaleFactor={0.001}\n              yAxisLabel={'Interaction energy (kcal/mol)'}\n              onSelect={handleResidueSelection}\n              dataDisplay={esDisplay}\n              fullPrecision\n              marks={marks}\n            />\n            <Graph\n              yData={vdwData}\n              title={'vdW'}\n              xAxisValues={data.xTags}\n              xTooltip={xTooltip}\n              yAxisLabel={'Interaction energy (kcal/mol)'}\n              onSelect={handleResidueSelection}\n              dataDisplay={vdwDisplay}\n              fullPrecision\n              marks={marks}\n            />\n            <Graph\n              yData={bothData}\n              title={'Electrostatic+vdW'}\n              xAxisLabel={'Residue'}\n              xAxisValues={data.xTags}\n              xTooltip={xTooltip}\n              yAxisLabel={'Interaction energy (kcal/mol)'}\n              onSelect={handleResidueSelection}\n              dataDisplay={bothDisplay}\n              fullPrecision\n              marks={marks}\n            />\n            <Legend\n              entries={[\n                { name: 'all', color: 'black', check: display.all },\n                { name: 'start', color: 'red', check: display.start },\n                { name: 'end', color: 'blue', check: display.end },\n              ]}\n              onChange={result =>\n                setDisplay(previous => {\n                  // WARNING: Do not return the previous object modified\n                  // It won't trigger the re-render since it is the same object\n                  const newDisplay = { ...previous };\n                  newDisplay[result] = !newDisplay[result];\n                  return newDisplay;\n                })\n              }\n            />\n          </CardContent>\n        )}\n      </Card>\n      <ViewerSpawner\n        // Set the new viewer or null if there is not a proper \"selectedResidueIndices\" value\n        newViewer={selectedResidueIndices\n          ? {\n              selectedResidueIndices: selectedResidueIndices,\n              representationsState: [ representations, setRepresentations ]\n            }\n          : null\n        }\n        // If the nailed/closed viewer is the current viewer then reset the 'selected'\n        onNail={viewer =>\n          setSelected(previous => {\n            if (viewer.selectedResidueIndices === selectedResidueIndices) return null;\n            else return previous;\n          })\n        }\n        onClose={viewer =>\n          setSelected(previous => {\n            if (viewer.selectedResidueIndices === selectedResidueIndices) return null;\n            else return previous;\n          })\n        }\n      />\n    </Suspense>\n  );\n};\n\nexport default Energies;\n","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCheckboxUtilityClass(slot) {\n  return generateUtilityClass('MuiCheckbox', slot);\n}\nconst checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium']);\nexport default checkboxClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checkedIcon\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport checkboxClasses, { getCheckboxUtilityClass } from './checkboxClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    indeterminate,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`, `size${capitalize(size)}`]\n  };\n  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\nconst CheckboxRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiCheckbox',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.indeterminate && styles.indeterminate, styles[`size${capitalize(ownerState.size)}`], ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  color: (theme.vars || theme).palette.text.secondary\n}, !ownerState.disableRipple && {\n  '&:hover': {\n    backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  }\n}, ownerState.color !== 'default' && {\n  [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {\n    color: (theme.vars || theme).palette[ownerState.color].main\n  },\n  [`&.${checkboxClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  }\n}));\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(CheckBoxIcon, {});\nconst defaultIcon = /*#__PURE__*/_jsx(CheckBoxOutlineBlankIcon, {});\nconst defaultIndeterminateIcon = /*#__PURE__*/_jsx(IndeterminateCheckBoxIcon, {});\nconst Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(inProps, ref) {\n  var _icon$props$fontSize, _indeterminateIcon$pr;\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCheckbox'\n  });\n  const {\n      checkedIcon = defaultCheckedIcon,\n      color = 'primary',\n      icon: iconProp = defaultIcon,\n      indeterminate = false,\n      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,\n      inputProps,\n      size = 'medium',\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const icon = indeterminate ? indeterminateIconProp : iconProp;\n  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n  const ownerState = _extends({}, props, {\n    color,\n    indeterminate,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CheckboxRoot, _extends({\n    type: \"checkbox\",\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size\n    }),\n    ownerState: ownerState,\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other, {\n    classes: classes\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckBoxIcon />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <CheckBoxOutlineBlankIcon />\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate: PropTypes.bool,\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateCheckBoxIcon />\n   */\n  indeterminateIcon: PropTypes.node,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense checkbox styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Checkbox;","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"style_card__vXTgq\",\"horizontal\":\"style_horizontal__t0owt\",\"text-field\":\"style_text-field__bQrv2\"};"],"names":["KEYFRAMES","opacity","reducedMotion","transform","ANIMATION_OPTIONS","fill","easing","duration","forwardRef","_ref","ref","overrideComponent","props","_objectWithoutProperties","_excluded","containerRef","useRef","useLayoutEffect","node","current","firstElementChild","animate","index","Array","from","document","querySelectorAll","findIndex","section","animation","_objectSpread","delay","cancel","Component","Card","_jsx","className","style","children","component","residueOptions","label","value","interactions","selectedInteraction","setSelectedInteraction","selectedResidues","setSelectedResidues","selectedOrder","handleToggleOrder","firstOrderLabel","firstOrderTooltip","secondOrderLabel","secondOrderTooltip","toggleOrderTooltip","interfaceOnly","currentInteraction","_jsxs","Suspense","fallback","Loading","Select","onChange","event","target","map","interaction","i","MenuItem","name","RadioGroup","opt","FormControlLabel","control","Radio","color","disabled","undefined","_Fragment","TextField","title","agent_1","agent_2","IconButton","onClick","changeOrder","size","FontAwesomeIcon","icon","faExchangeAlt","useDefaultRepresentations","chains","metadata","topology","useContext","ProjectCtx","file","structure","PdbCtx","useMemo","reps","ligands","LIGANDS","chainnames","CHAINNAMES","chain","push","selection","forEach","rep","nglSelectionExists","chainNames","indexOf","getChainByName","residues","every","residue","referenceType","type","ligand","ligandResidueIndices","getReferenceResidueIndices","length","rangedSelection","nglSelection","residueIndices2Ngl","ngl","singleAtomIndices","residueAtomIndices","atomIndices","singleAtomSelection","join","representedResidues","isCartoon","nglSelection2residueIndices","residuesCount","residueCount","nonRepresentedResidues","otherSelection","ViewerWithControls","lazy","maxZ","NGLViewerInDND","viewerRef","place","setPlace","useState","innerWidth","innerHeight","scrollY","window","offsetHeight","querySelector","offsetTop","dimension","Math","max","min","reasonableHeight","width","height","x","y","Rnd","position","zIndex","bounds","onDragStart","onResizeStart","onDragStop","e","d","layerX","layerY","onResize","autoResize","onResizeStop","direction","delta","elevation","startsPlaying","newViewer","nailing","onNail","onClose","nailedViewers","setNailedViewers","viewers","usedIds","getNewId","id","console","error","close","nailed","newNailed","splice","nail","viewer","entries","onMouseOver","onMouseOut","_ref2","check","p","dataset","key","Checkbox","checked","inputProps","Graph","GUEST_REFERENCE","getSum","values","sum","reduce","a","b","round","Energies","accessionAndMdNumber","topologyManager","defaultRepresentations","loading","payload","useAPI","concat","BASE_PATH_PROJECTS","setSelectedOrder","selected","setSelected","display","setDisplay","all","start","end","representations","setRepresentations","data","dataError","strongBondMarks","esData","vdwData","bothData","xTooltip","guestSelection","agent","find","guestInterfaceResidues","interface_indices_2","interface_indices_1","rangedInterfaceResiduesSelection","xTags","residue_indices_1","residue_indices_2","residueIndex","getResidueByIndex","standardLabel","previousRepresentations","other","radius","reference","strongBonds","strongBondResidues","apply","atomIndex","getAtomByIndex","xPosition","attr","esi","ies","esf","fes","es","vdwi","ivdw","vdwf","fvdw","vdw","bothi","iboth","bothf","fboth","both","_","xIndex","marks","esDisplay","vdwDisplay","bothDisplay","selectedResidueIndices","toString","singleResidue","handleResidueSelection","card","CardContent","horizontal","Typography","variant","InteractionSelector","previous","yData","xAxisValues","xScaleFactor","yAxisLabel","onSelect","dataDisplay","fullPrecision","xAxisLabel","Legend","result","newDisplay","ViewerSpawner","representationsState","createSvgIcon","getCheckboxUtilityClass","slot","generateUtilityClass","generateUtilityClasses","CheckboxRoot","styled","SwitchBase","shouldForwardProp","prop","rootShouldForwardProp","overridesResolver","styles","ownerState","root","indeterminate","capitalize","theme","_extends","vars","palette","text","secondary","disableRipple","backgroundColor","action","activeChannel","mainChannel","hoverOpacity","alpha","active","main","checkboxClasses","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","React","inProps","_icon$props$fontSize","_indeterminateIcon$pr","useDefaultProps","checkedIcon","iconProp","indeterminateIcon","indeterminateIconProp","_objectWithoutPropertiesLoose","classes","slots","composedClasses","composeClasses","useUtilityClasses","fontSize","clsx"],"sourceRoot":""}