{"version":3,"file":"static/js/1235.6237cc71.chunk.js","mappings":"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","sources":["components/ngl-viewer/use-default-representations/index.js","webpack://mdposit/./src/components/viewer-with-controls/representations-manager/style.module.css?be77","components/viewer-with-controls/representations-manager/index.js","utils/storage/index.js","components/molstar-viewer/molstar-parser/index.ts","components/molstar-viewer/get-frames/index.js","webpack://mdposit/./src/components/molstar-viewer/style.module.css?3a43","components/molstar-viewer/index.js","components/ngl-viewer/payload-to-ngl-file/index.js","components/ngl-viewer/get-frames/index.js","webpack://mdposit/./src/components/ngl-viewer/style.module.css?eaa8","components/ngl-viewer/index.js","utils/connection-level/index.js","webpack://mdposit/./src/components/viewer-with-controls/style.module.css?bc6d","components/viewer-with-controls/index.js","utils/tooltip-position-manager/index.js"],"sourcesContent":["// React logic\nimport { useMemo, useContext } from 'react';\n\nimport { ProjectCtx, PdbCtx } from '../../../contexts';\n\nimport { nglSelection2residueIndices, nglSelectionExists } from '../../../utils/topology-manager';\n\n// Use this hook to get the memoized NGL default representations\nconst useDefaultRepresentations = () => {\n  // Get the current project metadata and chains\n  const { chains, metadata, topology } = useContext(ProjectCtx);\n  // Get current structure\n  const { file: structure } = useContext(PdbCtx);\n  //console.log(structure.residueMap.get(0).isCg());\n  // Set the chains to be represented in the NGL viewer by default\n  // WARNING: This is experimental and may have some bugs\n  const defaultRepresentations = useMemo(() => {\n    if (!topology) return [];\n    const reps = [];\n    const ligands = metadata && metadata.LIGANDS;\n    if (metadata && chains) {\n      const chainnames = metadata.CHAINNAMES;\n      // Represent each protein chain\n      if (chainnames) {\n        for (const chain of chains) {\n          const name = chainnames[chain];\n          reps.push({\n            name: name ? name + ' (Chain ' + chain + ')' : 'Chain ' + chain,\n            selection: ':' + chain,\n          });\n        }\n      }\n      // If chainnames are not defined then set a general representation\n      else {\n        const generalRepresentations = [\n          { name: 'Protein', selection: 'protein' },\n          { name: 'Nucleic acids', selection: 'nucleic' }\n        ]\n        // Add the representation only if it contains any atom\n        generalRepresentations.forEach(rep => {\n          const exists = nglSelectionExists(rep.selection, structure);\n          if (exists) reps.push(rep);\n        });\n      }\n\n      // Represent the mebrane if exist\n      /*\n          if (metadata.MEMBRANE !== 'No')\n              reps.push({\n              selection: '(not polymer or hetero) and not (water or ion)',\n              name: metadata.MEMBRANE,\n              type: 'licorice',\n              opacity: 0.5,\n              });\n          */\n      // Represent all chains which are not in the 'chains' and 'ligands' list in licorice\n      topology.chainNames.forEach(chain => {\n        // Check if the chain is in the protein chains\n        const isProtein = chains.indexOf(chain) !== -1;\n        if (isProtein) return;\n        // Check if the chain is full ligand\n        // DANI: No se ha probado\n        const topologyChain = topology.getChainByName(chain);\n        const isLigand = topologyChain.residues.every(residue => residue.referenceType === 'ligand');\n        // If there is any coincidence then skip this chainname\n        if (isLigand) return;\n        // Get the chain name according to metadata, if available\n        const name = (chainnames && chainnames[chain]) || chain;\n        reps.push({\n          name: name,\n          selection: ':' + chain,\n          type: 'licorice',\n          color: 'purple',\n          opacity: 0.5,\n        });\n      });\n    }\n    // If there is no metadata/chains then set up a defualt generic representation\n    else {\n      reps.push({ name: 'Main structure' });\n    }\n\n    // Display ligands\n    if (ligands) {\n      for (const ligand of ligands) {\n        // New system: ligands are pubchem ids\n        if (typeof ligand === 'string') {\n          // Get ligand reisude indcies\n          const ligandResidueIndices = topology.getReferenceResidueIndices(ligand);\n          if (!ligandResidueIndices || ligandResidueIndices.length === 0) continue;\n          // Transform the residue indices to a NGL selection\n          const { rangedSelection: nglSelection } = topology.residueIndices2Ngl(ligandResidueIndices);\n          // Add the representation\n          reps.push({\n            name: ligand,\n            selection: nglSelection,\n            type: 'ball+stick',\n            color: 'element'\n          });\n        }\n        // Old system: ligands are objects which may have a ngl selection\n        else{\n          if (!ligand.ngl) continue;\n          reps.push({\n            name: ligand.name,\n            selection: ligand.ngl,\n            type: 'licorice',\n          });\n        }\n        \n      }\n    }\n\n    // Add a representation for ions in spacefill in case there are residues with 1 atom\n    const singleAtomIndices = []\n    topology.residueAtomIndices.forEach(atomIndices => {\n      if (atomIndices.length > 1) return;\n      singleAtomIndices.push(atomIndices[0]);\n    })\n    if (singleAtomIndices.length > 0) {\n      const singleAtomSelection = '@' + singleAtomIndices.join(',');\n      reps.push({\n        name: 'Ions',\n        selection: singleAtomSelection,\n        type: 'spacefill',\n        color: 'element',\n      });\n    }\n\n    // Represent \"Other\" residues in low opacity grey licorice\n    // Get all residues which are not already included on any previous section\n    // Get also all residues which are represented as cartoon but are not protein or nucleic acid\n    // i.e. residues which would not be represented by now\n    const representedResidues = [];\n    reps.forEach(rep => {\n      const isCartoon = rep.type === undefined || rep.type === 'cartoon';\n      const residues = nglSelection2residueIndices(\n        rep.selection,\n        isCartoon,\n        structure,\n      );\n      representedResidues.push(...residues);\n    });\n    const residuesCount = topology.residueCount;\n    const nonRepresentedResidues = [];\n    for (let i = 0; i < residuesCount; i++) {\n      if (representedResidues.indexOf(i) === -1) nonRepresentedResidues.push(i);\n    }\n    if (nonRepresentedResidues.length > 0) {\n      const {\n        rangedSelection: otherSelection,\n      } = topology.residueIndices2Ngl(nonRepresentedResidues);\n      reps.push({\n        name: 'Other',\n        selection: otherSelection,\n        type: 'licorice',\n        color: 'grey',\n        opacity: 0.3,\n      });\n    }\n\n    return reps;\n  }, [chains, metadata, topology, structure]);\n\n  return defaultRepresentations;\n};\n\nexport default useDefaultRepresentations;\n","// extracted by mini-css-extract-plugin\nexport default {\"popover-slider\":\"style_popover-slider__Rg-SB\",\"tablecard\":\"style_tablecard__1tgr+\",\"nglcard\":\"style_nglcard__xuaa2\",\"paper\":\"style_paper__G3Eus\"};","import React, { memo } from 'react';\n\nimport {\n  Chip,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TextField,\n  Select,\n  Slider,\n  IconButton,\n} from '@mui/material';\nimport {\n  faEye,\n  faEyeSlash,\n  faPlusCircle,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport style from './style.module.css';\n\nconst availableDrawingMethods = [\n  {\n    label: 'Cartoon',\n    value: 'cartoon',\n  },\n  {\n    label: 'Licorice',\n    value: 'licorice',\n  },\n  {\n    label: 'Ball and stick',\n    value: 'ball+stick',\n  },\n  {\n    label: 'Surface',\n    value: 'surface',\n  },\n  {\n    label: 'Spacefill',\n    value: 'spacefill',\n  },\n  {\n    label: 'Tube',\n    value: 'tube',\n  },\n  {\n    label: 'Trace',\n    value: 'trace',\n  },\n  {\n    label: 'Backbone',\n    value: 'backbone',\n  },\n];\n\n// Check if a value exists inside the available values\nconst DrawingMethodExists = value => {\n  for (const opt of availableDrawingMethods) {\n    if (opt.value === value) return true;\n  }\n  return false;\n};\n\nconst availableColoringMethods = [\n  {\n    label: 'By chain id',\n    value: 'chainid',\n  },\n  {\n    label: 'By residue',\n    value: 'resname',\n  },\n  {\n    label: 'By element',\n    value: 'element',\n  },\n  {\n    label: 'B factor',\n    value: 'bfactor',\n  },\n  {\n    label: 'Electrostatic',\n    value: 'electrostatic',\n  },\n  {\n    label: 'Secondary structure',\n    value: 'sstruc',\n  },\n  {\n    label: 'Uniform',\n    value: 'uniform',\n  },\n];\n\nconst availableColors = [\n  'red',\n  'yellow',\n  'blue',\n  'green',\n  'orange',\n  'purple',\n  'white',\n  'grey',\n  'black',\n];\n\n// Check if a value exists inside the available values\nconst coloringExists = value => {\n  if (value === 'custom') return true;\n  for (const opt of availableColoringMethods) {\n    if (opt.value === value) return true;\n  }\n  for (const opt of availableColors) {\n    if (opt === value) return true;\n  }\n  return false;\n};\n\n// Return a word but with the first letter in upper case\nconst firstLetterUpper = word => word[0].toUpperCase() + word.slice(1);\n\n// Display a huge panel to select which representations must be shown or hidden\n// In addition the user can manage the way these representatios are shown\nconst RepresentationsManager = memo(\n  ({\n    components, // Array with all components\n    representations, // Array with all representations\n    setRepresentations, // Representations setter\n  }) => {\n    return (\n      <>\n        <Table\n          aria-label=\"simple table\"\n          size=\"small\"\n          padding=\"checkbox\"\n          stickyHeader\n        >\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell align=\"right\">Show</TableCell>\n              <TableCell align=\"right\">Selection</TableCell>\n              <TableCell align=\"right\">Drawing method</TableCell>\n              <TableCell align=\"right\">Coloring method</TableCell>\n              <TableCell align=\"right\">Opacity</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {representations && representations.map((representation, index) => (\n              <TableRow key={index}>\n                {/* Name */}\n                <TableCell component=\"th\" scope=\"row\">\n                  {representation.name}\n                </TableCell>\n                {/* Show */}\n                <TableCell align=\"right\">\n                  <IconButton\n                    title=\"Show/Hide representation\"\n                    onClick={() =>\n                      setRepresentations(previousRepresentations => {\n                        previousRepresentations[index].show = !previousRepresentations[index].show;\n                        return [...previousRepresentations];\n                      })\n                    }\n                    color={'primary'}\n                  >\n                    <FontAwesomeIcon\n                      icon={representation.show ? faEye : faEyeSlash}\n                    />\n                  </IconButton>\n                </TableCell>\n                {/* Selection */}\n                <TableCell align=\"right\">\n                  <TextField\n                    defaultValue={representation.selection}\n                    variant=\"outlined\"\n                    onKeyPress={event => {\n                      if (event.key !== 'Enter') return;\n                      setRepresentations(previousRepresentations => {\n                        if (!event.target || !event.target.value) return previousRepresentations;\n                        previousRepresentations[index].selection = event.target.value;\n                        return [...previousRepresentations];\n                      });\n                    }}\n                    disabled={!representation.custom}\n                    size=\"small\"\n                    margin=\"dense\"\n                  />\n                </TableCell>\n                {/* Drawing method */}\n                <TableCell align=\"right\">\n                  <Select\n                    native\n                    value={representation.type}\n                    onChange={({ target: { value } }) => {\n                      setRepresentations(previousRepresentations => {\n                        previousRepresentations[index].type = value;\n                        return [...previousRepresentations];\n                      })\n                    }}\n                  >\n                    {!DrawingMethodExists(representation.type) && (\n                      <option value={representation.type}>\n                        {representation.type}\n                      </option>\n                    )}\n                    {availableDrawingMethods.map((cm, i) => (\n                      <option key={i} value={cm.value}>\n                        {cm.label}\n                      </option>\n                    ))}\n                  </Select>\n                </TableCell>\n                {/* Coloring method */}\n                <TableCell align=\"right\">\n                  <Select\n                    native\n                    value={representation.color}\n                    onChange={({ target: { value } }) => {\n                      setRepresentations(previousRepresentations => {\n                        previousRepresentations[index].color = value;\n                        return [...previousRepresentations];\n                      })\n                    }}\n                  >\n                    {!coloringExists(representation.color) && (\n                      <option value={representation.color}>\n                        {representation.color}\n                      </option>\n                    )}\n                    {representation.customScheme && (\n                      <option value={'custom'}>{'Custom'}</option>\n                    )}\n                    {availableColoringMethods.map((cm, i) => (\n                      <option key={i} value={cm.value}>\n                        {cm.label}\n                      </option>\n                    ))}\n                    {availableColors.map((color, i) => (\n                      <option key={i} value={color}>\n                        {firstLetterUpper(color)}\n                      </option>\n                    ))}\n                  </Select>\n                </TableCell>\n                {/* Opacity */}\n                <TableCell align=\"right\">\n                  <Slider\n                    value={representation.opacity * 100}\n                    onChange={(_, value) => {\n                      setRepresentations(previousRepresentations => {\n                        previousRepresentations[index].opacity = value / 100;\n                        return [...previousRepresentations];\n                      })\n                    }}\n                    className={style['popover-slider']}\n                  />\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n          <TableBody>\n            <TableRow key={'addCustom'}>\n              <TableCell align=\"center\" colSpan={6}>\n                <Chip\n                  icon={<FontAwesomeIcon icon={faPlusCircle} />}\n                  label={'Add representation'}\n                  variant=\"outlined\"\n                  onClick={() =>\n                    setRepresentations(previousRepresentations => {\n                      // Set the default values for the custom representation\n                      const newRepresentation = {\n                        name: 'Custom', show: true,\n                        selection: 'None', type: 'licorice',\n                        color: 'chainid', opacity: 1,\n                        // Link the representation to the first (main) component\n                        component: components[0] && components[0].name,\n                        // Add the custom flag so this representation is treated differently\n                        custom: true,\n                      };\n                      const newRepresentations = [...previousRepresentations, newRepresentation];\n                      return newRepresentations;\n                    })\n                  }\n                />\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </>\n    );\n  },\n);\n\nexport default RepresentationsManager;\n","import { schedule } from 'timing-functions';\nimport pck from '../../../package.json';\n\nconst KEY = `${pck.name}-`;\n\nconst MAX_WAIT_TIME = 1000;\n\nexport const get = (key, defaultValue) => {\n  const storedValue = localStorage.getItem(KEY + key);\n  if (storedValue === null) return defaultValue;\n  return JSON.parse(storedValue);\n};\n\nexport const set = (key, value) => {\n  localStorage.setItem(KEY + key, JSON.stringify(value));\n};\n\nexport const setAsync = async (key, value) => {\n  await schedule(MAX_WAIT_TIME);\n  return set(key, value);\n};\n\nexport const deleteAll = () => {\n  Object.keys(localStorage)\n    .filter(key => key.startsWith(KEY))\n    .forEach(key => localStorage.removeItem(key));\n};\n","import { StateTransformer } from 'molstar/lib/mol-state';\nimport { PluginStateObject } from 'molstar/lib/mol-plugin-state/objects';\nimport { Task } from 'molstar/lib/mol-task';\nimport { ParamDefinition as PD } from 'molstar/lib/mol-util/param-definition';\nimport { Coordinates, Time } from 'molstar/lib/mol-model/structure';\n\nconst CreateTransformer = StateTransformer.builderFactory('custom-namespace');\n\nexport const TrajectoryFromCustomData = CreateTransformer({\n    name: 'trajectory-from-custom-data',\n    display: 'Trajectory',\n    from: PluginStateObject.Root,\n    to: PluginStateObject.Molecule.Coordinates,\n    params: {\n        data: PD.Value<Uint8Array>(new Uint8Array(), { isHidden: true }),\n        natoms: PD.Value<number>(0, { isHidden: true }),\n    },\n})({\n    apply({ params }) {\n        return Task.create('Parse atom coordinates', async (ctx) => {\n            //ctx.update({ canAbort: true, message: 'Parsing trajectory...' });\n            return await customParse(params.data, params.natoms);\n        });\n    },\n});\n\n// Parse binary atom coordinates\nasync function customParse (data: Uint8Array, natoms: number) {\n    // Check the number of atoms to not be 0 (the default)\n    if (natoms === 0) throw new Error('Number of atoms is 0');\n    // Each coordinates is a float32 an thus it takes 4 bytes of space\n    const coordSize = 4;\n    // Each atom has 3 coordinates: x, y and z\n    const atomSize = coordSize * 3;\n    // Each frame has coordinates for every atom\n    const frameSize = atomSize * natoms;\n    // Check data contains whole frames\n    if (data.byteLength % frameSize !== 0) throw new Error('Trajectory data ends abruptly');\n    // Calculate the number of frames\n    const nframes = data.byteLength / frameSize;\n    // Convert binary data to coordinates\n    const coordinates = new Float32Array(data);\n    // Set a list with the already read coordinates\n    const frameCoordinates = [];\n    // Keep track of the coordinate we are reading\n    let count = 0;\n    // Iterate over each frame number\n    for (let frame = 0; frame < nframes; frame++) {\n        // Coordinates are saved separately by dimensions, as it is done in molstar\n        const x_coords = new Float32Array(natoms);\n        const y_coords = new Float32Array(natoms);\n        const z_coords = new Float32Array(natoms);\n        // Iterate over each atom number\n        for (let atom = 0; atom < natoms; atom++) {\n            // Read the current atom coordinates\n            x_coords[atom] = coordinates[count]\n            y_coords[atom] = coordinates[count+1];\n            z_coords[atom] = coordinates[count+2];\n            // Update the byte offset\n            count += 3;\n        }\n        // Push the current frame to the overall frames list\n        frameCoordinates.push({\n            x: x_coords,\n            y: y_coords,\n            z: z_coords,\n            // Add a few extra parameters on each frame\n            elementCount: natoms,\n            time: Time(frame, 'step'),\n            xyzOrdering: { isIdentity: true }\n        });\n    }\n    // Set the molstar object for coordinates\n    const molstarCoords = Coordinates.create(\n        frameCoordinates,\n        Time(1, 'step'), // deltaTime\n        Time(0, 'step') // offsetTime\n    );\n    return new PluginStateObject.Molecule.Coordinates(molstarCoords, { label: 'label' });\n}","// This function expects to receive a specific frame or the number of frames to load\n// This function returns a string which specifies the frames to be loaded\n// This string is standarized in a API friendly format\nconst getFrames = (trajectoryFrames, requestedFrames, requestedFrame) => {\n  // only one specific frame loaded, as a projection\n  if (requestedFrame) {\n    return { range: (requestedFrame + 1).toString(), frames: 1 };\n  }\n  // multiple frames loaded, as a trajectory\n  else {\n    if (!trajectoryFrames)\n      throw new Error('Missing number of frames in the trajectory');\n    if (!requestedFrames) throw new Error('Missing number of requested frames');\n    const frameStep = Math.floor(trajectoryFrames / requestedFrames);\n    // Predict how many frames will be returned, which may be different from the requested frames number\n    const returnedFrames = Math.ceil(trajectoryFrames / frameStep);\n    return {\n      range: `${1}:${trajectoryFrames}:${frameStep}`,\n      frames: returnedFrames,\n    };\n  }\n};\n\nexport default getFrames;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__d6R8E\",\"light-theme\":\"style_light-theme__l3EaT\",\"loading-trajectory\":\"style_loading-trajectory__ciokb\",\"loading-structure\":\"style_loading-structure__ce+kY\",\"tooltip\":\"style_tooltip__KXFgY\"};","import React, {\n  forwardRef,\n  memo,\n  useState,\n  useRef,\n  useImperativeHandle,\n  useCallback,\n  useMemo,\n  useEffect,\n  useContext,\n} from 'react';\n//import useToggleState from '../../hooks/use-toggle-state';\nimport { useInView } from 'react-intersection-observer';\nimport cn from 'classnames';\n\n// Load molstar logic\n//import { PluginUIContext } from \"molstar/lib/mol-plugin-ui/context\";\nimport { createPluginUI } from 'molstar/lib/mol-plugin-ui/index';\nimport { DefaultPluginUISpec } from 'molstar/lib/mol-plugin-ui/spec';\nimport { TrajectoryFromModelAndCoordinates } from 'molstar/lib/mol-plugin-state/transforms/model';\nimport { AnimateModelIndex } from 'molstar/lib/mol-plugin-state/animation/built-in/model-index';\nimport { createStructureRepresentationParams } from 'molstar/lib/mol-plugin-state/helpers/structure-representation-params';\nimport { StateTransforms } from 'molstar/lib/mol-plugin-state/transforms';\n/*  Might require extra configuration,\nsee https://webpack.js.org/loaders/sass-loader/ for example.\ncreate-react-app should support this natively. */\n//import \"molstar/lib/mol-plugin-ui/skin/light.scss\";\n\n// Load the parser for trajectory coordinates in our format to molstar format\nimport { TrajectoryFromCustomData } from './molstar-parser';\n\nimport getFrames from './get-frames';\n\nimport { ProjectCtx, PdbCtx } from '../../contexts';\n\n//import { setTooltipPosition } from '../../utils/tooltip-position-manager';\n\nimport style from './style.module.css';\n\n// To get frames\nimport { BASE_PATH_PROJECTS, MAIN_STRUCTURE_FILENAME } from '../../utils/constants';\n\n// Used to just wait\nimport { sleep } from 'timing-functions';\n\nimport https from 'https-browserify';\nimport http from 'stream-http';\nimport url from 'url';\n\n// Load the molstar plugin context in a global and accessible place\n//window.molstar = PluginUIContext;\n\n// Customize molstar specifications\n// Here you can see more clues about molstar options:\n//   https://github.com/molstar/molstar/blob/0bf32148afd93a645b44dca6d81e9779e85b4300/src/apps/viewer/app.ts\nconst molstarSpec = DefaultPluginUISpec();\nmolstarSpec.layout = {\n  initial: {\n    // When isExpanded is set true the vertical scroll is blocked\n    isExpanded: false,\n    // DANI: Esto no se que hace, he provado distintos valores y no veo la diferencia\n    // Available options: 'outside', 'portrait', 'landscape' or 'reactive'\n    controlsDisplay: 'reactive',\n    // If showControls is set to true then some logs are rendered in molstar\n    // This is a problem since they offset the molecule and they eclipse the mouse interaction with it\n    // These controls can be hidden by parts firther in the specifications however\n    showControls: false,\n  },\n};\nmolstarSpec.components = {\n  // This is only useful if showControls are set to true\n  controls: {\n    // Hide sequence (question mark in the top right corner)\n    // DANI: Al hacer click no hace nada\n    top: 'none',\n    // Hide console logs (they block the mouse click interaction with the main viewer)\n    bottom: 'none',\n    // Hide left panel (this panels is offsetting and deforming the main viewer very bad)\n    // DANI: Hay un botón pero funciona mal: intenta abrir un desplegable con más botones pero colapsa al momento\n    left: 'none',\n    // DANI: No se que hace esto pero he visto que alguien lo ponía así que yo también\n    remoteState: 'none',\n  },\n};\n\nconst DEFAULT_NUMBER_OF_FRAMES = 25;\n//const DEFAULT_ORIENTATION_TRANSITION_DURATION = 750; // 750 ms\n\nconst frameRangeFormat = /\\?frames=(?<start>\\d+):(?<end>\\d+)(:(?<step>\\d+))?/;\nconst parseFrameRange = frameRange => {\n  // Search in the function's parameter value \"string\" by using a specified regexp format: STEP_FORMAT\n  const parsed = frameRangeFormat.exec(frameRange);\n  if (!parsed) return null;\n  // The 'frameRangeFormat' has 3 defined groups: start, end and step\n  // Use the value from the 3 groups to define and save the desired frames\n  const start = +parsed.groups.start;\n  const end = Math.max(+parsed.groups.end, start); // If the end is less than the start then just use the start\n  const step = +(parsed.groups.step || 1);\n  const frames = Math.floor((end - start) / step) + 1;\n  return { start, end, step, frames };\n};\n\n// Join 2 ArrayBuffer\n// https://stackoverflow.com/questions/10786128/appending-arraybuffers\nfunction appendBuffer(buffer1, buffer2) {\n  var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n}\n\n// Set the number of bytes per element in trajectory data\nconst BYTES_PER_COORDINATE = 4; // float 32\nconst COORDINATES_PER_ATOM = 3; // x, y and z\nconst BYTES_PER_ATOM = BYTES_PER_COORDINATE * COORDINATES_PER_ATOM;\n\n// Set the NGL player speed limits\n// The actual 'speed' input limits are 0-100\n// The speed set as the time to wait before moving to the next frame in miliseconds\nconst minimumSpeed = 0;\nconst maximumSpeed = 100;\nconst slowestTimeout = 1000;\nconst fastestTimeout = 50;\nconst interpolateSpeed = speed => {\n  return (\n    slowestTimeout +\n    (speed - minimumSpeed) *\n      ((fastestTimeout - slowestTimeout) / (maximumSpeed - minimumSpeed))\n  );\n};\n\nconst defaultHighlightTypes = {\n  atoms: 'spacefill',\n  residues: 'ball+stick',\n  chains: 'ball+stick',\n  selections: 'ball+stick',\n};\n\nconst MolstarViewer = memo(\n  forwardRef(\n    (\n      {\n        className,\n        playing,\n        spinning,\n        smooth,\n        onProgress,\n        onLoad,\n        bounce = false, // Set if the animation, when finished, starts again (false) or goes back (true)\n        requestedFramesNumber = DEFAULT_NUMBER_OF_FRAMES, // The number of frames to be represented\n        selectedAtoms, // Atom index of the atom and residue to be represented\n        selectedResidueIndices, // Residue indices from residues to be highlighted\n        selectedChains, // Chain letters from chains to be represented\n        selectedCustom, // Free NGL selections to be directly represented\n        selectedDistances, // Groups of 2 atoms or residues to be represented as a distance\n        selectedAngles, // Groups of 3 atoms to be represented as an angle\n        selectedRepresentation, // String name of a representation to be painted in yellow color (only 1)\n        snapRepresentations,\n        noTrajectory, // True when only specific frames must be loaded\n        initialFocus, // The ngl selection to be focused by the camera initially\n        darkBackground,\n        perspective,\n        speed,\n        // Hooked values for changing representation parameters\n        drawingMethods,\n        coloringMethods,\n        opacities,\n        components,\n        showRepresentations,\n        nglSelections,\n        // Set the highlight representations types\n        highlightTypes = defaultHighlightTypes,\n      },\n      ref,\n    ) => {\n      // Save the components object into a local constant which can be modified\n      const comps = useMemo(() => components, [components]);\n\n      // If no URL is provided then use the main trajectory // URL to find the trajectory data in the API\n      // True when we just want to display a static structure // Requeste number of frames to display\n      // data from context\n      const {\n        accession,\n        accessionAndMdNumber,\n        fileDescriptors,\n        curatedOrientation,\n        topology: topologyManager,\n      } = useContext(ProjectCtx);\n      const { file: pdbDataFile } = useContext(PdbCtx);\n\n      const [isFirstCompStaged, setIsFirstCompStaged] = useState(false);\n      // The last automatic camera focus\n      const [focus, setFocus] = useState(initialFocus);\n\n      useMemo(() => {\n        //console.log(initialFocus);\n        setFocus(initialFocus);\n      }, [initialFocus]);\n\n      // references\n      const parentRef = useRef(null);\n      const molstarRef = useRef(null);\n      const containerRef = useRef(null);\n      const stageRef = useRef(null);\n      const tooltipRef = useRef(null);\n      const firstTime = useRef(true);\n\n      // in-view hook\n      const [inViewRef, isInView] = useInView();\n\n      // Set the content of the tooltip in JSX format\n      const [tooltipContent, setTooltipContent] = useState(null);\n\n      // Save all http requests so we can abort them all in case the whole component is unmounted\n      const currentRequests = useRef([]);\n\n      // Download topologies ----------------------------------------------------------------------\n\n      // Download all requested topologies: Each component may have a different structure URL.\n      // Set the first component topology as the 'pdbData'\n      // If a topologyURL is provided, download data form the API\n      // Otherwise, use the main structure\n\n      // Set a state to store the topology requests\n      const [requestedTopologies, setRequestedTopologies] = useState([]);\n      // Set also a state to track whenever there is still a downloading topology\n      const [anyLoadingTopology, setAnyLoadingTopology] = useState(false);\n\n      // Find if there are new topology to be requested in the components:\n      // Collect the topology on each component\n      // If the component has no topology specified use the main topology\n      useMemo(() => {\n        setRequestedTopologies(previousRequestedTopologies => {\n          const newRequestedTopologies = [];\n          comps.forEach(comp => {\n            const url = comp.topologyURL || null;\n            // Check if the url is new\n            // Else, skip this url since it has been requested already\n            const allRequestedTopologies = [\n              ...previousRequestedTopologies,\n              ...newRequestedTopologies,\n            ];\n            const current = allRequestedTopologies.find(topology => {\n              return topology.url === url;\n            });\n            if (current) return;\n            // Some urls may be missing\n            // This happens when the component wants the default topology from the pdbData\n            if (url === null) {\n              // Add a request with null url in order to get pdbData as a topology\n              // Do it only once for all components\n              newRequestedTopologies.push({\n                //url: null,\n                //loading: false,\n                // DANI: hardcodeo temporal\n                url: `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/files/${MAIN_STRUCTURE_FILENAME}`,\n                loading: true,\n                requested: false,\n                error: null,\n              });\n            } else {\n              // Add the topology to the list, so it will be requested to the API\n              newRequestedTopologies.push({\n                url: url,\n                loading: true,\n                requested: false,\n                error: null,\n              });\n              setAnyLoadingTopology(true);\n            }\n          });\n          return [...previousRequestedTopologies, ...newRequestedTopologies];\n        });\n      }, [comps, setRequestedTopologies, accession]);\n\n      // Set a state to store the downloaded topologies\n      const [topologies, setTopologies] = useState([]);\n\n      // Download all requested topologies from the API\n      useEffect(() => {\n        // Make an API request from each url\n        requestedTopologies.forEach((requestedTopology, t) => {\n          // Check if the requested url has the data already downloaded\n          // If so, skip this request\n          if (requestedTopology.file) return;\n          // If the topology failed to load do not try it again\n          if (requestedTopology.error) return;\n          // If the topology has been already requested do not request it again\n          if (requestedTopology.requested) return;\n          // If there is no URL load the context pdbData\n          if (requestedTopology.url === null) {\n            // WARNING: The '[...previous]' is essential to make the array object change\n            // This is important, since the 'topologies' object is used as a dependency further\n            // And if we do not change the array then the change is not detected\n            setTopologies(previous => {\n              requestedTopology.loading = false;\n              // Then check the loading state of all requested topologies and update the overall loading state\n              const anyLoading = requestedTopologies.some(t => t.loading);\n              setAnyLoadingTopology(anyLoading);\n              // The topology with the pdb data has not url\n              const topology = { url: null, file: pdbDataFile };\n              return [...previous, topology];\n            });\n          }\n          // If there is an URL\n          else {\n            requestedTopology.requested = true;\n            // Request the API\n            // http exception is added for local testing in http://localhost\n            const getter =\n              requestedTopology.url.substring(0, 5) === 'https'\n                ? https.get\n                : http.get;\n            let file = '';\n            const request = getter(\n              url.parse(requestedTopology.url),\n              response => {\n                // Get the whole response and then add it to the topologies\n                response\n                  .on('data', chunk => {\n                    file += chunk;\n                  })\n                  .on('end', () => {\n                    setTopologies(previous => {\n                      requestedTopology.loading = false;\n                      // Then check the loading state of all requested topologies and update the overall loading state\n                      const anyLoading = requestedTopologies.some(\n                        t => t.loading,\n                      );\n                      setAnyLoadingTopology(anyLoading);\n                      const topology = {\n                        url: requestedTopology.url,\n                        file: file,\n                      };\n                      return [...previous, topology];\n                    });\n                  })\n                  .on('error', error => {\n                    requestedTopology.loading = false;\n                    // Then check the loading state of all requested topologies and update the overall loading state\n                    const anyLoading = requestedTopologies.some(t => t.loading);\n                    setAnyLoadingTopology(anyLoading);\n                    requestedTopology.error = error;\n                  });\n              },\n            );\n            // Save the request out of here in case we have to abort it further\n            currentRequests.current.push(request);\n          }\n        });\n      }, [requestedTopologies, pdbDataFile]);\n\n      // Set the pdbFile\n      const pdbFile = useMemo(() => {\n        const mainComponent = comps[0];\n        const mainTopology = topologies.find(topology => {\n          return topology.url === mainComponent.topologyURL;\n        });\n        const { file: pdbFile } = mainTopology || {\n          loading: false,\n          file: pdbDataFile,\n        };\n        return pdbFile;\n      }, [comps, topologies, pdbDataFile]);\n\n      // Download trajectories ------------------------------------------------------------------------------------------------\n\n      // First we find all trajectory URLs (i.e. all requests to API)\n      // Then we ask the API skipping repeated URLs\n\n      // Set a function to modify an url by adding the frames range according to requestedFramesNumber\n      // The only exception are those trajectories whose frame number is lower than requestedFramesNumber\n\n      // Set a state to store requested trajectories and their loading status\n      const [requestedTrajectories, setRequestedTrajectories] = useState([]);\n      // Set also a state to track whenever there is still a downloading trajectory\n      const [anyLoadingTrajectory, setAnyLoadingTrajectory] = useState(false);\n\n      // Find if there are new trajectories to be requested in the components:\n      // Collect trajectories on each component\n      // If the component has no trajectory specified use the main trajectory\n      // If the component is not the main component and has no frame specified, use the first frame\n      // Only the main component (the first) is allowed to load multiple frames by the moment\n      useMemo(() => {\n        // Send a request to the API with the url of the rgyr analysis\n        const { loading, payload, error } = fileDescriptors;\n        // If we do not have file descritors yet then stop here\n        if (loading) return;\n        // Throw it in case something went wrong with the donwload\n        else if (error) throw error;\n        else if (!payload) throw new Error('Something bad happened with file descriptors');\n        // Finally update the trajectories state\n        setRequestedTrajectories(currentTrajectories => {\n          // Save the new requetsed trajectories\n          const newTrajectories = [];\n\n          // Set the url to ask the API\n          // Here, if you ask for the trajectory.bin instead of just trajectory, you get the whole file\n          // This is because the only route of the API accepting frames selection is the \"trajectory\" endpoint\n          // Other paths such as \"trajectory.bin\" will be processed as \"/:files\"\n          const baseUrl = `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/files/trajectory`;\n\n          comps.forEach((comp, c) => {\n            if (comp.onlyTopology) return;\n\n            // Set the first component as the 'principal' component\n            const isPrincipal = c === 0;\n            const requestedFrame = comp.frame;\n\n            // Get the trajectory urls\n            // If the component has no trajectory url specified then use the main trajectory url alone\n            let urls = comp.trajectoryURLs || [baseUrl];\n\n            // Add the frames number of all the component requested trajectories\n            comp.frameCount = 0;\n\n            urls.forEach((url, u) => {\n              // Check if the url is already framed\n              const framed = parseFrameRange(url);\n\n              // Get the name of the trajectory file inside the database\n              // i.e. the end of the requested URL\n              // The exception is the API endpoint 'trajectory', which uses the 'trajectory.bin' file\n              let trajectoryFilename = url.split('/').slice(-1)[0];\n              if (framed)\n                trajectoryFilename = trajectoryFilename.split('?frames=')[0];\n              if (trajectoryFilename === 'trajectory')\n                trajectoryFilename = 'trajectory.bin';\n\n              // Get the file descriptor of the required trajectory\n              const trajectoryFileDescriptor = payload.find(file => {\n                return file.filename === trajectoryFilename;\n              });\n              if (!trajectoryFileDescriptor)\n                throw new Error(\n                  `Trajectory \"${trajectoryFilename}\" is missing`,\n                );\n              const trajectoryMetadata = trajectoryFileDescriptor.metadata;\n\n              // Get the number of frames in the whole trajectory\n              const trajectoryFrames = trajectoryMetadata.frames;\n\n              // Set the number of frames to be requested from the whole trajectory\n              let requestedFrames = requestedFramesNumber;\n              if (requestedFramesNumber > trajectoryFrames)\n                requestedFrames = trajectoryFrames;\n              if (Number.isFinite(requestedFrame)) requestedFrames = 1;\n              else if (framed) requestedFrames = framed.frames;\n              // Components which are not the principal must include a 'frame' value\n              else if (!isPrincipal && trajectoryFrames > 1)\n                throw new Error(\n                  `Only the main component is allowed to load multiple frames`,\n                );\n\n              // Frames are added to any url which is missing the frames range according to requestedFramesNumber\n              // The only exception are those trajectories whose frame number is lower than requestedFramesNumber\n              let finalUrl = url;\n              // Get the expected number of frames returned, which may not be exactly the requested number\n              let returnedFrames;\n              // In case the url is already frammed\n              if (framed) {\n                // Find maximum number of frames to be returned (trajectory frames or requetsed frames)\n                const maximumFrames = Math.min(trajectoryFrames, framed.end);\n                returnedFrames = Math.ceil(maximumFrames / framed.step);\n              }\n              // Modify the url if it is not framed yet\n              else {\n                // Get the string frames range according to requestedFramesNumber\n                const { range: framesRange, frames: framesCount } = getFrames(\n                  trajectoryFrames,\n                  requestedFrames,\n                  requestedFrame,\n                );\n                returnedFrames = framesCount;\n\n                // Add the frames range to the original url\n                if (framesRange) finalUrl = url + `?frames=${framesRange}`;\n              }\n\n              // Set the component framed url if it doesn't exists\n              if (!comp.framedURLs) comp.framedURLs = [];\n\n              // Save this final url in the framedURL in the component\n              // Overwrite the previous framed url if exists\n              comp.framedURLs[u] = finalUrl;\n\n              // Add the requested frames number to the frame count\n              comp.frameCount += requestedFrames;\n\n              // Check if the requested url is already in the list\n              // If so, skip this request\n              // If not, save the request url and proceed\n              const current = currentTrajectories.find(trajectory => {\n                return trajectory.url === finalUrl;\n              });\n              if (!current) {\n                newTrajectories.push({\n                  url: finalUrl,\n                  frames: returnedFrames,\n                  // Add also the atoms number, which is used further\n                  atoms: trajectoryMetadata.atoms,\n                  loading: true,\n                  requested: false,\n                });\n                setAnyLoadingTrajectory(true);\n              }\n            });\n          });\n          // In case there are new requested trajectories we return a new array to trigger dependencies\n          if (newTrajectories.length > 0)\n            return [...currentTrajectories, ...newTrajectories];\n          // Otherwise we return the previous array to do no trigger dependencies\n          return currentTrajectories;\n        });\n      }, [accession, comps, fileDescriptors, requestedFramesNumber]);\n\n      // Set a state to store trajectories data\n      const [trajectories, setTrajectories] = useState([]);\n\n      // Set a function to update the current loading progress\n      const updateLoadingProgress = useCallback(() => {\n        const mainComp = comps[0];\n        // Get all trajectories to be used as the current main trajecotry\n        const mainTrajectories = [];\n        // Get the current trajectories state using a trick\n        // DANI: si intentas acceder a un state dentro de un callback te da el valor del state cuando se hizo el callback\n        // DANI: Absurdo, pero es así, y esta es la forma de sortear el problema\n        let trajectoriesState = [];\n        setTrajectories(current => {\n          trajectoriesState = current;\n          return current;\n        });\n        mainComp.framedURLs.forEach(url => {\n          const trajectory = trajectoriesState.find(trajectory => {\n            return trajectory.url === url;\n          });\n          if (trajectory) mainTrajectories.push(trajectory);\n        });\n        if (mainTrajectories.length === 0) return;\n        // Then calculate the average progress in all loading trajectories and update the progress state\n        const overallFrames = mainTrajectories\n          .map(trajectory => trajectory.frames)\n          .reduce((a, b) => a + b, 0);\n        const overallProgress =\n          mainTrajectories\n            .map(trajectory => trajectory.progress * trajectory.frames)\n            .reduce((a, b) => a + b, 0) / overallFrames;\n        onLoad(overallProgress);\n      }, [comps, setTrajectories, onLoad]);\n\n      // Download the requested trajectory data (frames)\n      useEffect(() => {\n        requestedTrajectories.forEach(trajectory => {\n          // Check if the trajectory has been requested already\n          // If so, skip this request\n          if (trajectory && trajectory.requested) return;\n          trajectory.requested = true;\n\n          // Set the loading status as true\n          trajectory.loading = true;\n          trajectory.progress = 0;\n\n          // Request the API\n          // http exception is added for local testing in http://localhost\n          const getter =\n            trajectory.url.substring(0, 5) === 'https' ? https.get : http.get;\n          const request = getter(url.parse(trajectory.url), response => {\n            const totalBytes = response.headers['content-length'];\n            // Set the new trajectory\n            setTrajectories(previousTrajectories => {\n              const newTrajectory = {\n                url: trajectory.url,\n                frames: trajectory.frames,\n                atoms: trajectory.atoms,\n                payload: new ArrayBuffer(0),\n                progress: 0,\n              };\n              return [...previousTrajectories, newTrajectory];\n            });\n            // Track the amout of bytes already downloaded\n            let byteCount = 0;\n            response\n              .on('data', chunk => {\n                byteCount += chunk.byteLength;\n                trajectory.progress = byteCount / totalBytes;\n                // Update trajectories with the current partial data we have\n                setTrajectories(previousTrajectories => {\n                  const currentTrajectory = previousTrajectories.find(\n                    t => t.url === trajectory.url,\n                  );\n                  currentTrajectory.payload = appendBuffer(\n                    currentTrajectory.payload,\n                    chunk,\n                  );\n                  currentTrajectory.progress = trajectory.progress;\n                  return [...previousTrajectories];\n                });\n                updateLoadingProgress();\n              })\n              .on('end', () => {\n                // Save the main data in the ref\n                trajectory.loading = false;\n                // Then check the loading state of all requested trajectories and update the overall loading state\n                const anyLoading = requestedTrajectories.some(\n                  trajectory => trajectory.loading,\n                );\n                setAnyLoadingTrajectory(anyLoading);\n              });\n          });\n          currentRequests.current.push(request);\n        });\n      }, [requestedTrajectories, updateLoadingProgress]);\n\n      // If the whole component is removed then abort all requests in case they were not finished\n      // Note that this includes both topology and trajectory requests\n      // DANI: No he verificado que esto funcione bien a nivel de API\n      useEffect(() => {\n        // I save it in a constant to avoid a non-sense warning\n        const redundantList = currentRequests.current;\n        return () => {\n          redundantList.forEach(request => {\n            request.abort();\n          });\n        };\n      }, []);\n\n      // Setup molstar\n      useEffect(() => {\n        // This wrapper function is the most correct way to call awaits inside a use effect\n        const wrap = async () => {\n          // Create the plugin\n          molstarRef.current = await createPluginUI(\n            parentRef.current,\n            molstarSpec,\n          );\n          // console.log(molstarRef.current)\n        };\n        wrap();\n        // Cleanup function\n        return () => {\n          if (molstarRef.current) {\n            molstarRef.current.dispose();\n            molstarRef.current = null;\n          }\n        };\n      }, []);\n\n      // Load topologies in molstar\n      useEffect(() => {\n        // Stop here if we are still loading topologies\n        if (anyLoadingTopology) return;\n        // Get the molstar reference\n        const molstar = molstarRef.current;\n        if (!molstar) return;\n        // Load each topology\n        topologies.forEach(async topology => {\n          // Download and apply data\n          const data = await molstar.builders.data.rawData(\n            { data: topology.file } /* replace with your URL */,\n            { state: { isGhost: true } },\n          );\n          // DANI: Aunque no llegues a 'aplicarla' acabas teniendo una trayectoria de una frame en la data\n          const trajectory = await molstar.builders.structure.parseTrajectory(\n            data,\n            'pdb',\n          );\n          // WARNING: Do not modify this model\n          // WARNING: Althought it should be the same model\n          const model = await molstar.builders.structure.createModel(\n            trajectory,\n          );\n\n          // DANI: Esta función te acepta igual una trayectory que un model que una structure\n          // await molstar.builders.structure.hierarchy.applyPreset(structure, \"default\");\n\n          // console.log(molstar);\n          // console.log(molstar.managers.structure.hierarchy.current);\n\n          // // Set the representations (https://github.com/molstar/molstar/issues/68)\n          // // WARNING: Default MolStar representation is not the most efficient one so we have to tweak it\n          // // First set the different features we may encounter within the structure\n          // const components = {\n          //     polymer: await molstar.builders.structure.tryCreateComponent(structure, 'polymer'),\n          //     ligand: await molstar.builders.structure.tryCreateComponent(structure, 'ligand'),\n          //     //water: await molstar.builders.structure.tryCreateComponent(structure, 'water'),\n          // };\n          // // Now\n          // const builder = molstar.builders.structure.representation;\n          // const update = molstar.build();\n          // if (components.polymer) builder.buildRepresentation(update, components.polymer, {\n          //   type: 'line',\n          //   //typeParams: { alpha: 0.51 } // Make it transparent\n          // }, { tag: 'polymer' });\n          // if (components.ligand) builder.buildRepresentation(update, components.ligand, {\n          //   type: 'ball-and-stick'\n          // }, { tag: 'ligand' });\n          // //if (components.water) builder.buildRepresentation(update, components.water, { type: 'ball-and-stick', typeParams: { alpha: 0.6 } }, { tag: 'water' });\n          // await update.commit();\n\n          // Save the model reference inside the molstar reference\n          molstar.modelRef = model.ref;\n        });\n      }, [anyLoadingTopology, topologies]);\n\n      // Load trajectories in molstar\n      // Once the trajectories are downloaded, load them in corresponding NGL representations\n      // Every time the trajectory payloads change this useEffect must be rerun\n      useEffect(() => {\n        // Get the molstar reference\n        const molstar = molstarRef.current;\n        if (!molstar) return;\n        // If there must be no trajectory then stop here\n        if (noTrajectory) return;\n        // This wrapper function is the most correct way to call awaits inside a use effect\n        const wrap = async () => {\n          // Check if trajectories are\n          if (!topologies || !trajectories || trajectories.length === 0) return;\n\n          // If molstar or the main model are not set yet then we must wait\n          if (!molstar || !molstar.modelRef) return;\n\n          const trajectory = trajectories[0];\n\n          let trajectoryAtoms;\n          let trajectoryFinalExpectedFrames = 0;\n\n          trajectoryAtoms = trajectory.atoms;\n          if (trajectoryAtoms !== trajectory.atoms)\n            throw new Error(\n              `Atoms number in the different trajectories do not match`,\n            );\n\n          // Add the final expected frames for all frames in the component\n          trajectoryFinalExpectedFrames += trajectory.frames;\n\n          const payload = trajectory.payload;\n          const bytesPerFrame = trajectoryAtoms * BYTES_PER_ATOM;\n          const fitLength =\n            Math.floor(payload.byteLength / bytesPerFrame) * bytesPerFrame;\n          const totalPayload = payload.slice(0, fitLength);\n\n          // If the total payload is empty then stop here\n          if (totalPayload.byteLength === 0) return;\n\n          // Calculate how many frames are there in total\n          const totalFrames = totalPayload.byteLength / bytesPerFrame;\n          const lastFrameIndex = totalFrames - 1;\n\n          // Check if all required data is already downloaded\n          const completedTrajectory =\n            totalFrames === trajectoryFinalExpectedFrames;\n          if (!completedTrajectory) return;\n\n          // Load coordinates as they are parsed\n          const coords = await molstar\n            .build()\n            .toRoot()\n            .apply(TrajectoryFromCustomData, {\n              data: totalPayload,\n              natoms: trajectory.atoms,\n            })\n            .commit();\n\n          // Get the current loaded trajectories\n          // DANI: No te fies de este número\n          // DANI: Aquí aparecen todas las trayectorias declaradas, incluido aquellas que no han sido 'aplicadas'\n          const loadedTrajectories =\n            molstar.managers.structure.hierarchy.current.trajectories;\n\n          const molstarTrajectory = await molstar\n            .build()\n            .toRoot()\n            .apply(\n              TrajectoryFromModelAndCoordinates,\n              {\n                modelRef: molstar.modelRef,\n                coordinatesRef: coords.ref,\n              },\n              { dependsOn: [molstar.modelRef, coords.ref] },\n            )\n            .commit();\n\n          // Get the current trajectory model\n          // From now on, this is the model to be modified and not the model in molstar.modelRef\n          const newModel = await molstar.builders.structure.createModel(\n            molstarTrajectory,\n          );\n\n          // Set the default representation\n          // Use a lightweighted representation type\n          const structure = await molstar.builders.structure.createStructure(\n            newModel,\n          );\n          const components = molstar.build().to(structure);\n          const lightRepresentation = createStructureRepresentationParams(\n            molstar,\n            void 0,\n            {\n              type: 'cartoon',\n              typeParams: {\n                // Quality options: custom, auto, highest, higher, high, medium, low, lower, lowest\n                // https://github.com/molstar/molstar/blob/0e197b18857d59c27f51d4aa0226cd772bc872ca/src/mol-geo/geometry/base.ts\n                // DANI: 'lowest' se ve muy feo y no mejora mucho el rendimiento\n                quality: 'lower',\n                ignoreHydrogens: 'all',\n                ignoreHydrogensVariant: 'all',\n                ignoreLight: true,\n              },\n            },\n          );\n\n          components.apply(\n            StateTransforms.Representation.StructureRepresentation3D,\n            lightRepresentation,\n          );\n          await components.commit();\n\n          // DANI: Hay 2 presets: 'default' y 'all-models'. Aparecen siempre, aunque tu no los hayas creado\n          //const currentPresets = molstar.builders.structure.hierarchy.getPresetsWithOptions(molstarTrajectory);\n          //console.log(currentPresets);\n\n          // DANI: El apply preset puede hacerse a 'default' o a 'all-models'\n          // DANI: El 'all-models' te representa todas las frames superpuestas (y tarda)\n          // await molstar.builders.structure.hierarchy.applyPreset(\n          //   molstarTrajectory,\n          //   'default',\n          // );\n\n          // If there is a trajectory already update it with new data\n          if (loadedTrajectories.length > 0) {\n            //if (loadedTrajectories.length > 1) throw new Error('Molstar error: There should be only 1 trajectory');\n            //console.log('already loaded traj!!');\n          }\n          // If there is not trajectory yet then create a new trajectory\n          else {\n            //console.log('loading for the first time');\n          }\n        };\n        wrap();\n      }, [topologies, trajectories, comps, noTrajectory]);\n\n      // play/pause button effect\n      useEffect(() => {\n        // Get molstar\n        // If it has not been yet initiated then stop here\n        const molstar = molstarRef.current;\n        if (!molstar) return;\n\n        // If there is no trajectory then there is nothing to play\n        if (noTrajectory) return;\n\n        // Play\n        if (playing && isInView) {\n          molstar.managers.animation.play(AnimateModelIndex, {\n            // Select the time it takes to switch between frames\n            //duration: { name: 'fixed', params: { durationInS: 10 } },\n            //duration: { name: 'computed', params: { targetFps: 10 } },\n            duration: { name: 'sequential', params: { maxFps: 10 } },\n            // Select the mode it switches frames\n            //mode: { name: 'once', params: { direction: 'forward' } }\n            mode: { name: 'loop', params: { direction: 'forward' } },\n            //mode: { name: 'palindrome', params: {} }\n          });\n        }\n        // Pause\n        else {\n          molstar.managers.animation.stop();\n        }\n      }, [playing, isInView, noTrajectory, bounce]);\n\n      // Resize logic\n      // declare handler\n      const handleResize = useCallback(async () => {\n        if (!stageRef.current) return;\n        const canvas = containerRef.current.querySelector('canvas');\n        if (canvas) {\n          canvas.style.height = '';\n          canvas.style.cursor = 'default';\n        }\n        // WARNING: This sleep here is to fix a bug\n        // When we open/close settings we trigger this function but it takes the size of the window before changing\n        // The sleep fixes this problem altought the delay is 0\n        await sleep(0);\n        stageRef.current.handleResize();\n      }, []);\n      // connect the handle to events\n      useEffect(() => {\n        window.addEventListener('resize', handleResize);\n        return () => {\n          window.removeEventListener('resize', handleResize);\n        };\n      }, [handleResize]);\n\n      // Expose public methods and getters/setters\n      useImperativeHandle(\n        ref,\n        () => ({\n          autoResize: handleResize,\n          // Output the current orientation/focus in console\n          // Note: this is for the developer, not for the regular user\n          displayFocus() {\n            const orientation = stageRef.current.viewerControls.getOrientation();\n            const stringifiedArray = `[${orientation.elements.toString()}]`;\n            console.log(stringifiedArray);\n          },\n          centerFocus() {\n            setFocus({ comp: 0, sele: 'all' });\n            // Use the provided orientation, if any\n            // DANI: Sin hacer\n          },\n          get currentFrame() {\n            if (!(isFirstCompStaged && requestedTrajectories.length)) return -1;\n            try {\n              return stageRef.current.compList[0].trajList[0].trajectory\n                .currentFrame;\n            } catch (_) {\n              return -1;\n            }\n          },\n          set currentFrame(value) {\n            if (!(isFirstCompStaged && requestedTrajectories.length)) return;\n            try {\n              const total = this.totalFrames;\n              let frame = value;\n              if (frame < 0) frame = 0;\n              if (frame >= total) frame = total - 1;\n              stageRef.current.compList[0].trajList[0].trajectory.setFrame(\n                frame,\n              );\n            } catch (_) {\n              /* */\n            }\n          },\n          get totalFrames() {\n            if (!(isFirstCompStaged && requestedTrajectories.length)) return 1;\n            try {\n              return stageRef.current.compList[0].trajList[0].trajectory.frames\n                .length;\n            } catch (_) {\n              return 1;\n            }\n          },\n          get totalExpectedFrames() {\n            try {\n              return stageRef.current.compList[0].trajList[0].expectedFrames;\n            } catch (_) {\n              return 1;\n            }\n          },\n        }),\n        [isFirstCompStaged, requestedTrajectories, handleResize],\n      );\n\n      // workaround to have multiple ref logic on one element\n      // https://github.com/thebuilder/react-intersection-observer/issues/186#issuecomment-468641525\n      const handleRef = node => {\n        inViewRef(node);\n        parentRef.current = node;\n      };\n\n      // Finally, render the ngl window\n      return (\n        <>\n          <div\n            ref={handleRef}\n            className={cn(className, style.container, {\n              [style['loading-structure']]: anyLoadingTopology,\n              [style['loading-trajectory']]:\n                !noTrajectory && anyLoadingTrajectory,\n              [style['light-theme']]: !darkBackground,\n            })}\n            // Display loading status data in the upper left corner of the NGL window\n            data-loading={undefined}\n          />\n          <div ref={tooltipRef} className={style.tooltip}>\n            {tooltipContent}\n          </div>\n        </>\n      );\n    },\n  ),\n);\n\nexport default MolstarViewer;\n","import { Frames } from 'ngl';\n\n// Set the number of bytes per element in trajectory data\nconst BYTES_PER_COORDINATE = 4; // float 32\nconst COORDINATES_PER_ATOM = 3; // x, y and z\nconst BYTES_PER_ATOM = BYTES_PER_COORDINATE * COORDINATES_PER_ATOM;\n\n// This converts the trajectory payload (i.e. atom coordinates in raw binary data) into NGL formatted coordinates\nconst payloadToNGLCoordinates = (\n  trajectoryData,\n  trajectoryAtoms,\n  trajectoryFrames,\n) => {\n  // Parse binary to coordinates\n  const trajectoryCoordinates = new Float32Array(trajectoryData);\n  try {\n    // Save all coordinates here\n    // This array is to be returned at the end\n    const overallCoordinates = [];\n    for (let i = 0; i < trajectoryFrames; i++) {\n      // Create a new array with the length of the number of atoms in the pdbFile * 3\n      const coordinates = new Float32Array(\n        trajectoryAtoms * COORDINATES_PER_ATOM,\n      );\n      coordinates.set(\n        trajectoryCoordinates.subarray(\n          i * trajectoryAtoms * COORDINATES_PER_ATOM,\n          (i + 1) * trajectoryAtoms * COORDINATES_PER_ATOM,\n        ),\n      );\n      // Push the new coordinates each frame\n      overallCoordinates.push(coordinates);\n    }\n    return overallCoordinates;\n  } catch (error) {\n    // If this fails the topology may not match the trajectory in atom number\n    return null;\n  }\n};\n\n// This converts the trajectory payload (i.e. atom coordinates in raw binary data) into NGL formatted coordinates\n// This alternative function is used when the trajectory has less atoms than the structure\n// This may happen when trajectory data contains only heavy or backbone atoms (e.g. pca projections)\nconst payloadToNGLCoordinatesFiltered = (\n  atomCount,\n  atomIndices,\n  trajectoryData,\n  trajectoryAtoms,\n  trajectoryFrames,\n) => {\n  // Parse binary to coordinates\n  const trajectoryCoordinates = new Float32Array(trajectoryData);\n  // Check atom number to be as expected\n  const expectedAtomNumber =\n    trajectoryCoordinates.length / COORDINATES_PER_ATOM / trajectoryFrames;\n  if (expectedAtomNumber !== trajectoryAtoms) {\n    console.log('Number of coordinates: ' + trajectoryCoordinates.length);\n    console.log('Number of frames: ' + trajectoryFrames);\n    console.log('Expected number of atoms: ' + expectedAtomNumber);\n    console.log('Actual number of atoms: ' + trajectoryAtoms);\n    throw new Error(`Trajectory atom number is wrong`);\n  }\n\n  try {\n    // Save all coordinates here\n    // This array is to be returned at the end\n    const overallCoordinates = [];\n    for (let i = 0; i < trajectoryFrames; i++) {\n      // Create a new array with the length of the number of atoms in the structure * 3\n      const coordinates = new Float32Array(atomCount * COORDINATES_PER_ATOM);\n      let k = 0;\n      // Create our own trajectory with coordinates only for the specified atoms\n      // The coordinates of the excluded atoms are set to 0\n      // This makes the trajectory compatible with the structure\n      for (let j = 0; j < atomCount; j++) {\n        //if (k >= trajectoryAtoms) break;\n        if (atomIndices.indexOf(j) !== -1) {\n          coordinates[j * COORDINATES_PER_ATOM] =\n            trajectoryCoordinates[\n              i * trajectoryAtoms * COORDINATES_PER_ATOM +\n                k * COORDINATES_PER_ATOM\n            ];\n          coordinates[j * COORDINATES_PER_ATOM + 1] =\n            trajectoryCoordinates[\n              i * trajectoryAtoms * COORDINATES_PER_ATOM +\n                k * COORDINATES_PER_ATOM +\n                1\n            ];\n          coordinates[j * COORDINATES_PER_ATOM + 2] =\n            trajectoryCoordinates[\n              i * trajectoryAtoms * COORDINATES_PER_ATOM +\n                k * COORDINATES_PER_ATOM +\n                2\n            ];\n          k++;\n        }\n      }\n      // Push the new coordinates each frame\n      overallCoordinates.push(coordinates);\n    }\n    return overallCoordinates;\n  } catch (e) {\n    // If this fails the topology may not match the trajectory in atom number\n    return null;\n  }\n};\n\n// This converts the trajectory payload (i.e. atom coordinates in raw binary data) into NGL formatted coordinates\n// This alternative function is used when the trajectory has less atoms than the structure\n// This may happen when trajectory data contains only heavy or backbone atoms (e.g. pca projections)\nconst payloadToNGLCoordinatesAlternative = (\n  pdbFile,\n  trajectoryData,\n  trajectoryAtoms,\n  trajectoryFrames,\n) => {\n  // Parse binary to coordinates\n  const trajectoryCoordinates = new Float32Array(trajectoryData);\n  // Check atom number to be as expected\n  if (\n    trajectoryCoordinates.length / COORDINATES_PER_ATOM / trajectoryFrames !==\n    trajectoryAtoms\n  )\n    throw new Error(`Trajectory atom number is wrong`);\n\n  let format = '';\n\n  // Then count different combinations of atoms in the pdbFile\n  let k = 0;\n  let backboneAtoms = 0;\n  let heavyAtoms = 0;\n  for (let a = 0; a < pdbFile.atomCount; a++) {\n    // DANI: He probado a quitar esta condición. hay que probar que funcione bien en la vieja model\n    // DANI: En las trayectorias del Shaw el 'isProtein' no funcionaba y devolvía siempre 'false'\n    //if (!pdbFile.getAtomProxy(a).isProtein()) break;\n    if (k >= trajectoryAtoms) break;\n    if (\n      pdbFile.getAtomProxy(a).atomname === 'C' ||\n      pdbFile.getAtomProxy(a).atomname === 'CA' ||\n      pdbFile.getAtomProxy(a).atomname === 'N'\n    ) {\n      backboneAtoms += 1;\n    }\n    if (pdbFile.getAtomProxy(a).element !== 'H') {\n      heavyAtoms += 1;\n    }\n  }\n  // Finally check which count matches the expected number of atoms\n  if (trajectoryAtoms === backboneAtoms) format = 'backbone';\n  else if (trajectoryAtoms === heavyAtoms) format = 'heavy';\n  else\n    console.error(\n      `Number of atoms does not match any defined atoms selection\n      Number of atoms: ${trajectoryAtoms}\n      Expected backbone atoms: ${backboneAtoms}\n      Expected heavy atoms: ${heavyAtoms}`,\n    );\n  try {\n    // Save all coordinates here\n    // This array is to be returned at the end\n    const overallCoordinates = [];\n    for (let i = 0; i < trajectoryFrames; i++) {\n      // Create a new array with the length of the number of atoms in the pdbFile * 3\n      const coordinates = new Float32Array(\n        pdbFile.atomCount * COORDINATES_PER_ATOM,\n      );\n      let k = 0;\n      // Create our own trajectory with coordinates only for the specified atoms\n      // The coordinates of the excluded atoms are set to 0\n      // This makes the trajectory compatible with the pdbFile\n      if (format === 'backbone') {\n        for (let j = 0; j < pdbFile.atomCount; j++) {\n          if (k >= trajectoryAtoms) break;\n          if (\n            pdbFile.getAtomProxy(j).atomname === 'C' ||\n            pdbFile.getAtomProxy(j).atomname === 'CA' ||\n            pdbFile.getAtomProxy(j).atomname === 'N'\n          ) {\n            coordinates[j * COORDINATES_PER_ATOM] =\n              trajectoryCoordinates[\n                i * trajectoryAtoms * COORDINATES_PER_ATOM +\n                  k * COORDINATES_PER_ATOM\n              ];\n            coordinates[j * COORDINATES_PER_ATOM + 1] =\n              trajectoryCoordinates[\n                i * trajectoryAtoms * COORDINATES_PER_ATOM +\n                  k * COORDINATES_PER_ATOM +\n                  1\n              ];\n            coordinates[j * COORDINATES_PER_ATOM + 2] =\n              trajectoryCoordinates[\n                i * trajectoryAtoms * COORDINATES_PER_ATOM +\n                  k * COORDINATES_PER_ATOM +\n                  2\n              ];\n            k++;\n          }\n        }\n      }\n      if (format === 'heavy') {\n        for (let j = 0; j < pdbFile.atomCount; j++) {\n          if (k >= trajectoryAtoms) break;\n          if (pdbFile.getAtomProxy(j).element !== 'H') {\n            coordinates[j * COORDINATES_PER_ATOM] =\n              trajectoryCoordinates[\n                i * trajectoryAtoms * COORDINATES_PER_ATOM +\n                  k * COORDINATES_PER_ATOM\n              ];\n            coordinates[j * COORDINATES_PER_ATOM + 1] =\n              trajectoryCoordinates[\n                i * trajectoryAtoms * COORDINATES_PER_ATOM +\n                  k * COORDINATES_PER_ATOM +\n                  1\n              ];\n            coordinates[j * COORDINATES_PER_ATOM + 2] =\n              trajectoryCoordinates[\n                i * trajectoryAtoms * COORDINATES_PER_ATOM +\n                  k * COORDINATES_PER_ATOM +\n                  2\n              ];\n            k++;\n          }\n        }\n      }\n      // Push the new coordinates each frame\n      overallCoordinates.push(coordinates);\n    }\n    return overallCoordinates;\n  } catch (e) {\n    // If this fails the topology may not match the trajectory in atom number\n    return null;\n  }\n};\n\n// This converts the trajectory payload (i.e. atom coordinates in raw binary data) into an NGL object\n// This object can be further added to a NGL stage component\nexport const setNGLFile = (\n  topology,\n  trajectoryData,\n  trajectoryAtoms,\n  trajectoryFrames,\n  atomIndices,\n) => {\n  if (!(topology && trajectoryData)) return;\n\n  let coordinates;\n  // In case topology and trajectory atoms match go for the canonical parsing\n  if (trajectoryAtoms === topology.atomCount)\n    coordinates = payloadToNGLCoordinates(\n      trajectoryData,\n      trajectoryAtoms,\n      trajectoryFrames,\n    );\n  else if (atomIndices)\n    coordinates = payloadToNGLCoordinatesFiltered(\n      topology.atomCount,\n      atomIndices,\n      trajectoryData,\n      trajectoryAtoms,\n      trajectoryFrames,\n    );\n  // Otherwise it may mean the trajectory has only heavy/backbone atoms\n  // Then parse it taking this in count\n  // DANI: Esto es más un arreglo que no algo permanente\n  // DANI: Lo suyo sería que en estos casos se pida la estructura solo con los átomos que hacen falta\n  else\n    coordinates = payloadToNGLCoordinatesAlternative(\n      topology,\n      trajectoryData,\n      trajectoryAtoms,\n      trajectoryFrames,\n    );\n\n  // If we do not have coordinates at this point it may mean the topology and trajectory are not matching in atom number\n  if (!coordinates)\n    throw new Error(`Topology and trajectory data may not match`);\n\n  // Finally build the NGL object and add the parsed coordinates\n  const file = new Frames('Dynamically generated trajectory', '');\n  file.coordinates = coordinates;\n  return file;\n};\n\n// This updates an already set NGL object by adding new trajectory data\nexport const updateNGLFile = (\n  file,\n  topology,\n  trajectoryData,\n  trajectoryAtoms,\n  trajectoryFrames,\n  atomIndices,\n) => {\n  if (!(file && topology && trajectoryData)) return;\n\n  // The NGL file may already have trajectory data\n  // There is no need to process those coordinates again, so they must discarded from the parsing\n\n  // Find out how many frames are already loaded\n  const currentFrames = file.frames.length;\n\n  // If there are as many frames already as the new trajectory frames then we have nothing to do\n  if (currentFrames >= trajectoryFrames) return;\n\n  // Calculate how many bytes we must discard and discard them from the begining of the array buffer\n  const discardBytes = currentFrames * trajectoryAtoms * BYTES_PER_ATOM;\n  const newTrajectoryData = trajectoryData.slice(discardBytes);\n  const newTrajectoryFrames = trajectoryFrames - currentFrames;\n\n  let coordinates;\n  // In case topology and trajectory atoms match go for the canonical parsing\n  if (trajectoryAtoms === topology.atomCount)\n    coordinates = payloadToNGLCoordinates(\n      newTrajectoryData,\n      trajectoryAtoms,\n      newTrajectoryFrames,\n    );\n  else if (atomIndices)\n    coordinates = payloadToNGLCoordinatesFiltered(\n      topology.atomCount,\n      atomIndices,\n      newTrajectoryData,\n      trajectoryAtoms,\n      newTrajectoryFrames,\n    );\n  // Otherwise it may mean the trajectory has only heavy/backbone atoms\n  // Then parse it taking this in count\n  // DANI: Esto es más un arreglo que no algo permanente\n  // DANI: Lo suyo sería que en estos casos se pida la estructura solo con los átomos que hacen falta\n  else\n    coordinates = payloadToNGLCoordinatesAlternative(\n      topology,\n      newTrajectoryData,\n      trajectoryAtoms,\n      newTrajectoryFrames,\n    );\n\n  // If we do not have coordinates at this point it may mean the topology and trajectory are not matching in atom number\n  if (!coordinates)\n    throw new Error(`Topology and trajectory data may not match`);\n\n  // Finally update the NGL file coordinates\n  file.frames = file.frames.concat(coordinates);\n};\n","// This function expects to receive a specific frame or the number of frames to load\n// This function returns a string which specifies the frames to be loaded\n// This string is standarized in a API friendly format\nconst getFrames = (trajectoryFrames, requestedFrames, requestedFrame) => {\n  // only one specific frame loaded, as a projection\n  if (requestedFrame) {\n    return { range: (requestedFrame + 1).toString(), frames: 1 };\n  }\n  // multiple frames loaded, as a trajectory\n  else {\n    if (!trajectoryFrames)\n      throw new Error('Missing number of frames in the trajectory');\n    if (!requestedFrames) throw new Error('Missing number of requested frames');\n    const frameStep = Math.floor(trajectoryFrames / requestedFrames);\n    // Predict how many frames will be returned, which may be different from the requested frames number\n    const returnedFrames = Math.ceil(trajectoryFrames / frameStep);\n    return {\n      range: `${1}:${trajectoryFrames}:${frameStep}`,\n      frames: returnedFrames,\n    };\n  }\n};\n\nexport default getFrames;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__7Ceta\",\"light-theme\":\"style_light-theme__H4DPh\",\"loading-trajectory\":\"style_loading-trajectory__2DP4d\",\"loading-structure\":\"style_loading-structure__E1dyl\",\"tooltip\":\"style_tooltip__eJTpx\"};","import React, {\n  forwardRef,\n  memo,\n  useState,\n  useRef,\n  useImperativeHandle,\n  useCallback,\n  useMemo,\n  useEffect,\n  useContext,\n} from 'react';\n//import useToggleState from '../../hooks/use-toggle-state';\nimport { useInView } from 'react-intersection-observer';\nimport { clamp } from 'lodash-es';\nimport cn from 'classnames';\nimport { autoLoad, Stage, Shape, ColormakerRegistry, Matrix4 } from 'ngl';\n\nimport { frame } from 'timing-functions';\n\nimport { setNGLFile, updateNGLFile } from './payload-to-ngl-file';\nimport getFrames from './get-frames';\n\nimport { ProjectCtx, PdbCtx } from '../../contexts';\n\nimport { setTooltipPosition } from '../../utils/tooltip-position-manager';\n\nimport style from './style.module.css';\n\n// To get frames\nimport { BASE_PATH_PROJECTS } from '../../utils/constants';\n\n// Make a deep copy of an object even with cyclic references\nimport { cloneDeep } from 'lodash-es';\n\n// Used to just wait\nimport { sleep } from 'timing-functions';\n\nimport https from 'https-browserify';\nimport http from 'stream-http';\nimport { parse as urlParse } from 'url';\n\nconst DEFAULT_NUMBER_OF_FRAMES = 25;\nconst DEFAULT_ORIENTATION_TRANSITION_DURATION = 750; // 750 ms\n\nconst CHAIN_SELECTION = 'polymer and not hydrogen ';\n\nconst isValidColor = colorName => {\n  var s = new Option().style;\n  s.color = colorName;\n  return s.color === colorName;\n};\n\nconst frameRangeFormat = /\\?frames=(?<start>\\d+):(?<end>\\d+)(:(?<step>\\d+))?/;\nconst parseFrameRange = frameRange => {\n  // Search in the function's parameter value \"string\" by using a specified regexp format: STEP_FORMAT\n  const parsed = frameRangeFormat.exec(frameRange);\n  if (!parsed) return null;\n  // The 'frameRangeFormat' has 3 defined groups: start, end and step\n  // Use the value from the 3 groups to define and save the desired frames\n  const start = +parsed.groups.start;\n  const end = Math.max(+parsed.groups.end, start); // If the end is less than the start then just use the start\n  const step = +(parsed.groups.step || 1);\n  const frames = Math.floor((end - start) / step) + 1;\n  return { start, end, step, frames };\n};\n\n// Join 2 ArrayBuffer\n// https://stackoverflow.com/questions/10786128/appending-arraybuffers\nfunction appendBuffer(buffer1, buffer2) {\n  var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n}\n\n// Set the number of bytes per element in trajectory data\nconst BYTES_PER_COORDINATE = 4; // float 32\nconst COORDINATES_PER_ATOM = 3; // x, y and z\nconst BYTES_PER_ATOM = BYTES_PER_COORDINATE * COORDINATES_PER_ATOM;\n\n// Set the NGL player speed limits\n// The actual 'currentSpeed' input limits are 0-100\n// The speed set as the time to wait before moving to the next frame in miliseconds\nconst minimumSpeed = 0;\nconst maximumSpeed = 100;\nconst slowestTimeout = 1000;\nconst fastestTimeout = 50;\nconst interpolateSpeed = currentSpeed => {\n  return (\n    slowestTimeout +\n    (currentSpeed - minimumSpeed) *\n      ((fastestTimeout - slowestTimeout) / (maximumSpeed - minimumSpeed))\n  );\n};\n\nconst defaultHighlightTypes = {\n  atoms: 'spacefill',\n  residues: 'ball+stick',\n  chains: 'ball+stick',\n  selections: 'ball+stick',\n};\n\nconst NGLViewer = memo(\n  forwardRef(\n    (\n      {\n        className,\n        playing,\n        spinning,\n        smooth,\n        onProgress,\n        onLoad,\n        bounce = false, // Set if the animation, when finished, starts again (false) or goes back (true)\n        requestedFramesNumber = DEFAULT_NUMBER_OF_FRAMES, // The number of frames to be represented\n        selectedAtoms, // Atom index of the atom and residue to be represented\n        selectedResidueIndices, // Residue indices from residues to be highlighted\n        selectedChains, // Chain letters from chains to be represented\n        selectedCustom, // Free NGL selections to be directly represented\n        selectedDistances, // Groups of 2 atoms or residues to be represented as a distance\n        selectedAngles, // Groups of 3 atoms to be represented as an angle\n        selectedRepresentation, // String name of a representation to be painted in yellow color (only 1)\n        snapRepresentations,\n        noTrajectory, // True when only specific frames must be loaded\n        initialFocus, // The ngl selection to be focused by the camera initially\n        darkBackground,\n        perspective,\n        speed,\n        xSelection,\n        xAxisStep,\n        // Final components and representations prepared for the viewer\n        components,\n        representations,\n        // Set the highlight representations types\n        highlightTypes = defaultHighlightTypes,\n\n      },\n      ref,\n    ) => {\n\n      // If no URL is provided then use the main trajectory // URL to find the trajectory data in the API\n      // True when we just want to display a static structure // Requeste number of frames to display\n      // data from context\n      const {\n        accession,\n        accessionAndMdNumber,\n        fileDescriptors,\n        curatedOrientation,\n        topology: topologyManager,\n      } = useContext(ProjectCtx);\n      const { file: pdbDataFile } = useContext(PdbCtx);\n\n      // Save the main component once it is staged\n      // This components is used by several functions\n      const [mainComponent, setMainComponent] = useState(null);\n      const [mainNglFile, setMainNglFile] = useState(null);\n      // The last automatic camera focus\n      const [focus, setFocus] = useState(initialFocus);\n\n      useEffect(() => {\n        //console.log(initialFocus);\n        setFocus(initialFocus);\n      }, [initialFocus]);\n\n      // references\n      const containerRef = useRef(null);\n      const stageRef = useRef(null);\n      const tooltipRef = useRef(null);\n      const firstTime = useRef(true);\n      // curatedOrientation might be null\n      const originalOritentationRef = useRef(\n        curatedOrientation ? new Matrix4().set(...curatedOrientation) : null,\n      );\n\n      // in-view hook\n      const [inViewRef, isInView] = useInView();\n\n      // Set the content of the tooltip in JSX format\n      const [tooltipContent, setTooltipContent] = useState(null);\n\n      // Download topologies ----------------------------------------------------------------------\n\n      // Download all requested topologies: Each component may have a different structure URL.\n      // Set the first component topology as the 'pdbData'\n      // If a topologyURL is provided, download data form the API\n      // Otherwise, use the main structure\n\n      // Set a state to store the topology requests\n      const [requestedTopologies, setRequestedTopologies] = useState([]);\n      // Set also a state to track whenever there is still a downloading topology\n      // LORE: This was useful when we had to wait for all stages to be mounted at the same time\n      // LORE: It does nothing now but its value is still valid and it may be useful for logs\n      const [anyLoadingTopology, setAnyLoadingTopology] = useState(false);\n\n      // Find if there are new topology to be requested in the components:\n      // Collect the topology on each component\n      // If the component has no topology specified use the main topology\n      useMemo(() => {\n        // Make sure we already have components\n        if (!components) return;\n        setRequestedTopologies(previousRequestedTopologies => {\n          const newRequestedTopologies = [];\n          components.forEach(comp => {\n            const url = comp.topologyURL || null;\n            const selection = comp.atomSelection || null;\n            // Check if the url is new\n            // Else, skip this url since it has been requested already\n            const allRequestedTopologies = [\n              ...previousRequestedTopologies,\n              ...newRequestedTopologies,\n            ];\n            const current = allRequestedTopologies.find(topology => {\n              return topology.url === url;\n            });\n            if (current) return;\n            // Some urls may be missing\n            // This happens when the component wants the default topology from the pdbData\n            if (url === null) {\n              // Add a request with null url in order to get pdbData as a topology\n              // Do it only once for all components\n              newRequestedTopologies.push({\n                url: null,\n                loading: false,\n                error: null,\n              });\n            } else {\n              // Add the topology to the list, so it will be requested to the API\n              newRequestedTopologies.push({\n                url: url,\n                selection: selection,\n                loading: true,\n                requested: false,\n                error: null,\n              });\n              setAnyLoadingTopology(true);\n            }\n          });\n          return [...previousRequestedTopologies, ...newRequestedTopologies];\n        });\n      }, [components, setRequestedTopologies]);\n\n      // Set a state to store the downloaded topologies\n      const [topologies, setTopologies] = useState([]);\n\n      // Keep track of all requests in case we have to abort them further\n      const currentRequests = useRef([]);\n\n      // Download all requested topologies/structures from the API\n      useEffect(() => {\n        requestedTopologies.forEach(requestedTopology => {\n          // Check if the requested url has the data already downloaded\n          // If so, skip this request\n          if (requestedTopology.file) return;\n          // If the topology failed to load do not try it again\n          if (requestedTopology.error) return;\n          // If the topology has been already requested do not request it again\n          if (requestedTopology.requested) return;\n          // Get the topology URL\n          const url = requestedTopology.url;\n          // If there is no URL load the context pdbData\n          if (url === null) {\n            // WARNING: The '[...previous]' is essential to make the array object change\n            // This is important, since the 'topologies' object is used as a dependency further\n            // And if we do not change the array then the change is not detected\n            setTopologies(previous => {\n              requestedTopology.loading = false;\n              // Then check the loading state of all requested topologies and update the overall loading state\n              const anyLoading = requestedTopologies.some(t => t.loading);\n              setAnyLoadingTopology(anyLoading);\n              // The topology with the pdb data has not url\n              const topology = { url: null, file: pdbDataFile };\n              return [...previous, topology];\n            });\n          }\n          // If there is an URL\n          else {\n            requestedTopology.requested = true;\n            // Create the POST body\n            const postData = JSON.stringify({\n              selection : requestedTopology.selection\n            });\n            // Request the API\n            // http exception is added for local testing in http://localhost\n            const protocol = url.substring(0, 5) === 'https' ? https : http;\n            const requestOptions = urlParse(url);\n            // We use the POST method instead of the regular GET method to allow long atom selections when requesting structure\n            // However, if we are requesting a file the POST method is not supported\n            const isStructureEndpoint = requestOptions.path.endsWith('/structure')\n            requestOptions.method = isStructureEndpoint ? 'POST' : 'GET';\n            requestOptions.headers = {\n              'Content-Type': 'application/json',\n              'Content-Length': postData.length\n            }\n            const request = protocol.request(requestOptions, response => {\n              // Track the amout of bytes already downloaded\n              let responseContent = new ArrayBuffer(0);\n              response\n                .on('data', chunk => {\n                  responseContent = appendBuffer(responseContent, chunk);\n                })\n                .on('end', () => {\n                  const stringBlob = new Blob( [ responseContent ], { type: 'text/plain'} );\n                  autoLoad(stringBlob, { defaultRepresentation: false, ext: \"pdb\" })\n                    .then(file => {\n                      setTopologies(previous => {\n                        requestedTopology.loading = false;\n                        // Then check the loading state of all requested topologies and update the overall loading state\n                        const anyLoading = requestedTopologies.some(t => t.loading);\n                        setAnyLoadingTopology(anyLoading);\n                        const topology = { url: url, file: file };\n                        return [...previous, topology];\n                      })\n                    })\n                    .catch(error => {\n                      requestedTopology.loading = false;\n                      // Then check the loading state of all requested topologies and update the overall loading state\n                      const anyLoading = requestedTopologies.some(t => t.loading);\n                      setAnyLoadingTopology(anyLoading);\n                      requestedTopology.error = error;\n                    });                  \n                });\n            });\n            // Send the request data (POST method feature)\n            if (requestOptions.method === 'POST'){\n              request.write(postData);\n            }\n            // Close the request for it to actually start\n            // Note that this is required for the https.request altought it was not by https.get\n            request.end();\n            currentRequests.current.push(request);\n          }\n        });\n      }, [requestedTopologies, pdbDataFile]);\n\n      // Download trajectories ------------------------------------------------------------------------------------------------\n\n      // First we find all trajectory URLs (i.e. all requests to API)\n      // Then we ask the API skipping repeated URLs\n\n      // Set a function to modify an url by adding the frames range according to requestedFramesNumber\n      // The only exception are those trajectories whose frame number is lower than requestedFramesNumber\n\n      // Set a state to store requested trajectories and their loading status\n      const [requestedTrajectories, setRequestedTrajectories] = useState([]);\n      // Set also a state to track whenever there is still a downloading trajectory\n      const [anyLoadingTrajectory, setAnyLoadingTrajectory] = useState(false);\n\n      // Find if there are new trajectories to be requested in the components:\n      // Collect trajectories on each component\n      // If the component has no trajectory specified use the main trajectory\n      // If the component is not the main component and has no frame specified, use the first frame\n      // Only the main component (the first) is allowed to load multiple frames by the moment\n      useMemo(() => {\n        // Make sure we already have components\n        if (!components) return;\n        // Send a request to the API with the url of the rgyr analysis\n        const { loading, payload, error } = fileDescriptors;\n        // If we do not have file descritors yet then stop here\n        if (loading) return;\n        // Throw it in case something went wrong with the donwload\n        else if (error) throw error;\n        else if (!payload) throw new Error('Something bad happened with file descriptors');\n        // Finally update the trajectories state\n        setRequestedTrajectories(currentTrajectories => {\n          // Save the new requetsed trajectories\n          const newTrajectories = [];\n\n          // Set the url to ask the API\n          // Here, if you ask for the trajectory.bin instead of just trajectory, you get the whole file\n          // This is because the only route of the API accepting frames selection is the \"trajectory\" endpoint\n          // Other paths such as \"trajectory.bin\" will be processed as \"/:files\"\n          const baseUrl = `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/files/trajectory`;\n\n          components.forEach((comp, c) => {\n            if (comp.onlyTopology) return;\n\n            // Set the first component as the 'principal' component\n            const isPrincipal = c === 0;\n            const requestedFrame = comp.frame;\n\n            // Get the trajectory urls\n            // If the component has no trajectory url specified then use the main trajectory url alone\n            let urls = comp.trajectoryURLs || [baseUrl];\n\n            // Add the frames number of all the component requested trajectories\n            comp.frameCount = 0;\n\n            urls.forEach((url, u) => {\n              // Check if the url is already framed\n              const framed = parseFrameRange(url);\n\n              // Get the name of the trajectory file inside the database\n              // i.e. the end of the requested URL\n              // The exception is the API endpoint 'trajectory', which uses the 'trajectory.bin' file\n              let trajectoryFilename = url.split('/').slice(-1)[0];\n              if (framed)\n                trajectoryFilename = trajectoryFilename.split('?frames=')[0];\n              if (trajectoryFilename === 'trajectory')\n                trajectoryFilename = 'trajectory.bin';\n\n              // Get the file descriptor of the required trajectory\n              const trajectoryFileDescriptor = payload.find(file => {\n                return file.filename === trajectoryFilename;\n              });\n              if (!trajectoryFileDescriptor)\n                throw new Error( `Trajectory \"${trajectoryFilename}\" is missing`);\n              const trajectoryMetadata = trajectoryFileDescriptor.metadata;\n\n              // Get the number of frames in the whole trajectory\n              const trajectoryFrames = trajectoryMetadata.frames;                \n\n              // Set the number of frames to be requested from the whole trajectory\n              let requestedFrames = requestedFramesNumber;\n              if (requestedFramesNumber > trajectoryFrames) requestedFrames = trajectoryFrames;\n              if (Number.isFinite(requestedFrame)) requestedFrames = 1;\n              else if (framed) requestedFrames = framed.frames;\n\n              // Components which are not the principal must include a 'frame' value\n              if (!isPrincipal && requestedFrames > 1) \n                throw new Error(`Only the main component is allowed to load multiple frames`);\n\n              // Frames are added to any url which is missing the frames range according to requestedFramesNumber\n              // The only exception are those trajectories whose frame number is lower than requestedFramesNumber\n              let finalUrl = url;\n              // Get the expected number of frames returned, which may not be exactly the requested number\n              let returnedFrames;\n              // In case the url is already frammed\n              if (framed) {\n                // Find maximum number of frames to be returned (trajectory frames or requetsed frames)\n                const maximumFrames = Math.min(trajectoryFrames, framed.end);\n                returnedFrames = Math.ceil(maximumFrames / framed.step);\n              }\n              // Modify the url if it is not framed yet\n              else {\n                // Get the string frames range according to requestedFramesNumber\n                const { range: framesRange, frames: framesCount } = getFrames(\n                  trajectoryFrames,\n                  requestedFrames,\n                  requestedFrame,\n                );\n                returnedFrames = framesCount;\n\n                // Add the frames range to the original url\n                if (framesRange) finalUrl = url + `?frames=${framesRange}`;\n              }\n\n              // Set the component framed url if it doesn't exists\n              if (!comp.framedURLs) comp.framedURLs = [];\n\n              // Save this final url in the framedURL in the component\n              // Overwrite the previous framed url if exists\n              comp.framedURLs[u] = finalUrl;\n\n              // Add the requested frames number to the frame count\n              comp.frameCount += requestedFrames;\n\n              // Check if the requested url is already in the list\n              // If so, skip this request\n              // If not, save the request url and proceed\n              const current = currentTrajectories.find(trajectory => {\n                return trajectory.url === finalUrl;\n              });\n              if (!current) {\n                newTrajectories.push({\n                  url: finalUrl,\n                  frames: returnedFrames,\n                  // Add also the atoms number, which is used further\n                  atoms: trajectoryMetadata.atoms,\n                  loading: true,\n                  requested: false,\n                });\n                setAnyLoadingTrajectory(true);\n              }\n            });\n          });\n          // In case there are new requested trajectories we return a new array to trigger dependencies\n          if (newTrajectories.length > 0)\n            return [...currentTrajectories, ...newTrajectories];\n          // Otherwise we return the previous array to do no trigger dependencies\n          return currentTrajectories;\n        });\n      }, [accession, components, fileDescriptors, requestedFramesNumber]);\n\n      // Set a state to store trajectories data\n      const [trajectories, setTrajectories] = useState([]);\n\n      // Set a function to update the current loading progress\n      const updateLoadingProgress = useCallback(\n        currentTrajectories => {\n          // Make sure we already have components\n          if (!components) return;\n          const mainComp = components[0];\n          // Get all trajectories to be used as the current main trajecotry\n          const mainTrajectories = [];\n          mainComp.framedURLs.forEach(url => {\n            const trajectory = currentTrajectories.find(trajectory => trajectory.url === url);\n            if (trajectory) mainTrajectories.push(trajectory);\n          });\n          if (mainTrajectories.length === 0) return;\n          // Then calculate the average progress in all loading trajectories and update the progress state\n          const overallFrames = mainTrajectories\n            .map(trajectory => trajectory.frames)\n            .reduce((a, b) => a + b, 0);\n          const overallProgress =\n            mainTrajectories\n              .map(trajectory => trajectory.progress * trajectory.frames)\n              .reduce((a, b) => a + b, 0) / overallFrames;\n          onLoad(overallProgress);\n        }, [components, onLoad],\n      );\n\n      // Download the requested trajectory data (frames)\n      useEffect(() => {\n        requestedTrajectories.forEach(trajectory => {\n          // Check if the trajectory has been requested already\n          // If so, skip this request\n          if (trajectory && trajectory.requested) return;\n          trajectory.requested = true;\n\n          // Set the loading status as true\n          trajectory.loading = true;\n          trajectory.progress = 0;\n\n          // DANI: Todavía no me ha hecho falta hacer una selección larga de atomos/frames\n          // DANI: Todo está listo a nivel de API\n          // DANI: Solo hará falta reformar un poco el viewer-with-controls y este script\n          const postData = JSON.stringify({});\n\n          // Request the API\n          // http exception is added for local testing in http://localhost\n          const protocol = trajectory.url.substring(0, 5) === 'https' ? https : http;\n          const requestOptions = urlParse(trajectory.url);\n          // Check if the request points to the /trajectory endpoint or it is pointing to a file\n          const requestPathsteps = requestOptions.pathname.split('/')\n          const isTrajectoryEndpoint = requestPathsteps[requestPathsteps.length -1] === 'trajectory'\n          // We use the POST method instead of the regular GET method to allow long atom selections\n          // However, if we are retrieving a specific file the the POST method is not implemented\n          requestOptions.method = isTrajectoryEndpoint ? 'POST' : 'GET';\n          requestOptions.headers = {\n            'Content-Type': 'application/json',\n            'Content-Length': postData.length\n          }\n          const request = protocol.request(requestOptions, response => {\n            const totalBytes = response.headers['content-length'];\n            // Set the new trajectory\n            setTrajectories(previousTrajectories => {\n              const newTrajectory = {\n                url: trajectory.url,\n                frames: trajectory.frames,\n                atoms: trajectory.atoms,\n                payload: new ArrayBuffer(0),\n                progress: 0,\n              };\n              return [...previousTrajectories, newTrajectory];\n            });\n            // Track the amout of bytes already downloaded\n            let byteCount = 0;\n            response\n              .on('data', chunk => {\n                byteCount += chunk.byteLength;\n                trajectory.progress = byteCount / totalBytes;\n                // Update trajectories with the current partial data we have\n                setTrajectories(previousTrajectories => {\n                  const currentTrajectory = previousTrajectories.find(\n                    t => t.url === trajectory.url,\n                  );\n                  currentTrajectory.payload = appendBuffer(\n                    currentTrajectory.payload,\n                    chunk,\n                  );\n                  currentTrajectory.progress = trajectory.progress;\n                  // Update the current progess\n                  updateLoadingProgress(previousTrajectories);\n                  return [...previousTrajectories];\n                });\n              })\n              .on('end', () => {\n                // Save the main data in the ref\n                trajectory.loading = false;\n                // Then check the loading state of all requested trajectories and update the overall loading state\n                const anyLoading = requestedTrajectories.some(\n                  trajectory => trajectory.loading,\n                );\n                setAnyLoadingTrajectory(anyLoading);\n              });\n          });\n          // Send the request data (POST method feature)\n          if (requestOptions.method === 'POST'){\n            request.write(postData);\n          }\n          // Close the request for it to actually start\n          // Note that this is required for the https.request altought it was not by https.get\n          request.end();\n          currentRequests.current.push(request);\n        });\n      }, [requestedTrajectories, updateLoadingProgress]);\n\n      // If the whole component is removed then abort all requests in case they were not finished\n      // DANI: No he verificado que esto funcione bien a nivel de API\n      useEffect(() => {\n        // I save it in a constant to avoid a non-sense warning\n        const redundantList = currentRequests.current;\n        return () => {\n          redundantList.forEach(request => {\n            request.abort();\n          });\n        };\n      }, []);\n\n      // Set a state to keep track of the current working tasks in the viewer\n      // This is useful to update the upper left corner logs in the viewer\n      const [runningTasks, setRunningTasks] = useState(0);\n\n      // Update the running tasks count\n      const handleTasksChange = useCallback(\n        value => {\n          setRunningTasks(current => current + value);\n        },\n        [setRunningTasks],\n      );\n\n      // Stage creation and removal on mounting and unmounting\n      useEffect(() => {\n        // set-up\n        const stage = new Stage(containerRef.current);\n        // wait for a render to screen, then\n        frame().then(() => {\n          if (!stage) return;\n          // make sure NGL knows the size it has available\n          stage.handleResize();\n        });\n        // Set a signal function to handle the update of running tasks count\n        stage.tasks.signals.countChanged.add(handleTasksChange);\n        // Save the stage reference\n        stageRef.current = stage;\n        // clean-up\n        return () => {\n          // NOTE: following line causes to fail when loading a new viewer with\n          // NOTE: previous structure data\n          // stageRef.current.removeAllComponents();\n          stageRef.current.dispose();\n          stageRef.current = null;\n        };\n      }, []);\n\n      // Handle the upper left corner viewer logs\n      const viewerLogs = useMemo(() => {\n        if (!mainComponent) return `Loading structure`;\n        if (!pdbDataFile) return `No structure available`;\n        if (!requestedTrajectories.length && !noTrajectory)\n          return `No trajectory available`;\n        if (runningTasks > 0) return `Rendering...`;\n        return undefined; // Show nothing when everything was finished and fine\n      }, [\n        mainComponent,\n        pdbDataFile,\n        requestedTrajectories,\n        noTrajectory,\n        runningTasks,\n      ]);\n\n      // background (with transition)\n      useEffect(() => {\n        const beginning = Date.now();\n        let duration = 1000;\n        if (firstTime.current) {\n          duration = 0;\n          firstTime.current = false;\n        }\n        (async () => {\n          while (true) {\n            await frame(); // async, should check if we still have the viewer\n            if (!stageRef.current) return;\n            let currentTick = Date.now() - beginning;\n            // exit condition from 'while (true)' loop\n            // if we've gone over the full time of the animation\n            if (currentTick > duration) break;\n            if (darkBackground) currentTick = duration - currentTick;\n            const color = `#${Math.round((currentTick * 0xff) / duration)\n              .toString('16')\n              .padStart(2, '0')\n              .repeat(3)}`;\n            stageRef.current.viewer.setBackground(color);\n          }\n          await frame(); // async, should check if we still have the viewer\n          if (!stageRef.current) return;\n          // make sure we're set to the final colour\n          // (in case the transition was stopped halfway through)\n          stageRef.current.viewer.setBackground(\n            darkBackground ? 'black' : 'white',\n          );\n        })();\n        // set duration to 0 to cancel possibly ongoing loop\n        return () => (duration = 0);\n      }, [darkBackground]);\n\n      // perspective\n      useEffect(() => {\n        stageRef.current &&\n          stageRef.current.viewer &&\n          stageRef.current.viewer.setCamera &&\n          stageRef.current.viewer.setCamera(\n            perspective ? 'perspective' : 'orthographic',\n          );\n      }, [perspective]);\n\n      // frames\n      // Update the controls progress\n      useEffect(() => {\n        // Check if we are prepared to add the frame change handler and if t is required\n        if (!onProgress || noTrajectory || !mainNglFile) return;\n        // Get the frame count of the final number of frames (once the whole trajectory is loaded)\n        const frameCount = mainNglFile.expectedFrames;\n        // Set the actual function to handle frame change internally in the component\n        const frameHandler = frame => {\n          //console.log('NGL frameCount: ' + frameCount);\n          const progress = clamp(frame / (frameCount - 1), 0, 1);\n          onProgress(progress);\n        };\n        // Add the frame handler to the component signals\n        mainNglFile.signals.frameChanged.add(frameHandler);\n        // Set a cleanup function to remove the frame handler when there is need\n        return () => {\n          mainNglFile.signals.frameChanged.remove(frameHandler);\n        };\n      }, [mainNglFile, noTrajectory, onProgress]);\n\n      // Resize logic\n      // declare handler\n      const handleResize = useCallback(async () => {\n        if (!stageRef.current) return;\n        const canvas = containerRef.current.querySelector('canvas');\n        if (canvas) {\n          canvas.style.height = '';\n          canvas.style.cursor = 'default';\n        }\n        // WARNING: This sleep here is to fix a bug\n        // When we open/close settings we trigger this function but it takes the size of the window before changing\n        // The sleep fixes this problem altought the delay is 0\n        await sleep(0);\n        stageRef.current.handleResize();\n      }, []);\n      // connect the handle to events\n      useEffect(() => {\n        window.addEventListener('resize', handleResize);\n        return () => {\n          window.removeEventListener('resize', handleResize);\n        };\n      }, [handleResize]);\n\n      // PDB file, base structure\n      // Set the representations in each component\n      useEffect(() => {\n        if (!components || !representations) return;\n\n        components.forEach((comp, c) => {\n          // Set the NGL component\n          let stageComp = stageRef.current.compList.find(stc => stc.myName == comp.name);\n          if (!stageComp) {\n            // Find the topology which matches the component url\n            // If a component has no url it will match a topology with no url: the default topology\n            const url = comp.topologyURL || null;\n            const topology = topologies.find(topology => topology.url === url);\n            // If the topology has not been loaded yet then we have a problem\n            // DANI: Todas las topologías deben estar ya listas antes de cargarlas, lee los mensajes de arriba\n            if (!topology) return;\n            // Stop here if it is not downloaded yet\n            if (topology.error)\n              throw new Error(`Topology from '${url}' returned error ${topology.error}`);\n            if (!topology.file)\n              throw new Error(`Topology data from '${url}' is missing`);\n            // Atom occupancy is a field which is not used anywhere but in the electrostatic representation\n            // The electrostatic surface scheme color does not work if the occupancy is 0 (ngl code, not ours)\n            // We set all occupancies to 1, since some topologies may have all occupancies as 0 by default\n            topology.file.atomStore.occupancy = new Array(\n              topology.file.atomStore.occupancy.length,\n            ).fill(1);\n            // Add the topology to the NGL\n            // Make a deep copy of the topology object to prevent NGL internal bugs\n            // This object will store data which is component exclusive\n            const componentObject = cloneDeep(topology.file);\n            //const componentObject = topology.file;\n            stageComp = stageRef.current.addComponentFromObject(componentObject);\n            stageComp.myName = comp.name;\n            if (!stageComp) return;\n            stageComp.onlyTopology = comp.onlyTopology;\n            setMainComponent(stageComp);\n          }\n\n          // Get current component representations\n          const componentRepresentations = representations.filter(rep => rep.component === comp.name);\n\n          // Set each representation\n          // Delete previous representations which are not requested anymore\n          const registredNames = [];\n          componentRepresentations.forEach((rep, r) => {\n            // The name here is used to indetify previous existing representations\n            const name = r + '-' + rep.name;\n            registredNames.push(name);\n\n            // Adapt a few representation values to the context\n            const show = rep.show\n            const sele = rep.selection;\n            const type = rep.type;\n            const color = rep.color;\n            const opacity = show ? rep.opacity : 0;\n\n            const customColorScheme = rep.customScheme;\n\n            // If the representation is selected then the color is yellow\n            const colorScheme = rep.name === selectedRepresentation\n              ? ColormakerRegistry.addSelectionScheme(\n                  [['yellow', 'all']],\n                  'custom label',\n                )\n              // If the colorScheme is in the passed custom schemes use it\n              : customColorScheme && color === 'custom'\n                ? customColorScheme\n                // If the colorScheme is a defined color, create a custom colorScheme for this color\n                : isValidColor(color)\n                  ? ColormakerRegistry.addSelectionScheme(\n                      [[color, 'all']],\n                      'custom label',\n                    )\n                  // Otherwise let the color scheme as it is\n                  : color;\n\n            // Set some additional parameters which are to be modified depending on the type\n            const colorDomain = type === 'surface' ? [-200, 200] : undefined;\n            const surfaceType = type === 'surface' ? 'av' : undefined;\n            //const background = type === 'surface' && opacity < 1 ? true : false;\n            const depthWrite = type === 'surface' && opacity < 1 ? false : true;\n\n            // Join all parameters into a single input object\n            const parameters = {\n              sele,\n              name,\n              opacity,\n              colorScheme,\n              colorDomain,\n              surfaceType,\n              side: 'front',\n              //background,\n              depthWrite,\n              //opaqueBack: true,\n              //forceTransparent: true,\n              ...rep.other,\n            };\n\n            // Find the previous representation\n            const previousRepresentation = stageComp.reprList.find(\n              previous => previous.name === name,\n            );\n\n            // Update the previous representation if exists\n            if (previousRepresentation) {\n              const previousType = previousRepresentation.repr.type;\n              const previousSelection =\n                previousRepresentation.repr.selection.string;\n              // If the 'drawingMethod' has been changed we have to remake the whole representation\n              // WARNING: Representations with 'trace' type must be remade always\n              // WARNING: Reseting their parameters returns a fatal error. It is an internal NGL bug.\n              if (\n                previousType !== type ||\n                previousSelection !== sele ||\n                previousType === 'trace'\n              ) {\n                stageComp.removeRepresentation(previousRepresentation);\n                stageComp.addRepresentation(type, parameters);\n              }\n              // Otherwise it is faster just to update the parameters\n              else {\n                previousRepresentation.setParameters(parameters);\n              }\n            }\n            // If there is no previous representation then set a new one\n            else {\n              stageComp.addRepresentation(type, parameters);\n            }\n\n            // Add a floating label over the representation when it is specified\n            const label = rep.label;\n            if (label) {\n              const labelName = rep.label + '-' + name;\n              // Find the equivalent previous label\n              const previous = stageComp.annotationList.find(\n                annotation => annotation.name === labelName,\n              );\n              //console.log(previous);\n              // If the representation is shown\n              if (show) {\n                // If there is a previous representation then just update the label\n                // The rest should be always the same\n                if (previous) {\n                  previous.element.label = rep.label;\n                }\n                // If there is not previous label then set it\n                else {\n                  var elm = document.createElement('div');\n                  elm.innerText = rep.label;\n                  elm.style.color = '#76FF03';\n                  elm.style.backgroundColor = '#607D8B';\n                  elm.style.padding = '8px';\n                  // get the geometrical center of the representation\n                  const center = stageComp.reprList[r].repr.structureView.center;\n                  const annotation = stageComp.addAnnotation(center, elm);\n                  annotation.name = labelName;\n                }\n              }\n              // If the representation is hidden\n              else {\n                // If there is a previous representation then remove it\n                if (previous) {\n                  stageComp.removeAnnotation(previous);\n                }\n              }\n            }\n\n            // Set this representation as the focus if it is selected\n            if (rep.name === selectedRepresentation) {\n              setFocus({ comp: c, sele: rep.selection });\n              //focused = true;\n            }\n          });\n\n          // Delete all representations which are not required anymore\n          // WARNING: It is very important to save apart the stageComp.reprList\n          // WARNING: Do not iterate over stageComp.reprList while removing representations\n          // WARNING: If so, representations would jump of index in the list\n          const previousRepresentations = [...stageComp.reprList];\n          previousRepresentations.forEach(rep => {\n            const name = rep.name;\n            // Representations with name starting with '*' are never removed by this way\n            // Those representations are automatic highlights\n            if (name.charAt(0) === '*') return;\n            for (const registredName of registredNames) {\n              if (name === registredName) return;\n            }\n            // If the name is not in the list the representation must be removed\n            stageComp.removeRepresentation(rep);\n          });\n\n          // If nothing has been focused at the end then focus the whole first component\n          setFocus(previous => {\n            if (previous) return previous; // This will not trigger any rerender\n            return { comp: 0, sele: 'all' };\n          });\n        });\n      }, [\n        components,\n        representations,\n        topologies,\n        selectedRepresentation,\n        setMainComponent,\n      ]);\n\n      // Highlight specific atoms\n      useEffect(() => {\n        if (!topologyManager) return;\n        // DANI: He tenido que quitar la condicion de 'instanceof Set' porque sino no me entraba en el heatmap\n        //if (!(selectedAtoms instanceof Set) || !selectedAtoms) {\n        if (!mainComponent || !selectedAtoms) return;\n\n        // Set a representation name\n        // This is useful to find previous representations in further renders\n        const nameHighlight = '*highlightedAtoms';\n        const previousHighlightRepresentation = mainComponent.reprList.find(\n          representation => representation.name === nameHighlight,\n        );\n        if (previousHighlightRepresentation) {\n          mainComponent.removeRepresentation(\n            previousHighlightRepresentation,\n          );\n        }\n\n        // Name for residues representation\n        const nameContextHighlight = '*highlightedAtomResidues';\n        const previousContextRepresentation = mainComponent.reprList.find(\n          representation => representation.name === nameContextHighlight,\n        );\n        if (previousContextRepresentation) {\n          mainComponent.removeRepresentation(\n            previousContextRepresentation,\n          );\n        }\n\n        const atoms = Array.from(selectedAtoms);\n        if (!atoms.length) return;\n\n        // ngl starts counting at 0\n        const seleHighlight = `@${atoms.map(atomIndex => atomIndex).join(',')}`;\n\n        mainComponent.addRepresentation(highlightTypes.atoms, {\n          sele: seleHighlight,\n          opacity: 0.5,\n          scale: 1.5,\n          name: nameHighlight,\n        });\n\n        const otherResidueAtomsSelection = Array.from(\n          new Set(\n            // 'atoms' are in abolsute numeration\n            atoms.map(atomIndex => {\n              const atom = topologyManager.getAtomByIndex(atomIndex);\n              const atomIndices = atom.residue.atomIndices;\n              const nglAtomSelection = '@' + atomIndices.join(',');\n              return nglAtomSelection;\n            }),\n          ),\n        ).join(' or ');\n\n        mainComponent.addRepresentation(\n          highlightTypes.residues,\n          {\n            sele: otherResidueAtomsSelection,\n            name: nameContextHighlight,\n          },\n        );\n\n        // Focus the highlighted zone with the camera\n        setFocus({ comp: 0, sele: otherResidueAtomsSelection });\n      }, [\n        mainComponent,\n        topologyManager,\n        selectedAtoms,\n        darkBackground,\n        highlightTypes,\n      ]);\n\n      // Highlight specific residues\n      useEffect(() => {\n        if (!topologyManager || !mainComponent || !selectedResidueIndices) return;\n        // Set a representation name. This is useful to find this representation further\n        const nameHighlight = '*highlightedResidues';\n        const previousHighlightRepresentation = mainComponent.reprList.find(\n          representation => representation.name === nameHighlight,\n        );\n        if (previousHighlightRepresentation)\n        mainComponent.removeRepresentation(\n            previousHighlightRepresentation,\n          );\n        // If there are no selected residues at all we stop here\n        if (selectedResidueIndices.length === 0) return;\n        // Get the residues input\n        const residueNglSelections = selectedResidueIndices.map(\n          residueIndex =>\n            topologyManager.getResidueByIndex(residueIndex).nglSelection,\n        );\n        // Transform the residues list into an NGL selection\n        const overallNglSelection = Array.from(\n          new Set(residueNglSelections),\n        ).join(' or ');\n        // Represent the previous selection in ball+sticks drawing method\n        mainComponent.addRepresentation(\n          highlightTypes.residues,\n          {\n            sele: overallNglSelection,\n            name: nameHighlight,\n          },\n        );\n\n        // Focus the highlighted zone with the camera\n        setFocus({ comp: 0, sele: overallNglSelection });\n      }, [\n        mainComponent,\n        selectedResidueIndices,\n        topologyManager,\n        highlightTypes,\n      ]);\n\n      // Highlight specific chains\n      // DANI: NO Probado\n      useEffect(() => {\n        if (!mainComponent || !selectedChains) return;\n        // Set a representation name. This is useful to find this representation further\n        const nameHighlight = '*highlightedChains';\n        const previousHighlightRepresentation = mainComponent.reprList.find(\n          representation => representation.name === nameHighlight,\n        );\n        if (previousHighlightRepresentation)\n        mainComponent.removeRepresentation(\n            previousHighlightRepresentation,\n          );\n\n        // Get the residues input\n        const chains = selectedChains.map(c => ':' + c);\n        if (!chains.length) return;\n        // Transform the residues list into an NGL selection\n        const nglSelection = Array.from(new Set(chains)).join(' or ');\n\n        // Represent the previous selection in ball+sticks drawing method\n        mainComponent.addRepresentation(highlightTypes.chains, {\n          sele: nglSelection,\n          name: nameHighlight,\n        });\n        // Focus the highlighted zone with the camera\n        setFocus({ comp: 0, sele: nglSelection });\n      }, [mainComponent, selectedChains, highlightTypes]);\n\n      // Highlight specific free NGL selections\n      useEffect(() => {\n        if (!mainComponent || !snapRepresentations) return;\n        const currentRepresentations = mainComponent.reprList;\n        snapRepresentations.forEach(snapRepresentation => {\n          mainComponent.addRepresentation(snapRepresentation.type, {\n            sele: snapRepresentation.selection,\n            name: snapRepresentation.name,\n            color: snapRepresentation.color,\n            opacity: snapRepresentation.opacity,\n          });\n        });\n        return () => {\n          snapRepresentations.forEach(snapRepresentation => {\n            // Find if the current snap representation already exists by its name\n            const previousSnapRepresentation = currentRepresentations.find(\n              currentRepresentation =>\n                currentRepresentation.name === snapRepresentation.name,\n            );\n            // If so, remove it\n            if (previousSnapRepresentation)\n            mainComponent.removeRepresentation(previousSnapRepresentation);\n          });\n        };\n      }, [mainComponent, snapRepresentations]);\n\n      // Add specific NGL representations which are added or removed apart from the main component\n      // They are faster to update but they are not shown in the representations manager\n      useEffect(() => {\n        if (!mainComponent || !selectedCustom) return;\n        // Set a representation name. This is useful to find this representation further\n        const nameHighlight = '*highlightedCustom';\n        const previousHighlightRepresentation = mainComponent.reprList.find(\n          representation => representation.name === nameHighlight,\n        );\n        if (previousHighlightRepresentation)\n        mainComponent.removeRepresentation(\n            previousHighlightRepresentation,\n          );\n\n        if (!selectedCustom.length) return;\n        // Transform the residues list into an NGL selection\n        const nglSelection = Array.from(new Set(selectedCustom)).join(' or ');\n\n        // Represent the previous selection in ball+sticks drawing method\n        mainComponent.addRepresentation(\n          highlightTypes.selections,\n          {\n            sele: nglSelection,\n            name: nameHighlight,\n          },\n        );\n        // Focus the highlighted zone with the camera\n        setFocus({ comp: 0, sele: nglSelection });\n      }, [mainComponent, selectedCustom, highlightTypes]);\n\n      // Highlight specific distances\n      // When 'selectedDistances' is numeric it is taken as atoms\n      // When 'selectedDistances' is string it is taken as residues\n      // In both cases it works with residue indices\n      useEffect(() => {\n        if (!mainComponent || !selectedDistances) return;\n        // Set a representation name. This is useful to find this representation further\n        const name = '*distance';\n        const previousRepresentation = mainComponent.reprList.find(\n          representation => representation.name === name,\n        );\n        // Remove the previous representation\n        if (previousRepresentation)\n        mainComponent.removeRepresentation(\n            previousRepresentation,\n          );\n\n        // Display the new distance representation\n        mainComponent.addRepresentation('distance', {\n          atomPair: selectedDistances,\n          color: 'skyblue',\n          labelUnit: 'angstrom',\n          name: name,\n          // Label color is the opposite of the background color\n          labelColor: darkBackground ? 16777215 : 1, // 16777215 is white, 1 is black\n        });\n      }, [mainComponent, selectedDistances, darkBackground]);\n      \n      // Display a plane\n      useEffect(() => {\n        if (!mainComponent || !xSelection) return;\n        // Set a representation name. This is useful to find this representation further\n        const name = '*density';\n        const previousComponent= stageRef.current.compList.find(\n          component => component  .name === name,\n        );\n        // Remove the previous representation\n        if (previousComponent)\n          stageRef.current.removeComponent(\n            previousComponent,\n          );\n        else {\n          stageRef.current.viewer.rotationGroup.rotateY(-1.57);\n        };\n        var shape = new Shape(\"shape\", {radialSegments: 10 });\n        const boxCenter = mainComponent.object.center;\n        const bBox = mainComponent.object.boundingBox;\n        shape.addBox(\n          [boxCenter.x, boxCenter.y, xSelection*xAxisStep - xAxisStep/2], \n          [0, 0, 0], \n          bBox.max.x - bBox.min.x, \n          [0, bBox.max.y - bBox.min.y, 0], \n          [0, 0, 0.01]\n        );\n        shape.addBox(\n          [boxCenter.x, boxCenter.y, xSelection*xAxisStep + xAxisStep/2], \n          [0, 0, 0], \n          bBox.max.x - bBox.min.x, \n          [0, bBox.max.y - bBox.min.y, 0], \n          [0, 0, -0.01]\n        );\n        var shapeComp = stageRef.current.addComponentFromObject(shape, {name: name});\n        var rep = shapeComp.addRepresentation(\"buffer\", {opacity: 0.1 , roughness: 1});\n        // console.log(stageRef.current.viewer.rotationGroup.rotation);\n      }, [mainComponent, xSelection]);\n\n      // Highlight specific angles\n      useEffect(() => {\n        if (!mainComponent || !selectedAngles) return;\n        // Set a representation name. This is useful to find this representation further\n        const name = '*angles';\n        const previousRepresentation = mainComponent.reprList.find(\n          representation => representation.name === name,\n        );\n        if (previousRepresentation)\n        mainComponent.removeRepresentation(\n            previousRepresentation,\n          );\n\n        mainComponent.addRepresentation('angle', {\n          atomTriple: selectedAngles,\n          name: name,\n          labelColor: darkBackground ? 16777215 : 1, // 16777215 is white, 1 is black\n        });\n      }, [mainComponent, selectedAngles, darkBackground]);\n\n      // DCD file, trajectory\n      // Once the trajectories are downloaded, load them in corresponding NGL representations\n      // Every time the trajectory payloads change this useEffect must be rerun\n      useEffect(() => {\n        // Check if trajectories are\n        if (topologies.length === 0 || trajectories.length === 0 || !components) return;\n        components.forEach((comp, c) => {\n          // Find the topology which matches the component url\n          // If a component has no url it will match a topology with no url: the default topology\n          const topologyURL = comp.topologyURL || null;\n          const topology = topologies.find(topology => topology.url === topologyURL);\n          if (!topology) return;\n\n          // DANI: Aquí me he quedado\n          // DANI: Con la linea de arriba funciona (a veces) con la de abajo no funciona cuando yo pensaba que funcionaría\n          // DANI: Si sigues tirando del hilo se puede hacer que las topologías vayan cargando a medida que llegan\n          // DANI: y no todas de golpe al final\n          //const stageComp = stageRef.current.compList[c];\n          const stageComp = stageRef.current.compList.find(stc => stc.myName == comp.name);\n\n          // Wait if the topology has not been loaded yet\n          if (!stageComp) return;\n          // Abort if the component is marked as 'only topology'\n          if (comp.onlyTopology) return;\n          // Find the trajectory payload from the component urls and join them\n          const trajectoryPayloads = [];\n          // Save the combined urls of all trajectories and their lengths\n          // This is used in further renders to know if current trajectory is new or the same\n          let combinedURL = '';\n          let combinedProgress = '';\n          // Record also the atoms for each trajectory and check that they match\n          let trajectoryAtoms;\n          let trajectoryFinalExpectedFrames = 0;\n          // Record also the frames for each trajectory and add them\n          for (const framedURL of comp.framedURLs) {\n            const trajectory = trajectories.find(trajectory => trajectory.url === framedURL);\n            // If the trajectory is not downloaded yet then exit\n            if (!trajectory) return;\n            // Get atom counts from different trajectories and check they match\n            if (!trajectoryAtoms) trajectoryAtoms = trajectory.atoms;\n            if (trajectoryAtoms !== trajectory.atoms)\n              throw new Error( `Atoms number in the different trajectories do not match`);\n            // Add the final expected frames for all frames in the component\n            trajectoryFinalExpectedFrames += trajectory.frames;\n            // Add the main data to the array of payloads\n            // Substract data from not completed frames\n            const payload = trajectory.payload;\n            const bytesPerFrame = trajectoryAtoms * BYTES_PER_ATOM;\n            const fitLength = Math.floor(payload.byteLength / bytesPerFrame) * bytesPerFrame;\n            const fitPayload = payload.slice(0, fitLength);\n            trajectoryPayloads.push(fitPayload);\n            combinedURL += framedURL;\n            combinedProgress += '/' + trajectory.progress;\n          }\n\n          // Check if we are loading the same trajectory than before\n          const sameTrajectory = stageComp.combinedURL === combinedURL;\n\n          // If we are loading a different trajectory then remove all possibly already existing trajectories\n          // This return an error in console: \"updateStructure: traj disposed\"\n          // This may be a bug but it is actually working\n          // See https://github.com/arose/ngl/issues/680\n          if (!sameTrajectory)\n            stageComp.trajList.forEach(\n              stageComp.removeTrajectory.bind(stageComp),\n            );\n\n          // If both URL and progress are matching then exit here\n          if (sameTrajectory && stageComp.combinedProgress === combinedProgress)\n            return;\n\n          // Save current URL in the staged component\n          stageComp.combinedURL = combinedURL;\n          stageComp.combinedProgress = combinedProgress;\n\n          // Join all payloads into a single trajectory\n          let totalPayload;\n          if (trajectoryPayloads.length === 0) return;\n          else if (trajectoryPayloads.length === 1)\n            totalPayload = trajectoryPayloads[0];\n          // DANI: Esto no está bien ahora que hay streaming\n          // DANI: Si hubiese dos trayectorias combinadas sus frames quedarían entrelazadas\n          // DANI: Pero las trayectorias combinadas no se usan, así que no me merece la pena mantenerlo\n          else\n            totalPayload = trajectoryPayloads.reduce((cb, nb) =>\n              appendBuffer(cb, nb),\n            );\n          // If the total payload is empty then stop here\n          if (totalPayload.byteLength === 0) return;\n          // Calculate how many frames are there in total\n          const bytesPerFrame = trajectoryAtoms * BYTES_PER_ATOM;\n          const totalFrames = totalPayload.byteLength / bytesPerFrame;\n          const lastFrameIndex = totalFrames - 1;\n          // Check if all required data is already downloaded\n          const completedTrajectory =\n            totalFrames === trajectoryFinalExpectedFrames;\n\n          // Get the atom indices whom the trajectory coordinates belong to, in case it is passed\n          const trajectoryAtomIndices = comp.trajectoryAtomIndices;\n\n          // Get the current NGL loaded trajectories\n          const compTrajectories = stageComp.trajList;\n\n          // If there is a trajectory already update it with new data\n          if (compTrajectories.length > 0) {\n            // There must be only one trajectory\n            if (compTrajectories.length > 1)\n              throw new Error(`Multiple trajectories in one component`);\n            const nglFile = compTrajectories[0];\n            const nglTrajectory = nglFile.trajectory;\n            updateNGLFile(\n              nglTrajectory,\n              topology.file,\n              totalPayload,\n              trajectoryAtoms,\n              totalFrames,\n              trajectoryAtomIndices,\n            );\n            // Adjust some parameters after the trajectory data has been changed\n            nglTrajectory._frameCount = totalFrames;\n            if (c === 0) {\n              // Save the expected frames number here in the NGL file\n              // This is further use by the frame change handler\n              nglFile.expectedFrames = trajectoryFinalExpectedFrames;\n              const nglPlayer = nglTrajectory.player;\n              // Set animation player parameters\n              const timeout = interpolateSpeed(speed);\n              nglPlayer.setParameters({\n                end: lastFrameIndex,\n                interpolateStep: 100 / trajectoryFinalExpectedFrames, // This must be set every time\n                mode: completedTrajectory ? 'loop' : 'once',\n                timeout: timeout,\n              });\n              // If the trajectory was paused because it had no more frames to load then resume it\n              if (!noTrajectory && playing && !nglPlayer.isRunning) {\n                const currentFrame = nglTrajectory._currentFrame;\n                const endingFrame = lastFrameIndex;\n                if (currentFrame < endingFrame) nglPlayer.play();\n              }\n            }\n          }\n          // If there is not trajectory yet then create a new NGL trajectory\n          else {\n            // Transform the binary trajectory data to an NGL friendly format\n            const file = setNGLFile(\n              topology.file,\n              totalPayload,\n              trajectoryAtoms,\n              totalFrames,\n              trajectoryAtomIndices,\n            );\n            if (!file) return;\n            const nglFile = stageComp.addTrajectory(file);\n            const nglTrajectory = nglFile.trajectory;\n            // Count the real numer of frames in the current trajectory and reset the 'requestedFramesNumber'\n            // DANI: Esto lo he quitado porque creo que podría dar problemas\n            // DANI: Las requestedFramesNumber son el número de frames que se piden, no el real\n            // DANI: Si hay que mostrar el número real en algún punto mejor crea otro state\n            // if (setRequestedFramesNumber && c === 0) {\n            //   const frameCount = nglTrajectory.frameCount;\n            //   setRequestedFramesNumber(frameCount);\n            // }\n            // Add the frame change handler only if it is the main component\n            if (c === 0) {\n              // Save the expected frames number here in the NGL file\n              // This is further use by the frame change handler\n              nglFile.expectedFrames = trajectoryFinalExpectedFrames;\n              // Set animation player parameters\n              const timeout = interpolateSpeed(speed);\n              nglTrajectory.player.setParameters({\n                interpolateStep: 100 / trajectoryFinalExpectedFrames,\n                mode: completedTrajectory ? 'loop' : 'once',\n                timeout: timeout,\n              });\n              // Update the main NGL file\n              setMainNglFile(nglFile);\n            }\n            // Set trajectory frame\n            nglTrajectory.setFrame(0);\n          }\n        });\n      }, [\n        topologies,\n        trajectories,\n        components,\n        noTrajectory,\n        setMainNglFile,\n        // The requestedFramesNumber dependency may seem redundant but it is not\n        // It is useful to switch between previously downloaded trajectories with different number of frames\n        requestedFramesNumber,\n        // This playing here is just to avoid the warning\n        // I can't disable the warning with \"// eslint-disable-line react-hooks/exhaustive-deps\"\n        // This is because the automatic formatter puts the warning one line down because it is stupid\n        // Anyway the warning is also stupid, because using the playing as dependency is counterproductive\n        // To sum up: when eslint gets smarter and stops complaining you can remove playing from dependencies\n        playing,\n        // It is the same with the speed that with the playing\n        speed,\n      ]);\n\n      // Add a signaled handler to the main NGl file, which contains the mian trajectory\n      useEffect(() => {\n        // Set a function to make the trajectory never stop at any interpolation step\n        // If it is stopped in the middle of an interpolation then jump to the next frame\n        if (!mainNglFile) return;\n        const nglTrajectory = mainNglFile.trajectory;\n        const goToNextFrame = () => {\n          const currentFrame = nglTrajectory._currentFrame;\n          nglTrajectory.setFrame(currentFrame);\n        };\n        nglTrajectory.player.signals.haltedRunning.add(goToNextFrame);\n        // Removing NGL without removing signals from the trajectory player is fatal\n        // This raises the error \"Uncaught TypeError: this._bindings is undefined\"\n        // Set a cleanup function to prevent fatal errors\n        return () => {\n          nglTrajectory.player.signals.haltedRunning.remove(goToNextFrame);\n        }\n      }, [mainNglFile]);\n\n      // play/pause\n      useEffect(() => {\n        if (!mainNglFile) return;\n        const { player } = mainNglFile.trajectory;\n        player.setParameters({\n          // Set the interpolate step according to the total number of frames to show 1 by 1\n          interpolateStep: 100 / mainNglFile.trajectory.frameCount,\n          // Set the animation to go forward and then backward instead of restart if required\n          direction: bounce ? 'bounce' : 'forward',\n        });\n        // WARNING: Pausing the player when there is no trajectory may seem redundant\n        // However, if not paused, the surface representations never stop to be calculated\n        if (noTrajectory) player.pause();\n        else player[playing && isInView ? 'play' : 'pause']();\n        // Remvoing NGL while the animation is playing is fatal\n        // This raises the error \"Uncaught TypeError: this._bindings is undefined\"\n        // Set a cleanup function to prevent fatal errors\n        return () => player.pause();\n      }, [\n        mainNglFile,\n        playing,\n        isInView,\n        noTrajectory,\n        bounce,\n      ]);\n\n      // Handle the speed\n      // The speed is also self-regulated by NGL\n      // If the topology is too big to reach the required speed it will work as fast as possible\n      useEffect(() => {\n        // Get the current trajectory\n        if (!mainComponent) return;\n        const nglFile = mainComponent.trajList[0];\n        if (!nglFile) return;\n        // Set the player speed\n        // The 'speed' input ranges from 0 to 100\n        // The NGL 'timeout' parameter stands from the time to wait before moving to the next frame in miliseconds\n        //const timeout = 500 / (Math.log2(speed + 1) + 1);\n        const timeout = interpolateSpeed(speed);\n        nglFile.trajectory.player.setParameters({ timeout: timeout });\n      }, [mainComponent, speed]);\n\n      // spinning\n      useEffect(() => {\n        if (\n          stageRef.current &&\n          stageRef.current.spinAnimation &&\n          spinning === stageRef.current.spinAnimation.paused\n        ) {\n          stageRef.current.toggleSpin();\n        }\n      }, [spinning]);\n\n      // smoothing, player interpolation\n      useEffect(() => {\n        if (!mainNglFile) return;\n        mainNglFile.trajectory.player.parameters.interpolateType = smooth ? 'linear' : '';\n      }, [mainNglFile, smooth]);\n\n      // to avoid sometimes when it's not rendering after loading\n      useEffect(() => {\n        if (!(mainComponent && requestedTrajectories.length)) return;\n        handleResize();\n        return handleResize.cancel;\n      }, [mainComponent, requestedTrajectories, handleResize]);\n\n      // Highlight the selected chain region\n      // This useEffect seems to be special:\n      // It is run just once but some parts inside keep running on change events\n      // listen to change event from nightingale component\n      useEffect(() => {\n        if (!mainComponent || !topologyManager) return;\n        const handler = ({ detail }) => {\n          // escape case for event listener\n          if (!detail || !(detail.eventtype === 'click' || detail.eventtype === 'reset')) return;\n          let highlight = '';\n          for (const manager of document.querySelectorAll('protvista-manager')) {\n            // get highlight value for each manager\n            const thisHiglight = manager.attributeValues.get('highlight');\n            // Get the chain letter to know which chain has been selected\n            const chain = manager.attributes.chain.value;\n            // if none, escape\n            if (!thisHiglight) continue;\n            // Start and end values are in model numeration\n            // DANI: This is totally by chance. I didn't program this previous part\n            const [start, end] = thisHiglight.split(':');\n            const sourceStart = topologyManager.getResidueByParameters(chain, +start);\n            const sourceEnd = topologyManager.getResidueByParameters(chain, +end);\n            if (sourceStart.chainName !== sourceEnd.chainName)\n              throw new Error(`Range from multiple chains is not supported`);\n            highlight += ` or :${sourceStart.chainName} and ${sourceStart.number}-${sourceEnd.number}`;\n          }\n          highlight = highlight.substr(4); // remove initial ' or '\n\n          const previousStructureRepresentation = mainComponent &&\n          mainComponent.reprList.find(\n              representation => representation.name === 'structure',\n            );\n          if (previousStructureRepresentation)\n          mainComponent.removeRepresentation(previousStructureRepresentation);\n          // no highlight, then default coloring\n          if (!highlight) {\n            mainComponent.addRepresentation('cartoon', {\n              sele: CHAIN_SELECTION,\n              name: 'structure',\n              opacity: 1,\n            });\n            if (originalOritentationRef.current) {\n              stageRef.current.animationControls.orient(\n                originalOritentationRef.current,\n                DEFAULT_ORIENTATION_TRANSITION_DURATION,\n              );\n            }\n            return;\n          }\n\n          // otherwise, highlight accordingly\n          const colorSchemeID = ColormakerRegistry.addSelectionScheme(\n            [['yellow', highlight], ['white', '*']],\n            'custom label',\n          );\n          mainComponent.addRepresentation('cartoon', {\n            sele: CHAIN_SELECTION,\n            name: 'structure',\n            opacity: 1,\n            color: colorSchemeID,\n          });\n          mainComponent.autoView(\n            highlight,\n            DEFAULT_ORIENTATION_TRANSITION_DURATION,\n          );\n        };\n        window.addEventListener('change', handler);\n        return () => window.removeEventListener('change', handler);\n      }, [mainComponent, topologyManager]);\n\n      // Customize the NGL tooltip\n      useEffect(() => {\n        if (!topologyManager) return;\n        // Set a new tooltip\n        const tooltip = tooltipRef.current;\n        // WARNING: The following line is dangerous since you are manipulating the DOM outside of React\n        // If the tooltip component is not child of the viewer and you change to molstar then you have the following error:\n        // Node.removeChild: The node to be removed is not a child of this node\n        containerRef.current.appendChild(tooltip);\n\n        // Remove the original tooltip\n        stageRef.current.mouseControls.remove('hoverPick');\n\n        // Set a function which is used further to write a formatted output message to refer an atom\n        const formatOutput = atom => {\n          // a.residueIndex starts at 0\n          // WARNING: a.residueIndex is correct but we must convert it to source first\n          // In some cases 1 residue can have multiple residue indices\n          // (e.g. hydrogens at the end)\n          const residue = topologyManager.getResidueByIndex(atom.residueIndex);\n          const chainName = residue.chain.metadataChainName;\n          // Get the residue reference id\n          const referenceId = residue.referenceId;\n          return (\n            <>\n              {`Atom ${atom.index} (${atom.atomname})\n                Chain ${residue.chainName} ${chainName ? '(' + chainName + ')' : ''}\n                Residue ${residue.number} (${atom.resname})`}\n              {(() => {\n                // If there is not reference at all it means it is not even a protein\n                if (!referenceId) return;\n                // No referable flag is for proteins which are not to be referenced\n                // e.g. antibodies, synthetic constructs, etc.\n                if (referenceId === 'noref') return (\n                  <div style={{ color: 'orange' }}>{'No referable'}</div>\n                );\n                // The not found flag is for proteins which failed to be aligned in a blast\n                if (referenceId === 'notfound') return (\n                  <div style={{ color: 'salmon' }}>{'Reference not found'}</div>\n                );\n                // Show the reference and its residue references number\n                return (\n                  <div>\n                    <div style={{ color: 'lightGreen' }}>{residue.referenceName}</div>\n                    {residue.referenceType === 'protein' && <div>{`- Residue ${residue.referenceNumber}`}</div>}\n                  </div>\n                )\n              })()}\n            </>\n          );\n        };\n\n        // Save a timeout before displaying the tooltip\n        // This way we can kill the display in case the mouse is out before the timeout is over\n        let timeout;\n\n        // Set a function that both prevents the tooltip if it is about to appear and hides it is already displayed\n        const hideTooltip = () => {\n          clearTimeout(timeout);\n          tooltip.style.display = 'none';\n        };\n\n        // Show our tooltip with the corresponding values when the mouse hovers an atom/bond\n        stageRef.current.signals.hovered.add(function(pickingProxy) {\n          // When mouse is over something (i.e. bonds or atoms)\n          if (pickingProxy) {\n            // Set a timeout for the hover to do not be instantaneous\n            hideTooltip();\n            timeout = setTimeout(() => {\n              // handle tooltip text\n              let description;\n              const bond = pickingProxy.bond;\n              const atom = pickingProxy.atom;\n              // When we hover a bond\n              if (bond) {\n                const atom1 = bond.atom1;\n                const atom2 = bond.atom2;\n                description = (\n                  <>\n                    <div>{`Bond ${atom1.index} - ${atom2.index}`}</div>\n                    <hr style={{ color: 'lightGrey' }} />\n                    {formatOutput(atom1)}\n                    <hr style={{ color: 'lightGrey' }} />\n                    {formatOutput(atom2)}\n                  </>\n                );\n              }\n              // When we hover an atom\n              else if (atom) {\n                description = formatOutput(atom);\n              }\n              setTooltipContent(description);\n              // Handle tooltip position\n              // WARNING: It is important to make the display block before calculating the position\n              // This is because the position is calculated from the tooltip size, which would be 0 otherwise\n              tooltip.style.display = 'block';\n              const { x, y } = setTooltipPosition(\n                containerRef.current,\n                tooltip,\n                pickingProxy.mouse.position,\n                3,\n              );\n              tooltip.style.top = y + 'px';\n              tooltip.style.left = x + 'px';\n            }, 400); // Wait 0,4 secs before showing the tooltip\n          }\n          // When mouse is over nothing\n          else {\n            hideTooltip();\n          }\n        });\n\n        // Remove the tooltip when the mouse is out of the NGL viewer container\n        containerRef.current.addEventListener('mouseleave', hideTooltip, false);\n\n        // Cleaning function\n        return () => {\n          tooltip.remove();\n          containerRef.current.removeEventListener('mouseleave', hideTooltip);\n        };\n      }, [topologyManager, setTooltipContent]);\n\n      // Track when the first focus has been performed, since first focus is instantaneous\n      const firstFocus = useRef(true);\n      // Focus the specified ngl selection with the camera automatically\n      useEffect(() => {\n        if (!focus) return;\n        // The selected region may be in any component, not only the main component\n        // If a component name is passed then search for it\n        const comp = focus.comp\n          ? stageRef.current.compList.find(c => c.myName === focus.comp)\n          : mainComponent;\n        if (!comp) return;\n        let transition = DEFAULT_ORIENTATION_TRANSITION_DURATION;\n        // First transition is instantaneous\n        if (firstFocus.current) {\n          transition = 0;\n          // if an original orientation was aleady defined\n          // (manually created, and stored in the API)\n          if (originalOritentationRef.current) {\n            // use it to set the initial orientation\n            stageRef.current.animationControls.orient(\n              originalOritentationRef.current,\n              0,\n            );\n          }\n          firstFocus.current = false;\n        }\n        comp.autoView(focus.sele, transition);\n      }, [mainComponent, focus]);\n\n      // Expose public methods and getters/setters\n      useImperativeHandle(\n        ref,\n        () => ({\n          autoResize: handleResize,\n          // Output the current orientation/focus in console\n          // Note: this is for the developer, not for the regular user\n          displayFocus() {\n            const orientation = stageRef.current.viewerControls.getOrientation();\n            const stringifiedArray = `[${orientation.elements.toString()}]`;\n            console.log(stringifiedArray);\n          },\n          centerFocus() {\n            setFocus({ comp: 0, sele: 'all' });\n            // Use the provided orientation, if any\n            if (!originalOritentationRef.current) return;\n            stageRef.current.animationControls.orient(\n              originalOritentationRef.current,\n              DEFAULT_ORIENTATION_TRANSITION_DURATION,\n            );\n          },\n          get currentFrame() {\n            if (!(mainComponent && requestedTrajectories.length)) return -1;\n            try {\n              return mainComponent.trajList[0].trajectory.currentFrame;\n            } catch (_) {\n              return -1;\n            }\n          },\n          set currentFrame(value) {\n            if (!(mainComponent && requestedTrajectories.length)) return;\n            try {\n              const total = this.totalFrames;\n              let frame = value;\n              if (frame < 0) frame = 0;\n              if (frame >= total) frame = total - 1;\n              mainComponent.trajList[0].trajectory.setFrame(frame);\n            } catch (_) {\n              /* */\n            }\n          },\n          get totalFrames() {\n            if (!(mainComponent && requestedTrajectories.length)) return 1;\n            try {\n              return mainComponent.trajList[0].trajectory.frames\n                .length;\n            } catch (_) {\n              return 1;\n            }\n          },\n          get totalExpectedFrames() {\n            try {\n              return mainComponent.trajList[0].expectedFrames;\n            } catch (_) {\n              return 1;\n            }\n          },\n        }),\n        [mainComponent, requestedTrajectories, handleResize],\n      );\n\n      // workaround to have multiple ref logic on one element\n      // https://github.com/thebuilder/react-intersection-observer/issues/186#issuecomment-468641525\n      const handleRef = node => {\n        // If node does not exist then do not assign null to containerRef\n        // This way cleanup functions from some useEffects can properly clean the last reference\n        if (!node) return;\n        inViewRef(node);\n        containerRef.current = node;\n      };\n\n      // Finally, render the ngl window\n      return (\n        <>\n          <div\n            ref={handleRef}\n            className={cn(className, style.container, {\n              [style['loading-structure']]: !mainComponent,\n              [style['loading-trajectory']]:\n                !noTrajectory && anyLoadingTrajectory,\n              [style['light-theme']]: !darkBackground,\n            })}\n            // Display loading status data in the upper left corner of the NGL window\n            data-loading={viewerLogs}\n          >\n            <div ref={tooltipRef} className={style.tooltip}>\n              {tooltipContent}\n            </div>\n          </div>\n        </>\n      );\n    },\n  ),\n);\n\nexport default NGLViewer;\n","export const LOW = Symbol('low');\nexport const MEDIUM = Symbol('medium');\nexport const HIGH = Symbol('high');\n\n// Check how fast the connection is and send the corresponding symbol\n// WARNING: This is done for Chrome. i.e. Firefox will always return MEDIUM\nconst connectionLevel = () => {\n  if (!(navigator && navigator.connection)) return MEDIUM;\n  const { effectiveType, saveData } = navigator.connection;\n  if (saveData === true) return LOW;\n  if (!effectiveType) return MEDIUM;\n  switch (effectiveType) {\n    case 'slow-2g':\n    case '2g':\n      return LOW;\n    case '3g':\n      return MEDIUM;\n    case '4g':\n      return HIGH;\n    default:\n      return HIGH;\n  }\n};\n\nexport default connectionLevel;\n","// extracted by mini-css-extract-plugin\nexport default {\"background-toggle\":\"style_background-toggle__aAj32\",\"dark\":\"style_dark__e5mDQ\",\"adapter\":\"style_adapter__+rjEA\",\"ngl-with-settings\":\"style_ngl-with-settings__k93CW\",\"ngl-without-settings\":\"style_ngl-without-settings__qTooi\",\"settings-left\":\"style_settings-left__Wvi5a\",\"settings-controls\":\"style_settings-controls__kLLNo\",\"ngl-alone\":\"style_ngl-alone__5TmnB\",\"stacked-icons\":\"style_stacked-icons__OoF+a\",\"extra-top-margin\":\"style_extra-top-margin__vaEmm\",\"settings-right\":\"style_settings-right__NDIcU\",\"hidden\":\"style_hidden__D+3lX\",\"fullscreen-toggle\":\"style_fullscreen-toggle__f4Bk2\",\"expand\":\"style_expand__brMFA\",\"is-fullscreen\":\"style_is-fullscreen__RtQvN\",\"compress\":\"style_compress__xLnUE\",\"settings\":\"style_settings__87jIw\",\"fullscreen-target\":\"style_fullscreen-target__VO3Yh\",\"card-content\":\"style_card-content__Y2hw3\",\"progress\":\"style_progress__LNzos\",\"container\":\"style_container__ERsvh\",\"controls\":\"style_controls__0ugFi\",\"slider\":\"style_slider__FgVYz\",\"flip-container\":\"style_flip-container__dGHQ+\",\"flip-card-container\":\"style_flip-card-container__wgyMe\",\"flipped\":\"style_flipped__DhDpU\",\"flip-card\":\"style_flip-card__g+agx\",\"front\":\"style_front__g9FOf\",\"back\":\"style_back__UfiiZ\"};","// React logic\nimport React, {\n  useCallback,\n  useState,\n  useEffect,\n  useRef,\n  useMemo,\n  forwardRef,\n  useImperativeHandle,\n  useContext,\n} from 'react';\nimport cn from 'classnames';\nimport screenfull from 'screenfull';\n// Visual assets\nimport {\n  Card,\n  CardContent,\n  Grid,\n  LinearProgress,\n  Icon,\n  IconButton,\n  Slider,\n} from '@mui/material';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faDotCircle,\n  faImages,\n  faSquare,\n} from '@fortawesome/free-regular-svg-icons';\nimport {\n  faStepBackward,\n  faStepForward,\n  faPause,\n  faPlay,\n  faExpand,\n  faCompress,\n  faSyncAlt,\n  faVideo,\n  faAdjust,\n  faCog,\n  faCube,\n  faWalking,\n  faBiking,\n  faTimes,\n  faLock,\n  faUnlock,\n  faStarOfLife,\n  faShareAlt, // It looks like connected atoms\n} from '@fortawesome/free-solid-svg-icons';\n\nimport RepresentationsManager from './representations-manager';\n\nimport { get, setAsync } from '../../utils/storage';\n\n// To ask the API\nimport { BASE_PATH_PROJECTS } from '../../utils/constants';\n\n// The main component of the viewer itself\nimport MolstarViewer from '../molstar-viewer';\nimport NGLViewer from '../ngl-viewer';\nimport useDefaultRepresentations from '../ngl-viewer/use-default-representations';\n\n// Hooks\nimport useToggleState from '../../hooks/use-toggle-state';\n\nimport connectionLevel, {\n  LOW,\n  MEDIUM,\n  HIGH,\n} from '../../utils/connection-level';\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nimport { ProjectCtx } from '../../contexts';\nimport { copyObject } from 'src/utils/auxiliar-functions';\n\n// Decide that the default should be to play the trajectory only on \"big enough\"\n// screens (as a proxy for performance and low-end device detection)\nconst DEFAULT_STARTS_PLAYING = !reducedMotion() && window.innerWidth > 750;\n\nconst DEFAULT_FRAME_NUMBER = (() => {\n  switch (connectionLevel()) {\n    case HIGH:\n      return 50;\n    case MEDIUM:\n      return 25;\n    case LOW:\n    default:\n      return 10;\n  }\n})();\n\n// Set the possible number of frames the user can request\nconst DEFAULT_FRAME_NUMBERS = [\n  { value: 1, label: '1' },\n  { value: 10, label: '10' },\n  { value: 25, label: '25' },\n  { value: 50, label: '50' },\n  { value: 100, label: '100' },\n];\n\n// Set the default component parameters\n// These values are used to fill missing fields in input components\nconst DEFAULT_COMPONENT_PARAMETERS = {\n  name: 'Unnamed component',\n  topologyURL: 'auto', // This is assigned further\n  trajectoryURLs: 'auto', // This is assigned further\n  atomSelection: null,\n  frame: null,\n  onlyTopology: false\n}\n\n// Set the default representation parameters\n// These values are used to fill missing fields in input representations\nconst DEFAULT_REPRESENTATION_PARAMETERS = {\n  name: 'Unnamed representation',\n  selection: 'all',\n  show: true,\n  type: 'cartoon',\n  color: 'chainid',\n  opacity: 1,\n  component: 'auto' // This is assigned further\n}\n\n// DANI: falta representation.index y custom\n\n// Set a function to fill the missing values within an object using default values\n// Return true if there was any change\nconst completeMissingFields = (targetObject, defaultValuesObject) => {\n  let anyChange = false;\n  for (const [fieldName, defaultValue] of Object.entries(defaultValuesObject)) {\n    if (targetObject[fieldName] === undefined) {\n      targetObject[fieldName] = defaultValue;\n      anyChange = true;\n    }\n  }\n  return anyChange;\n}\n\n// Set an NGL view window which is managed by some controls\n// There are different ways to call this script\n// 1 - With components: Used for situations where more than a topology or trajectory are required\n// 2 - With representations: Which internally means there will be only 1 component\n// 3 - With no parameters: In which case a default representation in set up\n// * In case of both components and representations passed, the valid argument will be the components\n// WARNING: There are many important hooks which have components/representations as a dependency\n// Avoid passing an object which is created every render. Use a somehow memoized array.\n// WARNING: The style of this component and its parent is very important. Use a reference to call it\nconst ViewerWithControls = forwardRef(\n  (\n    {\n      // The viewer starting components\n      // Components are objects which may include the following values:\n      // All values are optional since missing values will be set by default\n      //  {\n      //    name: name of the component used to link representations with it\n      //    topologyURL: string, (used in pockets analysis)\n      //    trajectoryURLs: [ string ], (used in pca)\n      //    atomSelection: string, (used in pca)\n      //    frame: int, (used in rmsd pairwise analysis)\n      //    onlyTopology: bool, (used in pockets analysis)\n      //  }\n      startingComponents,\n      // The viewer starting representations\n      // It is an array of objects with the following structure:\n      // All values are optional since missing values will be set by default\n      // {\n      //   name: ('representation' by default) The string label of this representation,\n      //   show: ('true' by default) Boolean to set if this representation is shown or not,\n      //   selection: ('all' by default) The NGL selection string to define the atom selection,\n      //   type: ('cartoon' by default) The initial representation 'type',\n      //   color: ('chainid' by default) The initial representation 'colorScheme',\n      //   opacity: ('1' by default) The initial representation opacity\n      //   other: object with any other ngl options to be passed for the representation (e.g. radius)\n      //   component: name of the component this representation belongs to (main component when missing)\n      // }\n      startingRepresentations,\n      // Alternatively you may pass bot components and representations as states\n      // Thus the parent component may also control them\n      // Note that these states will be still controled by the child components anyway\n      componentsState,\n      representationsState,\n      // Style\n      className,\n      // Set if the viewer must play the simulation as soon as it appears\n      startsPlaying = DEFAULT_STARTS_PLAYING,\n      // Closing callback\n      close,\n      // Nailing callback\n      nail,\n      // Set which frame must be loaded. It may be undefined, if the whole trajectory is desired.\n      requestedFrame,\n      // Set if the frame number selector is allowed for trajectories (false in PCA projections)\n      framesSelect = true,\n      // Set a special option to force the 'noTrajectory' condition\n      // This is used to avoid the trajectory playing in pockets since there are surfaced representations\n      // This is only to be passed when having a trajectory loaded in the main component\n      // If a single frame is forced then this is redundant\n      preventTrajectory = false,\n      // Set a state setter to handle the frame progress\n      onProgress,\n      // The rest of properties\n      ...props\n    },\n    ref,\n  ) => {\n    // Make sure we are not having incompatible inputs\n    if (startingComponents && componentsState)\n      throw new Error('startingComponents and componentsState are not compatilbe inputs. Choose one.');\n    if (startingRepresentations && representationsState)\n      throw new Error('startingRepresentations and representationsState are not compatilbe inputs. Choose one.');\n    // Set which viewer is used: NGL or MolStar (the default is NGL)\n    const [Viewer, setViewer] = useState(NGLViewer);\n    // Get project metadata\n    const { metadata, accessionAndMdNumber, topology } = useContext(ProjectCtx);\n    // Use metadata to limit available frames number\n    const frameNumbers = useMemo(() => {\n      const maximumSnapshots = metadata.mdFrames;\n      const frameNumbers = [...DEFAULT_FRAME_NUMBERS];\n      // Remove values over the maximim number of frames\n      for (let i = frameNumbers.length - 1; i >= 0; i--) {\n        if (frameNumbers[i].value > maximumSnapshots) frameNumbers.pop();\n        else break;\n      }\n      // In case no value was removed we are done\n      if (frameNumbers.length === DEFAULT_FRAME_NUMBERS.length)\n        return frameNumbers;\n      // Otherwise, if the maximum number of frames is not one of the options already, then add it\n      if (frameNumbers[frameNumbers.length - 1].value !== maximumSnapshots)\n        frameNumbers.push({\n          value: maximumSnapshots,\n          label: maximumSnapshots.toString(),\n        });\n      return frameNumbers;\n    }, [metadata.mdFrames]);\n    // Do not use the start object but make a copy to avoid a lot of silent errors\n    const fixedStartingComponents = useMemo(() => {\n      // If there are no starting components then just leave it as null\n      // The defualt completer logic will take over\n      if (!startingComponents) return null;\n      return startingComponents.map(comp => copyObject(comp));\n    }, [startingComponents]);\n\n    // Set the final components to be passed to the viewer\n    const [finalComponents, setFinalComponents] =\n      componentsState || useState(fixedStartingComponents);\n\n    // Set the missing value completer for components including URLs\n    // Return true if there was any change\n    const completeComponentMissingFields = useCallback(targetObject => {\n      if (!accessionAndMdNumber) return false;\n      const defaults = {...DEFAULT_COMPONENT_PARAMETERS};\n      defaults.topologyURL = `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/files/structure`;\n      defaults.trajectoryURLs = [ `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/files/trajectory` ];\n      return completeMissingFields(targetObject, defaults);\n    }, [accessionAndMdNumber]);\n\n    // Anytime components change, check if there are any missing values and fill them with default values\n    useEffect(() => {\n      // Wait for the default completer to be ready\n      if (!completeComponentMissingFields) return;\n      // If there are no components then set a default configuration\n      if (!finalComponents) {\n        const defComponents = [{ name: 'Main' }];\n        defComponents.forEach(comp => { completeComponentMissingFields(comp) });\n        return setFinalComponents(defComponents);\n      }\n      // Make sure we have no components with the same name\n      const componentNames = finalComponents.map(comp => comp.name);\n      const uniqueComponentNames = new Set(componentNames);\n      if (componentNames.length !== uniqueComponentNames.size)\n        throw new Error(`We have multiple components with the same name: ${componentNames.join(', ')}`);\n      // Fill missing values among components with default values\n      const changes = finalComponents.map(comp => \n        completeComponentMissingFields(comp, DEFAULT_COMPONENT_PARAMETERS));\n      // If there was any value filled then update the state to trigger a rerender\n      if (changes.some(v => v === true)) setFinalComponents([...finalComponents]);\n    }, [finalComponents, completeComponentMissingFields]);\n\n    // Anytime the requested frame changes update the main component\n    useEffect(() => {\n      if (!finalComponents) return;\n      if (requestedFrame === undefined) return;\n      if (finalComponents[0].frame === requestedFrame) return;\n      finalComponents[0].frame = requestedFrame;\n      setFinalComponents([...finalComponents]);\n    }, [finalComponents, requestedFrame]);\n\n    // Do not use the start object but make a copy to avoid a lot of silent errors\n    const fixedStartingRepresentations = useMemo(() => {\n      // If there are no starting representations then just leave it as null\n      // The defualt completer logic will take over\n      if (!startingRepresentations) return null;\n      return startingRepresentations.map(rep => copyObject(rep));\n    }, [startingRepresentations]);\n\n    // Set the final representations to be passed to the viewer\n    const [finalRepresentations, setFinalRepresentations] =\n      representationsState || useState(fixedStartingRepresentations);\n\n    // Use this hook to get the memoized NGL default representations\n    const defaultRepresentations = useDefaultRepresentations();\n\n    // Set the missing value completer for representations including the main component name\n    // Return true if there was any change\n    const completeRepresentationMissingFields = useCallback(targetObject => {\n      if (!finalComponents) return false;\n      const defaults = {...DEFAULT_REPRESENTATION_PARAMETERS};\n      defaults.component = finalComponents[0].name;\n      return completeMissingFields(targetObject, defaults);\n    }, [finalComponents]);\n\n    // Anytime representations change, check if there are any missing values and fill them\n    // WARNING: Note that this must be a useEffect, not a useMemo, or you will get the following error:\n    //   Warning: Cannot update a component (`Pockets`) while rendering a different component (`ForwardRef`).\n    //   To locate the bad setState() call inside `ForwardRef`, follow the stack trace as described in \n    //   https://reactjs.org/link/setstate-in-render\n    useEffect(() => {\n      // If we still have no default refereferences then stop here\n      if (!defaultRepresentations || defaultRepresentations.length === 0) return;\n      // If there are no representations then set a default configuration\n      if (!finalRepresentations) {\n        // Unless the representations state has been passed from another component above\n        // If it has been passed then delegate the job to that component\n        // Otherwise, we could interfere as it happend with pockets (it was hard to track the problem)\n        if (representationsState) return;\n        const defRepresentations = [...defaultRepresentations];\n        defRepresentations.forEach(rep => \n          completeRepresentationMissingFields(rep));\n        return setFinalRepresentations(defRepresentations);\n      }\n      // Fill missing values among representations with default values\n      const changes = finalRepresentations.map(rep => \n        completeRepresentationMissingFields(rep));\n      // If there was any value filled then update the state to trigger a rerender\n      // DANI: Este es el responsable de esto:\n      //   Warning: Cannot update a component (`blablabla`) while rendering a different component (`ForwardRef`).\n      //   To locate the bad setState() call inside `ForwardRef`, follow the stack trace as described in \n      //   https://reactjs.org/link/setstate-in-render\n      if (changes.some(v => v === true)) setFinalRepresentations([...finalRepresentations]);\n    }, [finalRepresentations, defaultRepresentations, completeRepresentationMissingFields]);\n\n    // references\n    const containerRef = useRef(null);\n    const viewerRef = useRef(null);\n\n    // toggle states\n    const [nailed, toggleNailed] = useToggleState(false);\n    const [playing, togglePlaying] = useToggleState(startsPlaying);\n    const [spinning, toggleSpinning] = useToggleState(false);\n    const [smooth, setSmooth] = useState(true);\n    const [darkBackground, toggleDarkBackground] = useToggleState(\n      useMemo(() => get('dark-background', false), []),\n    );\n    const [perspective, togglePerspective] = useToggleState(\n      useMemo(() => get('perspective', false), []),\n    );\n\n    // states\n    const [progress, setProgress] = useState(0);\n    const [load, setLoad] = useState(0);\n    const [isFullscreen, setIsFullscreen] = useState(screenfull.isFullscreen);\n    const [requestedFramesNumber, setRequestedFramesNumber] = useState(\n      Math.min(DEFAULT_FRAME_NUMBER, metadata.mdFrames),\n    );\n    const [speed, setSpeed] = useState(useMemo(() => get('speed', 50), []));\n    const [settings, openSettings] = useState(false);\n\n    // handlers\n\n    // Handle the automatic progress\n    const handleProgress = useCallback(\n      prog => {\n        if (onProgress) onProgress(prog);\n        setProgress(prog);\n      }, [setProgress, onProgress],\n    );\n\n    // Handle the trajectory load\n    const handleLoad = useCallback(\n      load => {\n        setLoad(load);\n      }, [setLoad],\n    );\n\n    // handle click or click & drag progress bar\n    const handleManualProgress = useCallback(\n      ({ buttons, clientX, currentTarget, type }) => {\n        if (!viewerRef.current) return;\n        // if mousemove event, but the main button is not pressed, bail\n        if (type === 'mousemove' && buttons !== 1) return;\n        const { x, width } = currentTarget.getBoundingClientRect();\n        // Set pause\n        togglePlaying(false);\n        // Change the ngl viewer current ref from its exposed setter\n        // Then the ngl itself will update the 'progress' state\n        viewerRef.current.currentFrame = Math.floor(\n          ((clientX - x) / width) * viewerRef.current.totalExpectedFrames,\n        );\n      }, [togglePlaying],\n    );\n\n    // Frame change handler to interact with the child viewer\n    const handleFrameChange = useCallback(\n      value => {\n        if (!viewerRef.current) return;\n        togglePlaying(false);\n        viewerRef.current.currentFrame += value;\n      }, [togglePlaying],\n    );\n\n    // When the user requests the previous frame\n    const handlePreviousFrame = useCallback(() => handleFrameChange(-1), [handleFrameChange]);\n\n    // When the user requests the next frame\n    const handleNextFrame = useCallback(() => handleFrameChange(1), [handleFrameChange]);\n\n    // Enter/exit fullscreen\n    const handleFullscreenChange = useCallback(() => setIsFullscreen(screenfull.isFullscreen), []);\n    useEffect(() => {\n      screenfull.on('change', handleFullscreenChange);\n      return () => screenfull.off('change', handleFullscreenChange);\n    }, [handleFullscreenChange]);\n\n    // When the user clicks on the fullscreen button\n    const handlerFullscreenButton = useCallback(\n      () => { if (containerRef.current) screenfull.toggle(containerRef.current) }, []);\n\n    // Exit the options menu by pressing the escape key\n    useEffect(() => {\n      const handleKeyPress = event => {\n        if (event.key === 'Escape') openSettings(false);\n        viewerRef.current.autoResize();\n      };\n      document.addEventListener('keydown', handleKeyPress, false);\n      return () => document.removeEventListener('keydown', handleKeyPress, false);\n    }, []);\n\n    // Find out if there are residues under PBC (Periodic Boundary Conditions) in the topology\n    // If there are PBC residues then stop the smooth to prevent misleading artifacts\n    const hasPbcResidues = useMemo(() => {\n      if (!topology || !topology.pbcResidues) return;\n      const _hasPbcResidues = topology.pbcResidues.size > 0;\n      if (_hasPbcResidues) setSmooth(false);\n      return _hasPbcResidues;\n    }, [topology]);\n\n    // This allows parent components to interact with this component\n    useImperativeHandle(ref,\n      () => ({\n        autoResize: viewerRef.current.autoResize,\n        centerFocus: viewerRef.current.centerFocus,\n        get currentFrame() {\n          return viewerRef.current.currentFrame;\n        },\n        set currentFrame(value) {\n          viewerRef.current.currentFrame = value;\n        },\n        togglePlaying: togglePlaying,\n        setFinalComponents: setFinalComponents,\n        setFinalRepresentations: setFinalRepresentations\n      }),\n      [\n        togglePlaying,\n        setFinalComponents,\n        setFinalRepresentations,\n      ],\n    );\n\n    // Set the variable 'noTrajectory' as true when:\n    // The flag 'onlyTopology' is passed\n    // there is a selected unique frame to load from the main trajectory\n    // The main trajectory only has 1 frame (e.g. average.xtc)\n    const mainComponent = finalComponents && finalComponents[0];\n    const noTrajectory = preventTrajectory || (mainComponent && (mainComponent.onlyTopology ||\n      Number.isFinite(mainComponent.frame))); // May be 0\n\n    // DANI: Si no quieres buscarte problemas no cambies las \"Card\"s de aquí abajo por \"div\"s o similar\n    return (\n      <Card\n        className={cn(style['fullscreen-target'], {\n          [style['is-fullscreen']]: isFullscreen,\n        })}\n        ref={containerRef}\n      >\n        <div className={cn(style.adapter, className)}>\n          <Card\n            className={settings\n              ? style['ngl-with-settings']\n              : style['ngl-without-settings']\n            }\n            style={{ border: 'none', boxShadow: 'none' }}\n            // This id prevents the mouse to drag or resize the Rnd when it is over this element\n            id={'preventDragSize'}\n          >\n            <Card\n              className={settings\n                ? cn(style['settings-left'], className)\n                : cn(style['ngl-alone'], className)\n              }\n              style={{ border: 'none', boxShadow: 'none' }}\n            >\n              <Viewer\n                playing={playing}\n                spinning={spinning}\n                smooth={smooth}\n                onProgress={handleProgress}\n                onLoad={handleLoad}\n                ref={viewerRef}\n                noTrajectory={noTrajectory}\n                requestedFramesNumber={requestedFramesNumber}\n                darkBackground={darkBackground}\n                perspective={perspective}\n                speed={speed}\n                components={finalComponents}\n                representations={finalRepresentations}\n                {...props}\n              />\n              {settings && (\n                <div className={style['settings-controls']}>\n                  <div className={style['stacked-icons']}>\n                    <IconButton\n                      title=\"Toggle spin\"\n                      onClick={toggleSpinning}\n                      size=\"large\"\n                    >\n                      <FontAwesomeIcon icon={faSyncAlt} />\n                    </IconButton>\n\n                    <IconButton\n                      title=\"Center focus\"\n                      onClick={event => {\n                        if (!viewerRef.current) return;\n                        // When the keys control, shift or command (ios) are hold while clicking\n                        const getFocus = event.shiftKey || event.ctrlKey || event.metaKey;\n                        if (getFocus) viewerRef.current.displayFocus();\n                        else viewerRef.current.centerFocus();\n                      }}\n                      size=\"large\"\n                    >\n                      <FontAwesomeIcon icon={faDotCircle} />\n                    </IconButton>\n\n                    {noTrajectory || (\n                      <div className={style['stacked-icons']} title={hasPbcResidues &&\n                        'Smooth interpolation is not allowed since there are residues under Periodic Boundary Conditions. ' +\n                        'The smoothing may result in misleading artifacts for those atoms jumping across boundaries.'}>\n                        <IconButton\n                          title={`Toggle smooth interpolation ${smooth ? 'off' : 'on'}`}\n                          onClick={() => setSmooth(previous => !previous)}\n                          // If there are PBC residues then forbid the smooth to prevent misleads\n                          // Note that the smoothing may result in artifacts for those atoms jumping across boundaries\n                          // This is very clear for solvent/counter ions (breathing effect) and also visible in membrane residues\n                          disabled={hasPbcResidues}\n                          size=\"large\"\n                        >\n                          <FontAwesomeIcon icon={smooth ? faImages : faVideo} />\n                        </IconButton>\n                      </div>\n                    )}\n\n                    <IconButton\n                      title=\"Invert background color\"\n                      onClick={() => {\n                        toggleDarkBackground();\n                        setAsync('dark-background', !darkBackground);\n                      }}\n                      size=\"large\"\n                    >\n                      <div\n                        className={cn(style['background-toggle'], {\n                          [style.dark]: darkBackground,\n                        })}\n                      >\n                        <FontAwesomeIcon icon={faAdjust} />\n                      </div>\n                    </IconButton>\n\n                    <IconButton\n                      title={`Switch to ${\n                        perspective ? 'ortographic' : 'perspective'\n                      } view`}\n                      onClick={() => {\n                        togglePerspective();\n                        setAsync('perspective', !perspective);\n                      }}\n                      size=\"large\"\n                    >\n                      <FontAwesomeIcon icon={perspective ? faSquare : faCube} />\n                    </IconButton>\n\n                    <IconButton\n                      title={`Switch viwer to ${\n                        Viewer === NGLViewer ? 'MolStar' : 'NGL'\n                      }`}\n                      onClick={() => {\n                        setViewer(currentViewer => {\n                          if (currentViewer === NGLViewer) return MolstarViewer;\n                          if (currentViewer === MolstarViewer) return NGLViewer;\n                          throw new Error('Unrecognized current viewer');\n                        });\n                      }}\n                      size=\"large\"\n                    >\n                      <FontAwesomeIcon\n                        icon={Viewer === NGLViewer ? faStarOfLife : faShareAlt}\n                      />\n                    </IconButton>\n                  </div>\n                  {noTrajectory || (\n                    <div>\n                      Speed:\n                      <Grid\n                        container\n                        spacing={2}\n                        className={style['extra-top-margin']}\n                      >\n                        <Grid item>\n                          <Icon>\n                            <FontAwesomeIcon icon={faWalking} />\n                          </Icon>\n                        </Grid>\n                        <Grid item xs>\n                          <Slider\n                            title=\"Change player speed\"\n                            value={speed}\n                            aria-labelledby=\"continuous-slider\"\n                            onChange={(_, value) => {\n                              setSpeed(value);\n                              setAsync('speed', value);\n                            }}\n                          />\n                        </Grid>\n                        <Grid item>\n                          <Icon>\n                            <FontAwesomeIcon icon={faBiking} />\n                          </Icon>\n                        </Grid>\n                      </Grid>\n                    </div>\n                  )}\n                  {noTrajectory || (\n                    <div>\n                      Frames:\n                      {framesSelect ? (\n                        <Slider\n                          title=\"Select frame number\"\n                          value={requestedFramesNumber}\n                          onChange={(_, value) =>\n                            setRequestedFramesNumber(value)\n                          }\n                          aria-labelledby=\"discrete-slider-restrict\"\n                          step={null}\n                          valueLabelDisplay=\"auto\"\n                          marks={frameNumbers}\n                          max={frameNumbers[frameNumbers.length - 1].value}\n                        />\n                      ) : (\n                        // DANI: Esto puede que no esté bien. Deberían ser 20 frames cuando es una PCA projection\n                        ' ' + viewerRef.current.totalExpectedFrames\n                      )}\n                    </div>\n                  )}\n                </div>\n              )}\n            </Card>\n            {settings && (\n              <div className={style['settings-right']}>\n                <RepresentationsManager\n                  components={finalComponents}\n                  representations={finalRepresentations}\n                  setRepresentations={setFinalRepresentations}\n                />\n              </div>\n            )}\n          </Card>\n          <CardContent style={{ padding: 0 }}>\n            {noTrajectory\n              // Render an empty div to avoid a Warning message since CardContent expect a ReactNode and an undefuned is not\n              ? (<div />)\n              // Render the loading/progress bar in case there is a trajectory to be loaded\n              : (<div\n                  className={cn(style.progress, { [style.dark]: darkBackground })}\n                  onClick={handleManualProgress}\n                  onMouseMove={handleManualProgress}\n                >\n                  <LinearProgress\n                    variant=\"buffer\"\n                    color=\"primary\"\n                    value={progress * 100}\n                    valueBuffer={load * 100}\n                    style={{ height: '1ch' }}\n                    className=\"prevent-drag\"\n                  />\n                </div>)\n            }\n            <div className={style.controls}>\n              <div>\n                <IconButton\n                  title=\"Close viewer\"\n                  className={cn({ [style.hidden]: !close })}\n                  disabled={!close}\n                  onClick={close}\n                  size=\"large\"\n                >\n                  <FontAwesomeIcon icon={faTimes} />\n                </IconButton>\n\n                <IconButton\n                  title={nailed ? 'Nailed viewer' : 'Nail viewer'}\n                  className={cn({ [style.hidden]: !nail })}\n                  disabled={!nail || nailed}\n                  onClick={() => {\n                    nail();\n                    toggleNailed();\n                  }}\n                  size=\"large\"\n                >\n                  <div className={style['flip-container']}>\n                    <div\n                      className={cn(style['flip-card-container'], {\n                        [style.flipped]: nailed,\n                      })}\n                    >\n                      <FontAwesomeIcon\n                        className={cn(style['flip-card'], style.front)}\n                        icon={faUnlock}\n                      />\n                      <FontAwesomeIcon\n                        className={cn(style['flip-card'], style.back)}\n                        icon={faLock}\n                      />\n                    </div>\n                  </div>\n                </IconButton>\n              </div>\n              <div>\n                {noTrajectory || (\n                  <>\n                    <IconButton\n                      title=\"Previous frame\"\n                      onClick={handlePreviousFrame}\n                      size=\"large\"\n                    >\n                      <FontAwesomeIcon icon={faStepBackward} />\n                    </IconButton>\n                    <IconButton\n                      title={playing ? 'Pause' : 'Play'}\n                      onClick={togglePlaying}\n                      size=\"large\"\n                    >\n                      <div className={style['flip-container']}>\n                        <div\n                          className={cn(style['flip-card-container'], {\n                            [style.flipped]: playing,\n                          })}\n                        >\n                          <FontAwesomeIcon\n                            className={cn(style['flip-card'], style.front)}\n                            icon={faPlay}\n                          />\n                          <FontAwesomeIcon\n                            className={cn(style['flip-card'], style.back)}\n                            icon={faPause}\n                          />\n                        </div>\n                      </div>\n                    </IconButton>\n                    <IconButton\n                      title=\"Next frame\"\n                      onClick={handleNextFrame}\n                      size=\"large\"\n                    >\n                      <FontAwesomeIcon icon={faStepForward} />\n                    </IconButton>\n                  </>\n                )}\n              </div>\n              <div>\n                <IconButton\n                  title={`${isFullscreen ? 'Exit' : 'Go'} fullscreen`}\n                  onClick={handlerFullscreenButton}\n                  className={cn(style['fullscreen-toggle'], {\n                    [style.hidden]: !screenfull.isEnabled,\n                    [style['is-fullscreen']]: isFullscreen,\n                    [style['settings']]: settings,\n                  })}\n                  disabled={!screenfull.isEnabled}\n                  size=\"large\"\n                >\n                  <FontAwesomeIcon\n                    icon={isFullscreen ? faCompress : faExpand}\n                  />\n                </IconButton>\n                <IconButton\n                  title={'Settings'}\n                  onClick={() => {\n                    openSettings(previous => !previous);\n                    viewerRef.current.autoResize();\n                  }}\n                  size=\"large\"\n                >\n                  <FontAwesomeIcon icon={faCog} />\n                </IconButton>\n              </div>\n            </div>\n          </CardContent>\n        </div>\n      </Card>\n    );\n  },\n);\n\nexport default ViewerWithControls;\n","// Set the most suitable position for a tooltip\n// Use the parent element to set the limits where this tooltip may be\n// Use the tooltip element to get the suze of the tooltip\n// Use the reference position (e.g. mouse position) to place the tooltip\n// The offset is the pixels of separation between the reference and the tooltip\n// The idea is that the tooltip may be over/under and left/right of the reference position\n// It depends on how close to each limit is the reference position\nexport const setTooltipPosition = (parent, tooltip, reference, offset = 0) => {\n  const limits = parent.getBoundingClientRect();\n  const size = tooltip.getBoundingClientRect();\n  let x = reference.x;\n  // If it is more at the right side\n  if (Math.abs(limits.left - x) > Math.abs(x - limits.right)) {\n    const xSize = size.right - size.left;\n    x -= offset + xSize;\n  }\n  // If it is more at the left side\n  else {\n    x += offset;\n  }\n  // After this, apply the parent offset\n  x -= limits.left;\n  let y = reference.y;\n  // If it is more at the bottom side\n  if (Math.abs(limits.top - y) > Math.abs(y - limits.bottom)) {\n    const ySize = size.bottom - size.top;\n    y -= offset + ySize;\n  }\n  // If it is more at the top side\n  else {\n    y += offset;\n  }\n  // After this, apply the parent offset\n  y -= limits.top;\n  // Return the coordinates\n  return { x, y };\n};\n"],"names":["useDefaultRepresentations","chains","metadata","topology","useContext","ProjectCtx","file","structure","PdbCtx","useMemo","reps","ligands","LIGANDS","chainnames","CHAINNAMES","chain","name","push","selection","forEach","rep","nglSelectionExists","chainNames","indexOf","getChainByName","residues","every","residue","referenceType","type","color","opacity","ligand","ligandResidueIndices","getReferenceResidueIndices","length","rangedSelection","nglSelection","residueIndices2Ngl","ngl","singleAtomIndices","residueAtomIndices","atomIndices","singleAtomSelection","join","representedResidues","isCartoon","undefined","nglSelection2residueIndices","residuesCount","residueCount","nonRepresentedResidues","i","otherSelection","availableDrawingMethods","label","value","DrawingMethodExists","opt","availableColoringMethods","availableColors","coloringExists","memo","_ref","components","representations","setRepresentations","_jsx","_Fragment","children","_jsxs","Table","size","padding","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","map","representation","index","component","scope","IconButton","title","onClick","previousRepresentations","show","FontAwesomeIcon","icon","faEye","faEyeSlash","TextField","defaultValue","variant","onKeyPress","event","key","target","disabled","custom","margin","Select","native","onChange","_ref2","cm","_ref3","customScheme","word","toUpperCase","slice","Slider","_","className","style","colSpan","Chip","faPlusCircle","KEY","get","storedValue","localStorage","getItem","JSON","parse","setAsync","async","schedule","set","setItem","stringify","TrajectoryFromCustomData","StateTransformer","builderFactory","CreateTransformer","display","from","PluginStateObject","Root","to","Molecule","Coordinates","params","data","PD","Value","Uint8Array","isHidden","natoms","apply","Task","create","Error","frameSize","coordSize","byteLength","nframes","coordinates","Float32Array","frameCoordinates","count","frame","x_coords","y_coords","z_coords","atom","x","y","z","elementCount","time","Time","xyzOrdering","isIdentity","molstarCoords","customParse","getFrames","trajectoryFrames","requestedFrames","requestedFrame","range","toString","frames","frameStep","Math","floor","ceil","molstarSpec","DefaultPluginUISpec","layout","initial","isExpanded","controlsDisplay","showControls","controls","top","bottom","left","remoteState","DEFAULT_NUMBER_OF_FRAMES","frameRangeFormat","defaultHighlightTypes","atoms","selections","MolstarViewer","forwardRef","ref","playing","spinning","smooth","onProgress","onLoad","bounce","requestedFramesNumber","selectedAtoms","selectedResidueIndices","selectedChains","selectedCustom","selectedDistances","selectedAngles","selectedRepresentation","snapRepresentations","noTrajectory","initialFocus","darkBackground","perspective","speed","drawingMethods","coloringMethods","opacities","showRepresentations","nglSelections","highlightTypes","comps","accession","accessionAndMdNumber","fileDescriptors","curatedOrientation","topologyManager","pdbDataFile","isFirstCompStaged","setIsFirstCompStaged","useState","focus","setFocus","parentRef","useRef","molstarRef","containerRef","stageRef","tooltipRef","inViewRef","isInView","useInView","tooltipContent","setTooltipContent","currentRequests","requestedTopologies","setRequestedTopologies","anyLoadingTopology","setAnyLoadingTopology","previousRequestedTopologies","newRequestedTopologies","comp","url","topologyURL","find","BASE_PATH_PROJECTS","MAIN_STRUCTURE_FILENAME","loading","requested","error","topologies","setTopologies","useEffect","requestedTopology","t","previous","anyLoading","some","getter","substring","https","http","request","response","on","chunk","current","mainComponent","mainTopology","pdbFile","requestedTrajectories","setRequestedTrajectories","anyLoadingTrajectory","setAnyLoadingTrajectory","payload","currentTrajectories","newTrajectories","baseUrl","c","onlyTopology","isPrincipal","urls","trajectoryURLs","frameCount","u","framed","frameRange","parsed","exec","start","groups","end","max","step","parseFrameRange","trajectoryFilename","split","trajectoryFileDescriptor","filename","trajectoryMetadata","Number","isFinite","returnedFrames","finalUrl","maximumFrames","min","framesRange","framesCount","framedURLs","trajectory","trajectories","setTrajectories","updateLoadingProgress","useCallback","mainComp","mainTrajectories","trajectoriesState","overallFrames","reduce","a","b","overallProgress","progress","totalBytes","headers","previousTrajectories","ArrayBuffer","byteCount","currentTrajectory","buffer1","buffer2","tmp","buffer","appendBuffer","redundantList","abort","createPluginUI","wrap","dispose","molstar","builders","rawData","state","isGhost","parseTrajectory","model","createModel","modelRef","trajectoryAtoms","trajectoryFinalExpectedFrames","bytesPerFrame","BYTES_PER_COORDINATE","fitLength","totalPayload","totalFrames","coords","build","toRoot","commit","loadedTrajectories","managers","hierarchy","molstarTrajectory","TrajectoryFromModelAndCoordinates","coordinatesRef","dependsOn","newModel","createStructure","lightRepresentation","createStructureRepresentationParams","typeParams","quality","ignoreHydrogens","ignoreHydrogensVariant","ignoreLight","StateTransforms","Representation","StructureRepresentation3D","animation","play","AnimateModelIndex","duration","maxFps","mode","direction","stop","handleResize","canvas","querySelector","height","cursor","sleep","window","addEventListener","removeEventListener","useImperativeHandle","autoResize","displayFocus","stringifiedArray","viewerControls","getOrientation","elements","console","log","centerFocus","sele","currentFrame","compList","trajList","total","this","setFrame","totalExpectedFrames","expectedFrames","node","cn","payloadToNGLCoordinates","trajectoryData","trajectoryCoordinates","overallCoordinates","subarray","payloadToNGLCoordinatesFiltered","atomCount","expectedAtomNumber","k","j","e","payloadToNGLCoordinatesAlternative","format","backboneAtoms","heavyAtoms","getAtomProxy","atomname","element","DEFAULT_ORIENTATION_TRANSITION_DURATION","CHAIN_SELECTION","interpolateSpeed","currentSpeed","xSelection","xAxisStep","setMainComponent","mainNglFile","setMainNglFile","firstTime","originalOritentationRef","Matrix4","atomSelection","postData","protocol","requestOptions","urlParse","isStructureEndpoint","path","endsWith","method","responseContent","stringBlob","Blob","autoLoad","defaultRepresentation","ext","then","catch","write","requestPathsteps","pathname","isTrajectoryEndpoint","runningTasks","setRunningTasks","handleTasksChange","stage","Stage","tasks","signals","countChanged","add","viewerLogs","beginning","Date","now","currentTick","round","padStart","repeat","viewer","setBackground","setCamera","frameHandler","clamp","frameChanged","remove","stageComp","stc","myName","atomStore","occupancy","Array","fill","componentObject","cloneDeep","addComponentFromObject","componentRepresentations","filter","registredNames","r","customColorScheme","colorScheme","ColormakerRegistry","addSelectionScheme","colorName","s","Option","isValidColor","parameters","colorDomain","surfaceType","side","depthWrite","other","previousRepresentation","reprList","previousType","repr","previousSelection","string","removeRepresentation","addRepresentation","setParameters","labelName","annotationList","annotation","elm","document","createElement","innerText","backgroundColor","center","structureView","addAnnotation","removeAnnotation","charAt","registredName","nameHighlight","previousHighlightRepresentation","nameContextHighlight","previousContextRepresentation","seleHighlight","atomIndex","scale","otherResidueAtomsSelection","Set","getAtomByIndex","residueNglSelections","residueIndex","getResidueByIndex","overallNglSelection","currentRepresentations","snapRepresentation","previousSnapRepresentation","currentRepresentation","atomPair","labelUnit","labelColor","previousComponent","removeComponent","rotationGroup","rotateY","shape","Shape","radialSegments","boxCenter","object","bBox","boundingBox","addBox","roughness","atomTriple","trajectoryPayloads","combinedURL","combinedProgress","framedURL","fitPayload","sameTrajectory","removeTrajectory","bind","cb","nb","lastFrameIndex","completedTrajectory","trajectoryAtomIndices","compTrajectories","nglFile","nglTrajectory","updateNGLFile","currentFrames","discardBytes","newTrajectoryData","newTrajectoryFrames","concat","_frameCount","nglPlayer","player","timeout","interpolateStep","isRunning","_currentFrame","setNGLFile","Frames","addTrajectory","goToNextFrame","haltedRunning","pause","spinAnimation","paused","toggleSpin","interpolateType","cancel","handler","detail","eventtype","highlight","manager","querySelectorAll","thisHiglight","attributeValues","attributes","sourceStart","getResidueByParameters","sourceEnd","chainName","number","substr","previousStructureRepresentation","animationControls","orient","colorSchemeID","autoView","tooltip","appendChild","mouseControls","formatOutput","metadataChainName","referenceId","resname","referenceName","referenceNumber","hideTooltip","clearTimeout","hovered","pickingProxy","setTimeout","description","bond","atom1","atom2","setTooltipPosition","mouse","position","firstFocus","transition","LOW","Symbol","MEDIUM","HIGH","connectionLevel","navigator","connection","effectiveType","saveData","DEFAULT_STARTS_PLAYING","reducedMotion","innerWidth","DEFAULT_FRAME_NUMBER","DEFAULT_FRAME_NUMBERS","DEFAULT_COMPONENT_PARAMETERS","DEFAULT_REPRESENTATION_PARAMETERS","completeMissingFields","targetObject","defaultValuesObject","anyChange","fieldName","Object","entries","startingComponents","startingRepresentations","componentsState","representationsState","startsPlaying","close","nail","framesSelect","preventTrajectory","props","Viewer","setViewer","NGLViewer","frameNumbers","maximumSnapshots","mdFrames","pop","fixedStartingComponents","copyObject","finalComponents","setFinalComponents","completeComponentMissingFields","defaults","defComponents","componentNames","uniqueComponentNames","v","fixedStartingRepresentations","finalRepresentations","setFinalRepresentations","defaultRepresentations","completeRepresentationMissingFields","defRepresentations","viewerRef","nailed","toggleNailed","useToggleState","togglePlaying","toggleSpinning","setSmooth","toggleDarkBackground","togglePerspective","setProgress","load","setLoad","isFullscreen","setIsFullscreen","screenfull","setRequestedFramesNumber","setSpeed","settings","openSettings","handleProgress","prog","handleLoad","handleManualProgress","buttons","clientX","currentTarget","width","getBoundingClientRect","handleFrameChange","handlePreviousFrame","handleNextFrame","handleFullscreenChange","handlerFullscreenButton","handleKeyPress","hasPbcResidues","pbcResidues","_hasPbcResidues","Card","border","boxShadow","id","faSyncAlt","shiftKey","ctrlKey","metaKey","faDotCircle","faImages","faVideo","faAdjust","faSquare","faCube","currentViewer","faStarOfLife","faShareAlt","Grid","container","spacing","item","Icon","faWalking","xs","faBiking","valueLabelDisplay","marks","RepresentationsManager","CardContent","onMouseMove","LinearProgress","valueBuffer","faTimes","faUnlock","faLock","faStepBackward","faPlay","faPause","faStepForward","faCompress","faExpand","faCog","parent","reference","offset","arguments","limits","abs","right"],"sourceRoot":""}