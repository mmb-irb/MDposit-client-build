{"version":3,"file":"static/js/2615.38606bd0.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/TableFooter/tableFooterClasses.js","../node_modules/@mui/material/TableFooter/TableFooter.js","webpack://mdposit/./src/pages/accession/hbonds/style.module.css?75f0","webpack://mdposit/./src/components/interaction-selector/style.module.css?5392","components/interaction-selector/index.js","webpack://mdposit/./src/components/animated-card/style.module.css?d4d9","components/animated-card/index.js","pages/accession/hbonds/index.js","webpack://mdposit/./src/components/viewer-spawner/style.module.css?df6e","components/viewer-spawner/index.js","pages/accession/hbonds/bond-status/index.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableFooterUtilityClass(slot) {\n  return generateUtilityClass('MuiTableFooter', slot);\n}\nconst tableFooterClasses = generateUtilityClasses('MuiTableFooter', ['root']);\nexport default tableFooterClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled from '../styles/styled';\nimport { getTableFooterUtilityClass } from './tableFooterClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTableFooterUtilityClass, classes);\n};\nconst TableFooterRoot = styled('tfoot', {\n  name: 'MuiTableFooter',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  display: 'table-footer-group'\n});\nconst tablelvl2 = {\n  variant: 'footer'\n};\nconst defaultComponent = 'tfoot';\nconst TableFooter = /*#__PURE__*/React.forwardRef(function TableFooter(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTableFooter'\n  });\n  const {\n      className,\n      component = defaultComponent\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(Tablelvl2Context.Provider, {\n    value: tablelvl2,\n    children: /*#__PURE__*/_jsx(TableFooterRoot, _extends({\n      as: component,\n      className: clsx(classes.root, className),\n      ref: ref,\n      role: component === defaultComponent ? null : 'rowgroup',\n      ownerState: ownerState\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TableFooter.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableFooter;","// extracted by mini-css-extract-plugin\nexport default {\"margined\":\"style_margined__wjr-Y\",\"horizontal\":\"style_horizontal__R62Uj\",\"status\":\"style_status__nu7SZ\"};","// extracted by mini-css-extract-plugin\nexport default {\"horizontal\":\"style_horizontal__2DIWx\",\"horizontal-margined\":\"style_horizontal-margined__e9fQR\"};","import React, { Suspense } from 'react';\n\nimport {\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Select,\n  MenuItem,\n  TextField,\n  IconButton,\n} from '@mui/material';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport Loading from '../loading';\n\nimport style from './style.module.css';\n\nconst residueOptions = [\n  { label: 'All residues', value: 'residue_indices' },\n  { label: 'Interface residues', value: 'interface_indices' },\n];\n\n// Render a panel which allows to select the desired interaction\n// If the user selects a new interaction then the 'setSelectedInteraction' is set as its index\n// Interactions have the following structure:\n// { name: string, label: string, ... }\n// The 'label' field will replace the 'name' in the selector labels if exists\n// When 'selectedResidues' is passed, render also tools to select interaction residues\n// Residue options are 'all' or 'interface' residues\n// DANI: La guinda sería un 'custom' en las opciones de residuos\n// DANI: La idea sería desplegar dos residue selectors, uno para cada interaction agent\nconst InteractionSelector = ({\n  interactions,\n  selectedInteraction,\n  setSelectedInteraction,\n  selectedResidues,\n  setSelectedResidues,\n  selectedOrder,\n  handleToggleOrder,\n  firstOrderLabel, // The label to be represented over the first order rectangle\n  firstOrderTooltip, // The tooltip to be shown for the first order rectangle\n  secondOrderLabel, // The label to be represented over the second order rectangle\n  secondOrderTooltip, // The tooltip to be shown for the second order rectangle\n  toggleOrderTooltip, // The tooltip to be shown for the toggle order button\n  interfaceOnly = false, // Set if the 'All residues' button is enabled\n}) => {\n  const changeInteraction = event => {\n    setSelectedInteraction(event.target.value);\n  };\n\n  const changeResidues = event => {\n    setSelectedResidues(event.target.value);\n  };\n\n  const changeOrder = () => {\n    handleToggleOrder();\n  };\n\n  const currentInteraction = interactions[selectedInteraction];\n\n  // Render\n  return (\n    <Suspense fallback={<Loading />}>\n      <Select\n        value={selectedInteraction}\n        onChange={changeInteraction}\n        className={style['horizontal-margined']}\n      >\n        {interactions.map((interaction, i) => (\n          <MenuItem key={i} value={i} disabled={interaction.failed}>\n            {interaction.label || interaction.name}\n          </MenuItem>\n        ))}\n      </Select>\n      {selectedResidues && (\n        <RadioGroup\n          value={selectedResidues}\n          onChange={changeResidues}\n          className={style.horizontal}\n        >\n          {residueOptions.map((opt, i) => (\n            <FormControlLabel\n              key={i}\n              value={opt.value}\n              control={<Radio color=\"primary\" />}\n              label={opt.label}\n              disabled={opt.label === 'All residues' && interfaceOnly}\n            />\n          ))}\n        </RadioGroup>\n      )}\n      {selectedOrder !== undefined && (\n        <>\n          <TextField\n            //margin=\"dense\"\n            label={firstOrderLabel}\n            title={firstOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_1\n                : currentInteraction.agent_2\n            }\n          />\n          <IconButton\n            title={toggleOrderTooltip}\n            onClick={changeOrder}\n            size=\"large\"\n          >\n            <FontAwesomeIcon icon={faExchangeAlt} />\n          </IconButton>\n          <TextField\n            //margin=\"dense\"\n            label={secondOrderLabel}\n            title={secondOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_2\n                : currentInteraction.agent_1\n            }\n          />\n        </>\n      )}\n    </Suspense>\n  );\n};\n\nexport default InteractionSelector;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__M9GCG\"};","import React, { useLayoutEffect, useRef, forwardRef } from 'react';\nimport { Card } from '@mui/material';\n\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nconst KEYFRAMES = { opacity: [0, 1] };\n\nif (!reducedMotion()) {\n  KEYFRAMES.transform = ['translateY(50px)', 'translateY(0)'];\n}\n\nconst ANIMATION_OPTIONS = {\n  fill: 'both',\n  easing: 'cubic-bezier(0, .99, .56, 1.1)',\n  duration: 500,\n};\n\n// Make the card appear and slide softly from down to up when the page is loaded\nconst AnimatedCard = forwardRef(({ overrideComponent, ...props }, ref) => {\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const node = containerRef.current && containerRef.current.firstElementChild;\n    if (!(node && node.animate)) return;\n\n    const index = Array.from(\n      document.querySelectorAll('main section'),\n    ).findIndex(section => node === section);\n\n    const animation = node.animate(KEYFRAMES, {\n      ...ANIMATION_OPTIONS,\n      delay: index * 150,\n    });\n\n    return () => animation.cancel();\n  }, []);\n\n  const Component = overrideComponent ? 'section' : Card;\n\n  return (\n    <div ref={containerRef} className={style.container}>\n      <Component component=\"section\" {...props} ref={ref} />\n    </div>\n  );\n});\n\nexport default AnimatedCard;\n","import React, {\n  Suspense,\n  useContext,\n  useState,\n  useMemo,\n  Fragment,\n  useRef,\n} from 'react';\n\nimport {\n  CardContent,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TablePagination,\n  TableFooter,\n  Typography,\n} from '@mui/material';\n\nimport Card from '../../../components/animated-card';\nimport Loading from '../../../components/loading';\nimport BondStatus from './bond-status';\nimport ViewerSpawner from '../../../components/viewer-spawner';\n\nimport useAPI from '../../../hooks/use-api';\n\nimport { ProjectCtx } from '../../../contexts';\n\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\n\nimport InteractionSelector from '../../../components/interaction-selector';\n\nimport style from './style.module.css';\n\n// Define non-changing props used by the table footer\nconst rowsPerPageDefault = 25;\nconst rowsPerPageOptions = [10, 25, 50, 100];\n\nconst Hbonds = () => {\n  // Get the current project data\n  const {\n    accessionAndMdNumber,\n    metadata,\n    topology: topologyManager,\n    interactions,\n    populations,\n  } = useContext(ProjectCtx);\n\n  // Set a reference to the table element so we can scroll to it\n  const tableRef = useRef();\n\n  // The interaction to be displayed\n  const [selectedInteraction, setSelectedInteraction] = useState(0);\n\n  // The newest format has 4 fields: acceptors, donors, hydrogens and hbonds\n  // The hbonds includes arrays of true and false per frame\n  const interaction = interactions && interactions[selectedInteraction];\n\n  // Table pagination states\n  const [selectedPage, setSelectedPage] = useState(0);\n  const [selectedRowsPerPage, setSelectedRowsPerPage] = useState(\n    rowsPerPageDefault,\n  );\n\n  // The hydrogen bond bar which the mouse has clicked\n  const [selectedHB, setSelectedHB] = useState(null);\n\n  // Set the API url for the heatmap data\n  const url = `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/hbonds/`;\n\n  // Send a request to the API with the url of the specific analysis\n  const { loading, payload, error } = useAPI(url);\n\n  // Set the processed data which will be displayed\n  const { processedData, weights } = useMemo(() => {\n    // Return here if there is no payload or topology\n    if (!payload || !topologyManager || (populations && populations.loading))\n      return {};\n\n    // Get the data whose name matches the interaction name\n    // The newest format has 4 fields: acceptors, donors, hydrogens and hbonds\n    // The hbonds includes arrays of true and false per frame\n    const data = payload.data.find(dataset => {\n      return dataset.name === interaction.name;\n    });\n    if (!data)\n      return {\n        message: `Dataset for the interaction \"${interaction.name}\" not found`,\n      };\n\n    // If data is empty it means no hydrogen bonds where found for this interaction\n    if (data.hbonds.length === 0)\n      return { message: 'No hydrogen bonds were found for this interaction' };\n\n    // Get the number of bonds\n    const bondCount = data.hbonds.length;\n\n    // Group bonds with a common acceptor and then group bonds with a common donor\n    const acceptorGroups = {};\n    const donorGroups = {};\n    for (let i = 0; i < bondCount; i++) {\n      // Set the bond object\n      const acceptor = data.acceptors[i];\n      const donor = data.donors[i];\n      const hydrogen = data.hydrogens[i];\n      const status = data.hbonds[i];\n      const bond = { acceptor, donor, hydrogen, status };\n      // Add current bond to its corresponding acceptor group\n      const acceptorGroup = acceptorGroups[acceptor];\n      if (acceptorGroup) acceptorGroup.push(bond);\n      else acceptorGroups[acceptor] = [bond];\n      // Add current bond to its corresponding donor group\n      const donorGroup = donorGroups[donor];\n      if (donorGroup) donorGroup.push(bond);\n      else donorGroups[donor] = [bond];\n    }\n\n    // Join all groups together discarding redundant groups\n    const groups = [];\n    const commons = [];\n    // Join unique acceptor groups\n    // Unique acceptor groups are those which have bonds with more than one different donor\n    Object.values(acceptorGroups).forEach(group => {\n      const donors = group.map(bond => bond.donor);\n      const uniqueDonors = new Set(donors);\n      if (uniqueDonors.size > 1) groups.push(group);\n      // Otherwise, add the group to the common groups list\n      else commons.push(group);\n    });\n    // Join unique donor groups\n    // Unique donor groups are those which have bonds with more than one different acceptor\n    Object.values(donorGroups).forEach(group => {\n      const acceptors = group.map(bond => bond.acceptor);\n      const uniqueAcceptors = new Set(acceptors);\n      if (uniqueAcceptors.size > 1) groups.push(group);\n      // WARNING: There is no need to add common groups to the list now\n      // They can only be repeater or redundant\n      // Repeated ones will be already in the list\n      // Redundant ones are discardes so we are not intereseted\n    });\n    // Common groups are thouse who have both an unique acceptor and an unique donor\n    // They will always be repeated or redundant (already included in bigger groups)\n    // If they are redundant then we are done\n    // Otherwise it means they are repeated so we only have to add it once to the list\n    commons.forEach(group => {\n      // Check if one of its bonds is included in any group already\n      const bondSample = group[0];\n      for (const group of groups) {\n        for (const bond of group) {\n          // In case the acceptor (or the donnor) matches is enought to discard the whole group\n          if (bond.acceptor === bondSample.acceptor) return;\n        }\n      }\n      // In case no coincidence was found we include the bond\n      groups.push(group);\n    });\n\n    // Sum up the groups in the list of atoms and status\n    // When all acceptors/donors/hydrogens are the same atom leave an unique value in the list\n    const processedData = groups.map(group => {\n      let acceptors = group.map(bond => bond.acceptor);\n      const uniqueAcceptors = new Set(acceptors);\n      if (uniqueAcceptors.size === 1) acceptors = [acceptors[0]];\n      let donors = group.map(bond => bond.donor);\n      const uniqueDonors = new Set(donors);\n      if (uniqueDonors.size === 1) donors = [donors[0]];\n      let hydrogens = group.map(bond => bond.hydrogen);\n      const uniqueHydrogens = new Set(hydrogens);\n      if (uniqueHydrogens.size === 1) hydrogens = [hydrogens[0]];\n      const status = group.map(bond => bond.status);\n      return { acceptors, donors, hydrogens, status };\n    });\n\n    // Find out for each group which atoms (acceptors or donnors) belong to each interacting agent\n    // Then set the labels to be displayed in the corresponding agent 1 and 2 sections in the table\n    processedData.forEach(group => {\n      // Find out which agent does the acceptors belong to\n      const acceptorIndex = group.acceptors[0];\n      const acceptorAtom = topologyManager.getAtomByIndex(acceptorIndex);\n      const acceptorResidueIndex = acceptorAtom.residueIndex;\n      const isAcceptorFromAgent1 =\n        interaction['interface_indices_1'].indexOf(acceptorResidueIndex) !== -1;\n      group.isAcceptorFromAgent1 = isAcceptorFromAgent1;\n      // Set the acceptor, donor and hydrogen labels to be displayed in the table\n      const [acceptorLabels, donorLabels] = [group.acceptors, group.donors].map(\n        atoms =>\n          atoms.map(atomIndex => {\n            const atom = topologyManager.getAtomByIndex(atomIndex);\n            return `${atom.residue.standardLabel}.${atom.name}`;\n          }),\n      );\n      const hydrogenLabels = group.hydrogens.map(atomIndex => {\n        const atom = topologyManager.getAtomByIndex(atomIndex);\n        let atomName = atom.name;\n        if (isAcceptorFromAgent1) atomName = atomName + ' —';\n        else atomName = '— ' + atomName;\n        return atomName;\n      });\n      group.hydrogenLabels = hydrogenLabels;\n      // Now set the agent 1 and 2 labels\n      if (isAcceptorFromAgent1) {\n        group.agent1Labels = acceptorLabels;\n        group.agent2Labels = donorLabels;\n      } else {\n        group.agent1Labels = donorLabels;\n        group.agent2Labels = acceptorLabels;\n      }\n      // Set the group score according to the stability of all its bonds together\n      // This value is then used to sort groups\n      const stability = group.status.reduce(\n        (acc, cur) => (acc += cur.filter(v => v === true).length),\n        0,\n      );\n      group.stability = stability;\n    });\n\n    // Sort bond groups by status (all status added together)\n    processedData.sort((a, b) => b.stability - a.stability);\n\n    // Calculate the frame step for recorded hydrogen bonds\n    const dataLength = data.hbonds[0].length;\n    const frameStep = Math.round(metadata.mdFrames / (dataLength - 1));\n    // Set the weigths in order to resize bonds bandwidth accordingly\n    let weights;\n    if (populations && populations.payload) {\n      // Get the weights for each data value corresponding frame\n      weights = [];\n      for (let i = 0; i < populations.payload.length; i += frameStep) {\n        weights.push(populations.payload[i]);\n      }\n      // Check weights and data to match in the number of values\n      const weigthCount = weights.length;\n      if (dataLength !== weigthCount)\n        throw new Error(\n          `Data values count (${dataLength}) does not match the weigths values count (${weigthCount})`,\n        );\n      // // Normalize weights\n      // // Find the minimum and maximum values in the weights array\n      // // NEVER FORGET: do not use Math.min and Math.max for long arrays\n      // const minimum = weights.reduce((cv, nv) => { return Math.min(cv, nv) }, Infinity);\n      // const maximum = weights.reduce((cv, nv) => { return Math.max(cv, nv) }, -Infinity);\n      // // Set the normalized minimum and maximum radius values\n      // // This in the graph is equivalent to 'times the default area'\n      // const normalizedMinimum = 1;\n      // const normalizedMaximum = 10;\n      // // Set a function to interpolate values\n      // const normalizer = (normalizedMaximum - normalizedMinimum) / (maximum - minimum)\n      // const interpolate = weight => normalizedMinimum + (weight - minimum) * normalizer;\n      // // Recalculate weights using the minimum values (equal to 1) as reference\n      // weights = weights.map(weight => interpolate(weight));\n    }\n    return { processedData, weights };\n  }, [payload, metadata, topologyManager, interaction, populations]);\n\n  // Set all bonds to be displayed according to the current page and the number of bonds per page\n  const displayedBondGroups = useMemo(() => {\n    if (!processedData) return;\n    const firstBond = selectedPage * selectedRowsPerPage;\n    const lastBond = (selectedPage + 1) * selectedRowsPerPage;\n    return processedData.slice(firstBond, lastBond);\n  }, [processedData, selectedPage, selectedRowsPerPage]);\n\n  // Render loading or error messages according with the API response\n  if (loading || (populations && populations.loading)) return <Loading />;\n  else if (error) return error.toString();\n  else if (populations && populations.error)\n    return populations.error.toString();\n  else if (!payload) return 'Something bad happened with the analysis data';\n  else if (populations && !populations.payload)\n    return 'Something bad happened with populations data';\n\n  if (!topologyManager) return <Loading />;\n\n  // Render\n  return (\n    <Suspense fallback={<Loading />}>\n      <Card>\n        <CardContent className={style.horizontal}>\n          <Typography variant=\"h6\">Interaction:</Typography>\n          <InteractionSelector\n            interactions={interactions}\n            selectedInteraction={selectedInteraction}\n            setSelectedInteraction={interaction => {\n              setSelectedInteraction(interaction);\n              setSelectedPage(0);\n            }}\n          />\n        </CardContent>\n      </Card>\n      {typeof processedData === 'string' && (\n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\">{processedData}</Typography>\n          </CardContent>\n        </Card>\n      )}\n      {typeof processedData === 'object' && (\n        <Card className={style.margined}>\n          <CardContent>\n            <Table ref={tableRef}>\n              {/* Setting column widths explicitly is important for the bond status chart to adapt its width */}\n              <colgroup>\n                <col style={{ width: '12%' }} />\n                <col style={{ width: '12%' }} />\n                <col style={{ width: '12%' }} />\n                <col style={{ width: '64%' }} />\n              </colgroup>\n              <TableHead className={style['table-head']}>\n                <TableRow>\n                  <TableCell>{interaction.agent_1}</TableCell>\n                  <TableCell>Hydrogen</TableCell>\n                  <TableCell>{interaction.agent_2}</TableCell>\n                  <TableCell>Bond status along trajectory</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {/* Create a row for each project in the payload*/}\n                {displayedBondGroups.map((bondGroup, b) => (\n                  <Fragment key={b}>\n                    {bondGroup.status.map((status, i) => (\n                      <TableRow key={i}>\n                        {/* agent 1 atom/s */}\n                        {bondGroup.agent1Labels[i] && (\n                          <TableCell\n                            rowSpan={\n                              bondGroup.status.length /\n                              bondGroup.agent1Labels.length\n                            }\n                          >\n                            {bondGroup.agent1Labels[i]}\n                          </TableCell>\n                        )}\n                        {/* hydrogen */}\n                        {bondGroup.hydrogenLabels[i] && (\n                          <TableCell\n                            rowSpan={\n                              bondGroup.status.length /\n                              bondGroup.hydrogenLabels.length\n                            }\n                            align={\n                              bondGroup.isAcceptorFromAgent1 ? 'right' : 'left'\n                            }\n                          >\n                            {bondGroup.hydrogenLabels[i]}\n                          </TableCell>\n                        )}\n                        {/* agent 2 atom */}\n                        {bondGroup.agent2Labels[i] && (\n                          <TableCell\n                            rowSpan={\n                              bondGroup.status.length /\n                              bondGroup.agent2Labels.length\n                            }\n                          >\n                            {bondGroup.agent2Labels[i]}\n                          </TableCell>\n                        )}\n                        {/* bond status */}\n                        <TableCell>\n                          <BondStatus\n                            status={bondGroup.status[i]}\n                            weights={weights}\n                            onClick={() => {\n                              const acceptor =\n                                bondGroup.acceptors[i] ||\n                                bondGroup.acceptors[0];\n                              const donor =\n                                bondGroup.donors[i] || bondGroup.donors[0];\n                              const hydrogen =\n                                bondGroup.hydrogens[i] ||\n                                bondGroup.hydrogens[0];\n                              setSelectedHB({\n                                selectedAtoms: [acceptor, donor],\n                                selectedDistances: [[acceptor, donor]],\n                                selectedAngles: [[acceptor, hydrogen, donor]],\n                              });\n                            }}\n                            className={style.status}\n                          />\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </Fragment>\n                ))}\n              </TableBody>\n              <TableFooter>\n                <TableRow>\n                  <TablePagination\n                    rowsPerPageOptions={rowsPerPageOptions} // Optional numbers of rows displayed in each page. It can be modified by the user.\n                    colSpan={4} // Set the anchor of columns which is taken as a reference for the horizontal position of the footer\n                    count={processedData.length} // Total number of rows\n                    rowsPerPage={selectedRowsPerPage} // The actual number of rows displayed\n                    page={selectedPage} // The actual page\n                    onPageChange={(_, page) => {\n                      setSelectedPage(page);\n                      // Scroll to the top of the table\n                      tableRef.current.scrollIntoView();\n                    }}\n                    onRowsPerPageChange={({ target: { value } }) => {\n                      setSelectedRowsPerPage(value);\n                      setSelectedPage(0);\n                    }}\n                  />\n                </TableRow>\n              </TableFooter>\n            </Table>\n          </CardContent>\n        </Card>\n      )}\n      <ViewerSpawner\n        // Set the new viewer or null if there is not a proper \"selected\" value\n        newViewer={\n          selectedHB\n            ? {\n                selectedAtoms: selectedHB.selectedAtoms,\n                selectedDistances: selectedHB.selectedDistances,\n                selectedAngles: selectedHB.selectedAngles,\n              }\n            : null\n        }\n        // If the nailed/closed viewer is the current viewer then reset the 'selected'\n        onNail={viewer =>\n          setSelectedHB(previous => {\n            if (previous && previous.selectedAtoms === viewer.selectedAtoms)\n              return null;\n            else return previous;\n          })\n        }\n        onClose={viewer => {\n          setSelectedHB(previous => {\n            if (previous && previous.selectedAtoms === viewer.selectedAtoms)\n              return null;\n            else return previous;\n          });\n        }}\n      />\n    </Suspense>\n  );\n};\n\nexport default Hbonds;\n","// extracted by mini-css-extract-plugin\nexport default {\"rnd\":\"style_rnd__Txifm\",\"floating-card\":\"style_floating-card__HHpby\"};","import React, { lazy, Suspense, useRef, useState } from 'react';\n\n// Rnd is the resizable and draggable system where the ngl viewer is placed\nimport { Rnd } from 'react-rnd';\n\nimport Card from '../animated-card';\n\nimport style from './style.module.css';\n\nconst ViewerWithControls = lazy(() =>\n  import(\n    /* webpackChunkName: 'viewer-with-controls' */ '../viewer-with-controls'\n  ),\n);\n\n// Minimal ngl window height\nconst MIN_NGL_DIMENSION = 150;\n\n// Counter to get always the maximum zIndex\n// This is useful to set a new or currently dragged/resized ngl window over the others\nlet maxZ = 0;\nconst nextZ = () => {\n  maxZ += 1;\n  return maxZ;\n};\n\n// This function spawns all the NGL viewers needed\n// i.e. one viewer with the requested 'props' and all previous viewers which have been nailed\nconst ViewerSpawner = ({ newViewer, nailing = true, onNail, onClose }) => {\n  // Store here all nailed NGL viewers\n  const [nailedViewers, setNailedViewers] = useState([]);\n\n  // Set the viewers as the nailed viewers and the new viewer\n  const viewers = [...nailedViewers];\n\n  // Keep listed all arrays which have been used (i.e. ngl viewers which have been nailed or closed)\n  const usedIds = useRef([]);\n\n  if (newViewer) {\n    // Find a new suitable Id that meet 2 conditions:\n    // - There is never 2 viewers with the same id, so we avoid errors\n    // - If we pick diferent frames in the graph without nailing anything, the current viewer has always the same id\n    // (This way the current viewer does not appear in the origin position every time)\n    const getNewId = () => {\n      let id = 0;\n      while (id < 999) {\n        if (usedIds.current.indexOf(id) === -1) return id;\n        id += 1;\n      }\n      console.error('Maximum number of viewers reached');\n    };\n\n    // Set a unique id for this props based in the last nailed viewer\n    newViewer.id = getNewId();\n    newViewer.close = () => {\n      if (nailing) {\n        setNailedViewers(nailed => {\n          const newNailed = [...nailed];\n          const index = nailed.indexOf(newViewer);\n          if (index !== -1) newNailed.splice(index, 1);\n          return newNailed;\n        });\n      }\n      if (onClose) onClose(newViewer);\n      usedIds.current.push(newViewer.id);\n    };\n    // If the nailer function is passed, add the logic for the viewer to be nailed further\n    if (nailing)\n      newViewer.nail = () => {\n        setNailedViewers(nailed => [...nailed, newViewer]);\n        if (onNail) onNail(newViewer);\n        usedIds.current.push(newViewer.id);\n      };\n    // Add the current viewer to the viewers list\n    viewers.push(newViewer);\n  }\n\n  // Render a viewer for each prop. Use the 'selected' parameter as unique id\n  return viewers.map(viewer => <NGLViewerInDND key={viewer.id} {...viewer} />);\n};\n\n// This component render a small NGL viewer\n// It is called when user clicks in a point in the projections component\n// Also it is called by the generic analysis page\nconst NGLViewerInDND = props => {\n  // Set a reference for the viewer\n  // If a reference is passed among the viewer arguments then use it instead\n  const viewerRef = props.viewerRef || useRef(null);\n\n  // Set the default position and size\n  const [place, setPlace] = useState(() => {\n    // Set an extra margin\n    const MARGIN = 20;\n    // Get the screen pixel sizes and vertical scroll position\n    const { innerWidth, innerHeight, scrollY } = window;\n    // The spawned elements are parented to the 'main' element, not to the 'body'\n    // We have to take this in count, since the header adds an extra offset in vertical position\n    const offsetHeight = document.querySelector('main').offsetTop;\n    // Set a reasonable dimension for the ngl window\n    const dimension = Math.max(\n      Math.min(innerWidth / 4, innerHeight / 4),\n      MIN_NGL_DIMENSION,\n    );\n    const reasonableHeight = 1.5 * dimension;\n    const reasonableWidth = 2 * dimension;\n    return {\n      // WARNING: If you set the width as 'auto' the window stays very wide when exiting fullscreen\n      width: reasonableWidth, // Let the Rnd logic set the width automatically\n      height: reasonableHeight, // Reasonable height\n      x: 0, // Left border\n      y: innerHeight - offsetHeight - reasonableHeight - MARGIN + scrollY, // Bottom border\n    };\n  });\n\n  return (\n    // Rnd is the draggable and resizable system where the ngl viewer is placed\n    <Rnd\n      position={{ x: place.x, y: place.y }}\n      size={{ width: place.width, height: place.height }}\n      // Update the zIndex to make this window the first visible\n      style={{ zIndex: nextZ() }}\n      className={style.rnd}\n      data-rnd\n      // Limits where the window can be dragged/resized to\n      // WARNING: bounds=\"main\" is problematic since the window may appear out of bounds\n      // WARNING: Then when it is moved for the first time it jumps inside the bonds, not elegant\n      bounds=\"window\"\n      // Prevent the mouse to drag/resize the window when it is over specific elements\n      cancel=\"canvas, [data-popover], #preventDragSize, .prevent-drag\"\n      // On drag/resize starts we do not change anything, but use the hook to re-render this component\n      // The Z Index is updated and the selected window becomes the first in the z axis automatically\n      // WARNING: Drag functions are also called when you just click (e.g. clicking buttons)\n      onDragStart={() => {\n        setPlace({ ...place });\n      }}\n      onResizeStart={() => {\n        setPlace({ ...place });\n      }}\n      onDragStop={(e, d) => {\n        // Use this to reject some bugged event calls: e.g. the frames number selector\n        if (e.layerX === 0 && e.layerY === 0) return;\n        // We re-render only if the new position does not equal the old position\n        if (place.x !== d.x || place.y !== d.y)\n          setPlace({\n            ...place,\n            x: d.x,\n            y: d.y,\n          });\n      }}\n      // Re-adapt the viewer and update the position/size when the window is resized\n      onResize={() => viewerRef.current && viewerRef.current.autoResize()}\n      onResizeStop={(e, direction, ref, delta, position) => {\n        setPlace({\n          width: ref.style.width,\n          height: ref.style.height,\n          ...position,\n        });\n        // if (!viewerRef.current) return;\n        // viewerRef.current.autoResize();\n        // viewerRef.current.autoResize.flush();\n      }}\n    >\n      <Card className={style['floating-card']} elevation={4}>\n        <Suspense fallback={null}>\n          <ViewerWithControls\n            className={style['floating-card']}\n            ref={viewerRef}\n            startsPlaying={false}\n            {...props}\n          />\n        </Suspense>\n      </Card>\n    </Rnd>\n  );\n};\n\nexport default ViewerSpawner;\n","import React, { useRef, useEffect, useState, memo } from 'react';\n\nimport { select, scaleBand, scaleOrdinal } from 'd3';\n\n// Set status colors\nconst activeBondColor = 'blue';\nconst brokenBondColor = '#f0f0f0';\n\n// Represent a single row of rects according to the status\n// The status is an array of true/false values\nconst BondStatus = memo(({ status, weights, onClick, className }) => {\n  // Set the reference to the element where the heatmap will be allocated\n  const containerRef = useRef(null);\n  // Save the previous chart reference so we can remove it before a new render\n  const previousCharts = useRef(null);\n  // Use a state as a workaround to force rerenders on window resize\n  const [, setCurrentWindow] = useState(null);\n  // The chart is assigned to a referenced 'div' which must be rendered first\n  // All this process is runned after the render\n  useEffect(() => {\n    // Reset the chart\n    // WARNING: For some reason, if this part is re-render the original render is not gone\n    // WARNING: We must reset the element manually or infinite elements are rendered and stacked\n    if (previousCharts.current)\n      previousCharts.current.forEach(chart => chart.remove());\n\n    // Get the current element where all this heatmap is placed\n    const container = containerRef.current;\n    // The first render, when there is no reference to the current element yet, we skip the process\n    const {\n      clientWidth: width,\n      clientHeight: height,\n    } = container.parentElement;\n\n    // Use canvas to display the heatmap blocks since d3 is not as efficient\n    // Canvas is set this way so we can access this specific element later\n    // WARNING: Using the 'document.getElementById' is risky since there may be more\n    // WARNING: e.g. the color legend\n    const canvasElement = document.createElement('CANVAS');\n    select(container)\n      .node()\n      .appendChild(canvasElement);\n    const canvas = select(canvasElement)\n      .attr('id', 'canvas')\n      .attr('width', width)\n      .attr('height', height)\n      .style('position', 'absolute')\n      //.style('top', offset.top + 'px')\n      //.style('left', offset.left + 'px')\n      .style('cursor', onClick ? 'pointer' : undefined);\n    const canvasContext = canvas\n      .node()\n      .getContext('2d' /*, {desynchronized: true}*/);\n\n    // append the svg object to the body of the page\n    const svg = select(container)\n      .append('svg')\n      .attr('id', 'svg')\n      .attr('viewBox', [0, 0, width, height]);\n\n    // Build X scales and axis:\n    if (weights) {\n      // const x = scaleOrdinal(weights)\n      //     .domain(status.map((s,i) => i))\n      //     .range([0, width]);\n\n      const x = scaleBand()\n        .range([0, width])\n        .domain([0, 1])\n        .paddingInner(0);\n\n      // Get the x Range in the d3/canvas available space\n      const minX = x(0);\n      const maxX = x(1);\n      const xRange = maxX - minX;\n\n      // Consider all the previous space to be splitted in the different weigths\n      const weigthsSum = weights.reduce((a, b) => a + b, 0);\n      const proportion = xRange / weigthsSum;\n\n      // Now place cells oneafter the other thus keeping the x offset position\n      let xOffset = 0;\n      status.forEach((stat, i) => {\n        const weigth = weights[i];\n        // DANI: El dibujo se quedaba a exactamente la mitad del espacio total, no entiendo por que\n        // DANI: El * 2 en el cellWidth arregla el problema\n        const cellWidth = weigth * proportion * 2;\n        const xPosition = xOffset;\n        const color = stat ? activeBondColor : brokenBondColor;\n        canvasContext.fillStyle = color;\n        canvasContext.fillRect(xPosition, 0, cellWidth, height);\n        xOffset += cellWidth;\n      });\n    } else {\n      const x = scaleBand()\n        .range([0, width])\n        .domain(status.map((s, i) => i))\n        .paddingInner(0);\n\n      // Get the width of each cell\n      const cellWidth = x.bandwidth();\n\n      // Display heatmap cells using canvas\n      status.forEach((stat, i) => {\n        const xPosition = x(i);\n        const color = stat ? activeBondColor : brokenBondColor;\n        canvasContext.fillStyle = color;\n        canvasContext.fillRect(xPosition, 0, cellWidth, height);\n      });\n    }\n    //console.log(x);\n\n    // Handle when a cell is clicked\n    if (onClick) {\n      canvasElement.onmousedown = () => {\n        // Call the on click function\n        onClick();\n      };\n    }\n\n    // Record all elements which must be removed manually when re-rendering\n    previousCharts.current = [svg, canvas];\n\n    const handleResize = () => {\n      setCurrentWindow({\n        innerWidth: window.innerWidth,\n        innerHeight: window.innerHeight,\n      });\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleaning function\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }); // This useEffect has no dependencies\n\n  // Finally, render the horizontal bar\n  return (\n    // It is important to specify a height value\n    // Otherwise canvas and svg may be not coordinated\n    <div\n      className={className}\n      style={className ? undefined : { height: '100px', width: '600px' }}\n    >\n      <div\n        ref={containerRef}\n        id={'container'}\n        // WARNING: This width 100% may seem redundant, but chrome needs it\n        style={{ position: 'relative', width: '100%', height: '100%' }}\n      />\n    </div>\n  );\n});\n\nexport default BondStatus;\n"],"names":["getTableFooterUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","TableFooterRoot","styled","name","overridesResolver","props","styles","root","display","tablelvl2","variant","defaultComponent","React","inProps","ref","useDefaultProps","className","component","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","_jsx","Tablelvl2Context","Provider","value","children","as","clsx","role","residueOptions","label","_ref","interactions","selectedInteraction","setSelectedInteraction","selectedResidues","setSelectedResidues","selectedOrder","handleToggleOrder","firstOrderLabel","firstOrderTooltip","secondOrderLabel","secondOrderTooltip","toggleOrderTooltip","interfaceOnly","currentInteraction","_jsxs","Suspense","fallback","Loading","Select","onChange","event","target","style","map","interaction","i","MenuItem","disabled","failed","RadioGroup","opt","FormControlLabel","control","Radio","color","undefined","_Fragment","TextField","title","agent_1","agent_2","IconButton","onClick","changeOrder","size","FontAwesomeIcon","icon","faExchangeAlt","KEYFRAMES","opacity","reducedMotion","transform","ANIMATION_OPTIONS","fill","easing","duration","forwardRef","overrideComponent","containerRef","useRef","useLayoutEffect","node","current","firstElementChild","animate","index","Array","from","document","querySelectorAll","findIndex","section","animation","delay","cancel","Component","Card","rowsPerPageOptions","Hbonds","accessionAndMdNumber","metadata","topology","topologyManager","populations","useContext","ProjectCtx","tableRef","useState","selectedPage","setSelectedPage","selectedRowsPerPage","setSelectedRowsPerPage","selectedHB","setSelectedHB","url","BASE_PATH_PROJECTS","loading","payload","error","useAPI","processedData","weights","useMemo","data","find","dataset","message","hbonds","length","bondCount","acceptorGroups","donorGroups","acceptor","acceptors","donor","donors","bond","hydrogen","hydrogens","status","acceptorGroup","push","donorGroup","groups","commons","Object","values","forEach","group","Set","bondSample","acceptorIndex","acceptorResidueIndex","getAtomByIndex","residueIndex","isAcceptorFromAgent1","indexOf","acceptorLabels","donorLabels","atoms","atomIndex","atom","residue","standardLabel","hydrogenLabels","atomName","agent1Labels","agent2Labels","stability","reduce","acc","cur","filter","v","sort","a","b","dataLength","frameStep","Math","round","mdFrames","weigthCount","Error","displayedBondGroups","firstBond","lastBond","slice","toString","CardContent","horizontal","Typography","InteractionSelector","margined","Table","width","TableHead","TableRow","TableCell","TableBody","bondGroup","Fragment","rowSpan","align","BondStatus","selectedAtoms","selectedDistances","selectedAngles","TableFooter","TablePagination","colSpan","count","rowsPerPage","page","onPageChange","_","scrollIntoView","onRowsPerPageChange","ViewerSpawner","newViewer","onNail","viewer","previous","onClose","ViewerWithControls","lazy","maxZ","NGLViewerInDND","viewerRef","place","setPlace","innerWidth","innerHeight","scrollY","window","offsetHeight","querySelector","offsetTop","dimension","max","min","reasonableHeight","height","x","y","Rnd","position","zIndex","bounds","onDragStart","onResizeStart","onDragStop","e","d","layerX","layerY","onResize","autoResize","onResizeStop","direction","delta","elevation","startsPlaying","nailing","nailedViewers","setNailedViewers","viewers","usedIds","getNewId","id","console","close","nailed","newNailed","splice","nail","activeBondColor","brokenBondColor","memo","previousCharts","setCurrentWindow","useEffect","chart","remove","container","clientWidth","clientHeight","parentElement","canvasElement","createElement","select","appendChild","canvas","attr","canvasContext","getContext","svg","append","scaleBand","range","domain","paddingInner","minX","proportion","xOffset","stat","cellWidth","xPosition","fillStyle","fillRect","s","bandwidth","onmousedown","handleResize","addEventListener","removeEventListener"],"sourceRoot":""}