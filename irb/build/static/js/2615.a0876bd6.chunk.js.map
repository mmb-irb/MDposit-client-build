{"version":3,"file":"static/js/2615.a0876bd6.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/animated-card/style.module.css?d4d9","components/animated-card/index.js","webpack://mdposit/./src/components/interaction-selector/style.module.css?5392","components/interaction-selector/index.js","webpack://mdposit/./src/components/viewer-spawner/style.module.css?df6e","components/viewer-spawner/index.js","pages/accession/hbonds/bond-status/index.js","pages/accession/hbonds/index.js","../node_modules/@mui/material/TableFooter/tableFooterClasses.js","../node_modules/@mui/material/TableFooter/TableFooter.js","webpack://mdposit/./src/pages/accession/hbonds/style.module.css?75f0"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__M9GCG\"};","import React, { useLayoutEffect, useRef, forwardRef } from 'react';\nimport { Card } from '@mui/material';\n\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nconst KEYFRAMES = { opacity: [0, 1] };\n\nif (!reducedMotion()) {\n  KEYFRAMES.transform = ['translateY(50px)', 'translateY(0)'];\n}\n\nconst ANIMATION_OPTIONS = {\n  fill: 'both',\n  easing: 'cubic-bezier(0, .99, .56, 1.1)',\n  duration: 500,\n};\n\n// Make the card appear and slide softly from down to up when the page is loaded\nconst AnimatedCard = forwardRef(({ overrideComponent, ...props }, ref) => {\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const node = containerRef.current && containerRef.current.firstElementChild;\n    if (!(node && node.animate)) return;\n\n    const index = Array.from(\n      document.querySelectorAll('main section'),\n    ).findIndex(section => node === section);\n\n    const animation = node.animate(KEYFRAMES, {\n      ...ANIMATION_OPTIONS,\n      delay: index * 150,\n    });\n\n    return () => animation.cancel();\n  }, []);\n\n  const Component = overrideComponent ? 'section' : Card;\n\n  return (\n    <div ref={containerRef} className={style.container}>\n      <Component component=\"section\" {...props} ref={ref} />\n    </div>\n  );\n});\n\nexport default AnimatedCard;\n","// extracted by mini-css-extract-plugin\nexport default {\"horizontal\":\"style_horizontal__2DIWx\",\"horizontal-margined\":\"style_horizontal-margined__e9fQR\"};","import React, { Suspense } from 'react';\n\nimport {\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Select,\n  MenuItem,\n  TextField,\n  IconButton,\n} from '@mui/material';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport Loading from '../loading';\n\nimport style from './style.module.css';\n\nconst residueOptions = [\n  { label: 'All residues', value: 'residue_indices' },\n  { label: 'Interface residues', value: 'interface_indices' },\n];\n\n// Render a panel which allows to select the desired interaction\n// If the user selects a new interaction then the 'setSelectedInteraction' is set as its index\n// Interactions have the following structure:\n// { name: string, label: string, ... }\n// The 'label' field will replace the 'name' in the selector labels if exists\n// When 'selectedResidues' is passed, render also tools to select interaction residues\n// Residue options are 'all' or 'interface' residues\n// DANI: La guinda sería un 'custom' en las opciones de residuos\n// DANI: La idea sería desplegar dos residue selectors, uno para cada interaction agent\nconst InteractionSelector = ({\n  interactions,\n  selectedInteraction,\n  setSelectedInteraction,\n  selectedResidues,\n  setSelectedResidues,\n  selectedOrder,\n  handleToggleOrder,\n  firstOrderLabel, // The label to be represented over the first order rectangle\n  firstOrderTooltip, // The tooltip to be shown for the first order rectangle\n  secondOrderLabel, // The label to be represented over the second order rectangle\n  secondOrderTooltip, // The tooltip to be shown for the second order rectangle\n  toggleOrderTooltip, // The tooltip to be shown for the toggle order button\n  interfaceOnly = false, // Set if the 'All residues' button is enabled\n}) => {\n  const changeInteraction = event => {\n    setSelectedInteraction(event.target.value);\n  };\n\n  const changeResidues = event => {\n    setSelectedResidues(event.target.value);\n  };\n\n  const changeOrder = () => {\n    handleToggleOrder();\n  };\n\n  const currentInteraction = interactions[selectedInteraction];\n\n  // Render\n  return (\n    <Suspense fallback={<Loading />}>\n      <Select\n        value={selectedInteraction}\n        onChange={changeInteraction}\n        className={style['horizontal-margined']}\n      >\n        {interactions.map((interaction, i) => (\n          <MenuItem key={i} value={i} disabled={interaction.failed}>\n            {interaction.label || interaction.name}\n          </MenuItem>\n        ))}\n      </Select>\n      {selectedResidues && (\n        <RadioGroup\n          value={selectedResidues}\n          onChange={changeResidues}\n          className={style.horizontal}\n        >\n          {residueOptions.map((opt, i) => (\n            <FormControlLabel\n              key={i}\n              value={opt.value}\n              control={<Radio color=\"primary\" />}\n              label={opt.label}\n              disabled={opt.label === 'All residues' && interfaceOnly}\n            />\n          ))}\n        </RadioGroup>\n      )}\n      {selectedOrder !== undefined && (\n        <>\n          <TextField\n            //margin=\"dense\"\n            label={firstOrderLabel}\n            title={firstOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_1\n                : currentInteraction.agent_2\n            }\n          />\n          <IconButton\n            title={toggleOrderTooltip}\n            onClick={changeOrder}\n            size=\"large\"\n          >\n            <FontAwesomeIcon icon={faExchangeAlt} />\n          </IconButton>\n          <TextField\n            //margin=\"dense\"\n            label={secondOrderLabel}\n            title={secondOrderTooltip}\n            value={\n              selectedOrder\n                ? currentInteraction.agent_2\n                : currentInteraction.agent_1\n            }\n          />\n        </>\n      )}\n    </Suspense>\n  );\n};\n\nexport default InteractionSelector;\n","// extracted by mini-css-extract-plugin\nexport default {\"rnd\":\"style_rnd__Txifm\",\"floating-card\":\"style_floating-card__HHpby\"};","import React, { lazy, Suspense, useRef, useState } from 'react';\n\n// Rnd is the resizable and draggable system where the ngl viewer is placed\nimport { Rnd } from 'react-rnd';\n\nimport Card from '../animated-card';\n\nimport style from './style.module.css';\n\nconst ViewerWithControls = lazy(() =>\n  import(\n    /* webpackChunkName: 'viewer-with-controls' */ '../viewer-with-controls'\n  ),\n);\n\n// Minimal ngl window height\nconst MIN_NGL_DIMENSION = 150;\n\n// Counter to get always the maximum zIndex\n// This is useful to set a new or currently dragged/resized ngl window over the others\nlet maxZ = 0;\nconst nextZ = () => {\n  maxZ += 1;\n  return maxZ;\n};\n\n// This function spawns all the NGL viewers needed\n// i.e. one viewer with the requested 'props' and all previous viewers which have been nailed\nconst ViewerSpawner = ({ newViewer, nailing = true, onNail, onClose }) => {\n  // Store here all nailed NGL viewers\n  const [nailedViewers, setNailedViewers] = useState([]);\n\n  // Set the viewers as the nailed viewers and the new viewer\n  const viewers = [...nailedViewers];\n\n  // Keep listed all arrays which have been used (i.e. ngl viewers which have been nailed or closed)\n  const usedIds = useRef([]);\n\n  if (newViewer) {\n    // Find a new suitable Id that meet 2 conditions:\n    // - There is never 2 viewers with the same id, so we avoid errors\n    // - If we pick diferent frames in the graph without nailing anything, the current viewer has always the same id\n    // (This way the current viewer does not appear in the origin position every time)\n    const getNewId = () => {\n      let id = 0;\n      while (id < 999) {\n        if (usedIds.current.indexOf(id) === -1) return id;\n        id += 1;\n      }\n      console.error('Maximum number of viewers reached');\n    };\n\n    // Set a unique id for this props based in the last nailed viewer\n    newViewer.id = getNewId();\n    newViewer.close = () => {\n      if (nailing) {\n        setNailedViewers(nailed => {\n          const newNailed = [...nailed];\n          const index = nailed.indexOf(newViewer);\n          if (index !== -1) newNailed.splice(index, 1);\n          return newNailed;\n        });\n      }\n      if (onClose) onClose(newViewer);\n      usedIds.current.push(newViewer.id);\n    };\n    // If the nailer function is passed, add the logic for the viewer to be nailed further\n    if (nailing)\n      newViewer.nail = () => {\n        setNailedViewers(nailed => [...nailed, newViewer]);\n        if (onNail) onNail(newViewer);\n        usedIds.current.push(newViewer.id);\n      };\n    // Add the current viewer to the viewers list\n    viewers.push(newViewer);\n  }\n\n  // Render a viewer for each prop. Use the 'selected' parameter as unique id\n  return viewers.map(viewer => <NGLViewerInDND key={viewer.id} {...viewer} />);\n};\n\n// This component render a small NGL viewer\n// It is called when user clicks in a point in the projections component\n// Also it is called by the generic analysis page\nconst NGLViewerInDND = props => {\n  // Set a reference for the viewer\n  // If a reference is passed among the viewer arguments then use it instead\n  const viewerRef = props.viewerRef || useRef(null);\n\n  // Set the default position and size\n  const [place, setPlace] = useState(() => {\n    // Set an extra margin\n    const MARGIN = 20;\n    // Get the screen pixel sizes and vertical scroll position\n    const { innerWidth, innerHeight, scrollY } = window;\n    // The spawned elements are parented to the 'main' element, not to the 'body'\n    // We have to take this in count, since the header adds an extra offset in vertical position\n    const offsetHeight = document.querySelector('main').offsetTop;\n    // Set a reasonable dimension for the ngl window\n    const dimension = Math.max(\n      Math.min(innerWidth / 4, innerHeight / 4),\n      MIN_NGL_DIMENSION,\n    );\n    const reasonableHeight = 1.5 * dimension;\n    const reasonableWidth = 2 * dimension;\n    return {\n      // WARNING: If you set the width as 'auto' the window stays very wide when exiting fullscreen\n      width: reasonableWidth, // Let the Rnd logic set the width automatically\n      height: reasonableHeight, // Reasonable height\n      x: 0, // Left border\n      y: innerHeight - offsetHeight - reasonableHeight - MARGIN + scrollY, // Bottom border\n    };\n  });\n\n  return (\n    // Rnd is the draggable and resizable system where the ngl viewer is placed\n    <Rnd\n      position={{ x: place.x, y: place.y }}\n      size={{ width: place.width, height: place.height }}\n      // Update the zIndex to make this window the first visible\n      style={{ zIndex: nextZ() }}\n      className={style.rnd}\n      data-rnd\n      // Limits where the window can be dragged/resized to\n      // WARNING: bounds=\"main\" is problematic since the window may appear out of bounds\n      // WARNING: Then when it is moved for the first time it jumps inside the bonds, not elegant\n      bounds=\"window\"\n      // Prevent the mouse to drag/resize the window when it is over specific elements\n      cancel=\"canvas, [data-popover], #preventDragSize, .prevent-drag\"\n      // On drag/resize starts we do not change anything, but use the hook to re-render this component\n      // The Z Index is updated and the selected window becomes the first in the z axis automatically\n      // WARNING: Drag functions are also called when you just click (e.g. clicking buttons)\n      onDragStart={() => {\n        setPlace({ ...place });\n      }}\n      onResizeStart={() => {\n        setPlace({ ...place });\n      }}\n      onDragStop={(e, d) => {\n        // Use this to reject some bugged event calls: e.g. the frames number selector\n        if (e.layerX === 0 && e.layerY === 0) return;\n        // We re-render only if the new position does not equal the old position\n        if (place.x !== d.x || place.y !== d.y)\n          setPlace({\n            ...place,\n            x: d.x,\n            y: d.y,\n          });\n      }}\n      // Re-adapt the viewer and update the position/size when the window is resized\n      onResize={() => viewerRef.current && viewerRef.current.autoResize()}\n      onResizeStop={(e, direction, ref, delta, position) => {\n        setPlace({\n          width: ref.style.width,\n          height: ref.style.height,\n          ...position,\n        });\n        // if (!viewerRef.current) return;\n        // viewerRef.current.autoResize();\n        // viewerRef.current.autoResize.flush();\n      }}\n    >\n      <Card className={style['floating-card']} elevation={4}>\n        <Suspense fallback={null}>\n          <ViewerWithControls\n            className={style['floating-card']}\n            ref={viewerRef}\n            startsPlaying={false}\n            {...props}\n          />\n        </Suspense>\n      </Card>\n    </Rnd>\n  );\n};\n\nexport default ViewerSpawner;\n","import React, { useRef, useEffect, useState, memo } from 'react';\n\nimport { select, scaleBand, scaleOrdinal } from 'd3';\n\n// Set status colors\nconst activeBondColor = 'blue';\nconst brokenBondColor = '#f0f0f0';\n\n// Represent a single row of rects according to the status\n// The status is an array of true/false values\nconst BondStatus = memo(({ status, weights, onClick, className }) => {\n  // Set the reference to the element where the heatmap will be allocated\n  const containerRef = useRef(null);\n  // Save the previous chart reference so we can remove it before a new render\n  const previousCharts = useRef(null);\n  // Use a state as a workaround to force rerenders on window resize\n  const [, setCurrentWindow] = useState(null);\n  // The chart is assigned to a referenced 'div' which must be rendered first\n  // All this process is runned after the render\n  useEffect(() => {\n    // Reset the chart\n    // WARNING: For some reason, if this part is re-render the original render is not gone\n    // WARNING: We must reset the element manually or infinite elements are rendered and stacked\n    if (previousCharts.current)\n      previousCharts.current.forEach(chart => chart.remove());\n\n    // Get the current element where all this heatmap is placed\n    const container = containerRef.current;\n    // The first render, when there is no reference to the current element yet, we skip the process\n    const {\n      clientWidth: width,\n      clientHeight: height,\n    } = container.parentElement;\n\n    // Use canvas to display the heatmap blocks since d3 is not as efficient\n    // Canvas is set this way so we can access this specific element later\n    // WARNING: Using the 'document.getElementById' is risky since there may be more\n    // WARNING: e.g. the color legend\n    const canvasElement = document.createElement('CANVAS');\n    select(container)\n      .node()\n      .appendChild(canvasElement);\n    const canvas = select(canvasElement)\n      .attr('id', 'canvas')\n      .attr('width', width)\n      .attr('height', height)\n      .style('position', 'absolute')\n      //.style('top', offset.top + 'px')\n      //.style('left', offset.left + 'px')\n      .style('cursor', onClick ? 'pointer' : undefined);\n    const canvasContext = canvas\n      .node()\n      .getContext('2d' /*, {desynchronized: true}*/);\n\n    // append the svg object to the body of the page\n    const svg = select(container)\n      .append('svg')\n      .attr('id', 'svg')\n      .attr('viewBox', [0, 0, width, height]);\n\n    // Build X scales and axis:\n    if (weights) {\n      // const x = scaleOrdinal(weights)\n      //     .domain(status.map((s,i) => i))\n      //     .range([0, width]);\n\n      const x = scaleBand()\n        .range([0, width])\n        .domain([0, 1])\n        .paddingInner(0);\n\n      // Get the x Range in the d3/canvas available space\n      const minX = x(0);\n      const maxX = x(1);\n      const xRange = maxX - minX;\n\n      // Consider all the previous space to be splitted in the different weigths\n      const weigthsSum = weights.reduce((a, b) => a + b, 0);\n      const proportion = xRange / weigthsSum;\n\n      // Now place cells oneafter the other thus keeping the x offset position\n      let xOffset = 0;\n      status.forEach((stat, i) => {\n        const weigth = weights[i];\n        // DANI: El dibujo se quedaba a exactamente la mitad del espacio total, no entiendo por que\n        // DANI: El * 2 en el cellWidth arregla el problema\n        const cellWidth = weigth * proportion * 2;\n        const xPosition = xOffset;\n        const color = stat ? activeBondColor : brokenBondColor;\n        canvasContext.fillStyle = color;\n        canvasContext.fillRect(xPosition, 0, cellWidth, height);\n        xOffset += cellWidth;\n      });\n    } else {\n      const x = scaleBand()\n        .range([0, width])\n        .domain(status.map((s, i) => i))\n        .paddingInner(0);\n\n      // Get the width of each cell\n      const cellWidth = x.bandwidth();\n\n      // Display heatmap cells using canvas\n      status.forEach((stat, i) => {\n        const xPosition = x(i);\n        const color = stat ? activeBondColor : brokenBondColor;\n        canvasContext.fillStyle = color;\n        canvasContext.fillRect(xPosition, 0, cellWidth, height);\n      });\n    }\n    //console.log(x);\n\n    // Handle when a cell is clicked\n    if (onClick) {\n      canvasElement.onmousedown = () => {\n        // Call the on click function\n        onClick();\n      };\n    }\n\n    // Record all elements which must be removed manually when re-rendering\n    previousCharts.current = [svg, canvas];\n\n    const handleResize = () => {\n      setCurrentWindow({\n        innerWidth: window.innerWidth,\n        innerHeight: window.innerHeight,\n      });\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleaning function\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }); // This useEffect has no dependencies\n\n  // Finally, render the horizontal bar\n  return (\n    // It is important to specify a height value\n    // Otherwise canvas and svg may be not coordinated\n    <div\n      className={className}\n      style={className ? undefined : { height: '100px', width: '600px' }}\n    >\n      <div\n        ref={containerRef}\n        id={'container'}\n        // WARNING: This width 100% may seem redundant, but chrome needs it\n        style={{ position: 'relative', width: '100%', height: '100%' }}\n      />\n    </div>\n  );\n});\n\nexport default BondStatus;\n","import React, {\n  Suspense,\n  useContext,\n  useState,\n  useMemo,\n  Fragment,\n  useRef,\n} from 'react';\n\nimport {\n  CardContent,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TablePagination,\n  TableFooter,\n  Typography,\n} from '@mui/material';\n\nimport Card from '../../../components/animated-card';\nimport Loading from '../../../components/loading';\nimport BondStatus from './bond-status';\nimport ViewerSpawner from '../../../components/viewer-spawner';\n\nimport useAPI from '../../../hooks/use-api';\n\nimport { ProjectCtx } from '../../../contexts';\n\nimport { BASE_PATH_PROJECTS } from '../../../utils/constants';\n\nimport InteractionSelector from '../../../components/interaction-selector';\n\nimport style from './style.module.css';\n\n// Define non-changing props used by the table footer\nconst rowsPerPageDefault = 25;\nconst rowsPerPageOptions = [10, 25, 50, 100];\n\nconst Hbonds = () => {\n  // Get the current project data\n  const {\n    accessionAndMdNumber,\n    metadata,\n    topology: topologyManager,\n    interactions,\n    populations,\n  } = useContext(ProjectCtx);\n\n  // Set a reference to the table element so we can scroll to it\n  const tableRef = useRef();\n\n  // The interaction to be displayed\n  const [selectedInteraction, setSelectedInteraction] = useState(0);\n\n  // The newest format has 4 fields: acceptors, donors, hydrogens and hbonds\n  // The hbonds includes arrays of true and false per frame\n  const interaction = interactions && interactions[selectedInteraction];\n\n  // Table pagination states\n  const [selectedPage, setSelectedPage] = useState(0);\n  const [selectedRowsPerPage, setSelectedRowsPerPage] = useState(\n    rowsPerPageDefault,\n  );\n\n  // The hydrogen bond bar which the mouse has clicked\n  const [selectedHB, setSelectedHB] = useState(null);\n\n  // Set the API url for the heatmap data\n  const url = `${BASE_PATH_PROJECTS}/${accessionAndMdNumber}/analyses/hbonds/`;\n\n  // Send a request to the API with the url of the specific analysis\n  const { loading, payload, error } = useAPI(url);\n\n  // Set the processed data which will be displayed\n  const { processedData, weights } = useMemo(() => {\n    // Return here if there is no payload or topology\n    if (!payload || !topologyManager || (populations && populations.loading))\n      return {};\n\n    // Get the data whose name matches the interaction name\n    // The newest format has 4 fields: acceptors, donors, hydrogens and hbonds\n    // The hbonds includes arrays of true and false per frame\n    const data = payload.data.find(dataset => {\n      return dataset.name === interaction.name;\n    });\n    if (!data)\n      return {\n        message: `Dataset for the interaction \"${interaction.name}\" not found`,\n      };\n\n    // If data is empty it means no hydrogen bonds where found for this interaction\n    if (data.hbonds.length === 0)\n      return { message: 'No hydrogen bonds were found for this interaction' };\n\n    // Get the number of bonds\n    const bondCount = data.hbonds.length;\n\n    // Group bonds with a common acceptor and then group bonds with a common donor\n    const acceptorGroups = {};\n    const donorGroups = {};\n    for (let i = 0; i < bondCount; i++) {\n      // Set the bond object\n      const acceptor = data.acceptors[i];\n      const donor = data.donors[i];\n      const hydrogen = data.hydrogens[i];\n      const status = data.hbonds[i];\n      const bond = { acceptor, donor, hydrogen, status };\n      // Add current bond to its corresponding acceptor group\n      const acceptorGroup = acceptorGroups[acceptor];\n      if (acceptorGroup) acceptorGroup.push(bond);\n      else acceptorGroups[acceptor] = [bond];\n      // Add current bond to its corresponding donor group\n      const donorGroup = donorGroups[donor];\n      if (donorGroup) donorGroup.push(bond);\n      else donorGroups[donor] = [bond];\n    }\n\n    // Join all groups together discarding redundant groups\n    const groups = [];\n    const commons = [];\n    // Join unique acceptor groups\n    // Unique acceptor groups are those which have bonds with more than one different donor\n    Object.values(acceptorGroups).forEach(group => {\n      const donors = group.map(bond => bond.donor);\n      const uniqueDonors = new Set(donors);\n      if (uniqueDonors.size > 1) groups.push(group);\n      // Otherwise, add the group to the common groups list\n      else commons.push(group);\n    });\n    // Join unique donor groups\n    // Unique donor groups are those which have bonds with more than one different acceptor\n    Object.values(donorGroups).forEach(group => {\n      const acceptors = group.map(bond => bond.acceptor);\n      const uniqueAcceptors = new Set(acceptors);\n      if (uniqueAcceptors.size > 1) groups.push(group);\n      // WARNING: There is no need to add common groups to the list now\n      // They can only be repeater or redundant\n      // Repeated ones will be already in the list\n      // Redundant ones are discardes so we are not intereseted\n    });\n    // Common groups are thouse who have both an unique acceptor and an unique donor\n    // They will always be repeated or redundant (already included in bigger groups)\n    // If they are redundant then we are done\n    // Otherwise it means they are repeated so we only have to add it once to the list\n    commons.forEach(group => {\n      // Check if one of its bonds is included in any group already\n      const bondSample = group[0];\n      for (const group of groups) {\n        for (const bond of group) {\n          // In case the acceptor (or the donnor) matches is enought to discard the whole group\n          if (bond.acceptor === bondSample.acceptor) return;\n        }\n      }\n      // In case no coincidence was found we include the bond\n      groups.push(group);\n    });\n\n    // Sum up the groups in the list of atoms and status\n    // When all acceptors/donors/hydrogens are the same atom leave an unique value in the list\n    const processedData = groups.map(group => {\n      let acceptors = group.map(bond => bond.acceptor);\n      const uniqueAcceptors = new Set(acceptors);\n      if (uniqueAcceptors.size === 1) acceptors = [acceptors[0]];\n      let donors = group.map(bond => bond.donor);\n      const uniqueDonors = new Set(donors);\n      if (uniqueDonors.size === 1) donors = [donors[0]];\n      let hydrogens = group.map(bond => bond.hydrogen);\n      const uniqueHydrogens = new Set(hydrogens);\n      if (uniqueHydrogens.size === 1) hydrogens = [hydrogens[0]];\n      const status = group.map(bond => bond.status);\n      return { acceptors, donors, hydrogens, status };\n    });\n\n    // Find out for each group which atoms (acceptors or donnors) belong to each interacting agent\n    // Then set the labels to be displayed in the corresponding agent 1 and 2 sections in the table\n    processedData.forEach(group => {\n      // Find out which agent does the acceptors belong to\n      const acceptorIndex = group.acceptors[0];\n      const acceptorAtom = topologyManager.getAtomByIndex(acceptorIndex);\n      const acceptorResidueIndex = acceptorAtom.residueIndex;\n      const isAcceptorFromAgent1 =\n        interaction['interface_indices_1'].indexOf(acceptorResidueIndex) !== -1;\n      group.isAcceptorFromAgent1 = isAcceptorFromAgent1;\n      // Set the acceptor, donor and hydrogen labels to be displayed in the table\n      const [acceptorLabels, donorLabels] = [group.acceptors, group.donors].map(\n        atoms =>\n          atoms.map(atomIndex => {\n            const atom = topologyManager.getAtomByIndex(atomIndex);\n            return `${atom.residue.standardLabel}.${atom.name}`;\n          }),\n      );\n      const hydrogenLabels = group.hydrogens.map(atomIndex => {\n        const atom = topologyManager.getAtomByIndex(atomIndex);\n        let atomName = atom.name;\n        if (isAcceptorFromAgent1) atomName = atomName + ' —';\n        else atomName = '— ' + atomName;\n        return atomName;\n      });\n      group.hydrogenLabels = hydrogenLabels;\n      // Now set the agent 1 and 2 labels\n      if (isAcceptorFromAgent1) {\n        group.agent1Labels = acceptorLabels;\n        group.agent2Labels = donorLabels;\n      } else {\n        group.agent1Labels = donorLabels;\n        group.agent2Labels = acceptorLabels;\n      }\n      // Set the group score according to the stability of all its bonds together\n      // This value is then used to sort groups\n      const stability = group.status.reduce(\n        (acc, cur) => (acc += cur.filter(v => v === true).length),\n        0,\n      );\n      group.stability = stability;\n    });\n\n    // Sort bond groups by status (all status added together)\n    processedData.sort((a, b) => b.stability - a.stability);\n\n    // Calculate the frame step for recorded hydrogen bonds\n    const dataLength = data.hbonds[0].length;\n    const frameStep = Math.round(metadata.mdFrames / (dataLength - 1));\n    // Set the weigths in order to resize bonds bandwidth accordingly\n    let weights;\n    if (populations && populations.payload) {\n      // Get the weights for each data value corresponding frame\n      weights = [];\n      for (let i = 0; i < populations.payload.length; i += frameStep) {\n        weights.push(populations.payload[i]);\n      }\n      // Check weights and data to match in the number of values\n      const weigthCount = weights.length;\n      if (dataLength !== weigthCount)\n        throw new Error(\n          `Data values count (${dataLength}) does not match the weigths values count (${weigthCount})`,\n        );\n      // // Normalize weights\n      // // Find the minimum and maximum values in the weights array\n      // // NEVER FORGET: do not use Math.min and Math.max for long arrays\n      // const minimum = weights.reduce((cv, nv) => { return Math.min(cv, nv) }, Infinity);\n      // const maximum = weights.reduce((cv, nv) => { return Math.max(cv, nv) }, -Infinity);\n      // // Set the normalized minimum and maximum radius values\n      // // This in the graph is equivalent to 'times the default area'\n      // const normalizedMinimum = 1;\n      // const normalizedMaximum = 10;\n      // // Set a function to interpolate values\n      // const normalizer = (normalizedMaximum - normalizedMinimum) / (maximum - minimum)\n      // const interpolate = weight => normalizedMinimum + (weight - minimum) * normalizer;\n      // // Recalculate weights using the minimum values (equal to 1) as reference\n      // weights = weights.map(weight => interpolate(weight));\n    }\n    return { processedData, weights };\n  }, [payload, metadata, topologyManager, interaction, populations]);\n\n  // Set all bonds to be displayed according to the current page and the number of bonds per page\n  const displayedBondGroups = useMemo(() => {\n    if (!processedData) return;\n    const firstBond = selectedPage * selectedRowsPerPage;\n    const lastBond = (selectedPage + 1) * selectedRowsPerPage;\n    return processedData.slice(firstBond, lastBond);\n  }, [processedData, selectedPage, selectedRowsPerPage]);\n\n  // Render loading or error messages according with the API response\n  if (loading || (populations && populations.loading)) return <Loading />;\n  else if (error) return error.toString();\n  else if (populations && populations.error)\n    return populations.error.toString();\n  else if (!payload) return 'Something bad happened with the analysis data';\n  else if (populations && !populations.payload)\n    return 'Something bad happened with populations data';\n\n  if (!topologyManager) return <Loading />;\n\n  // Render\n  return (\n    <Suspense fallback={<Loading />}>\n      <Card>\n        <CardContent className={style.horizontal}>\n          <Typography variant=\"h6\">Interaction:</Typography>\n          <InteractionSelector\n            interactions={interactions}\n            selectedInteraction={selectedInteraction}\n            setSelectedInteraction={interaction => {\n              setSelectedInteraction(interaction);\n              setSelectedPage(0);\n            }}\n          />\n        </CardContent>\n      </Card>\n      {typeof processedData === 'string' && (\n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\">{processedData}</Typography>\n          </CardContent>\n        </Card>\n      )}\n      {typeof processedData === 'object' && (\n        <Card className={style.margined}>\n          <CardContent>\n            <Table ref={tableRef}>\n              {/* Setting column widths explicitly is important for the bond status chart to adapt its width */}\n              <colgroup>\n                <col style={{ width: '12%' }} />\n                <col style={{ width: '12%' }} />\n                <col style={{ width: '12%' }} />\n                <col style={{ width: '64%' }} />\n              </colgroup>\n              <TableHead className={style['table-head']}>\n                <TableRow>\n                  <TableCell>{interaction.agent_1}</TableCell>\n                  <TableCell>Hydrogen</TableCell>\n                  <TableCell>{interaction.agent_2}</TableCell>\n                  <TableCell>Bond status along trajectory</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {/* Create a row for each project in the payload*/}\n                {displayedBondGroups.map((bondGroup, b) => (\n                  <Fragment key={b}>\n                    {bondGroup.status.map((status, i) => (\n                      <TableRow key={i}>\n                        {/* agent 1 atom/s */}\n                        {bondGroup.agent1Labels[i] && (\n                          <TableCell\n                            rowSpan={\n                              bondGroup.status.length /\n                              bondGroup.agent1Labels.length\n                            }\n                          >\n                            {bondGroup.agent1Labels[i]}\n                          </TableCell>\n                        )}\n                        {/* hydrogen */}\n                        {bondGroup.hydrogenLabels[i] && (\n                          <TableCell\n                            rowSpan={\n                              bondGroup.status.length /\n                              bondGroup.hydrogenLabels.length\n                            }\n                            align={\n                              bondGroup.isAcceptorFromAgent1 ? 'right' : 'left'\n                            }\n                          >\n                            {bondGroup.hydrogenLabels[i]}\n                          </TableCell>\n                        )}\n                        {/* agent 2 atom */}\n                        {bondGroup.agent2Labels[i] && (\n                          <TableCell\n                            rowSpan={\n                              bondGroup.status.length /\n                              bondGroup.agent2Labels.length\n                            }\n                          >\n                            {bondGroup.agent2Labels[i]}\n                          </TableCell>\n                        )}\n                        {/* bond status */}\n                        <TableCell>\n                          <BondStatus\n                            status={bondGroup.status[i]}\n                            weights={weights}\n                            onClick={() => {\n                              const acceptor =\n                                bondGroup.acceptors[i] ||\n                                bondGroup.acceptors[0];\n                              const donor =\n                                bondGroup.donors[i] || bondGroup.donors[0];\n                              const hydrogen =\n                                bondGroup.hydrogens[i] ||\n                                bondGroup.hydrogens[0];\n                              setSelectedHB({\n                                selectedAtoms: [acceptor, donor],\n                                selectedDistances: [[acceptor, donor]],\n                                selectedAngles: [[acceptor, hydrogen, donor]],\n                              });\n                            }}\n                            className={style.status}\n                          />\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </Fragment>\n                ))}\n              </TableBody>\n              <TableFooter>\n                <TableRow>\n                  <TablePagination\n                    rowsPerPageOptions={rowsPerPageOptions} // Optional numbers of rows displayed in each page. It can be modified by the user.\n                    colSpan={4} // Set the anchor of columns which is taken as a reference for the horizontal position of the footer\n                    count={processedData.length} // Total number of rows\n                    rowsPerPage={selectedRowsPerPage} // The actual number of rows displayed\n                    page={selectedPage} // The actual page\n                    onPageChange={(_, page) => {\n                      setSelectedPage(page);\n                      // Scroll to the top of the table\n                      tableRef.current.scrollIntoView();\n                    }}\n                    onRowsPerPageChange={({ target: { value } }) => {\n                      setSelectedRowsPerPage(value);\n                      setSelectedPage(0);\n                    }}\n                  />\n                </TableRow>\n              </TableFooter>\n            </Table>\n          </CardContent>\n        </Card>\n      )}\n      <ViewerSpawner\n        // Set the new viewer or null if there is not a proper \"selected\" value\n        newViewer={\n          selectedHB\n            ? {\n                selectedAtoms: selectedHB.selectedAtoms,\n                selectedDistances: selectedHB.selectedDistances,\n                selectedAngles: selectedHB.selectedAngles,\n              }\n            : null\n        }\n        // If the nailed/closed viewer is the current viewer then reset the 'selected'\n        onNail={viewer =>\n          setSelectedHB(previous => {\n            if (previous && previous.selectedAtoms === viewer.selectedAtoms)\n              return null;\n            else return previous;\n          })\n        }\n        onClose={viewer => {\n          setSelectedHB(previous => {\n            if (previous && previous.selectedAtoms === viewer.selectedAtoms)\n              return null;\n            else return previous;\n          });\n        }}\n      />\n    </Suspense>\n  );\n};\n\nexport default Hbonds;\n","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableFooterUtilityClass(slot) {\n  return generateUtilityClass('MuiTableFooter', slot);\n}\nconst tableFooterClasses = generateUtilityClasses('MuiTableFooter', ['root']);\nexport default tableFooterClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled from '../styles/styled';\nimport { getTableFooterUtilityClass } from './tableFooterClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTableFooterUtilityClass, classes);\n};\nconst TableFooterRoot = styled('tfoot', {\n  name: 'MuiTableFooter',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  display: 'table-footer-group'\n});\nconst tablelvl2 = {\n  variant: 'footer'\n};\nconst defaultComponent = 'tfoot';\nconst TableFooter = /*#__PURE__*/React.forwardRef(function TableFooter(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTableFooter'\n  });\n  const {\n      className,\n      component = defaultComponent\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(Tablelvl2Context.Provider, {\n    value: tablelvl2,\n    children: /*#__PURE__*/_jsx(TableFooterRoot, _extends({\n      as: component,\n      className: clsx(classes.root, className),\n      ref: ref,\n      role: component === defaultComponent ? null : 'rowgroup',\n      ownerState: ownerState\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TableFooter.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableFooter;","// extracted by mini-css-extract-plugin\nexport default {\"margined\":\"style_margined__wjr-Y\",\"horizontal\":\"style_horizontal__R62Uj\",\"status\":\"style_status__nu7SZ\"};"],"names":["KEYFRAMES","opacity","reducedMotion","transform","ANIMATION_OPTIONS","fill","easing","duration","forwardRef","_ref","ref","overrideComponent","props","containerRef","useRef","useLayoutEffect","node","current","firstElementChild","animate","index","Array","from","document","querySelectorAll","findIndex","section","animation","delay","cancel","Component","Card","_jsx","className","style","children","component","residueOptions","label","value","interactions","selectedInteraction","setSelectedInteraction","selectedResidues","setSelectedResidues","selectedOrder","handleToggleOrder","firstOrderLabel","firstOrderTooltip","secondOrderLabel","secondOrderTooltip","toggleOrderTooltip","interfaceOnly","currentInteraction","_jsxs","Suspense","fallback","Loading","Select","onChange","event","target","map","interaction","i","MenuItem","disabled","failed","name","RadioGroup","opt","FormControlLabel","control","Radio","color","undefined","_Fragment","TextField","title","agent_1","agent_2","IconButton","onClick","changeOrder","size","FontAwesomeIcon","icon","faExchangeAlt","ViewerWithControls","lazy","maxZ","NGLViewerInDND","viewerRef","place","setPlace","useState","innerWidth","innerHeight","scrollY","window","offsetHeight","querySelector","offsetTop","dimension","Math","max","min","reasonableHeight","width","height","x","y","Rnd","position","zIndex","bounds","onDragStart","onResizeStart","onDragStop","e","d","layerX","layerY","onResize","autoResize","onResizeStop","direction","delta","elevation","startsPlaying","newViewer","nailing","onNail","onClose","nailedViewers","setNailedViewers","viewers","usedIds","getNewId","id","indexOf","console","error","close","nailed","newNailed","splice","push","nail","viewer","activeBondColor","brokenBondColor","memo","status","weights","previousCharts","setCurrentWindow","useEffect","forEach","chart","remove","container","clientWidth","clientHeight","parentElement","canvasElement","createElement","select","appendChild","canvas","attr","canvasContext","getContext","svg","append","scaleBand","range","domain","paddingInner","minX","proportion","reduce","a","b","xOffset","stat","cellWidth","xPosition","fillStyle","fillRect","s","bandwidth","onmousedown","handleResize","addEventListener","removeEventListener","rowsPerPageOptions","Hbonds","accessionAndMdNumber","metadata","topology","topologyManager","populations","useContext","ProjectCtx","tableRef","selectedPage","setSelectedPage","selectedRowsPerPage","setSelectedRowsPerPage","selectedHB","setSelectedHB","url","BASE_PATH_PROJECTS","loading","payload","useAPI","processedData","useMemo","data","find","dataset","message","hbonds","length","bondCount","acceptorGroups","donorGroups","acceptor","acceptors","donor","donors","bond","hydrogen","hydrogens","acceptorGroup","donorGroup","groups","commons","Object","values","group","Set","bondSample","acceptorIndex","acceptorResidueIndex","getAtomByIndex","residueIndex","isAcceptorFromAgent1","acceptorLabels","donorLabels","atoms","atomIndex","atom","residue","standardLabel","hydrogenLabels","atomName","agent1Labels","agent2Labels","stability","acc","cur","filter","v","sort","dataLength","frameStep","round","mdFrames","weigthCount","Error","displayedBondGroups","firstBond","lastBond","slice","toString","CardContent","horizontal","Typography","variant","InteractionSelector","margined","Table","TableHead","TableRow","TableCell","TableBody","bondGroup","Fragment","rowSpan","align","BondStatus","selectedAtoms","selectedDistances","selectedAngles","TableFooter","TablePagination","colSpan","count","rowsPerPage","page","onPageChange","_","scrollIntoView","onRowsPerPageChange","ViewerSpawner","previous","getTableFooterUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","TableFooterRoot","styled","overridesResolver","styles","root","display","tablelvl2","defaultComponent","React","inProps","useDefaultProps","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","Tablelvl2Context","Provider","as","clsx","role"],"sourceRoot":""}