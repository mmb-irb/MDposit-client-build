{"version":3,"file":"static/js/7194.c4c089b2.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/animated-card/style.module.css?d4d9","components/animated-card/index.js","../node_modules/@mui/material/CardActions/cardActionsClasses.js","../node_modules/@mui/material/CardActions/CardActions.js","utils/pretty-enumerate/index.js","pages/accession/overview/index.js","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js","webpack://mdposit/./src/pages/accession/overview/style.module.css?45c5"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__M9GCG\"};","import React, { useLayoutEffect, useRef, forwardRef } from 'react';\nimport { Card } from '@mui/material';\n\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nconst KEYFRAMES = { opacity: [0, 1] };\n\nif (!reducedMotion()) {\n  KEYFRAMES.transform = ['translateY(50px)', 'translateY(0)'];\n}\n\nconst ANIMATION_OPTIONS = {\n  fill: 'both',\n  easing: 'cubic-bezier(0, .99, .56, 1.1)',\n  duration: 500,\n};\n\n// Make the card appear and slide softly from down to up when the page is loaded\nconst AnimatedCard = forwardRef(({ overrideComponent, ...props }, ref) => {\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const node = containerRef.current && containerRef.current.firstElementChild;\n    if (!(node && node.animate)) return;\n\n    const index = Array.from(\n      document.querySelectorAll('main section'),\n    ).findIndex(section => node === section);\n\n    const animation = node.animate(KEYFRAMES, {\n      ...ANIMATION_OPTIONS,\n      delay: index * 150,\n    });\n\n    return () => animation.cancel();\n  }, []);\n\n  const Component = overrideComponent ? 'section' : Card;\n\n  return (\n    <div ref={containerRef} className={style.container}>\n      <Component component=\"section\" {...props} ref={ref} />\n    </div>\n  );\n});\n\nexport default AnimatedCard;\n","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardActionsUtilityClass(slot) {\n  return generateUtilityClass('MuiCardActions', slot);\n}\nconst cardActionsClasses = generateUtilityClasses('MuiCardActions', ['root', 'spacing']);\nexport default cardActionsClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"disableSpacing\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardActionsUtilityClass } from './cardActionsClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disableSpacing\n  } = ownerState;\n  const slots = {\n    root: ['root', !disableSpacing && 'spacing']\n  };\n  return composeClasses(slots, getCardActionsUtilityClass, classes);\n};\nconst CardActionsRoot = styled('div', {\n  name: 'MuiCardActions',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, !ownerState.disableSpacing && styles.spacing];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'flex',\n  alignItems: 'center',\n  padding: 8\n}, !ownerState.disableSpacing && {\n  '& > :not(style) ~ :not(style)': {\n    marginLeft: 8\n  }\n}));\nconst CardActions = /*#__PURE__*/React.forwardRef(function CardActions(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardActions'\n  });\n  const {\n      disableSpacing = false,\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    disableSpacing\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardActionsRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActions.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the actions do not have additional margin.\n   * @default false\n   */\n  disableSpacing: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardActions;","// Given an array of strings, return a single string with the follwoing format:\n// e.g. ['red', 'green', 'blue'] => 'red, green and blue'\n// Handle when the values is a string instead of an array (old values)\nexport const prettyEnumerate = array => {\n    if (typeof array === 'string') return array;\n    if (array.length === 0) return '';\n    if (array.length === 1) return array[0];\n    return `${array.slice(0, array.length - 1).join(', ')} and ${array[array.length - 1]}`;\n}\n\n// Just separte values by semicolons\n// Handle when the values is a string instead of an array (old values)\nexport const rawEnumerate = array => {\n    if (typeof array === 'string') return array;\n    return array.join('; ');\n}","import React, { useContext, useState, useEffect } from 'react';\nimport {\n  CardContent,\n  CardActions,\n  Button,\n  Typography,\n  Chip,\n} from '@mui/material';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faLink,\n  faExclamationTriangle,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport Card from '../../../components/animated-card';\nimport LazyImg from '../../../components/lazy-img';\n\nimport { prettyEnumerate, rawEnumerate } from '../../../utils/pretty-enumerate';\n\nimport { ProjectCtx } from '../../../contexts';\nimport https from 'https-browserify';\nimport { parse as urlParse } from 'url';\n\nimport style from './style.module.css';\n\nimport { HOST_CONFIG } from '../../../utils/constants';\n\nconst COMMA_SEPARATOR = /\\s*,\\s*/;\n\nconst typeSettings = {\n  trajectory: {\n    label: 'Trajectory',\n    color: '#8ffffd', // light blue\n  },\n  ensemble: {\n    label: 'Ensemble',\n    color: '#ffe08f', // light yellow\n  },\n};\n\n\nexport default React.memo(() => {\n  const { accession, identifier, published, metadata, ligandReferences, proteinReferences, mdCount, node } = useContext(\n    ProjectCtx,\n  );\n\n  // Download pdb information for every pdb id in metadata from our custom API\n  const pdbIds = metadata.PDBIDS;\n  const [pdbInfo, setPdbInfo] = useState({});\n  useEffect(() => {\n    if (!pdbIds) return;\n    // Store requests so we can abort them all in the useEffect cleanup function in case they were not completed on time\n    const requests = [];\n    pdbIds.forEach(pdbId => {\n      const url = `https://mdb-login.bsc.es/api/pdb/${pdbId}/entry`;\n      let body = '';\n      const request = https.get(url, response => {\n        response.on('data', chunk => {\n          body += chunk;\n        });\n        response.on('end', () => {\n          const data = JSON.parse(body);\n          setPdbInfo(previous => {\n            return { ...previous, [pdbId]: data };\n          });\n        });\n      });\n      requests.push(request);\n    });\n    // DANI: No he comprovado que esto funcione debidamente\n    return () => {\n      for (const request of requests) request.abort();\n    };\n  }, [pdbIds]);\n\n  // Ask the PDBBind for every PDB code to see if they have an entry for it\n  const [pdbBindInfo, setPdbBindInfo] = useState({});\n  useEffect(() => {\n    if (!pdbIds) return;\n    // Store requests so we can abort them all in the useEffect cleanup function in case they were not completed on time\n    const requests = [];\n    pdbIds.forEach(pdbId => {\n      // Set the target URL\n      // LORE:\n      // We want to check if the PDB code exists or not in PDBBind\n      // Note that the PDBBind API is not fast so just asking for the PDB code takes a while when the PDB code exists\n      // Note that the PDBBind API is not user friendly and not documented so I don't know if there is a better endpoint\n      // I wrote a message to the PDBBing technical support and they answered they did not have an API so...\n      // I found the content endpoint which is a bit faster responding\n      // If the pdb is not found the response is an instant object (still 200)\n      // However if the pdb is found the response is a whole mmCif but the first chunk is fast\n      const url = `https://www.pdbbind-plus.org.cn:11033/api/browser/content?pdbcode=${pdbId}`;\n      const request = https.get(url, response => {\n        response.on('data', chunk => {\n          // Get the first chunk (since there will be no more) and convert it to string\n          const firstChunk = '' + chunk;\n          // If the first characters is '{' then it means this is a JSON, thus the pdb code does not exist\n          // Otherwise the pdb code exists\n          const exists = firstChunk[0] !== '{';\n          setPdbBindInfo(previous => {\n            return { ...previous, [pdbId]: exists };\n          });\n          // Now finish the response since we do not need the rest\n          response.destroy();\n        });\n      });\n      // Add the request to the list\n      requests.push(request);\n    });\n    // DANI: No he comprovado que esto funcione debidamente\n    return () => {\n      for (const request of requests) request.abort();\n    };\n  }, [pdbIds]);\n\n  // Download ligand information for every ligand pubchem id in metadata\n  const pubchemIds = metadata.LIGANDS;\n  const [pubchemInfo, setPubchemInfo] = useState({});\n  useEffect(() => {\n    if (!pubchemIds) return;\n    // Store requests so we can abort them all in the useEffect cleanup function in case they were not completed on time\n    const requests = [];\n    pubchemIds.forEach(pubchemId => {\n      if (typeof pubchemId !== 'string') return;\n      const pubchemAPIurl = `https://pubchem.ncbi.nlm.nih.gov/rest/pug_view/data/compound/${pubchemId}/JSON/`;\n      let body = '';\n      const request = https.get(pubchemAPIurl, response => {\n        response.on('data', chunk => {\n          body += chunk;\n        });\n        response.on('end', () => {\n          // Get the original API response data\n          const sourceData = JSON.parse(body);\n          // Mine all data we want to display\n          const data = {};\n          // First get the ligand name\n          const record =  sourceData.Record;\n          data.name = record.RecordTitle;\n          // If there is a forced name then use add it to the name\n          const forcedLigandName = metadata.LIGANDNAMES && metadata.LIGANDNAMES[pubchemId];\n          if (forcedLigandName && forcedLigandName !== data.name) data.name += ` (${forcedLigandName})`;\n          // Get chembl id and url\n          const reference = record.Reference;\n          const chemblReference = reference.find(ref => ref.SourceName === 'ChEMBL');\n          if (chemblReference) {\n            data.chemblURL = chemblReference.URL;\n            const chemblSplits = chemblReference.URL.split('/');\n            data.chemblID = chemblSplits[chemblSplits.length - 2];\n          }\n          // Get drugbank id and url\n          const drugbankReference = reference.find(ref => ref.SourceName === 'DrugBank');\n          if (drugbankReference) {\n            data.drugbankURL = drugbankReference.URL;\n            const drugbankSplits = drugbankReference.URL.split('/');\n            data.drugbankID = drugbankSplits[drugbankSplits.length - 1];\n          }\n          // Add current ligand data to the overall ligands data object\n          setPubchemInfo(previous => {\n            return { ...previous, [pubchemId]: data };\n          });\n        });\n      });\n      requests.push(request);\n    });\n    // DANI: No he comprovado que esto funcione debidamente\n    return () => {\n      for (const request of requests) request.abort();\n    };\n  }, [pubchemIds]);\n\n  // Parse the citation text\n  // i.e. add break lines, \"elevated\" text, etc.\n  let citation;\n  if (metadata && metadata.CITATION) {\n    // Replace the metadat break lines by proper JSX break lines\n    citation = metadata.CITATION.replace(/\\(br\\)/g, '\\n');\n    // Get all sup characters\n    const pattern = /\\^([\\S\\s])/g;\n    const sups = [];\n    let sup;\n    while ((sup = pattern.exec(metadata.CITATION)) != null) {\n      sups.push(sup[1]);\n    }\n    // Split the citation by 'sups' and remove them\n    const fragments = citation.split(/\\^[\\S\\s]/g);\n    // Foreach sup, join the previous fragment with it\n    const compiled = [];\n    for (const sup in sups) {\n      compiled.push(fragments[sup]);\n      compiled.push(<sup key={sup}>{sups[sup]}</sup>);\n    }\n    compiled.push(fragments[fragments.length - 1]);\n    // Finally, join everything into a single string\n    citation = compiled;\n  }\n\n  return (\n    <>\n      {metadata && (\n        <Card className={style.card}>\n          <CardContent className={style['card-content']}>\n            <a className={style.title}>{metadata.NAME || 'Unnamed'}</a>\n            {mdCount > 1 && metadata.mdName && <a className={style.grey}>({metadata.mdName})</a>}\n            <div className={style['summary-list']}>\n              {metadata.TYPE && (\n                <Chip\n                  label={typeSettings[metadata.TYPE].label}\n                  variant=\"outlined\"\n                  style={{\n                    backgroundColor: typeSettings[metadata.TYPE].color,\n                    fontSize: '1em',\n                    marginRight: '0.8em',\n                  }}\n                  className={style.chip}\n                />\n              )}\n              {metadata.METHOD}\n              {metadata.DESCRIPTION && <div>{metadata.DESCRIPTION}</div>}\n              {metadata.AUTHORS && <div>Authors: {prettyEnumerate(metadata.AUTHORS)}</div>}\n              {metadata.GROUPS && <div>Groups: {rawEnumerate(metadata.GROUPS)}</div>}\n              {/* Node will exist only in the global API, and the global client has nodes as options */}\n              {HOST_CONFIG.global && node && <div>Node: {HOST_CONFIG.optionsNiceNames[node] || node}</div>}\n              {metadata.CONTACT && <div>Contact: {metadata.CONTACT}</div>}\n              {metadata.PROGRAM && <div>Program: {metadata.PROGRAM}</div>}\n              {metadata.VERSION && <div>Version: {metadata.VERSION}</div>}\n              {metadata.LINKS &&\n                metadata.LINKS.map((link, l) => (\n                  <div key={l}>\n                    {link.name}:{' '}\n                    <a\n                      href={link.url}\n                      target=\"_blank\"\n                      rel=\"noreferrer noopener\"\n                    >\n                      {link.url}\n                    </a>\n                  </div>\n                ))}\n              {metadata.WARNINGS &&\n                metadata.WARNINGS.map((warning, w) => (\n                  <div key={w} style={{ fontWeight: 'bold' }}>\n                    <FontAwesomeIcon icon={faExclamationTriangle} size={'lg'} />\n                    {' ' + warning.message}\n                  </div>\n                ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      {proteinReferences && proteinReferences.length > 0 && (\n        <Card className={style.card}>\n          <CardContent className={style['horizontal-marginned']}>\n            {proteinReferences.map((reference, i) => (\n              <div key={i}>\n                {i !== 0 && (\n                  <hr style={{ color: 'lightGrey' }} />\n                ) /* An horizontal line to separate references */}\n                <CardContent className={style['vertcial-marginned']}>\n                  <div>\n                    <div className={style['summary-list']}>\n                      <Typography variant=\"h6\">{reference.name}</Typography>\n                      <div>{reference.gene && `Gene: ${reference.gene}`}</div>\n                      <div>\n                        {reference.organism &&\n                          `Organism: ${reference.organism}`}\n                      </div>\n                      <div>\n                        {reference.uniprot && `UniProt ID: `}\n                        <a\n                          href={\n                            'https://www.uniprot.org/uniprotkb/' +\n                            reference.uniprot\n                          }\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          {reference.uniprot}\n                        </a>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </div>\n            ))}\n            {Object.entries(pdbInfo).map(([pdbId, pdbMetadata], i) => {\n              //const pdbId = pdb && pdb._id && pdb._id.toLowerCase();\n              if (!pdbMetadata) return 'PDB ' + pdbId + ' not found';\n              // Mine pdb info\n              const title = pdbMetadata.compound;\n              const experimentalMethod = pdbMetadata.expClass.toLowerCase();\n              const publishDate = new Date(pdbMetadata.ascDate);\n              const keywords = Array.from(\n                new Set((pdbMetadata.header || '').split(COMMA_SEPARATOR)),\n              );\n              const organisms = Array.from(\n                new Set((pdbMetadata.sources || '').split(COMMA_SEPARATOR)),\n              ).filter(organism => organism); // Remove empty organism strings\n              // Set the url to get the pdb image\n              const lowerPdb = pdbId.toLowerCase();\n              const imgSrc = pdbId &&\n                `https://cdn.rcsb.org/images/structures/${lowerPdb.substr(1, 2)}/${lowerPdb}/${lowerPdb}_assembly-1.jpeg`;\n              // Get the PDBBind URL from the RCSB data\n              const PDBBindExists  = pdbBindInfo[pdbId];\n              return (\n                <div key={i}>\n                  {i !== 0 && <hr style={{ color: 'lightGrey' }} />}\n                  <CardContent style={{ minHeight: 380 }}>\n                    <div>\n                      <LazyImg\n                        src={imgSrc}\n                        width=\"350\"\n                        height=\"350\"\n                        loading=\"lazy\"\n                        alt={`3D view of the ${pdbId} structure`}\n                      />\n                      <div className={style['summary-list']}>\n                        <div>\n                          PDB Accession: {pdbId}\n                          {pdbMetadata.replaces &&\n                            ` (replaces ${pdbMetadata.replaces})`}\n                        </div>\n                        <Typography variant=\"h6\">{title}</Typography>\n                        <div>\n                          {pdbMetadata.status &&\n                            pdbMetadata.status !== 'CURRENT' &&\n                            `Status: ${pdbMetadata.status}`}\n                        </div>\n                        <div>Experimental method: {experimentalMethod}</div>\n                        <div>\n                          Organism\n                          {organisms.length > 1 && 's'}:{' '}\n                          {organisms.length > 0 ? organisms.map((organism, o) => (\n                            <Chip\n                              key={o}\n                              label={organism}\n                              variant=\"outlined\"\n                              color=\"primary\"\n                              className={style.chip}\n                            />\n                          )) : <span className={style['grey']}>not available</span>}\n                        </div>\n                        <div>\n                          Keyword\n                          {keywords.length > 1 && 's'}:{' '}\n                          {keywords.map((keyword, k) => (\n                            <Chip\n                              key={k}\n                              label={keyword}\n                              variant=\"outlined\"\n                              color=\"primary\"\n                              className={style.chip}\n                            />\n                          ))}\n                        </div>\n                        <div>\n                          Publication date:{' '}\n                          <time dateTime={publishDate.toISOString()}>\n                            {publishDate.toDateString()}\n                          </time>\n                        </div>\n                      </div>\n                    </div>\n                    <CardActions>\n                      <Button\n                        component={'a'}\n                        variant=\"contained\"\n                        href={`https://www.ebi.ac.uk/pdbe/entry/pdb/${pdbId}`}\n                        size=\"small\"\n                        color=\"primary\"\n                        target=\"_blank\"\n                        rel=\"noreferrer noopener\"\n                      >\n                        <FontAwesomeIcon icon={faLink} />\n                        &nbsp;PDBe website\n                      </Button>\n                      <Button\n                        component={'a'}\n                        variant=\"contained\"\n                        href={`https://www.rcsb.org/structure/${pdbId}`}\n                        size=\"small\"\n                        color=\"primary\"\n                        target=\"_blank\"\n                        rel=\"noreferrer noopener\"\n                      >\n                        <FontAwesomeIcon icon={faLink} />\n                        &nbsp;RCSB website\n                      </Button>\n                      <Button\n                        component={'a'}\n                        variant=\"contained\"\n                        href={`https://3dbionotes-ws.cnb.csic.es/?queryId=${pdbId}`}\n                        size=\"small\"\n                        color=\"primary\"\n                        target=\"_blank\"\n                        rel=\"noreferrer noopener\"\n                      >\n                        <FontAwesomeIcon icon={faLink} />\n                        &nbsp;3DBIONOTES\n                      </Button>\n                      {PDBBindExists && <Button\n                        component={'a'}\n                        variant=\"contained\"\n                        href={`https://www.pdbbind-plus.org.cn/browse/${pdbId}`}\n                        size=\"small\"\n                        color=\"primary\"\n                        target=\"_blank\"\n                        rel=\"noreferrer noopener\"\n                      >\n                        <FontAwesomeIcon icon={faLink} />\n                        &nbsp;PDBBind\n                      </Button>}\n                    </CardActions>\n                  </CardContent>\n                </div>\n              );\n            })}\n          </CardContent>\n        </Card>\n      )}\n      {Object.keys(pubchemInfo).length > 0 &&\n        <Card className={style.card}>\n          <CardContent className={style['card-content']}>\n            {Object.entries(pubchemInfo).map(([pubchemId, pubchemData], i) => {\n              const ligandReference = ligandReferences && ligandReferences.find(ref => ref.pubchem === pubchemId);\n              return(\n                <div key={i} className={style['summary-list']}>\n                  {i !== 0 && (\n                    <hr style={{ color: 'lightGrey' }} />\n                  ) /* An horizontal line to separate protein references */}\n                  <LazyImg\n                    src={`https://pubchem.ncbi.nlm.nih.gov/image/imgsrv.fcgi?cid=${pubchemId}&t=l`}\n                    width=\"200\" height=\"200\" loading=\"lazy\"\n                    alt={`3D view of the ${pubchemData.name} structure`}\n                    // cross origin and referrer policy should prevent pubchem cookies\n                    crossOrigin=\"anonymous\" referrerPolicy=\"no-referrer\"\n                    // default background color is like a \"broken\" white but this CSS trick fixes it\n                    // this was recommended by people from pubchem\n                    className={style['white-background']}\n                  />\n                  <Typography variant=\"h6\">{pubchemData.name}</Typography>\n                  <div>\n                    {`Pubchem ID: `}\n                    <a href={`https://pubchem.ncbi.nlm.nih.gov/compound/${pubchemId}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {pubchemId}\n                    </a>\n                  </div>\n                  <div>\n                    {ligandReference && <>\n                      {`Molecular Formula: `}\n                      {ligandReference.formula.toString().split('').map((char, index) => {\n                        if (char.match(/[A-Z]/)) {\n                          return <span key={index} style={{ fontSize: '1.3m' }}>{char}</span>;\n                        } else if (char.match(/[0-9]/)) {\n                          return <sub key={index} style={{ fontSize: '0.9em' }}>{char}</sub>;\n                        } else {\n                          return char;\n                        }\n                      })}\n                      </>\n                      }\n                  </div>\n                  <div >\n                    {ligandReference && <>\n                      {`SMILES Formula: `}\n                      {ligandReference.smiles.length > 60 ? (\n                        <>\n                          {ligandReference.smiles.match(/.{1,75}/g).map((line, index) => (\n                            <div key={index}>\n                              {line.split('').map((char, charIndex) => (\n                                <span key={charIndex} className=\"highlight\">{char}</span>\n                              ))}\n                            </div>\n                          ))}\n                        </>\n                      ) : (\n                        <>\n                          {ligandReference.smiles.split('').map((char, index) => (\n                            <span key={index} className=\"highlight\">{char}</span>\n                          ))}\n                        </>\n                      )}\n                      </>\n                      }\n                  </div>\n                  {pubchemData.chemblID && (<div>\n                    {`ChEMBL ID: `}\n                    <a href={pubchemData.chemblURL}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {pubchemData.chemblID}\n                    </a>\n                  </div>)}\n                  {pubchemData.drugbankID && (<div>\n                    {`DrugBank ID: `}\n                    <a href={pubchemData.drugbankURL}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {pubchemData.drugbankID}\n                    </a>\n                  </div>)}\n                  {ligandReference && ligandReference.pdbid && (<div>\n                    <CardActions>\n                      <Button\n                            component={'a'}\n                            variant=\"contained\"\n                            href={`https://www.ebi.ac.uk/pdbe-srv/pdbechem/chemicalCompound/show/${ligandReference.pdbid}`}\n                            size=\"small\"\n                            color=\"primary\"\n                            target=\"_blank\"\n                            rel=\"noreferrer noopener\"\n                          >\n                            <FontAwesomeIcon icon={faLink} />\n                            &nbsp;PDBe website\n                          </Button>\n                          <Button\n                            component={'a'}\n                            variant=\"contained\"\n                            href={`https://www.rcsb.org/ligand/${ligandReference.pdbid}`}\n                            size=\"small\"\n                            color=\"primary\"\n                            target=\"_blank\"\n                            rel=\"noreferrer noopener\"\n                          >\n                            <FontAwesomeIcon icon={faLink} />\n                            &nbsp;RCSB website\n                          </Button>\n                      </CardActions>\n                  </div>)}\n                </div>\n              );\n            })}\n          </CardContent>\n        </Card>\n      }\n      <Card className={style.card}>\n        <CardContent className={style['card-content']}>\n          <Typography variant=\"h6\">License</Typography>\n          <div className={style['summary-list']}>\n            <div>{(metadata && metadata.LICENSE) || 'Not available'}</div>\n            <a\n              href={metadata && metadata.LINKCENSE}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {metadata && metadata.LINKCENSE && 'More information'}\n            </a>\n          </div>\n        </CardContent>\n        {citation && (\n          <CardContent className={style['card-content']}>\n            <Typography variant=\"h6\">Citation</Typography>\n            <div className={style['summary-list']}>\n              <div>\n                The use of any trajectory data in any reports or publications of\n                results obtained with the trajectory data should be acknowledged\n                by including a citation to:\n              </div>\n              <div>{citation}</div>\n            </div>\n          </CardContent>\n        )}\n        {metadata.THANKS && (\n          <CardContent className={style['card-content']}>\n            <Typography variant=\"h6\">Acknowledgements</Typography>\n            <div className={style['summary-list']}>\n              <div>{metadata.THANKS}</div>\n            </div>\n          </CardContent>\n        )}\n        <CardContent className={style['card-content']}>\n          <Typography variant=\"h6\">Project information</Typography>\n          <div className={style['summary-list']}>\n            <div>\n              Public project accession: {accession || <code>not assigned</code>}\n            </div>\n            <div>Internal project identifier: {identifier}</div>\n            <div>Status: {published ? 'published' : 'unpublished'}</div>\n          </div>\n        </CardContent>\n      </Card>\n    </>\n  );\n});\n","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n  const {\n      className,\n      raised = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    raised\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"style_card__9TULw\",\"card-content\":\"style_card-content__u-RUX\",\"horizontal-marginned\":\"style_horizontal-marginned__F1cTH\",\"vertcial-marginned\":\"style_vertcial-marginned__AFi23\",\"chip\":\"style_chip__LmEJP\",\"summary-list\":\"style_summary-list__5sQf1\",\"grey\":\"style_grey__aJ5pz\",\"title\":\"style_title__N2SOZ\",\"white-background\":\"style_white-background__KCBRe\",\"highlight\":\"style_highlight__VBCsN\"};"],"names":["KEYFRAMES","opacity","reducedMotion","transform","ANIMATION_OPTIONS","fill","easing","duration","forwardRef","_ref","ref","overrideComponent","props","containerRef","useRef","useLayoutEffect","node","current","firstElementChild","animate","index","Array","from","document","querySelectorAll","findIndex","section","animation","delay","cancel","Component","Card","_jsx","className","style","children","component","getCardActionsUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardActionsRoot","styled","name","overridesResolver","styles","ownerState","root","disableSpacing","spacing","_extends","display","alignItems","padding","marginLeft","React","inProps","useDefaultProps","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","clsx","rawEnumerate","array","join","COMMA_SEPARATOR","typeSettings","trajectory","label","color","ensemble","accession","identifier","published","metadata","ligandReferences","proteinReferences","mdCount","useContext","ProjectCtx","pdbIds","PDBIDS","pdbInfo","setPdbInfo","useState","useEffect","requests","forEach","pdbId","url","body","request","https","response","on","chunk","data","JSON","parse","previous","push","abort","pdbBindInfo","setPdbBindInfo","exists","destroy","pubchemIds","LIGANDS","pubchemInfo","setPubchemInfo","citation","pubchemId","pubchemAPIurl","sourceData","record","Record","RecordTitle","forcedLigandName","LIGANDNAMES","reference","Reference","chemblReference","find","SourceName","chemblURL","URL","chemblSplits","split","chemblID","length","drugbankReference","drugbankURL","drugbankSplits","drugbankID","CITATION","replace","pattern","sups","sup","exec","fragments","compiled","_jsxs","_Fragment","card","CardContent","title","NAME","mdName","grey","TYPE","Chip","variant","backgroundColor","fontSize","marginRight","chip","METHOD","DESCRIPTION","AUTHORS","slice","GROUPS","HOST_CONFIG","global","optionsNiceNames","CONTACT","PROGRAM","VERSION","LINKS","map","link","l","href","target","rel","WARNINGS","warning","w","fontWeight","FontAwesomeIcon","icon","faExclamationTriangle","size","message","i","Typography","gene","organism","uniprot","Object","entries","pdbMetadata","compound","experimentalMethod","expClass","toLowerCase","publishDate","Date","ascDate","keywords","Set","header","organisms","sources","filter","lowerPdb","imgSrc","substr","PDBBindExists","minHeight","LazyImg","src","width","height","loading","alt","replaces","status","o","keyword","k","dateTime","toISOString","toDateString","CardActions","Button","faLink","keys","_ref2","pubchemData","ligandReference","pubchem","crossOrigin","referrerPolicy","formula","toString","char","match","smiles","line","charIndex","pdbid","LICENSE","LINKCENSE","THANKS","getCardUtilityClass","CardRoot","Paper","overflow","raised","elevation","undefined"],"sourceRoot":""}