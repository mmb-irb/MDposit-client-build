{"version":3,"file":"static/js/custom-search.7d279bba.chunk.js","mappings":"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","sources":["webpack://mdposit/./src/components/animated-card/style.module.css?d4d9","components/animated-card/index.js","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js","webpack://mdposit/./src/components/loading/style.module.css?350d","components/loading/index.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js","hooks/use-api/index.js","../node_modules/classnames/index.js","hooks/use-toggle-state/index.js","webpack://mdposit/./src/pages/custom-search/style.module.css?6911","pages/custom-search/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__M9GCG\"};","import React, { useLayoutEffect, useRef, forwardRef } from 'react';\nimport { Card } from '@mui/material';\n\nimport reducedMotion from '../../utils/reduced-motion';\n\nimport style from './style.module.css';\n\nconst KEYFRAMES = { opacity: [0, 1] };\n\nif (!reducedMotion()) {\n  KEYFRAMES.transform = ['translateY(50px)', 'translateY(0)'];\n}\n\nconst ANIMATION_OPTIONS = {\n  fill: 'both',\n  easing: 'cubic-bezier(0, .99, .56, 1.1)',\n  duration: 500,\n};\n\n// Make the card appear and slide softly from down to up when the page is loaded\nconst AnimatedCard = forwardRef(({ overrideComponent, ...props }, ref) => {\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const node = containerRef.current && containerRef.current.firstElementChild;\n    if (!(node && node.animate)) return;\n\n    const index = Array.from(\n      document.querySelectorAll('main section'),\n    ).findIndex(section => node === section);\n\n    const animation = node.animate(KEYFRAMES, {\n      ...ANIMATION_OPTIONS,\n      delay: index * 150,\n    });\n\n    return () => animation.cancel();\n  }, []);\n\n  const Component = overrideComponent ? 'section' : Card;\n\n  return (\n    <div ref={containerRef} className={style.container}>\n      <Component component=\"section\" {...props} ref={ref} />\n    </div>\n  );\n});\n\nexport default AnimatedCard;\n","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n  const {\n      className,\n      raised = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    raised\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;","// extracted by mini-css-extract-plugin\nexport default {\"loading\":\"style_loading__Vdgbc\",\"show\":\"style_show__wIdQ5\"};","import React, { useLayoutEffect } from 'react';\nimport cn from 'classnames';\n//import { sleep, frame } from 'timing-functions';\n\nimport { CircularProgress } from '@mui/material';\n\nimport useToggleState from '../../hooks/use-toggle-state';\n\nimport style from './style.module.css';\n\nconst WAIT_DELAY = 750; // 750ms\n\n// This component is used to hide the loading indicator for a bit (just in case\n// the next content is quick enough, because we don't want a flash with the\n// indicator), then slowly display it.\n// In the best of cases this component will *never* even have to be displayed\nconst Loading = ({ wait = WAIT_DELAY }) => {\n  const [flag, toggleFlag] = useToggleState(false);\n  // This is a hook\n  useLayoutEffect(() => {\n    const timer = setTimeout(() => {\n      toggleFlag();\n    }, wait);\n    return () => clearTimeout(timer);\n\n    /*\n    let mounted = true;\n    sleep(wait) // wait for a bit\n      // this might be useful if the page is not even visible\n      .then(() => frame()) // Wait for the next animation frame\n      // After waiting, check if mounted is still true\n      .then(() => {\n        // If mounted is false it means that the loading was over before the wait ended\n        if (mounted) toggleFlag(); // This toggleFlag changes the flag from false to true\n      });\n    // In a useEffect or similar hooks, \"return\" stands for an ending function\n    // The ending function is called when the components is no longer rendered\n    return () => (mounted = false); // When useLayoutEffect is over or cancelled, set mounted to false\n    */\n  }, [toggleFlag, wait]); // useLayoutEffect is only called when the toggleFlag is called (only once)\n  // Return an animated circle\n  return (\n    <div\n      title=\"loading...\" // This tag appears when the mouse remains over the circle\n      className={cn(style.loading, { [style.show]: flag })}\n    >\n      {flag && (\n        <CircularProgress\n          variant=\"indeterminate\"\n          color=\"primary\"\n          size={50}\n          thickness={5}\n        /> // Renders the circle\n      )}\n    </div>\n  );\n};\n\nexport default Loading;\n","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Empty response\nconst blank = {\n  loading: false,\n  payload: null,\n  error: null,\n};\n\n// Loading response\nconst loading = {\n  loading: true,\n};\n\n// Get data from the API\nconst useAPI = url => {\n  // Set the 'data' state object, which is returned at the end of this function\n  const [data, setData] = useState(blank);\n\n  // This react hook is responisble for sending the request to the API\n  // This react hook has 'url' dependencies, so it is only runned once per request\n  useEffect(() => {\n    // In case there is no valid url\n    // This may be useful as a workaround to not call the API, since hooks can not be called conditionally\n    if (!url) {\n      setData(blank);\n      return;\n    }\n    // This is axios (https://www.npmjs.com/package/axios)\n    // Set a cancel option (token). If a request includes this cancel token in its options, the request can be cancelled\n    // In order to cancel the request, the same token must be used through axios\n    const source = axios.CancelToken.source();\n    let didCancel = false;\n    // Make a request in a Promise/await way\n    axios(url, {\n      // This token allows us to further cancel the request if necessary\n      cancelToken: source.token,\n      // Send the start time so we can calculate the response time when we get the response\n      startTime: new Date()\n    })\n      // (.then is async) If the request has succeed\n      .then(response => {\n        if (didCancel) return;\n        // Calculate the response time\n        const endTime = new Date();\n        const startTime = response.config.startTime;\n        const responseTime = endTime - startTime; // In ms\n        // Return response data\n        const responseData = {\n          url: url,\n          loading: false,\n          payload: response.data,\n          error: null,\n          time: responseTime\n        };\n        setData(responseData);\n      })\n      // Otherwise\n      .catch(error => {\n        if (didCancel) return;\n        const responseData = {\n          url: url,\n          loading: false,\n          payload: null,\n          error: error,\n        };\n        setData(responseData);\n      });\n\n    return () => {\n      // Cancel the request\n      source.cancel();\n      didCancel = true;\n    };\n\n    // 'useEffect' will only be called when the url changes\n  }, [url]);\n  // If there is no url then return the blank response\n  if (!url) return blank;\n  // Data is returned this way\n  // Data is returned only if the data.url matches the url from this request\n  // These urls do not macth each first time 'useAPI' is called\n  // 'data' is not reset each time 'useAPI' is called so the url is fro, the previous request\n  if (data.url === url) return data;\n  // The first time 'useAPI' is called only { loading: true } is returned\n  else return loading;\n};\n\nexport default useAPI;\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import { useState, useCallback } from 'react';\n\n// useToggleState is a custom hook which returns a state and a custom function to calculate the new state\nconst useToggleState = initialState => {\n  // useState is a React hook which returns a state and a function to change this state respectively\n  // The state is the initialState at the moment it is called\n  const [state, setState] = useState(!!initialState);\n  // useCallback is a React hook which returns a memoize callback\n  const toggleState = useCallback(valueOrSetter => {\n    // Set the state according to the input type\n    switch (typeof valueOrSetter) {\n      // Funtions are accepted and set as state\n      case 'function':\n        setState(valueOrSetter);\n        break;\n      // In case of booleans, numers and strings, a function that returns the opposite in boolean format is returned\n      case 'boolean':\n      case 'number':\n      case 'string':\n        setState(Boolean(valueOrSetter));\n        break;\n      // In other cases, returns a function which just change the state to the opposite of the previours state in boolean format\n      default:\n        setState(state => !state);\n    }\n  }, []);\n\n  return [state, toggleState];\n};\n\nexport default useToggleState;\n","// extracted by mini-css-extract-plugin\nexport default {\"tall\":\"style_tall__DyePu\",\"margined\":\"style_margined__oEFhN\",\"spaced\":\"style_spaced__lvlpO\",\"trash\":\"style_trash__7jWji\",\"grey\":\"style_grey__FZlZJ\",\"unpadded\":\"style_unpadded__t7Pn5\",\"outlined\":\"style_outlined__YtO6h\",\"section\":\"style_section__BgcEH\",\"summary\":\"style_summary__P1ytL\",\"aligned\":\"style_aligned__4amHY\",\"button\":\"style_button__2LvZV\",\"search\":\"style_search__NuCsi\"};","// React\nimport React, { useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\n// Additional components\nimport Card from '../../components/animated-card'; // The exceled parcels in which almost all features are based\n\n// Visual assets\nimport {\n  CardContent,\n  TextField,\n  Button,\n  FormControlLabel,\n  Checkbox,\n  Autocomplete,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Typography\n} from '@mui/material';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n// CSS styles\nimport style from './style.module.css';\n\n// It is used to check if the user has the reduced motion setting active\nimport reducedMotion from '../../utils/reduced-motion';\n\n// Constants\nimport { BASE_PATH_PROJECTS } from '../../utils/constants';\n\n// Hooks\nimport useAPI from '../../hooks/use-api'; // API acces\nimport Loading from '../../components/loading'; // Displays an animated \"loading\" circle\n\n// Get the host congifuration\nimport { HOST_CONFIG } from \"../../utils/constants\";\n\n// Get the avilable search fields\nconst queryFields = HOST_CONFIG.queryFields;\nconst availableFields = Object.values(queryFields).reduce((acc, curr) => acc.concat(curr), []);\n\n// These keyframes are used for an animate()\n// An image opacity is iterated between 0 (invisible) and 1 (visible)\nconst keyframes = { opacity: [0, 1] };\n\n// Same image vertical position is iterated between 0 and 50 pixels (It may have no effect)\n// This is only set when user has not activated the reduced motion option from the navigator\nif (!reducedMotion()) {\n  keyframes.transform = ['translateX(2.5%)', 'translateX(0)'];\n}\n\n// Escape all regex sensible characters\nconst escapeRegExp = input => {\n  return input.replace(/[-[/\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n};\n\n// Parse the query to an HTML string which may be passed as an URL\n// Note that this function is called only at the end, when the search button is pressed\n// The actual query is build below in the code\nconst parseQuery = currentQuery => {\n  // If the query is empty then do not search\n  if (Object.keys(currentQuery).length === 0) return;\n  // Set a function to parse our queries to a mongo query object\n  const parsedQuery = {};\n  let errors = 0;\n  const parseAndAddQuery = ([key, value]) => {\n    // DANI: Aquí me he quedado. Esto debería ser idéntico para las ref queries. Habría que aislar esta función.\n    // Get the current field to know which is the expected type\n    const currentField = availableFields.find(f => f.path === key);\n    // Provided that value will allways be a string (or string array) do the corresponding parsing\n    const parseType = string => {\n      if (string === naTag) return { $eq: null };\n      if (currentField.type === 'string') return string;\n      if (currentField.type === 'int' || currentField.type === 'float')\n        return +string;\n      if (currentField.type === 'boolean') return string === 'true';\n    };\n    // In case it is a string search it means it comes from a string textfield\n    if (typeof value === 'string') {\n      const parsedValue = escapeRegExp(value);\n      parsedQuery[key] = { $regex: parsedValue, $options: 'i' };\n      return;\n    }\n    // In case it has min or max propierties it comes from a number range pair of textfields\n    if (value.min || value.max) {\n      const parsedValue = {};\n      if (value.min) {\n        if (isNaN(+value.min)) return ++errors;\n        parsedValue['$gt'] = +value.min;\n      }\n      if (value.max) {\n        if (isNaN(+value.max)) return ++errors;\n        parsedValue['$lt'] = +value.max;\n      }\n      parsedQuery[key] = parsedValue;\n      return;\n    }\n    if (!Array.isArray(value))\n      throw new Error('Wrong ' + key + ' -> ' + value);\n    // If value is not one of the previous it must be an array, so it comes from checkboxes\n    // If value array has only one element then search only for this option\n    if (value.length === 1) {\n      parsedQuery[key] = parseType(value[0]);\n      return;\n    }\n    // Otherwise we must use a $or operand for each option\n    // In case more than one field have more than one option we must use $and operand to declare multiple $or operands\n    // So, if there is already an $and operator push the new $or operand to it\n    const currentAnd = parsedQuery['$and'];\n    if (currentAnd) {\n      currentAnd.push({ $or: value.map(v => ({ [key]: parseType(v) })) });\n      return;\n    }\n    // In case there is no $and operator but there is already an $or operand we must create the $and operator\n    // Then the old $or operator must be copied into the $and operator and deleted from the query object\n    const currentOr = parsedQuery['$or'];\n    if (currentOr) {\n      parsedQuery['$and'] = [\n        { $or: currentOr },\n        { $or: value.map(v => ({ [key]: parseType(v) })) },\n      ];\n      delete parsedQuery['$or'];\n      return;\n    }\n    // In case there is no $and/$or operators we set the first $or operator alone\n    parsedQuery['$or'] = value.map(v => ({ [key]: parseType(v) }));\n  };\n\n  // Prase the query\n  Object.entries(currentQuery).forEach(entry => parseAndAddQuery(entry));\n\n  // This may happen when a numeric textfield has text\n  if (errors > 0) return;\n\n  // Return the query made a single URL string\n  return '/browse?query=' + JSON.stringify(parsedQuery);\n};\n\n// Set the tag to be shown for null and undefined values\nconst naTag = 'Not defined';\n\n// Store queries per location id, since I am not able to make the location remember a bloody state\nconst storedQueries = {};\n\n// Advanced search page\nconst CustomSearch = () => {\n\n  // Get access to the history so wen can redirect the user later\n  const history = useNavigate();\n\n  // Get the location\n  const location = useLocation();\n  if (!storedQueries[location.key]) storedQueries[location.key] = {};\n\n  // Save the query\n  const [query] = useState(storedQueries[location.key]);\n\n  // Make a function to parse the query once built and browse\n  const parseAndSearch = () => {\n    const browseURL = parseQuery(query);\n    history(browseURL);\n  };\n\n  // Query all the available fields using the 'options' endpoint\n  const projectionStrings = availableFields.filter(field => field.options).map(field => 'projection=' + field.path);\n  const projectionQuery = projectionStrings.join('&');\n\n  // Build the API URL for the options requests\n  // DANI: Se piden todas las options de golpe, lo cual no es muy eficiente y la API tarda 3 segundos aprox\n  // DANI: Hemos decidido que este valor se guardará en la db y se actualizará periódicamente, cosa mucho más eficiente\n  const optionsUrl = `${BASE_PATH_PROJECTS}/options?${projectionQuery}`;\n  const { payload: optionsPayload, error: optionsError } = useAPI(optionsUrl);\n\n  // Stop here if any of the requests failed\n  if (optionsError) return optionsError.toString();\n\n  // Here is where queries are built by the user\n  return (\n    <Card className={style.tall}>\n      <CardContent>\n        Use the <b>search</b> menu to create a specific query.\n        Go to{' '} <a href=\"/#/advanced-search\">advanced search</a> for a most complex query.\n        <hr style={{ color: 'lightGrey' }} />\n        {Object.entries(queryFields).map(([category, fields], c) => {\n          return <div key={c}>\n            <Typography variant='h5' className={style.margined}>{category}</Typography>\n            {fields.map((field, f) => (\n              <Accordion key={f} defaultExpanded={field.defaultOpen || field.path in query}>\n                <AccordionSummary className={style.summary}>{field.name}</AccordionSummary>\n                <AccordionDetails className={style.section}>\n                  {(() => {\n                    // Get the corresponding payload\n                    if (!optionsPayload) return <Loading />;\n                    // Save the current queries\n                    const currentQuery = query;\n                    // In case it is a field with options (i.e. input is specified through checkboxes)\n                    if (field.options) {\n                      const fieldData = optionsPayload[field.path];\n                      // In case we have nulls or undefineds we merge them in a single 'Not defined' field\n                      let notDefined = 0;\n                      if (fieldData.null) {\n                        notDefined += fieldData.null;\n                        delete fieldData.null;\n                      }\n                      // DANI: De momento los not defined se descartan y ya\n                      // DANI: Está bien poder ver cuantos 'not defined' hay en cada campo, el problema es que la query no va\n                      // DANI: Es complicado dar soporte a esto por los muchos formatos en los campos y los muchos tipos de faltas\n                      // DANI: Not defined puede ser una lista vacía, un null, etc.\n                      //if (notDefined > 0) fieldData[naTag] = notDefined;\n                      // If the field values are set to be selectable as checkboxes\n                      if (field.checkbox) {\n                        // For each entry generate a checkbox\n                        const entries = Object.entries(fieldData).sort(([aKey, aCount], [bKey, bCount]) => bCount - aCount);\n                        return entries.map(([option, count], i) => (\n                          <FormControlLabel\n                            key={i}\n                            onChange={({ target: { checked } }) => {\n                              if (checked) {\n                                if (currentQuery[field.path])\n                                  currentQuery[field.path].push(option);\n                                else currentQuery[field.path] = [option];\n                              } else {\n                                const currentIndex = currentQuery[field.path].indexOf(\n                                  option,\n                                );\n                                currentQuery[field.path].splice(currentIndex, 1);\n                                if (currentQuery[field.path].length === 0)\n                                  delete currentQuery[field.path];\n                              }\n                            }}\n                            control={\n                              <Checkbox\n                                defaultChecked={\n                                  currentQuery[field.path] &&\n                                  currentQuery[field.path].indexOf(option) !== -1\n                                }\n                                style={{ color: 'black' }}\n                                inputProps={{ 'data-key': option }}\n                              />\n                            }\n                            label={`${option} (${count})`}\n                            style={{ color: 'black' }}\n                            //className={style.outlined}\n                          />\n                        ));\n                      }\n                      else {\n                        const handleInputChange = ({ target: { value } }) => {\n                          currentQuery[field.path] = value;\n                          if (value === '') delete currentQuery[field.path];\n                        };\n                        const options = Object.entries(fieldData).map(\n                          ([value, count]) => ({ label: value, count })\n                        ).sort((a, b) => b.count - a.count);\n                        return (\n                          <div className={style.aligned}>\n                            Contains{' '}\n                            <Autocomplete\n                              options={options}\n                              getOptionLabel={option => option.label}\n                              renderOption={(props, option) => <li {...props}>{option.label + ' (' + option.count + ')'}</li>}\n                              sx={{ width: '50vh' }}\n                              clearOnBlur={false}\n                              renderInput={(params) => \n                                <TextField\n                                  {...params}\n                                  title={'Type here the value for the specified field'}\n                                  defaultValue={currentQuery[field.path]}\n                                  // When pressing enter\n                                  onKeyPress={event => {\n                                    if (event.key === 'Enter') handleInputChange(event);\n                                  }}\n                                  // When clicking out, pressing tabulator, etc.\n                                  onBlur={handleInputChange}\n                                  placeholder={'e.g. ' + field.example}\n                                  className={style.spaced}\n                                />}\n                            />\n                          </div>\n                        );\n                      }\n                    }\n                    // In case it is a field without options (i.e. input is specified through a textfield)\n                    else {\n                      // If the field is a string we show a unique textfield\n                      if (field.type === 'string') {\n                        const handleInputChange = ({ target: { value } }) => {\n                          currentQuery[field.path] = value;\n                          if (value === '') delete currentQuery[field.path];\n                        };\n                        return (\n                          <div className={style.aligned}>\n                            Contains{' '}\n                            <TextField\n                              title={'Type here the value for the specified field'}\n                              defaultValue={currentQuery[field.path]}\n                              // When pressing enter\n                              onKeyPress={event => {\n                                if (event.key === 'Enter') handleInputChange(event);\n                              }}\n                              // When clicking out, pressing tabulator, etc.\n                              onBlur={handleInputChange}\n                              placeholder={'e.g. ' + field.example}\n                              inputProps={{ inputMode: 'text' }}\n                              className={style.spaced}\n                            />\n                          </div>\n                        );\n                      }\n                      // Otherwise it must be a number, since booleans will always be in options\n                      // Then show two textfields: one for the minimum and one for the maximum\n                      else {\n                        const handleInputChange = ({ target: { value } }, side) => {\n                          if (value === '') {\n                            if (!currentQuery[field.path]) return;\n                            if (!currentQuery[field.path][side]) return;\n                            delete currentQuery[field.path][side];\n                            if (Object.keys(currentQuery[field.path]).length === 0)\n                              delete currentQuery[field.path];\n                          } else {\n                            if (!currentQuery[field.path])\n                              return (currentQuery[field.path] = { [side]: value });\n                            currentQuery[field.path][side] = value;\n                          }\n                        };\n                        return (\n                          <div className={style.aligned}>\n                            Greater than{' '}\n                            <TextField\n                              title={'Type here the value for the specified field'}\n                              defaultValue={\n                                currentQuery[field.path] &&\n                                currentQuery[field.path].min\n                              }\n                              // When pressing enter\n                              onKeyPress={event => {\n                                if (event.key === 'Enter')\n                                  handleInputChange(event, 'min');\n                              }}\n                              // When clicking out, pressing tabulator, etc.\n                              onBlur={event => handleInputChange(event, 'min')}\n                              placeholder={'e.g. ' + field.example}\n                              inputProps={{\n                                inputMode: 'numeric',\n                                pattern: '[0-9.,+-]*',\n                              }}\n                              className={style.spaced}\n                            />{' '}\n                            and lower than{' '}\n                            <TextField\n                              title={'Type here the value for the specified field'}\n                              defaultValue={\n                                currentQuery[field.path] &&\n                                currentQuery[field.path].max\n                              }\n                              // When pressing enter\n                              onKeyPress={event => {\n                                if (event.key === 'Enter')\n                                  handleInputChange(event, 'max');\n                              }}\n                              // When clicking out, pressing tabulator, etc.\n                              onBlur={event => handleInputChange(event, 'max')}\n                              placeholder={'e.g. ' + field.example}\n                              inputProps={{\n                                inputMode: 'numeric',\n                                pattern: '[0-9.,+-]*',\n                              }}\n                              className={style.spaced}\n                            />\n                          </div>\n                        );\n                      }\n                    }\n                  })()}\n                </AccordionDetails>\n              </Accordion>\n            ))}\n          </div>\n        })}\n        <div className={style.button}>\n          <Button variant=\"contained\" onClick={parseAndSearch} className={style.search}>\n            <FontAwesomeIcon icon={faSearch} />\n            &nbsp;\n            <span>Search</span>\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default CustomSearch;\n"],"names":["KEYFRAMES","opacity","reducedMotion","transform","ANIMATION_OPTIONS","fill","easing","duration","forwardRef","_ref","ref","overrideComponent","props","containerRef","useRef","useLayoutEffect","node","current","firstElementChild","animate","index","Array","from","document","querySelectorAll","findIndex","section","animation","delay","cancel","Component","Card","_jsx","className","style","children","component","getCardUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardRoot","styled","Paper","name","overridesResolver","styles","root","overflow","React","inProps","useDefaultProps","raised","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","clsx","elevation","undefined","WAIT_DELAY","wait","flag","toggleFlag","useToggleState","timer","setTimeout","clearTimeout","title","cn","CircularProgress","variant","color","size","thickness","getCardContentUtilityClass","CardContentRoot","padding","paddingBottom","as","blank","loading","payload","error","url","data","setData","useState","useEffect","source","axios","didCancel","cancelToken","token","startTime","Date","then","response","responseTime","config","responseData","time","catch","hasOwn","hasOwnProperty","classNames","i","arguments","length","arg","argType","push","isArray","inner","apply","key","call","join","module","exports","default","initialState","state","setState","toggleState","useCallback","valueOrSetter","Boolean","queryFields","HOST_CONFIG","availableFields","Object","values","reduce","acc","curr","concat","keyframes","parseQuery","currentQuery","keys","parsedQuery","errors","entries","forEach","entry","value","currentField","find","f","path","parseType","string","naTag","$eq","type","parsedValue","replace","$regex","$options","min","max","isNaN","Error","currentAnd","$or","map","v","currentOr","parseAndAddQuery","JSON","stringify","storedQueries","CustomSearch","history","useNavigate","location","useLocation","query","projectionQuery","filter","field","options","optionsUrl","BASE_PATH_PROJECTS","optionsPayload","optionsError","useAPI","toString","_jsxs","CardContent","href","_ref2","c","category","fields","Typography","Accordion","defaultExpanded","defaultOpen","AccordionSummary","AccordionDetails","Loading","fieldData","notDefined","null","checkbox","sort","_ref3","_ref4","aKey","aCount","bKey","bCount","_ref5","option","count","FormControlLabel","onChange","_ref6","target","checked","currentIndex","indexOf","splice","control","Checkbox","defaultChecked","inputProps","label","handleInputChange","_ref7","_ref8","a","b","Autocomplete","getOptionLabel","renderOption","sx","width","clearOnBlur","renderInput","params","TextField","defaultValue","onKeyPress","event","onBlur","placeholder","example","_ref9","inputMode","_ref10","side","pattern","Button","onClick","parseAndSearch","browseURL","FontAwesomeIcon","icon","faSearch"],"sourceRoot":""}