{"version":3,"file":"static/js/help.8c8a1af9.chunk.js","mappings":"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","sources":["hooks/use-batch-api/index.js","pages/help/nodemap/index.js","webpack://mdposit/./src/pages/help/style.module.css?f0bb","components/simple-legend/index.js","webpack://mdposit/./src/components/histogram/style.module.css?f8b2","components/histogram/index.js","pages/help/index.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Empty response\nconst blank = {\n  loading: false,\n  payload: null,\n  error: null,\n};\n\n// Loading response\nconst loading = {\n  loading: true,\n};\n\n// Get data from the API for multiple URLs\nconst useBatchAPI = urls => {\n  // Set the 'data' state object, which is returned at the end of this function\n  const [data, setData] = useState(urls.map(url => ({ url: url, ...blank })));\n\n  // This react hook is responisble for sending the request to the API\n  // This react hook has 'url' dependencies, so it is only runned once per request\n  useEffect(() => {\n    // This is axios (https://www.npmjs.com/package/axios)\n    // Set a cancel option (token). If a request includes this cancel token in its options, the request can be cancelled\n    // In order to cancel the request, the same token must be used through axios\n    const source = axios.CancelToken.source();\n    let didCancel = false;\n    // Reset data to match in length with the urls\n    // Try to reuse old data in case any url matches\n    setData(oldData => {\n      const newData = urls.map(url => {\n        // If the url is not valid then kill it\n        // This is a workaround of the useAPI hook, but here it makes not sense\n        if (!url) throw new Error('Missing URL in batch API call');\n        // Search for this url in old data and return it in case we find it\n        const alreadySearchedResponse = oldData.find(response => response.url === url);\n        if (alreadySearchedResponse) return alreadySearchedResponse;\n        // Otherwise return the loading response\n        return loading;\n      })\n      return newData;\n    });\n    // Iterate over each url\n    urls.forEach((url, i) => {\n      // Make a request in a Promise/await way\n      axios(url, {\n        // This token allows us to further cancel the request if necessary\n        cancelToken: source.token,\n        // Send the start time so we can calculate the response time when we get the response\n        startTime: new Date(),\n        responseType: 'arraybuffer'\n      })\n        // (.then is async) If the request has succeed\n        .then(response => {\n          if (didCancel) return;\n          // Calculate the response time\n          const endTime = new Date();\n          const startTime = response.config.startTime;\n          const responseTime = endTime - startTime; // In ms\n          // Return response data\n          const responseData = {\n            url: url,\n            loading: false,\n            payload: response.data,\n            error: null,\n            time: responseTime\n          };\n          setData(previousData => {\n            const newData = [ ...previousData ]\n            newData[i] = responseData;\n            return newData;\n          });\n        })\n        // Otherwise\n        .catch(error => {\n          if (didCancel) return;\n          const responseData = {\n            url: url,\n            loading: false,\n            payload: null,\n            error: error,\n          };\n          setData(previousData => {\n            const newData = [ ...previousData ]\n            newData[i] = responseData;\n            return newData;\n          });\n        });\n    });\n\n    return () => {\n      // Cancel the request\n      source.cancel();\n      didCancel = true;\n    };\n\n    // 'useEffect' will only be called when the url changes\n  }, [urls]);\n  // If there is no url then return an empty list\n  if (!urls) return [];\n  // Data is returned here\n  return data;\n};\n\nexport default useBatchAPI;\n","import React, { useMemo } from \"react\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker\n} from \"react-simple-maps\";\n\n// Get the map\nimport map from './map.json';\n\n// Auxiliar functions\nimport { caluclateAverage } from '../../../utils/auxiliar-functions';\n\n// Use this to access the primary color according to the style palette\nimport { useTheme } from '@mui/material/styles';\n\n// Set the distance cutoff to merge nodes together (in coordinate grades)\nconst NODE_DISTANCE_CUTOFF = 0.01;\n// Set a function to calculate distance between 2 nodes\nconst getDistance = (firstLocation, secondLocation) => {\n  const xDiff = firstLocation[0] - secondLocation[0];\n  const yDiff = firstLocation[1] - secondLocation[1];\n  return Math.sqrt( Math.pow(xDiff, 2) + Math.pow(yDiff, 2) );\n};\n// Set a function to calculate the mid point between n nodes\nconst getCentroid = (nodes) => {\n  const xMean = caluclateAverage(nodes.map(node => node.location[0]));\n  const yMean = caluclateAverage(nodes.map(node => node.location[1]));\n  return [xMean, yMean];\n};\n\nconst NodeMap = ({ nodeData, className }) => {\n  // Get the paletter primary color\n  const theme = useTheme();\n  const primary = theme.palette.primary.main;\n  // Set node representations\n  // Several nodes may be combined in a single representation to avoid overlaps\n  // DANI: Esta lógica es muy simple, si hay muchos nodos habrá que replanteársela\n  const { nodeGroups, center } = useMemo(() => {\n    if (!nodeData) return { nodeGroups: [], center: [0, 0] };\n    // Group nodes together by distance\n    const _nodeGroups = [];\n    // Iterate nodes\n    for (const node of nodeData) {\n      // Find a close group\n      const closeGroup = _nodeGroups.find(group => getDistance(group.location, node.location) < NODE_DISTANCE_CUTOFF);\n      // If we just found a close group then merge this node\n      if (closeGroup) {\n        closeGroup.nodes.push(node);\n        closeGroup.location = getCentroid(closeGroup.nodes);\n        continue;\n      }\n      // Otherwise set a new group for this node\n      _nodeGroups.push({ nodes: [node], location: node.location });\n    }\n    // Calculate the center of all nodes\n    const _center = getCentroid(nodeData);\n    return { nodeGroups: _nodeGroups, center: _center };\n  },[nodeData]);\n\n  return (\n    <ComposableMap\n      projection=\"geoAzimuthalEqualArea\"\n      projectionConfig={{\n        center: [center[1], center[0]],\n        scale: 1300\n      }}\n      className={className}\n    >\n      <Geographies\n        geography={map}\n        fill=\"#D6D6DA\"\n        stroke=\"#FFFFFF\"\n        strokeWidth={0.5}\n      >\n        {({ geographies }) =>\n          geographies.map((geo) => (\n            <Geography key={geo.rsmKey} geography={geo} />\n          ))\n        }\n      </Geographies>\n      {nodeGroups && nodeGroups.map((group, g) => [\n        // Add a marker in the map for every node\n        <Marker key={g} coordinates={[group.location[1], group.location[0]]}>\n          <circle r={8} fill={primary} />\n        </Marker>,\n        ...group.nodes.map((node, i) => (\n          <Marker key={`${g}.${i}`} coordinates={[group.location[1], group.location[0] + 0.6 + i]}>\n            <text fontSize={\"large\"} textAnchor=\"middle\" fill={primary}>\n              {node.name}\n            </text>\n          </Marker>            \n        ))\n      ])}\n    </ComposableMap>\n  );\n};\n\nexport default NodeMap;\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"style_main__ftIYu\",\"horizontal\":\"style_horizontal__n-Wzo\",\"noresult\":\"style_noresult__BssYy\",\"menu\":\"style_menu__dlzqp\",\"text\":\"style_text__MnhlM\",\"paragraph\":\"style_paragraph__1kSFs\",\"header\":\"style_header__IBK3V\",\"hr\":\"style_hr__CVUxY\",\"section\":\"style_section__9cbYN\",\"summary\":\"style_summary__icjud\",\"space\":\"style_space__XBdaL\",\"piechart\":\"style_piechart__3jH6-\",\"legend\":\"style_legend__4+t1O\",\"nodemap\":\"style_nodemap__XrNeG\"};","import React from 'react';\n\n// Expected input format is entires =\n//  [\n//    {\n//      label: 'hello',\n//      color: 'black',\n//    }\n//  ]\nconst SimpleLegend = ({ entries, className }) => {\n  return (\n    <div className={className}>\n      {entries.map(({ label, color }, i) => (\n        <div key={i} style={{ fontSize: '20px' }}>\n          <span\n            style={{\n              display: 'inline-block',\n              height: '1em',\n              width: '1em',\n              backgroundColor: color,\n              marginRight: '0.5em',\n              fontSize: '20px'\n            }}\n          />\n          {label}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default SimpleLegend;\n","// extracted by mini-css-extract-plugin\nexport default {\"default\":\"style_default__JeUok\",\"graph-container\":\"style_graph-container__q5I8G\"};","import React, {\n  useRef,\n  useEffect,\n  forwardRef,\n} from 'react';\nimport { noop } from 'lodash-es';\nimport {\n  select,\n  scaleLinear,\n  scaleLog,\n  axisBottom,\n  axisLeft,\n} from 'd3';\n\nimport style from './style.module.css';\n\nconst dataPlaceholder = {};\n\n// This graph has been done by adapting the example from https://d3-graph-gallery.com/graph/histogram_basic.html\n\n// Necessary for axes and axis labels\n// WARNING: Note that this is not automatic and it may require manual update when the highest value increases (left margin)\nconst margin = {\n  top: 10,\n  right: 30,\n  left: 90,\n  bottom: 60,\n};\n\n// Set the size of the axis numbers\nconst axisNumbersFontSize = \"16px\";\nconst axisLabelsFontSize = \"24px\";\n\nconst Histogram = forwardRef(({\n  // Data containing an object with count of different values\n  data,\n  // Set the axis labels\n  xAxisLabelText,\n  yAxisLabelText,\n  // Set the color\n  color = '#69b3a2',\n  // Set the onHover function\n  onHover,\n  // Force a classname for the overall component element\n  className,\n}, ref) => {\n  // Set a fake dataset to allow the graph to work when no data is passed\n  if (!data) data = dataPlaceholder;\n\n  // Referenced document element where d3 is rendered\n  const containerRef = useRef(null);\n  // Referenced function which allows to update the cart without having to remake it\n  const updateDataRef = useRef(noop);\n  const updateSizeRef = useRef(noop);\n  const updateXAxisLabelText = useRef(noop);\n  const updateYAxisLabelText = useRef(noop);\n  const updateColor = useRef(noop);\n  const updateOnHover = useRef(noop);\n\n  // ----------------------------------------------------------------------------------------\n\n  // This useEffect must be run only once\n  // The graph content is updated through the referenced functions\n  useEffect(() => {\n    // Set the graph main handlers\n    const graph = select(containerRef.current).append('svg');\n\n    // Set axes\n    const x = scaleLog().base(10);\n    const xAxis = graph.append(\"g\");\n    const y = scaleLinear();\n    const yAxis = graph.append(\"g\");\n\n    // Set  axis labels\n    const xAxisLabel = graph.append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", axisLabelsFontSize);\n    const yAxisLabel = graph.append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", axisLabelsFontSize);\n\n    // Set functions to update axis label texts when their specific input changes\n    // Also call them now for this first time\n    updateXAxisLabelText.current = ({ xAxisLabelText }) => {\n      xAxisLabel.text(xAxisLabelText);\n    };\n    updateYAxisLabelText.current = ({ yAxisLabelText }) => {\n      yAxisLabel.text(yAxisLabelText);\n    };\n    updateXAxisLabelText.current({ xAxisLabelText });\n    updateYAxisLabelText.current({ yAxisLabelText });\n\n    // --------------------------------------------------------------------------------------------------\n\n    // Set the updating functions\n    // These functions are called by specific useEffects declared below when an specific input changes\n\n    // Set a function to update data changes\n    updateDataRef.current = ({ data }) => {\n\n      // Create exponential series of ranges of values\n      // Add to each range the sum of value counts within that range\n      const scaleCounts = {};\n      Object.entries(data).forEach(([value, count]) => {\n        const valueScale = value.toString().length - 1;\n        if (scaleCounts[valueScale]) scaleCounts[valueScale] += count;\n        else scaleCounts[valueScale] = count;\n      });\n\n      // Get minimum and maximum scales\n      const minScale = Object.keys(scaleCounts).reduce((cv, nv) => {\n        return Math.min(cv, nv);\n      }, Infinity);\n      const maxScale = Object.keys(scaleCounts).reduce((cv, nv) => {\n        return Math.max(cv, nv);\n      }, -Infinity);\n      // Create the xTicks to be used as x range as well\n      // Note that we add 1 to the last scale, so we can plot a histogram bar between the actual last scale and the next\n      const xTicks = [];\n      for (let scale = minScale; scale <= maxScale + 1; scale++) {\n        xTicks.push(10**scale);\n      }\n      // Set data as it is about to be passed to d3\n      const columnsData = Object.values(scaleCounts).map((count, i) => {\n        return { x0: xTicks[i], x1: xTicks[i+1], length: count }\n      });\n\n      // Find the maximum count among scaleCounts\n      const maxCount = Object.values(scaleCounts).reduce((cv, nv) => {\n        return Math.max(cv, nv);\n      }, -Infinity);\n\n      // Set axes\n      x.domain([xTicks[0], xTicks[xTicks.length - 1]]);\n      y.domain([0, maxCount]);\n\n      // Load new data in columns\n      const newColumnsData = graph.selectAll(\"rect\").data(columnsData);\n\n      // Remove columns which are no longer necessary\n      newColumnsData.exit().remove();\n\n      // Add new columns which are now necessary according to new data\n      newColumnsData.enter().append('rect');\n\n      // Edit the final columns now that we have added and removed some\n      graph.selectAll(\"rect\")\n        .attr(\"fill\", color)\n        .append(\"svg:title\")\n          .text(onHover);\n\n      // Force a redraw\n      updateSizeRef.current();\n    }\n\n    // Set a function to update columns color\n    updateColor.current = ({ color }) => {\n      graph.selectAll(\"rect\").attr(\"fill\", color);\n    };\n\n    // Set a function to update onHover\n    updateOnHover.current = ({ onHover }) => {\n      graph.selectAll(\"rect\").append(\"svg:title\").text(onHover);\n    };\n\n    // This ref allows to update the graph without having to remake the whole graph\n    updateSizeRef.current = () => {\n      // Change the graph size according to the container size\n      const { clientWidth: width, clientHeight: height } = containerRef.current;\n      graph.attr('width', width).attr('height', height);\n      // Get size of the graph body after substracting margins\n      const actualWidth = width - margin.left - margin.right;\n      const actualHeight = height - margin.top - margin.bottom;\n      // Get all current columns to count them\n      const columns = graph.selectAll(\"rect\");\n      const columnsCount = columns.nodes().length;\n      // Set axis positions\n      x.range([margin.left, margin.left + actualWidth]);\n      xAxis.attr(\"transform\", \"translate(0,\" + (margin.top + actualHeight) + \")\")\n        .call(axisBottom(x).ticks(columnsCount))\n        .style(\"font-size\", axisNumbersFontSize);\n      y.range([margin.top + actualHeight, margin.top]);\n      yAxis.attr(\"transform\", \"translate(\" + margin.left + \", 0)\").call(axisLeft(y))\n        .style(\"font-size\", axisNumbersFontSize);\n      // Set axis label positions\n      const xAxisLabelMargin = 5;\n      xAxisLabel.attr(\"x\", margin.left + actualWidth / 2).attr(\"y\", height - xAxisLabelMargin);\n      const yAxisLabelMargin = 20;\n      yAxisLabel.attr(\"x\", yAxisLabelMargin).attr(\"y\", margin.top + actualHeight / 2)\n        .attr(\"transform\", `rotate(-90, ${yAxisLabelMargin}, ${margin.top + actualHeight / 2})`);\n\n      // Get all current columns and place/shape them according to data\n      columns\n        //.attr(\"x\", 1)\n        .attr(\"transform\", d => \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\")\n        .attr(\"width\", d => x(d.x1) - x(d.x0) -1)\n        .attr(\"height\", d => height - margin.bottom - y(d.length))\n    };\n\n    // Set the redraw logic to be run every time the graph container is resized\n    window.addEventListener('resize', updateSizeRef.current);\n\n    // Cleanup function\n    return () => {\n      graph.remove();\n      window.removeEventListener('resize', updateSizeRef.current);\n    }\n  }, []);\n\n  // Handle when data changes\n  useEffect(() => {\n    updateDataRef.current({data});\n  }, [data]);\n\n  // Handle when x axis label text changes\n  useEffect(() => {\n    updateXAxisLabelText.current({xAxisLabelText});\n  }, [xAxisLabelText]);\n\n  // Handle when y axis label text changes\n  useEffect(() => {\n    updateYAxisLabelText.current({yAxisLabelText});\n  }, [yAxisLabelText]);\n\n  // Handle when color changes\n  useEffect(() => {\n    updateColor.current({color});\n  }, [color]);\n\n  // Handle when onHover changes\n  useEffect(() => {\n    updateOnHover.current({onHover});\n  }, [onHover]);\n\n  return (\n    <div className={className ? className : style.default}>\n      <div className={style['graph-container']} ref={containerRef} />\n    </div>\n  );\n});\n\nexport default Histogram;\n","// React logic\nimport React, { useRef, useEffect, createRef, useMemo } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\n// Visual assets\nimport { MenuList, MenuItem, Typography } from '@mui/material';\nimport { DataGrid } from '@mui/x-data-grid';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport ErrorIcon from '@mui/icons-material/Error';\n\n// All text to be displayed is set previously here\nimport { documentation } from './documentation';\n\n// Import the map chart to display where nodes are (global client only)\nimport NodeMap from './nodemap';\n\n// Constants\nimport { BASE_PATH, BASE_PATH_PROJECTS, HOST_CONFIG } from '../../utils/constants';\nimport { createPalette } from '../../utils/auxiliar-functions';\n// API acces\nimport useAPI from '../../hooks/use-api';\nimport useBatchAPI from 'src/hooks/use-batch-api';\n\nimport style from './style.module.css';\n\nimport { PieChart } from 'react-minimal-pie-chart';\nimport SimpleLegend from '../../components/simple-legend';\nimport Histogram from '../../components/histogram';\n\n// Set a function to return text within a hyperlink\nconst renderHref = (nodeName, nodeUrl) => <a href={nodeUrl} target=\"_blank\" rel=\"noreferrer noopener\">{nodeName}</a>;\n\n// Set a function to return one symbol or another depending on a node status\nconst renderStatusSymbol = status => {\n  if (status === 'active') return <CheckCircleIcon style={{ color: 'green', marginTop: '0.5em' }}/>;\n  if (status === 'fallen') return <ErrorIcon style={{ color: 'red', marginTop: '0.5em' }}/>;\n  throw new Error(`Not supported status ${status}`);\n}\n\n// Build and inject the statistics component to the documentation\n// Note that this component is injected when data is not yet downloaded as a placeholder\n// This prevents suddent vertical shifts as data is being downloaded\nconst useStatistics = () => {\n  // Use the API to get the summary\n  const summaryUrl = `${BASE_PATH_PROJECTS}/summary`;\n  const { payload: summaryPayload, error: summaryError } = useAPI(summaryUrl);\n  // Build the summary component\n  // If summary data is not yet downloaded then replace their values with 'Loading...' messages\n  const SummaryComponent = useMemo(() => {\n    return (\n      <>\n        Total number of projects:{' '}\n        {summaryPayload ? summaryPayload.projectsCount : 'Loading...'}\n        <br />\n        Total number of MDs:{' '}\n        {summaryPayload ? summaryPayload.mdCount : 'Loading...'}\n        <br />\n        {/*\n          DANI: Funciona. Solo lo he quitado temporalmente por un tema \"político\"\n          Total amount of MD time (μs):{' '}\n          {summaryPayload ? Math.round(summaryPayload.totalTime / 1000) : 'Loading...'}\n          <br />\n        */}\n        Total amount of MD frames:{' '}\n        {summaryPayload ? summaryPayload.totalFrames : 'Loading...'}\n        <br />\n        Total number of stored files:{' '}\n        {summaryPayload ? summaryPayload.totalFiles : 'Loading...'}\n        <br />\n        Total number of stored analyses:{' '}\n        {summaryPayload ? summaryPayload.totalAnalyses : 'Loading...'}\n      </>\n    )\n  }, [summaryPayload]);\n\n  // Use the API to get the options\n  const optionsUrl = `${BASE_PATH_PROJECTS}/options?projection=${HOST_CONFIG.optionsField}`;\n  const { payload: optionsPayload, error: optionsError } = useAPI(optionsUrl);\n\n  // Build the options component\n  // If options data is not yet downloaded then show a blank pie chart\n  const OptionsComponent = useMemo(() => {\n    if (!HOST_CONFIG.optionsField) return;\n    // Set the data to be represented on the pie chart\n    const options = optionsPayload &&\n      Object.entries(optionsPayload[HOST_CONFIG.optionsField]);\n    if (options) options.sort((a, b) => b[1] - a[1]);\n    const colors = options && createPalette(options.length);\n    const pieChartData = options\n      ? options.map(([key, value], i) => ({\n          title: HOST_CONFIG.optionsNiceNames[key] || key,\n          value: value,\n          color: colors[i],\n        }))\n      : [{ title: 'Loading...', value: 1, color: 'lightgrey' }];\n\n    // Set the legend\n    const summatory = options && options.reduce((current_value, [key, value]) => current_value + value, 0);\n    const legendData = options &&\n      options.map(([key, value], i) => ({\n        label: (HOST_CONFIG.optionsNiceNames[key] || key) + ' (' + (Math.round((value / summatory) * 10000 ) / 100) + ' %)',\n        color: colors[i],\n      }));\n    // Return the component\n    return (\n      <div className={style.horizontal}>\n        <PieChart\n          data={pieChartData}\n          //label={({ dataEntry }) => dataEntry.value}\n          className={style.piechart}\n        />\n        {legendData && (\n          <SimpleLegend entries={legendData} className={style.legend} />\n        )}\n      </div>\n    )\n  }, [optionsPayload]);\n\n  // Use the API to get MD method options\n  const methodsUrl = `${BASE_PATH_PROJECTS}/options?projection=metadata.METHOD`;\n  const { payload: methodsPayload, error: methodsError } = useAPI(\n    methodsUrl,\n  );\n\n  // Build the options component\n  // If options data is not yet downloaded then show a blank pie chart\n  const MethodsComponent = useMemo(() => {\n    // Remove the classical MD count since it would eclipse the rest of MD methods\n    methodsPayload && delete methodsPayload['metadata.METHOD']['Classical MD'];\n    // Set the data to be represented on the pie chart\n    const methods = methodsPayload && Object.entries(methodsPayload['metadata.METHOD']);\n    if (methods) methods.sort((a, b) => b[1] - a[1]);\n    const colors = methods && createPalette(methods.length);\n    const pieChartData = methods\n      ? methods.map(([key, value], i) => ({\n          title: key,\n          value: value,\n          color: colors[i],\n        }))\n      : [{ title: 'Loading...', value: 1, color: 'lightgrey' }];\n\n    // Set the legend\n    const summatory = methods && methods.reduce((current_value, [key, value]) => current_value + value, 0);\n    const legendData = methods && methods.map(([key, value], i) => ({\n      label: key + ' (' + (Math.round((value / summatory) * 10000 ) / 100) + ' %)',\n      color: colors[i],\n    }));\n\n    // Return the component\n    return (\n      <div className={style.horizontal}>\n        {methods && methods.length > 0\n        ? <PieChart\n          data={pieChartData}\n          //label={({ dataEntry }) => dataEntry.value}\n          className={style.piechart}\n        />\n        : <div className={style.piechart}>\n          <Typography variant=\"h6\">No results</Typography>\n        </div>}\n        {legendData && (\n          <SimpleLegend entries={legendData} className={style.legend} />\n        )}\n      </div>\n    )\n  }, [methodsPayload]);\n\n  // Use the API to get the snapshots options\n  const snapshotsUrl = `${BASE_PATH_PROJECTS}/options?projection=mds.frames`;\n  const { payload: snapshotsPayload, error: snapshotsError } = useAPI(snapshotsUrl);\n\n  // Use the API to get the snapshots options\n  const oldSnapshotsUrl = `${BASE_PATH_PROJECTS}/options?query={\"mds\":{\"$exists\":false}}&projection=metadata.SNAPSHOTS`;\n  const { payload: oldSnapshotsPayload, error: oldSnapshotsError } = useAPI(oldSnapshotsUrl);\n\n  // Build the snapshots component\n  // If snapshots data is not yet downloaded then show an empty plot\n  const SnapshotsComponent = useMemo(() => {\n    // Merge both the new and the old format frame counts\n    const frameCounts = snapshotsPayload && oldSnapshotsPayload && { ...snapshotsPayload['mds.frames'] };\n    if (snapshotsPayload && oldSnapshotsPayload) {\n      Object.entries(oldSnapshotsPayload['metadata.SNAPSHOTS']).forEach(([frameCount, amount]) => {\n        let currentAmount = frameCounts[frameCount] || 0;\n        currentAmount += amount;\n        frameCounts[frameCount] = currentAmount;\n      })\n    }\n    return (\n      <Histogram\n        data={frameCounts}\n        xAxisLabelText={'Number of snapshots'}\n        yAxisLabelText={'Number of MDs'}\n        onHover={d => `There are ${d.length} MDs with a number of snapshots between ${d.x0} and ${d.x1}`}\n      />\n    )\n  }, [snapshotsPayload, oldSnapshotsPayload]);\n\n  // Use the API to get the atoms options\n  const atomsUrl = `${BASE_PATH_PROJECTS}/options?projection=metadata.SYSTATS`;\n  const { payload: atomsPayload, error: atomsError } = useAPI(\n    atomsUrl,\n  );\n\n  // Build the atoms component\n  // If atoms data is not yet downloaded then show an empty plot\n  const AtomsComponent = useMemo(() => {\n    return (\n      <Histogram\n        data={atomsPayload && atomsPayload[\"metadata.SYSTATS\"]}\n        xAxisLabelText={'Number of atoms'}\n        yAxisLabelText={'Number of projects'}\n        color={\"#ffcc00\"}\n        onHover={d => `There are ${d.length} MDs with a number of atoms between ${d.x0} and ${d.x1}`}\n      />\n    )\n  }, [atomsPayload]);\n\n  // Check if this is the global cliente\n  const isGlobal = HOST_CONFIG.global;\n\n  // Get nodes info\n  // Use the API to get the nodes info\n  const nodesUrl = isGlobal ? `${BASE_PATH}/current/nodes` : null;\n  const { payload: nodesPayload, error: nodesError } = useAPI(nodesUrl);\n\n  // Set the node map\n  const NodeMapComponent = useMemo(() =>\n    <NodeMap key={1} nodeData={nodesPayload} className={style.nodemap}/>,\n  [nodesPayload]);\n\n  // If this is the global client then ping all nodes to check the response time\n  const pingUrls = useMemo(() => {\n    if (!isGlobal || !nodesPayload) return [];\n    return nodesPayload.map(node => node.api_url);\n  }, [nodesPayload]);\n  const pingResponses = useBatchAPI(pingUrls);\n\n  // Set the table to be displayed including ping response times\n  const NodeTableComponent = useMemo(() => {\n    if (!pingResponses || pingResponses.length === 0) return;\n    // Set table columns\n    const columns = [\n      { field: 'node', headerName: 'Node name', flex: 0.5, align: 'center', headerAlign: 'center',\n        renderCell: params => renderHref(params.row.node, params.row.url) },\n      { field: 'status', headerName: 'Status', flex: 0.2, align: 'center', headerAlign: 'center',\n        renderCell: params => renderStatusSymbol(params.value) },\n      { field: 'ping', headerName: 'Response time', flex: 0.3, align: 'center', headerAlign: 'center' }\n    ];\n    // Set a table row for every node\n    const rows = nodesPayload.map(node => {\n      const ping = pingResponses.find(response => response.url === node.api_url);\n      const status = ping && ping.time ? 'active' : 'fallen';\n      const responseTime = ping && ping.time ? `${ping.time}ms` : '...';\n      // The 'id' field is not used but it is required by the data table\n      return { id: node.alias, key: node.alias, node: node.name, url: node.api_url, status: status, ping: responseTime };\n    });\n    // Return the data table\n    return <DataGrid columns={columns} rows={rows} disableRowSelectionOnClick hideFooter key={'node table'}/>;\n  }, [nodesPayload, pingResponses]);\n  \n\n  // Finally build the statistics component from all subcomponents and inject it in the docs\n  useMemo(() => {\n    const StatisticsComponent = {\n      id: 'summary',\n      header: 'Data summary and statistics',\n      body: (\n        <>\n          Here is a summary of the database contents and a few statistics:\n          <br />\n          <br />\n          {SummaryComponent}\n          <br />\n          <br />\n          {HOST_CONFIG.optionsField && <>\n            {`Projects per ${HOST_CONFIG.optionsLabel}`}\n            {OptionsComponent}\n          </>}\n          {isGlobal && [\n            'Node locations',\n            NodeMapComponent,\n            NodeTableComponent,\n            <br key={'br'}/>\n          ]}\n          Projects per non-equilibrium MD method:\n          {MethodsComponent}\n          <br />\n          <br />\n          Snapshots per MD:\n          <br />\n          <br />\n          {SnapshotsComponent}\n          <br />\n          <br />\n          System atoms per project:\n          <br />\n          <br />\n          {AtomsComponent}\n        </>\n      ),\n    };\n    // Add summary to documentation\n    const introduction = documentation.find(doc => doc.id === 'introduction');\n    // In case there is a summary already, from a previous render, delete it\n    if (introduction.children[introduction.children.length - 1].id === 'summary') introduction.children.pop();\n    introduction.children.push(StatisticsComponent);\n  }, [\n    SummaryComponent,\n    OptionsComponent,\n    MethodsComponent,\n    SnapshotsComponent,\n    AtomsComponent,\n    NodeMapComponent,\n    NodeTableComponent\n  ]);\n\n  // Handle possible errors by just showing a log error in the console\n  // Thus we allow the rest of the page to keep loading\n  [summaryError, optionsError, methodsError, snapshotsError, oldSnapshotsError, atomsError, nodesError].forEach(error => {\n    if (error) console.error(error.message);\n  });\n};\n\nconst Help = () => {\n  useStatistics();\n  // Get the location\n  const location = useLocation();\n\n  // References to all documentation blocks will be stored here\n  const containerRefs = useRef();\n  const docs = documentation.reduce((previous, current) => {\n    previous.push(current);\n    current.children && current.children.forEach(child => previous.push(child));\n    return previous;\n  }, []);\n  const docRefs = useRef(Array(docs.length).fill(createRef()));\n\n  // Scroll down to the asked reference\n  useEffect(() => {\n    const container = containerRefs.current;\n    for (const ref of docRefs.current) {\n      if (location.hash !== '#' + ref.id) continue;\n      //window.scrollTo(0, container.offsetTop);\n      container.scrollTop = ref.offsetTop - container.offsetTop;\n      break;\n    }\n  }, [location.hash]);\n\n  return (\n    <div className={style.main}>\n      <MenuList className={style.menu}>\n        {documentation.map((doc, index) => (\n          <details key={index} className={style.section} open>\n            <summary className={style.summary}>{doc.title}</summary>\n            <br className={style.space} />\n            {doc.children &&\n              doc.children.map((child, c) => (\n                <MenuItem\n                  key={c}\n                  component={Link}\n                  to={`/help#${child.id}`}\n                  style={{ whiteSpace: 'normal' }}\n                >\n                  {child.header}\n                </MenuItem>\n              ))}\n          </details>\n        ))}\n      </MenuList>\n      <div className={style.text} ref={containerRefs}>\n        {docs.map((doc, index) => (\n          <div\n            key={index}\n            id={doc.id}\n            ref={r => (docRefs.current[index] = r)}\n            className={style.paragraph}\n          >\n            <Typography\n              variant={doc.title ? 'h5' : 'h6'}\n              className={style.header}\n              key={'header'}\n            >\n              {doc.title || doc.header}\n            </Typography>\n            <div key={'text'}>{doc.body || doc.page}</div>\n            <hr className={style.hr} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Help;\n"],"names":["blank","loading","payload","error","urls","data","setData","useState","map","url","useEffect","source","axios","didCancel","oldData","Error","alreadySearchedResponse","find","response","forEach","i","cancelToken","token","startTime","Date","responseType","then","responseTime","config","responseData","time","previousData","newData","catch","cancel","getDistance","firstLocation","secondLocation","xDiff","yDiff","Math","sqrt","pow","getCentroid","nodes","caluclateAverage","node","location","_ref","nodeData","className","primary","useTheme","palette","main","nodeGroups","center","useMemo","_nodeGroups","closeGroup","group","push","_jsxs","ComposableMap","projection","projectionConfig","scale","children","_jsx","Geographies","geography","fill","stroke","strokeWidth","_ref2","geographies","geo","Geography","rsmKey","g","Marker","coordinates","r","fontSize","textAnchor","name","entries","label","color","style","display","height","width","backgroundColor","marginRight","dataPlaceholder","margin","axisNumbersFontSize","axisLabelsFontSize","forwardRef","ref","xAxisLabelText","yAxisLabelText","onHover","containerRef","useRef","updateDataRef","noop","updateSizeRef","updateXAxisLabelText","updateYAxisLabelText","updateColor","updateOnHover","graph","select","current","append","x","scaleLog","base","xAxis","y","scaleLinear","yAxis","xAxisLabel","attr","yAxisLabel","text","_ref3","_ref4","scaleCounts","Object","_ref5","value","count","valueScale","toString","length","minScale","keys","reduce","cv","nv","min","Infinity","maxScale","max","xTicks","columnsData","values","x0","x1","maxCount","domain","newColumnsData","selectAll","exit","remove","enter","_ref6","_ref7","clientWidth","clientHeight","actualWidth","actualHeight","columns","columnsCount","range","call","axisBottom","ticks","axisLeft","d","window","addEventListener","removeEventListener","useStatistics","summaryUrl","BASE_PATH_PROJECTS","summaryPayload","summaryError","useAPI","SummaryComponent","_Fragment","projectsCount","mdCount","totalFrames","totalFiles","totalAnalyses","optionsUrl","HOST_CONFIG","optionsField","optionsPayload","optionsError","OptionsComponent","options","sort","a","b","colors","createPalette","pieChartData","key","title","optionsNiceNames","summatory","current_value","legendData","round","PieChart","SimpleLegend","methodsUrl","methodsPayload","methodsError","MethodsComponent","methods","Typography","variant","snapshotsUrl","snapshotsPayload","snapshotsError","oldSnapshotsUrl","oldSnapshotsPayload","oldSnapshotsError","SnapshotsComponent","frameCounts","frameCount","amount","currentAmount","Histogram","atomsUrl","atomsPayload","atomsError","AtomsComponent","isGlobal","global","nodesUrl","BASE_PATH","nodesPayload","nodesError","NodeMapComponent","NodeMap","pingUrls","api_url","pingResponses","useBatchAPI","NodeTableComponent","field","headerName","flex","align","headerAlign","renderCell","params","renderHref","nodeName","row","nodeUrl","href","target","rel","status","CheckCircleIcon","marginTop","ErrorIcon","renderStatusSymbol","rows","ping","id","alias","DataGrid","disableRowSelectionOnClick","hideFooter","StatisticsComponent","header","body","optionsLabel","introduction","documentation","doc","pop","console","message","Help","useLocation","containerRefs","docs","previous","child","docRefs","Array","createRef","container","hash","scrollTop","offsetTop","MenuList","index","open","c","MenuItem","component","Link","to","whiteSpace","page"],"sourceRoot":""}