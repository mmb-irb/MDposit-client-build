{"version":3,"file":"static/js/graph.d2689dce.chunk.js","mappings":"8HAKO,MAAMA,EAAe,SAACC,GAAyC,IAAnCC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,uBACxC,MAGMG,GAFJN,EAAaO,SACZP,EAAaO,OAASC,SAASC,cAAc,YACzBC,WAAW,MAClCJ,EAAQJ,KAAOA,EAEf,OADgBI,EAAQK,YAAYV,GACrBW,KACjB,EAIaC,EAAiB,SAACZ,GAAyC,IAAnCC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,uBAC1C,MAAMW,EAAUN,SAASC,cAAc,OACjCM,EAAUP,SAASQ,eAAef,GAWxC,OAVAa,EAAQG,YAAYF,GACpBG,OAAOC,OAAOL,EAAQM,MAAO,CAC3BlB,KAAMA,EACNmB,SAAU,WACVC,WAAY,SACZC,OAAQ,OACRX,MAAO,OACP,cAAe,WAEjBJ,SAASgB,KAAKP,YAAYH,GACnB,CAAEF,MAAOE,EAAQW,YAAaF,OAAQT,EAAQY,aACvD,C,mCCZA,QAXA,SAAmBC,EAAOC,GAKxB,IAJA,IAAIC,GAAS,EACTzB,EAASwB,EAAOxB,OAChB0B,EAASH,EAAMvB,SAEVyB,EAAQzB,GACfuB,EAAMG,EAASD,GAASD,EAAOC,GAEjC,OAAOF,CACT,C,6DCAA,QAJA,SAAyBI,GACvB,OAAOC,EAAAA,EAAAA,GAAaD,IAVR,uBAUkBE,EAAAA,EAAAA,GAAWF,EAC3C,ECXA,IAAIG,EAAchB,OAAOiB,UAGrBC,EAAiBF,EAAYE,eAG7BC,EAAuBH,EAAYG,qBAyBvC,QALkBC,EAAgB,WAAa,OAAOnC,SAAW,CAA/B,IAAsCmC,EAAkB,SAASP,GACjG,OAAOC,EAAAA,EAAAA,GAAaD,IAAUK,EAAeG,KAAKR,EAAO,YACtDM,EAAqBE,KAAKR,EAAO,SACtC,C,mCCRA,QAFcS,MAAMC,O","sources":["utils/document-measurer/index.js","../node_modules/lodash-es/_arrayPush.js","../node_modules/lodash-es/_baseIsArguments.js","../node_modules/lodash-es/isArguments.js","../node_modules/lodash-es/isArray.js"],"sourcesContent":["// Function involved in getting text pixels width\n// WARNING: These functions do not work properly in Chrome (not an easy problem)\n\n// This function allows to calculate the width of a given string text\n// The font for the calculation in the d3 default font\nexport const getTextWidth = (text, font = 'bold 10px sans-serif') => {\n  const canvas =\n    getTextWidth.canvas ||\n    (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width;\n};\n\n// Alternative way to obtain text width\n// Probably the only way to obtain text height\nexport const getTextSizeDOM = (text, font = 'bold 10px sans-serif') => {\n  const element = document.createElement('div');\n  const content = document.createTextNode(text);\n  element.appendChild(content);\n  Object.assign(element.style, {\n    font: font,\n    position: 'absolute',\n    visibility: 'hidden',\n    height: 'auto',\n    width: 'auto',\n    'white-space': 'nowrap',\n  });\n  document.body.appendChild(element);\n  return { width: element.clientWidth, height: element.clientHeight };\n};\n\n// Get the whole body width\nexport const getBodyWidth = () => {\n  return Math.max(\n    document.body.scrollWidth,\n    document.documentElement.scrollWidth,\n    document.body.offsetWidth,\n    document.documentElement.offsetWidth,\n    document.documentElement.clientWidth,\n  );\n};\n\n// Get the whole body height\nexport const getBodyHeight = () => {\n  return Math.max(\n    document.body.scrollHeight,\n    document.documentElement.scrollHeight,\n    document.body.offsetHeight,\n    document.documentElement.offsetHeight,\n    document.documentElement.clientHeight,\n  );\n};\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nexport default arrayPush;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nexport default baseIsArguments;\n","import baseIsArguments from './_baseIsArguments.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nexport default isArguments;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n"],"names":["getTextWidth","text","font","arguments","length","undefined","context","canvas","document","createElement","getContext","measureText","width","getTextSizeDOM","element","content","createTextNode","appendChild","Object","assign","style","position","visibility","height","body","clientWidth","clientHeight","array","values","index","offset","value","isObjectLike","baseGetTag","objectProto","prototype","hasOwnProperty","propertyIsEnumerable","baseIsArguments","call","Array","isArray"],"sourceRoot":""}