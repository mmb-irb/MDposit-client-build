{"version":3,"file":"static/js/7922.9a800d8f.chunk.js","mappings":"sKAQA,MA8BA,GA9BsBA,EAAAA,EAAAA,OAAKC,IAA0C,IAAzC,MAAEC,EAAK,OAAEC,EAAM,MAAEC,EAAK,UAAEC,GAAWJ,EAG3D,MAAMK,GAAeC,EAAAA,EAAAA,UAiBrB,OAdAC,EAAAA,EAAAA,YAAU,KACSC,iBACLC,EAAAA,EAAAA,IAAkB,IAAM,+EAE3BC,GAAG,4BACNL,EAAaM,QAAQC,KAAO,CAACX,GAC7BI,EAAaM,QAAQE,aAAeZ,EAAMa,YAAc,EAAE,EAE9DC,EAAQ,GACT,KAMCC,EAAAA,EAAAA,KAAA,4BACIC,IAAKZ,EACLH,OAAQA,EACRC,MAAOA,EACPe,MAAOd,GACT,G,mCClCV,MA8BA,EA9B0Be,IAAQ,CAChC,QAAMT,CAAGU,GACP,IAAIC,EAAaD,EAEbE,QAAsBH,IAW1B,GAVIG,EAAcC,UAASD,EAAgBA,EAAcC,UAGtDF,GACDC,EAAcE,IACc,kBAArBF,EAAcE,KAErBH,EAAaC,EAAcE,KAGxBH,EACH,MAAM,IAAII,MAAM,8CAGlB,MAAMC,EAAkBC,OAAOC,eAAeC,IAAIR,GAClD,GAAIK,EAAiB,CAEnB,GAAIA,IAAoBJ,EAAe,OAAOD,EAC9C,MAAM,IAAII,MAAM,iDAClB,CAEA,OADAE,OAAOC,eAAeE,OAAOT,EAAYC,GAClCD,CACT,G","sources":["pages/accession/trajectory/chains/chain-analysis/react-interpro-track/index.js","utils/load-custom-element/index.js"],"sourcesContent":["import React, { memo, useRef, useEffect } from 'react';\n\nimport loadCustomElement from '../../../../../../utils/load-custom-element';\n\n// DANI: Esto lo hice mirando el código del antiguo ProperttySetter, pero no llegué a comprenderlo del todo\n// https://github.com/aurel-l/react-property-setter/blob/master/src/index.ts\n\n// The result of this function is memoized since it is a heavy work\nconst InterproTrack = memo(({ match, length, shape, classAttr }) => {\n\n    // Set a reference to the protvista element\n    const protvistaRef = useRef();\n\n    // Update element data after render\n    useEffect(() => {\n        const update = async () => {\n            await loadCustomElement(() => import(\n                /* webpackChunkName: \"protvista-interpro-track\" */ 'protvista-interpro-track'\n            )).as('protvista-interpro-track');\n            protvistaRef.current.data = [match];\n            protvistaRef.current.contributors = match.signatures || [];\n        }\n        update();\n    }, []);\n\n    //console.log(match.accession);\n\n    // Render the element\n    return (\n        <protvista-interpro-track\n            ref={protvistaRef}\n            length={length}\n            shape={shape}\n            class={classAttr}\n        />\n    );\n});\n\nexport default InterproTrack;\n","const loadCustomElement = importer => ({\n  async as(namespace) {\n    let _namespace = namespace;\n    // load custom element script\n    let customElement = await importer();\n    if (customElement.default) customElement = customElement.default;\n    // if no name was specified, use default provided by the custom element\n    if (\n      !_namespace &&\n      customElement.is &&\n      typeof customElement.is === 'string'\n    ) {\n      _namespace = customElement.is;\n    }\n    // if we get to this point without any name, just give up\n    if (!_namespace) {\n      throw new Error('Please a specify a name for custom element');\n    }\n    // check if not already defined\n    const alreadyExisting = window.customElements.get(_namespace);\n    if (alreadyExisting) {\n      // if it was, with the same element, everything is fine\n      if (alreadyExisting === customElement) return _namespace;\n      throw new Error('This name is already used by another component');\n    }\n    window.customElements.define(_namespace, customElement);\n    return _namespace;\n  },\n});\n\nexport default loadCustomElement;\n"],"names":["memo","_ref","match","length","shape","classAttr","protvistaRef","useRef","useEffect","async","loadCustomElement","as","current","data","contributors","signatures","update","_jsx","ref","class","importer","namespace","_namespace","customElement","default","is","Error","alreadyExisting","window","customElements","get","define"],"sourceRoot":""}