{"version":3,"file":"static/js/9266.90df021e.chunk.js","mappings":"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","sources":["pages/accession/trajectory/chains/chain-analysis/index.js","utils/hash-from-string/index.js","utils/color-from-string/index.js","utils/merge-intervals/index.js","pages/accession/trajectory/chains/chain-analysis/process-ipscan-results/index.js","pages/accession/trajectory/chains/chain-analysis/react-interpro-track/index.js","utils/load-custom-element/index.js","webpack://mdposit/./src/pages/accession/trajectory/chains/chain-analysis/style.module.css?b840"],"sourcesContent":["import React, { memo, useEffect } from 'react';\n\nimport loadCustomElement from '../../../../../utils/load-custom-element';\n\nimport processIPScanResults from './process-ipscan-results';\nimport InterproTrack from './react-interpro-track';\n\nimport style from './style.module.css';\n\nconst customElements = [];\n\nconst loadProtVista = () => {\n  if (!customElements.length) {\n    customElements.push(\n      loadCustomElement(() =>\n        import(/* webpackChunkName: \"protvista-manager\" */ 'protvista-manager'),\n      ).as('protvista-manager'),\n    );\n    customElements.push(\n      loadCustomElement(() =>\n        import(\n          /* webpackChunkName: \"protvista-sequence\" */ 'protvista-sequence'\n        ),\n      ).as('protvista-sequence'),\n    );\n    customElements.push(\n      loadCustomElement(() =>\n        import(\n          /* webpackChunkName: \"protvista-navigation\" */ 'protvista-navigation'\n        ),\n      ).as('protvista-navigation'),\n    );\n    customElements.push(\n      loadCustomElement(() =>\n        import(\n          /* webpackChunkName: \"protvista-coloured-sequence\" */ 'protvista-coloured-sequence'\n        ),\n      ).as('protvista-coloured-sequence'),\n    );\n  }\n  return Promise.all(customElements);\n};\n\n// The result of this function is memoized since it is a heavy work\nconst ChainAnalyses = memo(({ data, firstResidueNumber }) => {\n  // Get the chain letter\n  const chain = data.name;\n  // Load the protvista managers\n  useEffect(() => {\n    loadProtVista();\n  }, []);\n\n  // Mine data\n  const sequence = data.sequence;\n  const sequenceLength = sequence.length;\n  const interproscanData = data.interproscan;\n  // It may happen that interproscan data is missing when we have a small sequence\n  if (!interproscanData) return 'No InterProScan data';\n  const matches = interproscanData.results[0].matches;\n  const processedMatches = processIPScanResults(matches, firstResidueNumber);\n\n  // Set the end residue to be displayed\n  const displayEnd = firstResidueNumber + sequenceLength;\n  // Set an shifted sequence by adding null values at the begining\n  // This is the only way I figured out to offset the sequence\n  // Apparently protvista sequence components have no argument for this\n  const shiftedSequence = ' '.repeat(firstResidueNumber) + sequence;\n\n  return (\n    <protvista-manager\n      attributes=\"length displaystart displayend\"\n      length={sequenceLength}\n      chain={chain}\n    >\n      <protvista-navigation\n        rulerstart={firstResidueNumber}\n        displaystart={firstResidueNumber}\n        displayend={displayEnd}\n      />\n      <div className={style.entries}>\n        <protvista-sequence\n          sequence={shiftedSequence}\n          height=\"37\"\n        />\n        <protvista-coloured-sequence\n          sequence={shiftedSequence}\n          scale=\"hydrophobicity-scale\"\n          height=\"15\"\n        />\n        { processedMatches.length\n          ? processedMatches.map((match, index) => {\n            return (\n              <div key={index} >\n                <span className={style.label}>{match.accession}</span>\n                <InterproTrack\n                  match={match}\n                  shape=\"roundRectangle\"\n                  classAttr={match.signatures ? style['has-signatures'] : undefined}\n                />\n              </div>\n            )})\n          : 'No entry was found for this sequence'\n        }\n      </div>\n    </protvista-manager>\n  );\n});\n\nexport default ChainAnalyses;\n","const hashFromString = string => {\n  let hash = 0;\n  for (let i = 0; i < string.length; i++) {\n    hash = (hash << 5) - hash + string.charCodeAt(i);\n    hash |= 0;\n  }\n  return hash;\n};\n\nexport default hashFromString;\n","import hashFromString from '../hash-from-string';\n\nconst colorFromString = string => {\n  const hash = hashFromString(string);\n  const hue = Math.abs(hash % 360);\n  const saturation = Math.abs(hash % 20) + 40; // 50% give or take 10%\n  const lightness = Math.abs(hash % 10) + 45; // 50% give or take 5%\n  return `hsla(${hue}, ${saturation}%, ${lightness}%, 1)`;\n};\n\nexport default colorFromString;\n","const startAccessorDefault = (interval, value) =>\n  Number.isFinite(value) ? (interval[0] = value) : interval[0];\nconst endAccessorDefault = (interval, value) =>\n  Number.isFinite(value) ? (interval[1] = value) : interval[1];\n\nconst mergeIntervals = (\n  intervals,\n  startAccessor = startAccessorDefault,\n  endAccessor = endAccessorDefault,\n) => {\n  const sortedIntervals = Array.from(intervals).sort(\n    (a, b) => startAccessor(a) - startAccessor(b),\n  );\n  let output = [];\n  let current;\n  for (const interval of sortedIntervals) {\n    if (!current) {\n      // first loop\n      current = interval;\n    } else if (endAccessor(current) < startAccessor(interval)) {\n      // current is not within interval\n      output.push(current);\n      current = interval;\n    } else {\n      // current is within, or contiguous to interval\n      endAccessor(\n        current,\n        Math.max(endAccessor(current), endAccessor(interval)),\n      );\n    }\n  }\n  if (current) output.push(current);\n  return output;\n};\n\nexport default mergeIntervals;\n","import colorFromString from '../../../../../../utils/color-from-string';\nimport mergeIntervals from '../../../../../../utils/merge-intervals';\n\n// Renumerate residue numbers to make them match the actual chain they come from\nconst shiftLocations = (fragments, shift) => {\n  fragments.forEach(fragment => {\n    fragment.start += shift;\n    fragment.end += shift;\n  })\n  return fragments;\n}\n\nconst processLocations = (locations, firstResidueNumber = 1) =>\n  locations.map(location => ({\n    fragments: shiftLocations(location['location-fragments'], firstResidueNumber),\n  }));\n\nconst processIPScanResults = (matches, firstResidueNumber) => {\n  const processed = [];\n  // for all the matches\n  for (const match of matches || []) {\n    // if the match has an entry, consider it as a signature of the entry\n    if (match.signature.entry) {\n      let existing = processed.find(\n        m => m.accession === match.signature.entry.accession,\n      );\n      // if the entry hadn't been stored yet, create it now\n      if (!existing) {\n        existing = {\n          accession: match.signature.entry.accession,\n          db: 'InterPro',\n          signatures: [],\n          locations: [],\n          color: colorFromString(match.signature.entry.accession),\n        };\n        processed.push(existing);\n      }\n      const locations = processLocations(match.locations, firstResidueNumber);\n      existing.locations = mergeIntervals(\n        [...existing.locations, ...locations],\n        (interval, value) =>\n          Number.isFinite(value)\n            ? (interval.fragments[0].start = value)\n            : interval.fragments[0].start,\n        (interval, value) =>\n          Number.isFinite(value)\n            ? (interval.fragments[0].end = value)\n            : interval.fragments[0].end,\n      );\n      // add the match as a signature of that entry\n      existing.signatures.push({\n        accession: match.signature.accession,\n        db: match.signature.signatureLibraryRelease.library,\n        locations,\n        color: existing.color.replace(', 1)', ', 0.25)'),\n      });\n    } else {\n      // the match doesn't have entry, it is not integrated\n      processed.push({\n        accession: match.signature.accession,\n        db: match.signature.signatureLibraryRelease.library,\n        locations: processLocations(match.locations, firstResidueNumber),\n        color: colorFromString(match['model-ac']),\n      });\n    }\n  }\n\n  // sort them\n  processed\n    // secondary sort by start position\n    .sort((a, b) => a.locations[0].fragments[0].start - b.locations[0].fragments[0].start)\n    // primary sort by number of signatures\n    .sort((a, b) => (b.signatures || []).length - (a.signatures || []).length);\n\n  return processed;\n};\n\nexport default processIPScanResults;\n","import React, { memo, useRef, useEffect } from 'react';\n\nimport loadCustomElement from '../../../../../../utils/load-custom-element';\n\n// DANI: Esto lo hice mirando el código del antiguo ProperttySetter, pero no llegué a comprenderlo del todo\n// https://github.com/aurel-l/react-property-setter/blob/master/src/index.ts\n\n// The result of this function is memoized since it is a heavy work\nconst InterproTrack = memo(({ match, length, shape, classAttr }) => {\n\n    // Set a reference to the protvista element\n    const protvistaRef = useRef();\n\n    // Update element data after render\n    useEffect(() => {\n        const update = async () => {\n            await loadCustomElement(() => import(\n                /* webpackChunkName: \"protvista-interpro-track\" */ 'protvista-interpro-track'\n            )).as('protvista-interpro-track');\n            protvistaRef.current.data = [match];\n            protvistaRef.current.contributors = match.signatures || [];\n        }\n        update();\n    }, []);\n\n    //console.log(match.accession);\n\n    // Render the element\n    return (\n        <protvista-interpro-track\n            ref={protvistaRef}\n            length={length}\n            shape={shape}\n            class={classAttr}\n        />\n    );\n});\n\nexport default InterproTrack;\n","const loadCustomElement = importer => ({\n  async as(namespace) {\n    let _namespace = namespace;\n    // load custom element script\n    let customElement = await importer();\n    if (customElement.default) customElement = customElement.default;\n    // if no name was specified, use default provided by the custom element\n    if (\n      !_namespace &&\n      customElement.is &&\n      typeof customElement.is === 'string'\n    ) {\n      _namespace = customElement.is;\n    }\n    // if we get to this point without any name, just give up\n    if (!_namespace) {\n      throw new Error('Please a specify a name for custom element');\n    }\n    // check if not already defined\n    const alreadyExisting = window.customElements.get(_namespace);\n    if (alreadyExisting) {\n      // if it was, with the same element, everything is fine\n      if (alreadyExisting === customElement) return _namespace;\n      throw new Error('This name is already used by another component');\n    }\n    window.customElements.define(_namespace, customElement);\n    return _namespace;\n  },\n});\n\nexport default loadCustomElement;\n","// extracted by mini-css-extract-plugin\nexport default {\"entries\":\"style_entries__T4f7r\",\"has-signatures\":\"style_has-signatures__4CW-U\",\"label\":\"style_label__UT0BE\"};"],"names":["customElements","memo","_ref","data","firstResidueNumber","chain","name","useEffect","length","push","loadCustomElement","as","Promise","all","sequence","sequenceLength","interproscanData","interproscan","matches","results","processedMatches","processIPScanResults","displayEnd","shiftedSequence","repeat","_jsxs","attributes","children","_jsx","rulerstart","displaystart","displayend","className","style","entries","height","scale","map","match","index","label","accession","InterproTrack","shape","classAttr","signatures","undefined","string","hash","i","charCodeAt","hashFromString","Math","abs","startAccessorDefault","interval","value","Number","isFinite","endAccessorDefault","intervals","startAccessor","arguments","endAccessor","sortedIntervals","Array","from","sort","a","b","current","output","max","processLocations","locations","location","fragments","shift","forEach","fragment","start","end","shiftLocations","processed","signature","entry","existing","find","m","db","color","colorFromString","mergeIntervals","signatureLibraryRelease","library","replace","protvistaRef","useRef","async","contributors","update","ref","class","importer","namespace","_namespace","customElement","default","is","Error","alreadyExisting","window","get","define"],"sourceRoot":""}